#!/usr/bin/env LANG=C awk -f
#
# SPDX-License-Identifier: GPL-3.0-only
#
#   ██╗  ██╗███████╗██╗   ██╗██████╗  █████╗
#   ██║  ██║██╔════╝██║   ██║██╔══██╗██╔══██╗
#   ███████║███████╗██║   ██║██████╔╝███████║
#   ██╔══██║╚════██║╚██╗ ██╔╝██╔══██╗██╔══██║
#   ██║  ██║███████║ ╚████╔╝ ██████╔╝██║  ██║
#   ╚═╝  ╚═╝╚══════╝  ╚═══╝  ╚═════╝ ╚═╝  ╚═╝
#  ------------------------------------------
#  hsvba, A CLI tool for analyzing VBA macros
#  ------------------------------------------
#
# 2025-03-31: Initial version, written by Hayaki Saito
#
#  alt shebang
#  ===========
#
#    - #!/usr/bin/awk -f
#    - #!/bin/awk -f
#    - #!/usr/bin/gawk -bf
#
#    # for debugging, with multibyte support disabled.
#    - #!/bin/bash
#
#  usage
#  =====
#
#  Basic usage:
#
#    $ hsvba [awk options] -- [-p <switches>] <file1> <file2> ...
#    $ hsvba [awk options] <file1> <file2> ... [-p <switches>]
#
#  Or input via stdin,
#
#    $ hsvba [awk options] -- [-p <switches>] < <file>
#
#  Options:
#    -p <switch1,switch2,...>
#    --print=<switches>
#        Specifies the types of content to be output, separated by commas.
#            zip: content stored in Zip headers (default: off)
#            cfb: content stored in Compound File Binary Format (default: off)
#            dir: content stored in dir stream (default: off)
#            prj: content stored in PROJECT stream (default: off)
#            src: VBA cls/bas/frm module source files (default: on)
#            frm: VBA Forms and controls (default: off)
#            all: enables all of the above switch options (default: off)
#            ids: content stored in _VBA_PROJECT stream (default: off, experimental)
#            pcd: P-CODE section in VBA modules (default: off, experimental)
#    -h
#    --help
#        Show help
#
#  This awk script can be interpreted as Bash or Awk.
#  Some environemnt variables are available in bash mode.
#
#    ex. 1) use gawk's --trace option
#    $ AWK=gawk AWKOPT=--trace bash test.xlsm
#
#    ex. 2) use mawk's "-W dump" option
#    $ AWK=mawk AWKOPT="-W dump" bash test.xlsm
#
#    ex. 3) enable debugging log
#    $ HSVBA_TRACE_LEVEL=debug3 HSVBA_TRACE_TOPIC=zip,cfb,vbalz bash ./hsvba test.xlsm -p
#
#    ex. 4) module unit testing
#    $ HSVBA_UT=zlib,stream bash ./hsvba
#
#  Please note that blocks commented out with "#=#" at the beginning of a
#  line may appear to be inactive code at first glance, but they can become
#  valid code for purposes such as logging or testing when processed by the
#  bash preprocessor.
#
#  Also, avoid using single quotes (') in parts of the code that are not
#  intended to be preprocessed. If you wish to use them in comments or
#  similar contexts, please use backticks (`) instead, or escape them using
#  the form '\''.
#
#  install
#  =======
#
#  Example: Install to `/usr/local/bin/`
#
#    $ git clone https://github.com/saitoha/hsvba.git
#    $ sudo cp ./hsvba/hsvba /usr/local/bin/
#    $ sudo chmod +x /usr/local/bin/hsvba
#
#  Or:
#
#    $ sudo curl -O https://raw.githubusercontent.com/saitoha/hsvba/refs/heads/main/hsvba
#    $ sudo cp ./hsvba /usr/local/bin/
#    $ sudo chmod +x /usr/local/bin/hsvba
#
#    NOTE: You may need to modify the shebang line depending on your environment.
#
#
#  supported formats
#  ==================
#
#    - Excel
#      *.xlsm, Macro-enabled workbook (Open XML format)
#      *.xltm, Macro-enabled template (Open XML format)
#      *.xlsb, Binary workbook (macro-capable, optimized for performance)
#      *.xlam, add-in
#      *.xls, Excel 97-2003 workbook
#      *.xlt, Excel 97-2003 template
#      *.xla, legacy format add-in
#
#    - Word
#      *.docm Macro-enabled document (Open XML format)
#      *.dotm Macro-enabled template
#      *.doc Word 97-2003 document
#      *.dot Word 97-2003 template
#
#      TODO: *.xml, The Word 2003 XML format (WordML) is not supported yet.
#      It appears to contain a Base64-encoded `ActiveMime` format.
#
#      `ActiveMime` is an undocumented format, but its rough structure is
#      becoming clearer thanks to the outstanding work in the
#      idiom/activemime-format project.
#
#          https://github.com/idiom/activemime-format (MIT License)
#
#
#    - PowerPoint
#      *.pptm Microsoft PowerPoint Macro-enabled Presentation (Open XML format)
#      *.potm Microsoft PowerPoint Macro-enabled Template
#      *.ppsm Microsoft PowerPoint Macro-enabled Slideshow
#      *.ppam add-in
#      *.ppa Microsoft PowerPoint Add-in
#
#      Some legacy formats (*.ppt, *.pot, *.pps) are not supported yet.
#      TODO: implement [MS-PPT], PowerPoint (.ppt) Binary File Format
#      https://officeprotocoldocs-f5hpbjgea6b8gneq.b02.azurefd.net/files/MS-PPT/%5bMS-PPT%5d.pdf
#
#    - Access(*.accdb, *.mdb, *.accde)
#      Unsupported.
#      TODO: We may need to investigate mdbtools further.
#
#        https://github.com/mdbtools/mdbtools
#
#      We have confirmed that the output of the following
#      command contains VBA code modules compressed with LZ77:
#
#        $ mdb-export xxx.mdb MSysModules2
#
#
#    - Outlook
#      *.otm Microsoft Outlook VBA Project File
#
#    - Publisher
#      *.pub Microsoft Office Publisher Document
#
#    - Visio
#      *.vsdm Microsoft Visio Macro-enabled Drawing (Open XML format)
#      *.vstm Microsoft Visio Macro-enabled Template
#      *.vssm Microsoft Visio Macro-enabled Stencil
#      *.vdx Microsoft Visio 2003 XML Drawing
#      *.vtx Microsoft Visio 2003 XML Template
#      *.vsx Microsoft Visio 2003 XML Stencil
#
#      Legacy binary formats(*.vsd, *.vst, *.vss) are not supported yet.
#      TODO: Implement a VSD parser by referencing `libvisio`.
#      https://github.com/LibreOffice/libvisio (licensed under MPL-2.0)
#
#    - Project
#      *.mpp Microsoft Project Document
#      *.mpt Microsoft Project Template
#
#    - Raw vbaProject.bin file (vbaProject.bin)
#
#  supported codepages
#  ===================
#
#    +=====================================================================+
#    | cp     | description                                                |
#    +=====================================================================+
#    | 874    | Thai (Windows)                                             |
#    +--------+------------------------------------------------------------+
#    | 932    | ANSI/OEM Japanese; Japanese (Shift-JIS)                    |
#    +--------+------------------------------------------------------------+
#    | 936    | ANSI/OEM Simplified Chinese (PRC, Singapore);              |
#    |        | Chinese Simplified (GB2312)                                |
#    +--------+------------------------------------------------------------+
#    | 949    | ANSI/OEM Korean (Unified Hangul Code)                      |
#    +--------+------------------------------------------------------------+
#    | 950    | ANSI/OEM Traditional Chinese (Taiwan; Hong Kong SAR, PRC); |
#    |        | Chinese Traditional (Big5)                                 |
#    +--------+------------------------------------------------------------+
#    | 1250   | ANSI Central European; Central European (Windows)          |
#    +--------+------------------------------------------------------------+
#    | 1251   | ANSI Cyrillic; Cyrillic (Windows)                          |
#    +--------+------------------------------------------------------------+
#    | 1252   | ANSI Latin 1; Western European (Windows)                   |
#    +--------+------------------------------------------------------------+
#    | 1253   | ANSI Greek; Greek (Windows)                                |
#    +--------+------------------------------------------------------------+
#    | 1254   | ANSI Turkish; Turkish (Windows)                            |
#    +--------+------------------------------------------------------------+
#    | 1255   | ANSI Hebrew; Hebrew (Windows)                              |
#    +--------+------------------------------------------------------------+
#    | 1256   | ANSI Arabic; Arabic (Windows)                              |
#    +--------+------------------------------------------------------------+
#    | 1257   | ANSI Baltic; Baltic (Windows)                              |
#    +--------+------------------------------------------------------------+
#    | 1258   | ANSI/OEM Vietnamese; Vietnamese (Windows)                  |
#    +--------+------------------------------------------------------------+
#
#    We believe these are the only ANSI/OEM character sets that
#    VBA may use internally. If you encounter a VBA project that
#    uses a codepage other than the ones listed above, please let us know.
#
#    reference:
#
#    [Code Page Identifiers]
#    https://learn.microsoft.com/windows/win32/intl/code-page-identifiers
#
#    [Wikipedia] Windows code page
#    https://en.wikipedia.org/wiki/Windows_code_page
#
#
#  requirements, compatibility
#  ===========================
#
#    We have tested this script on several AWK environments, and the
#    results are shown below.
#
#    In some environments, binary-safe input processing is not possible.
#    Traditional AWK implementations internally use null-terminated string
#    functions (e.g., strlen(3)), which do not handle binary data correctly.
#    If hsvba detects a binary-unsafe environment, it invokes the external
#    command `base64`.
#
#    +=====================================================================+
#    | AWK implementation       | base64 requirement  | result             |
#    +=====================================================================+
#    | bwk(nawk,onetrueawk)     | requires            | works(slow)        |
#    +--------------------------+---------------------+--------------------+
#    | gawk with LC_CTYPE=C     |                     | works              |
#    +--------------------------+---------------------+--------------------+
#    | gawk with -b option      |                     | works              |
#    +--------------------------+---------------------+--------------------+
#    | gawk with LC_CTYPE=UTF-8 | requires            | works              |
#    +--------------------------+---------------------+--------------------+
#    | mawk                     |                     | works              |
#    +--------------------------+---------------------+--------------------+
#    | goawk                    |                     | works              |
#    +--------------------------+---------------------+--------------------+
#    | busybox awk              | requires            | works(slow)        |
#    +--------------------------+---------------------+--------------------+
#    | pawk                     | requires            | works(slow)        |
#    +--------------------------+---------------------+--------------------+
#    | bioawk                   | requires            | works(slow)        |
#    +--------------------------+---------------------+--------------------+
#    | jawk(java)               |                     | error *1           |
#    +--------------------------+---------------------+--------------------+
#    | jawk(rust)               |                     | error *2           |
#    +--------------------------+---------------------+--------------------+
#    | frawk                    |                     | error *2           |
#    +--------------------------+---------------------+--------------------+
#    | wak                      |                     | error *3           |
#    +--------------------------+---------------------+--------------------+
#
#    *1 integer overflow
#    *2 parse error
#    *3 segmentation error
#
#  integration
#  ===========
#
#    You can view VBA source code differences using the output of `git show` or `git diff`.
#    To enable diff display for Excel (*.xlsm) files, refer to the following documentation:
#
#      8.2 Customizing Git - Git Attributes
#      https://git-scm.com/book/ms/v2/Customizing-Git-Git-Attributes
#
#      (1) Add a .gitattributes file in the data/excel directory:
#
#          $ echo "*.xlsm diff=hsvba" >> data/excel/.gitattributes
#
#      (2) Configure Git to use `hsvba` as a text conversion filter for diffs:
#
#          $ git config diff.hsvba.textconv "hsvba -- -pprj,src,dir,frm"
#
#    A sample .gitattributes file is present in the testdata/ directory.
#
#  references
#  ==========
#
#    [APPNOTE.TXT]
#        PKWARE, .ZIP File Format Specification, Version: 6.3.10
#        https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT
#
#    [RFC 1951]
#        P. Deutsch, DEFLATE Compressed Data Format Specification version 1.3
#        https://www.ietf.org/rfc/rfc1951.txt
#
#    [MS-CFB]
#        Microsoft Corporation, Compound File Binary File Format, v20240423
#        (protocol revision 12.0)
#        https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-CFB/%5bMS-CFB%5d.pdf
#
#    [MS-OVBA]
#        Microsoft Corporation, Office VBA File Format Structure, v20240820
#        (protocol revision 14.0)
#        https://msopenspecs.microsoft.com/files/MS-OVBA/%5bMS-OVBA%5d.pdf
#
#    [MS-OFORMS]
#        Microsoft Corporation, Office Forms Binary File Formats, v20240820
#        (protocol revision 9.0)
#        https://msopenspecs.microsoft.com/files/MS-OFORMS/%5bMS-OFORMS%5d.pdf
#
#    [MS-VBAL]
#        Microsoft Corporation, VBA Language Specification, v20250218
#        (protocol revision 2.3)
#        https://msopenspecs.microsoft.com/files/MS-VBAL/%5bMS-VBAL%5d.pdf
#
#    [MS-OSHARED]
#        Microsoft Corporation, Office Common Data Types and Objects Structures, v20240820
#        (protocol revision 11.0)
#        https://msopenspecs.microsoft.com/files/MS-OSHARED/%5bMS-OSHARED%5d.pdf
#
#    [MS-LCID]
#        Microsoft Corporation, Windows Language Code Identifier (LCID) Reference, v20240423
#        (protocol revision 16.0)
#        https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-LCID/%5bMS-LCID%5d.pdf
#
#    [MS-OAUT]
#        Microsoft Corporation, OLE Automation Protocol, v20240423
#        (protocol revision 21.0)
#        https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-OAUT/%5bMS-OAUT%5d.pdf
#
#    [MS-OLEDS]
#        Microsoft Corporation, Object Linking and Embedding (OLE) Data Structures
#        (protocol revision 13.0)
#        https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-OLEDS/%5bMS-OLEDS%5d.pdf
#
#    [MS-DOC]
#        Microsoft Corporation, Word (.doc) Binary File Format
#        (protocol revision 12.2)
#        https://msopenspecs.microsoft.com/files/MS-DOC/%5bMS-DOC%5d.pdf
#
#    [MS-XLS]
#        Microsoft Corporation, Excel Binary File Format (.xls) Structure, v20240820
#        (protocol revision 12.0)
#        https://msopenspecs.microsoft.com/files/MS-XLS/%5bMS-XLS%5d.pdf
#
#    [MS-XLSB]
#        Microsoft Corporation, Excel (.xlsb) Binary File Format, v20250404
#        (protocol revision 20.0)
#        https://msopenspecs.microsoft.com/files/MS-XLSB/%5bMS-XLSB%5d.pdf
#
#    [MS-DTYP]
#        Microsoft Corporation, Windows Data Types
#        (protocol revision 42.0)
#        https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-DTYP/%5bMS-DTYP%5d.pdf
#
#    [MS-OFFMACRO]
#        Microsoft Corporation, Office Macro-Enabled File Format Version, v20160914
#        (protocol revision 1.5)
#        https://msopenspecs.microsoft.com/files/MS-OFFMACRO/%5bMS-OFFMACRO%5d.pdf
#
#    [MS-OFFMACRO2]
#        Microsoft Corporation, Office Macro-Enabled File Format Version 2, v20240820
#        (protocol revision 8.0)
#        https://msopenspecs.microsoft.com/files/MS-OFFMACRO2/%5bMS-OFFMACRO2%5d.pdf
#
#    [MS-OFFICEVBA]
#        Microsoft Corporation, Office VBA Reference
#        https://learn.microsoft.com/en-us/office/vba/api/overview/
#
#    [ECMA-376 Part1]
#        ECMA-376, 5th Edition Office Open XML File Formats - Fundamentals And Markup Language Reference
#        https://ecma-international.org/publications-and-standards/standards/ecma-376/
#
#    [ECMA-376 Part2]
#        ECMA-376, 5th Edition Office Open XML File Formats - Open Packaging Conventions
#        https://ecma-international.org/publications-and-standards/standards/ecma-376/
#
#    [pcodedump]
#        Vesselin Bontchev, A VBA p-code disassembler.
#        https://github.com/bontchev/pcodedmp
#
#    [UNICODE-MAPPING]
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP874.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP932.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP949.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1250.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1251.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1253.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1254.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1255.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1256.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1257.TXT
#        https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1258.TXT
#
# {{{ bash preprocessing
true && echo "$( \
HSVBA_TRACE_LEVEL=${HSVBA_TRACE_LEVEL-error}; \
HSVBA_TRACE_TOPIC=${HSVBA_TRACE_TOPIC-zip,cfb,vbalz,dir,prj,frm,prf}; \
: ${__pp_ut_modules:=$(echo ${HSVBA_UT//,/ })}; \
: ${HSVBA_ASSERT:+${__pp_debug_assert:=1}}; \
: ${AWK:=$(which mawk 2>/dev/null)} \
  ${AWK:=$(which gawk 2>/dev/null)} \
  ${AWK:=$(which goawk 2>/dev/null)} \
  ${AWK:=$(which awk 2>/dev/null)} \
  ${AWKOPT:=}; \
for m in ${__pp_ut_modules}; do eval __pp_ut__${m}__=1; done; \
eval $(eval echo $( \
    tr ' ' \\n <<< 'error warning info debug1 debug2 debug3 debug4'    | \
    sed -n $'1h;1!H;/^'${HSVBA_TRACE_LEVEL//[^a-z0-9_,]}$'$/ {g;p;q\n}'| \
    tr \\n  ,                                                          | \
    xargs printf __pp_trace__'{'${HSVBA_TRACE_TOPIC//[^a-z0-9_,]},'}'_'{%s,}'=1\\n \
) | tr ' ' \\n); \
: ${__pp_ut__:+${__pp_ut_buf:=$(mktemp)}}; \
eval $'__pp_ut__() { \
  [ -n \042$1\042 ] && { \
      cat \042${__pp_ut_buf}\042; \
  } || gawk \047 \
    /__pp_ut__/ { \
        if (match($0, /__pp_ut__[^(]*\\(/ )) { \
            fn = substr($0, RSTART + 9, RLENGTH - 10); \
            print \042print \\\042\\\\ntesting \042 fn \042\\\042;\042; \
            next; \
        } \
    } /^ *!/ { \
        print fn, $0 > \042/tmp/ab3\042; \
        l1 = l2 = $0; \
        sub(/^ *!/, \042\042, l1); \
        sub(/^ *!/, \042\042, l2); \
        gsub(/\\042/, \042\\\\042\042, l1); \
        print \042;print \\042\042 l1 \042\\042; \042l2\042;\042 \
            >> \042\047\042${__pp_ut_buf}\042\047\042; \
    } /^ *-/ { \
        print fn, $0 > \042/tmp/ab3\042; \
        l1 = l2 = $0; \
        sub(/^ *-/, \042\042, l1); \
        sub(/^ *-/, \042\042, l2); \
        gsub(/\\042/, \042\\\\042\042, l1); \
        gsub(/;$/, \042\042, l1); \
        print \042;print \\042\042 l1 \042 => \\042, \042l2\042;\042; \
    } \
    \047 >> \042${__pp_ut_buf}\042; \
}'; \
if [[ ${AWK} =~ gawk ]]; then \
  __pp_feat__has_native_bitwise_logical_functions=1; \
  __pp_feat__has_native_bitwise_shift_functions=1; \
  __pp_feat__has_native_strftime=1; \
elif [[ ${AWK} =~ bioawk ]]; then \
  __pp_feat__has_native_bitwise_logical_functions=1; \
fi; \
eval $'__rt_exec() { \
  exec ${AWK} ${AWKOPT} -- \042${@}\042; \
}'; \
TZ=${HSVBA_TZ:-UTC} LC_CTYPE=C __rt_exec ' # ";
# }}}
BEGIN {
    E__message = "";
    if (! E__file) {
        E__file = "/dev/stderr";
    }
}
# {{{ error / debugging
#
#=# '${__pp_trace___+"$(cut -d\# -f3-<<<'
#=# function \
#=# TRACE(t) {
#=#     printf t > E__file;
#=# }
#=#
#=# function \
#=# TRACE1(t, arg1) {
#=#     printf t, arg1 >> E__file;
#=# }
#=#
#=# function \
#=# TRACE2(t, arg1, arg2) {
#=#     printf t, arg1, arg2 >> E__file;
#=# }
#=#
#=# function \
#=# TRACE3(t, arg1, arg2, arg3) {
#=#     printf t, arg1, arg2, arg3 >> E__file;
#=# }
#=#
#=# function \
#=# TRACE4(t, arg1, arg2, arg3, arg4) {
#=#     printf t, arg1, arg2, arg3, arg4 >> E__file;
#=# }
#=#
#=# function \
#=# TRACE5(t, arg1, arg2, arg3, arg4, arg5) {
#=#     printf t, arg1, arg2, arg3, arg4, arg5 > E__file;
#=# }
#=# ')"}'
#=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
#=# function \
#=# ASSERT(cond, m) {
#=#     if (!cond) {
#=#         E__message = m;
#=#         exit;
#=#     }
#=# }
#=# ')"}'
# '}'
# }}}
# {{{ @module num
# - bitwise functions
#   (num__and, num__or, num__lshift, num__rshift)
# - lossless calculation functions for 64bit integers
#   (num__lossless_add, num__lossless_mul)
# {{{ num__init
function \
num__init() {

    if (__num__init_guard) {
        return (1);
    }

    __num__init_guard = 1;

    return (0);
}
# }}}
# {{{ num__and
function \
num__and(x1, x2,    _i, _r) {
    # '${__pp_feat__has_native_bitwise_logical_functions:+$'\n''return and(x1, x2)'}';
    # '${__pp_feat__has_native_bitwise_logical_functions:-'
    _r = 0;
    for (_i = 1; x2 > 0; _i *= 2) {
        if (x1 % 2 && x2 % 2) {
            _r += _i;
        }
        x1 = int(x1 / 2);
        x2 = int(x2 / 2);
    }
    return _r
    # '}'
}
# }}}
# {{{ num__or
function \
num__or(x1, x2, _i, _r) {
    # '${__pp_feat__has_native_bitwise_logical_functions:+$'\nreturn or(x1, x2)'}';
    # '${__pp_feat__has_native_bitwise_logical_functions:-'
    _r = x1 + x2;
    for (_i = 1; x1 > 0 || x2 > 0; _i *= 2) {
        if (x1 % 2 && x2 % 2) {
            _r -= _i;
        }
        x1 = int(x1 / 2);
        x2 = int(x2 / 2);
    }
    return _r;  # = x1 + x2 - num__and(x1, x2)
    #'}'
}
# }}}
# {{{ num__xor
function \
num__xor(x1, x2, _i, _r) {
    # '${__pp_feat__has_native_bitwise_logical_functions:+$'\nreturn xor(x1, x2)'}';
    # '${__pp_feat__has_native_bitwise_logical_functions:-'
    _r = 0;
    for (_i = 1; x1 > 0 || x2 > 0; _i *= 2) {
        if ((x1 % 2 + x2 % 2) == 1) {
            _r += _i;
        }
        x1 = int(x1 / 2);
        x2 = int(x2 / 2);
    }
    return _r;
    #'}'
}
# }}}
# {{{ num__lshift
function \
num__lshift(x, n) {
    # '${__pp_feat__has_native_bitwise_shift_functions:+$'\nreturn lshift(x, n)'}';
    # '${__pp_feat__has_native_bitwise_shift_functions:-'
    return x * (2 ^ n);
    # '}'
}
# }}}
# {{{ num__rshift
function \
num__rshift(x, n) {
    # '${__pp_feat__has_native_bitwise_shift_functions:+$'\nreturn rshift(x, n)'}';
    # '${__pp_feat__has_native_bitwise_shift_functions:-'
    return int(x / (2 ^ n));
    # '}'
}
# }}}
# {{{ num__lossless_add
# calculate x + y without round-off error
function \
num__lossless_add( \
    x, y, \
    \
    _i, _carry, _r, _sum, _digits_x, _digits_y, _max_digits \
) {
    _digits_x = length(x)
    _digits_y = length(y)
    _max_digits = _digits_x > _digits_y ? _digits_x : _digits_y;
    _carry = 0
    _r = ""
    _sum = 0;

    for (_i = 0; _i < _max_digits || _carry; ++_i) {
        _sum = _carry \
             + (_i < _digits_x ? substr(x, _digits_x - _i, 1): 0) \
             + (_i < _digits_y ? substr(y, _digits_y - _i, 1): 0);
        _carry = int(_sum / 10);
        _r = (_sum % 10) _r;
    }
    return _r;
}
# }}}
# {{{ num__lossless_mul
# calculate x * y without round-off error
function \
num__lossless_mul( \
    x, y, \
    \
    _i, _j, _prod, _carry, _temp, _digits_x, _digits_y, _r \
) {
    _digits_x = length(x)
    _digits_y = length(y)
    _r = "0"

    for (_i = _digits_x; _i > 0; --_i) {
        _carry = 0
        _temp = ""

        for (_j = _digits_y; _j > 0; --_j) {
            _prod = int(substr(x, _i, 1)) * int(substr(y, _j, 1)) + _carry;
            _carry = int(_prod / 10);
            _temp = (_prod % 10) _temp;
        }
        _r = num__lossless_add(_r, (_carry ? _carry: "" ) \
            _temp substr("00000000000000000000", 1, _digits_x - _i))
    }
    return _r
}
# }}}
# {{{ num__reverse_bits
# reverse the bit order of the given integer
function num__reverse_bits(n, w,    _p, _q, _r) {
    for (_r = _p = 0; w--; ) {
        _q = 2 ^ w;
        if (n >= _q) {
            _r += 2 ^ _p;
            n -= _q;
        }
        ++_p;
    }
    return _r;
}
# }}}
# }}}
# {{{ @module str
# - error / debugging
# - binary join functions
#   (str__binary_join, str__binary_join_with_chr)
# {{{ str__init
function \
str__init(    _c, _i) {

    if (__c__init_guard) {
        return (1);
    }

    # build ascii map
    if ("PROCINFO" in SYMTAB) {  # gawk
        # Note that in a UTF-8 environment, gawk`s sprintf("%c", n) works differently from
        # its LC_CTYPE=C counterpart for n in the range 0x80-0xff (GR).
        split( \
            "\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021" \
            "\022\023\024\025\026\027\030\031\032\033\034\035\036\037\040\041\042" \
            "\043\044\045\046\047\050\051\052\053\054\055\056\057\060\061\062\063" \
            "\064\065\066\067\070\071\072\073\074\075\076\077\100\101\102\103\104" \
            "\105\106\107\110\111\112\113\114\115\116\117\120\121\122\123\124\125" \
            "\126\127\130\131\132\133\134\135\136\137\140\141\142\143\144\145\146" \
            "\147\150\151\152\153\154\155\156\157\160\161\162\163\164\165\166\167" \
            "\170\171\172\173\174\175\176\177\200\201\202\203\204\205\206\207\210" \
            "\211\212\213\214\215\216\217\220\221\222\223\224\225\226\227\230\231" \
            "\232\233\234\235\236\237\240\241\242\243\244\245\246\247\250\251\252" \
            "\253\254\255\256\257\260\261\262\263\264\265\266\267\270\271\272\273" \
            "\274\275\276\277\300\301\302\303\304\305\306\307\310\311\312\313\314" \
            "\315\316\317\320\321\322\323\324\325\326\327\330\331\332\333\334\335" \
            "\336\337\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356" \
            "\357\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377", \
            str__chr, "");
        str__chr[0] = "\0";
    } else {
        # wak will force all strings to be interpreted as UTF-8 (even in the
        # C locale), and will abort if it encounters a character during split()
        # that cannot be interpreted as UTF-8 (such as "\375\376\377").
        for (_i = 0; _i <= 255; ++_i) {
            str__chr[_i] = sprintf("%c", _i);
        }
    }
    for (_i = 0; _i <= 255; ++_i) {
        _c = str__chr[_i];
        str__ord[_c] = _i;
        str__hex[_i] = sprintf("%02x", _i);
        str__hexord[sprintf("%02x", _i)] = _i;
        str__hexord[sprintf("%02X", _i)] = _i;
    }

    # quick & dirty latin1 -> utf-8 conversion (printable only)
    for (_i = 0; _i <= 255; ++_i) {
        if (_i < 32) {
            # C1 characters
            str__debug_chr[_i] = sprintf("<%02X>", _i);
        } else if (_i < 127) {
            # ASCII
            str__debug_chr[_i] = str__chr[_i];
        } else if (_i <= 160 || _i == 173) {
            # DEL + C2 + \xa0(NBSP) + \xad(SOFT HYPHEN)
            str__debug_chr[_i] = sprintf("<%02X>", _i);
        } else if (_i < 192) {
            # G2 (latin1) \xXX -> \xc2\xXX
            str__debug_chr[_i] = "\302" str__chr[_i];
        } else {
            # G2 (latin1) \xXX -> \xc3\xXX
            str__debug_chr[_i] = "\303" str__chr[_i];
        }
    }

    __c__init_guard = 1;

    return (0);
}
# }}}
# {{{ __pp_ut____binary_join
# '${__pp_ut__:+"$(__pp_ut__ <<< '
function \
__pp_ut____binary_join(ut) {
    ! split("abcdefghijklmn", arr, "");
    - str__binary_join(arr, 3, 40) == "cdefghijklmn";
    - str__binary_join(arr, 2, 8) == "bcdefgh";
    - str__binary_join(arr, 4, 3) == "";
}
# ')"}'
# }}}
# {{{ str__binary_join
function \
str__binary_join( \
    arr, left, right, \
    \
    _mid \
) {
    if (left == right) {
        return arr[left];
    }
    if ((_mid = int((left + right) / 2)) >= right) {
        return str__binary_join(arr, left, _mid);
    }
    return str__binary_join(arr, left, _mid) \
           str__binary_join(arr, _mid + 1, right);
}
# }}}
# {{{ str__binary_join_with_chr
function \
str__binary_join_with_chr( \
    arr, left, right, \
    \
    _mid \
) {
    if (left == right) {
        return str__chr[arr[left]];
    }
    if ((_mid = int((left + right) / 2)) >= right) {
        return str__binary_join_with_chr(arr, left, _mid);
    }
    return str__binary_join_with_chr(arr, left, _mid) \
           str__binary_join_with_chr(arr, _mid + 1, right);
}
# }}}
# }}}
# {{{ @module stream
# {{{ stream::init
function \
stream__init(    _status) {
    if (__stream__init_guard) {
        return (1);
    }

    _status = str__init();
    if (_status < 0) {
        return _status;
    }

    _status = __stream__class_init();
    if (_status < 0) {
        return _status;
    }

    __stream__init_guard = 1;

    return (0);
}
# }}}
# {{{ @class stream: byte array with byte/bit iterators
# '${__pp_comment:+'
#
# @interface
# - new
# - skip
# - rewind
# - iseek
# - pos
# - rsearch
# - available_size
# - is_end
# - read_bits
# - write_bits
# - skip_to_align
# - setjmp
# - longjmp
# - read_uint8
# - read_uint16
# - read_uint32
# - read_uint64
# - read_raw_string
# - read_hex_string
# - read_uuid
# - read_timestamp
# - read_ansi_string
# - read_utf16le_string
# - write_uint8
# - copy
# - lz77_copy
# - decode_huffman
#
# private members
# - __stream__M_iit:     an input byte iterator
# - __stream__M_oit:     an output byte iterator
# - __stream__M_ibit:    an input bit iterator
# - __stream__M_obit:    an output bit iterator
# - __stream__M_line:    current line buffer
# - __stream__M_base:    base address of padding calculation
#
# This object is just an array. The first few elements of the array are
# reserved for member variables with integer keys.
#
#      |          members            |          stream data           |
#      +----+----+----+----+----+----+---+---+---+---+---- ... ---+---+
# pos. |iit |oit |ibit|obit|line|base|(1)|(2)|(3)|(4)|(5)         |   |
#      +----+----+----+----+----+----+---+---+---+---+---- ... ---+---+
# idx  | 1  | 2  | 3  | 4  | 5  | 6  | 7 | 8 | 9 |10 |11          |   |
#      +----+----+----+----+----+----+---+---+---+---+---- ... ---+---+
#        |    |              ^                    ^                 ^
#        |    |            offset              current             end
#        |    |                                   |                 |
#        +----------------------------------------+                 |
#             +------------------------------------------- ... -----+
#
# Accessing only integer keys is an important optimization.
#
# The effect of this optimization is especially noticeable
# in mawk and gawk, because they have internal optimized
# array types such as "cint_array"(gawk) and "AY_SPLIT/AY_INT"(mawk).
#
# Note that even a single access with a string key, an access with
# a floating-point key, or an out-of-range index access will break
# this optimization!
#
# '}'
# {{{ ut
# '${__pp_ut__stream__:+"$(cut -d\# -f3-<<<'
#=# # {{{ stream::ut
#=# function stream__ut(    _status) {
#=#     print "[stream::ut]"
#=#
#=#     stream__init();
#=#
#=#     printf "%s", "__stream__ut__read_bits__00 ... "
#=#     _status = __stream__ut__read_bits__00();
#=#     print (_status == 0 ? "OK": "NG");
#=#
#=#     printf "%s", "__stream__ut__write_bits__00 ... "
#=#     _status = __stream__ut__write_bits__00();
#=#     print (_status == 0 ? "OK": "NG");
#=#
#=#     printf "%s", "__stream__ut__search__00 ... "
#=#     _status = __stream__ut__search__00();
#=#     print (_status == 0 ? "OK": "NG");
#=# }
#=# # }}}
#=# ')"}'
# }}}

# {{{ stream::class_init
function \
__stream__class_init() {

    if (__stream__class_init_guard) {
        return (1);
    }

    stream__C_NWLN     = 1;
    stream__C_NULL     = 2;

    # member functions
    __stream__M_iit           = 1;
    __stream__M_oit           = 2;
    __stream__M_ibit          = 3;
    __stream__M_obit          = 4;
    __stream__M_line          = 5;
    __stream__M_base          = 6;
    __stream__C_header_offset = 6;

    # for stream__read_timestamp
    __stream__C_month_days[1]  = 31;
    __stream__C_month_days[2]  = 28;
    __stream__C_month_days[3]  = 31;
    __stream__C_month_days[4]  = 30;
    __stream__C_month_days[5]  = 31;
    __stream__C_month_days[6]  = 30;
    __stream__C_month_days[7]  = 31;
    __stream__C_month_days[8]  = 31;
    __stream__C_month_days[9]  = 30;
    __stream__C_month_days[10] = 31;
    __stream__C_month_days[11] = 30;
    __stream__C_month_days[12] = 31;

    __stream__class_init_guard = 1;

    return 0;
}
# }}}
# {{{ stream::new
function \
stream__new(stream, forecast_size) {
    if (forecast_size && __feat__has_cy_split_array) {
        # mawk`s CY_SPLIT optimization
        split( \
            substr($0, 1, forecast_size + __stream__C_header_offset), \
            stream, \
            "");
    }
    stream[__stream__M_iit]   = __stream__C_header_offset;
    stream[__stream__M_oit]   = __stream__C_header_offset;
    stream[__stream__M_ibit]  = 0;
    stream[__stream__M_obit]  = 0;
    stream[__stream__M_line]  = 0;
    stream[__stream__M_base]  = 0;
}
# }}}
# {{{ stream::new_from_string
function \
stream__new_from_string( \
    stream, str, \
    \
    _i, _size \
) {
    # strategic branching:
    # using mawk`s CY_SPLIT optimization
    if (__feat__has_cy_split_array) {
        split("000000" str, stream, "");
        # '${__pp_comment:+'
        # Avoid using length(array), whose behavior is undefined under POSIX.
        # In some non-modern AWK systems, strlen is called at this point,
        # which is an O(n) operation.
        # '}'
        # _size = length(stream);
        _size = length(str) + __stream__C_header_offset;
        stream[__stream__M_iit] = __stream__C_header_offset;
        stream[__stream__M_oit] = _size;
        for (_i = __stream__C_header_offset + 1; _i <= _size; ++_i) {
            stream[_i] = str__ord[stream[_i]];
        }
    } else {
        stream__new(stream, length(str));
        stream__write_string(stream, str);
    }
}
# }}}
# {{{ stream::skip
function \
stream__skip(stream, n) {
    stream[__stream__M_iit] += n;
}
# }}}
# {{{ stream::rewind
function \
stream__rewind(stream, n) {
    stream[__stream__M_iit] -= n;
}
# }}}
# {{{ stream::iseek
function \
stream__iseek(stream, n) {
    # '${__pp_debug_assert:+$'\nASSERT(n > 0)'}'
    stream[__stream__M_iit] = __stream__C_header_offset + n;

    return (0);
}
# }}}
# {{{ stream::pos
function \
stream__pos(stream) {
    return stream[__stream__M_iit] - __stream__C_header_offset;
}
# }}}
# {{{ stream::setjmp
function \
stream__setjmp(stream, jmp_buf) {
    jmp_buf[1] = stream[__stream__M_iit];
}
# }}}
# {{{ stream::longjmp
function \
stream__longjmp(stream, jmp_buf) {
    stream[__stream__M_iit] = jmp_buf[1];
}
# }}}
# {{{ stream::search
# TODO: Adopt a more efficient algorithm (e.g., KMP method)
# {{{ ut
#=# # '${__pp_ut__stream__:+"$(cut -d\# -f3-<<<'
#=# function \
#=# __stream__ut__search__00(    _stream, _pos) {
#=#
#=#     stream__init();
#=#
#=#     stream__new(_stream);
#=#     stream__write_string(_stream, "abc de123bcd\0eb");
#=#
#=#     _pos = stream__search(_stream, "x");
#=#     if (_pos != (-1)) {
#=#         return (-1);
#=#     }
#=#
#=#     stream__iseek(_stream, 0);
#=#     _pos = stream__search(_stream, "ab");
#=#     if (_pos != 1) {
#=#         return (-1);
#=#     }
#=#
#=#     _pos = stream__search(_stream, "ab");
#=#     if (_pos != 1) {
#=#         return (-1);
#=#     }
#=#
#=#     stream__skip(_stream, 1);
#=#     _pos = stream__search(_stream, "ab");
#=#     if (_pos != (-1)) {
#=#         return (-1);
#=#     }
#=#
#=#     stream__iseek(_stream, 0);
#=#     _pos = stream__search(_stream, "bc");
#=#     if (_pos != 2) {
#=#         return (-1);
#=#     }
#=#
#=#     stream__skip(_stream, 1);
#=#     _pos = stream__search(_stream, "bc");
#=#     if (_pos != 10) {
#=#         return (-1);
#=#     }
#=#
#=#     stream__skip(_stream, 1);
#=#     _pos = stream__search(_stream, "\0eb");
#=#     if (_pos != 13) {
#=#         return (-1);
#=#     }
#=#
#=#     return (0);
#=# }
#=# # ')"}'
# }}}
function \
stream__search( \
    stream, word, \
    \
    _i, _buf, _len, _c, _it, _it_begin, _it_end \
) {
    _len = length(word);
    for (_i = 1; _i <= _len; ++_i) {
        _buf[_i] = str__ord[substr(word, _i, 1)];
    }
    _it = _it_begin = stream[__stream__M_iit];
    _it_end = stream[__stream__M_oit];
    _c = _buf[1];
    for (_i = 1; _i <= _len && _it <= _it_end; ) {
        if (stream[++_it] == _c) {
            _c = _buf[++_i];
        } else {
            _i = 1;
            _c = _buf[1];
        }
    }
    if (_i > _len) {
        return (stream[__stream__M_iit] = _it - _i + 1) + 1 \
                - __stream__C_header_offset;
    }
    return (-1);
}
# }}}
# {{{ stream::rsearch
function \
stream__rsearch( \
    stream, word, \
    \
    _i, _buf, _len, _c, _it, _it_end \
) {
    _len = length(word);
    for (_i = 1; _i <= _len; ++_i) {
        _buf[_i] = str__ord[substr(word, _len - _i + 1, 1)];
    }
    _it_end = stream[__stream__M_oit];
    _it = _it_end + 1;
    _c = _buf[1];
    for (_i = 0; _i < _len && _it > 1; ) {
        if (stream[--_it] == _c) {
            _c = _buf[++_i];
        } else {
            _i = 1;
            _c = _buf[1];
        }
    }
    if (_i >= _len) {
        return stream[__stream__M_iit] = _it - 2;
    }
    return (-1);
}
# }}}
# {{{ stream::available_size
function \
stream__available_size(stream) {
    return stream[__stream__M_oit] - stream[__stream__M_iit];
}
# }}}
# {{{ stream::is_end
function \
stream__is_end(stream) {
    return stream[__stream__M_iit] >= stream[__stream__M_oit];
}
# }}}
# {{{ stream::read_bits
function \
stream__read_bits( \
    stream, n, \
    \
    _it, _it_bits, _bits, _p, _bitsbuf \
) {
    _it = stream[__stream__M_iit];
    _it_bits = _bits = stream[__stream__M_ibit];
    _bitsbuf = stream[_it + 1];   # current byte
    _bits += n;
    if (_bits >= 8) {
        _p = 256;
        do {
            _bitsbuf += stream[++_it + 1] * _p;
            _bits -= 8;
            _p *= 256;
        } while (_bits >= 8);
        stream[__stream__M_iit] = _it;
    }
    stream[__stream__M_ibit] = _bits;
    return num__rshift(_bitsbuf, _it_bits) % (2 ^ n);
}
function \
__stream__ut__read_bits__00(    _stream) {

    # iit
    # oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  | | | | | | | | | | | | | | | | |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |lsb         msb|lsb         msb|
    #
    stream__new(_stream);

    #
    # stream[iit + 1] -> b01011010 = 90
    # stream[iit + 2] -> b10100000 = 5
    #
    # iit                          -> oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |0|1|0|1|1|0|1|0|1|0|1|0|0|0|0|0|
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |lsb         msb|lsb         msb|
    #
    stream__write_uint8(_stream, 91);
    stream__write_uint8(_stream, 5);

    #
    # read_bits(stream, 3);
    #
    # iit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |1|1|0|1|1|0|1|0|1|0|1|0|0|0|0|0|
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  ^ ->  ^
    #    n=3
    #
    # bitsbuf = 90
    # result -> (90 >> 0) % (1 << 3) = 3
    #
    if (stream__read_bits(_stream, 3) != 3) {
        return (-1);
    }

    #
    # read_bits(stream, 7);
    #
    #              -> iit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |0|1|0|1|1|0|1|0|1|0|1|0|0|0|0|0|
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #        ^     ->      ^
    #              n=7
    #
    # bitsbuf = 90 + 5 * 256 = 1370
    # result -> (1370 >> 3) % (1 << 7) = 43
    #
    if (stream__read_bits(_stream, 7) != 43) {
        return (-1);
    }

    return (0);
}
# }}}
# {{{ stream::write_bits
function \
stream__write_bits( \
    stream, n, data, \
    \
    _it, _it_bits, _bits, _bitsbuf \
) {
    _it = stream[__stream__M_oit];
    _it_bits = _bits = stream[__stream__M_obit];
    _bitsbuf = stream[_it + 1] % (2 ^ _bits) + data * (2 ^ _bits);
    _bits += n;
    if (_bits >= 8) {
        do {
            stream[++_it] = _bitsbuf % 256;
            _bitsbuf = int(_bitsbuf / 256);
            _bits -= 8;
        } while (_bits >= 8);
        stream[__stream__M_oit] = _it;
    }
    stream[_it + 1] = _bitsbuf;
    stream[__stream__M_obit] = _bits;
    return (0);
}
function \
__stream__ut__write_bits__00(    _stream) {

    #
    # oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  | | | | | | | | | | | | | | | | |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |lsb         msb|lsb         msb|
    #
    stream__new(_stream);

    #
    # write_bits(stream, 3, 3);
    #
    # oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |1|1|0| | | | | | | | | | | | | |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  ^ ->  ^
    #    n=3
    #
    if (stream__write_bits(_stream, 3, 3) < 0) {
        return (-1);
    }

    if (_stream[__stream__M_oit] - __stream__C_header_offset != 0) {
        return (-1);
    }

    if (_stream[__stream__M_obit] != 3) {
        return (-1);
    }

    if (_stream[__stream__C_header_offset + 1] != 3) {
        return (-1);
    }

    #
    # write_bits(stream, 4, 10);
    #
    # oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |1|1|0|0|1|0|1| | | | | | | | | |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #        ^  ->   ^
    #           n=4
    #
    if (stream__write_bits(_stream, 4, 10) < 0) {
        return (-1);
    }

    if (_stream[__stream__M_oit] - __stream__C_header_offset != 0) {
        return (-1);
    }

    if (_stream[__stream__M_obit] != 7) {
        return (-1);
    }

    if (_stream[__stream__C_header_offset + 1] != 83) {
        return (-1);
    }

    #
    # write_bits(stream, 5, 19);
    #
    #              -> oit
    # -+---------------+---------------+-
    #  |       0       |       1       |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #  |1|1|0|0|1|0|1|1|1|0|0|1| | | | |
    # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
    #                ^   ->    ^
    #                    n=5
    #
    if (stream__write_bits(_stream, 5, 19) < 0) {
        return (-1);
    }

    if (_stream[__stream__M_oit] - __stream__C_header_offset != 1) {
        return (-1);
    }

    if (_stream[__stream__M_obit] != 4) {
        return (-1);
    }

    if (_stream[__stream__C_header_offset + 1] != 211) {
        return (-1);
    }

    if (_stream[__stream__C_header_offset + 2] != 9) {
        return (-1);
    }

    return (0);
}
# }}}
# {{{ stream::set_align_base
function \
stream__set_align_base(stream) {
    stream[__stream__M_base] = stream[__stream__M_iit];
}
# }}}
# {{{ stream::skip_to_align
function \
stream__skip_to_align(stream, n,   _base) {
    if (stream[__stream__M_ibit] > 0) {
        ++stream[__stream__M_iit];
        stream[__stream__M_ibit] = 0;
    }
    if (__stream__M_base in stream) {
        _base = stream[__stream__M_base];
    } else {
        _base = 0;
    }
    if ((stream[__stream__M_iit] - _base) % n) {
        stream[__stream__M_iit] += n - (stream[__stream__M_iit] - _base) % n;
    }
}
# }}}
# {{{ stream::read_uint8
function \
stream__read_uint8(stream) {
    return stream[++stream[__stream__M_iit]];
}
# }}}
# {{{ stream::read_uint16
function \
stream__read_uint16(stream,    _iit, _c1, _c2) {
    _iit = stream[__stream__M_iit];
    _c1 = stream[++_iit];
    _c2 = stream[++_iit];
    stream[__stream__M_iit] = _iit;
    return _c2 * 256 + _c1;
}
# }}}
# {{{ stream::read_uint32
function \
stream__read_uint32(stream,    _iit, _c1, _c2, _c3, _c4) {
    _iit = stream[__stream__M_iit];
    _c1 = stream[++_iit];
    _c2 = stream[++_iit];
    _c3 = stream[++_iit];
    _c4 = stream[++_iit];
    stream[__stream__M_iit] = _iit;
    return _c4 * 16777216 + _c3 * 65536 + _c2 * 256 + _c1;
}
# }}}
# {{{ stream::read_uint64
function \
stream__read_uint64(stream,    _n, _i, _o, _iit) {
    _iit = stream[__stream__M_iit];
    _o = 0;

    for (_i = 0; _i <= 5; ++_i) {
        _n = stream[++_iit];
        _o = _o + num__lshift(_n, _i * 8);
    }

    # '${__pp_comment:+'
    #
    # NOTE: POSIX defines that AWK should only handle numeric values as
    # double-precision(IEEE-754 64-bit) floating-point numbers. Therefore,
    # any 64-bit integers handled by AWK are subject to the inherent
    # limitations of floating-point precision. This may lead to rounding
    # errors when dealing with very large numbers, typically in the range
    # of 2^53 and higher, as doubles cannot precisely represent integers
    # beyond that range.
    #
    # In gawk (GNU AWK), the --bignum(-M) option allows handling of
    # arbitrary-precision integers by using an external library (GMP and MPFR).
    # This means that large integers can be represented accurately, but it
    # comes with a performance tradeoff. While the --bignum option improves
    # the ability to handle large integers, it slow down execution due to
    # the use of software-based arithmetic instead of hardware FPU operations.
    # Additionally, it is important to note that the --bignum feature might
    # be deprecated in future versions of gawk. (see recent manpage of gawk),
    #
    # So we have decided to abandon above option and use "string-based"
    # arithmetic functions for numbers over 48 bits.
    #
    #   - num__lossless_add(x, y): calculate x + y without round-off error
    #   - num__lossless_mul(x, y): calculate x * y without round-off error
    #
    # '}'
    if ((_n = stream[++_iit]) > 0) {
        # 48bits lshift (281474976710656 = 2 ^ 48)
        _o = num__lossless_add(_o, num__lossless_mul(_n, "281474976710656"));
    }
    if ((_n = stream[++_iit]) > 0) {
        # 56bits lshift (72057594037927936 = 2 ^ 56)
        _o = num__lossless_add(_o, num__lossless_mul(_n, "72057594037927936"))
    }

    stream[__stream__M_iit] = _iit;

    return _o;
}
# }}}
# {{{ stream::read_raw_string
function \
stream__read_raw_string(stream, size,    _iit, _it_end, _o) {

    _o = "";

    _iit = stream[__stream__M_iit];
    _it_end = _iit + size;

    if (size < 16 || __feat__has_amortized_growth_strings) {
        while (_iit < _it_end) {
            _o = _o str__chr[stream[++_iit]];
        }
    } else {
        _o = str__binary_join_with_chr(stream, _iit + 1, _it_end);
        _iit = _it_end;
    }
    stream[__stream__M_iit] = _iit;

    return _o;
}
# }}}
# {{{ stream::read_escaped_string
function \
stream__read_escaped_string(stream, size,    _iit, _it_end, _o) {

    _o = "";
    _iit = stream[__stream__M_iit];
    _it_end = _iit + size;

    while (_iit < _it_end) {
        _o = _o str__debug_chr[stream[++_iit]];
    }

    stream[__stream__M_iit] = _iit;

    return _o;
}
# }}}
# {{{ stream::read_hex_string
function \
stream__read_hex_string(stream, size,    _it, _it_end, _o) {

    _o = "";
    _it = stream[__stream__M_iit];
    _it_end = _it + size;

    while (_it < _it_end) {
        _o = _o str__hex[stream[++_it]];
    }

    stream[__stream__M_iit] = _it;

    return _o;
}
# }}}
# {{{ stream::read_guid_string
function \
stream__read_guid_string( \
    stream, \
    \
    _it, _i, _o, _s \
) {

    _it = stream[__stream__M_iit];
    _s = "";

    for (_i = 1; _i <= 4; ++_i) {
        _o = _o str__hex[stream[++_it]];
    }
    _o = _o "-";

    for (_i = 1; _i <= 2; ++_i) {
        _o = _o str__hex[stream[++_it]];
    }
    _o = _o "-";

    for (_i = 1; _i <= 2; ++_i) {
        _o = _o str__hex[stream[++_it]];
    }
    _o = _o "-";

    for (_i = 1; _i <= 2; ++_i) {
        _o = _o str__hex[stream[++_it]];
    }
    _o = _o "-";

    for (_i = 1; _i <= 6; ++_i) {
        _o = _o str__hex[stream[++_it]];
    }

    stream[__stream__M_iit] = _it;

    return _o;
}
# }}}
# {{{ stream::read_timestamp
function \
stream__read_timestamp( \
    stream, \
    \
    _high, _low, _epoch, _total_days, \
    _remaining_seconds, _days_in_month, _is_leap_year, \
    _year, _month, _day, _hour, _minute, _second \
) {
    _low = stream__read_uint32(stream);
    _high = stream__read_uint32(stream);
    if (_high == 0 && _low == 0) {
        return "NULL";
    }
    _epoch = (_high * 4294967296 + _low) / 10000000 - 11644473600;
    # '${__pp_feat__has_native_strftime:+$'\nreturn strftime("%Y-%m-%d %H:%M:%S %Z", _epoch);'}'
    # '${__pp_feat__has_native_strftime:-'
    _total_days = int(_epoch / 86400);
    _remaining_seconds = _epoch % 86400;
    _year = 1970;
    _is_leap_year = 0;
    while (_total_days >= (_is_leap_year ? 366 : 365)) {
        _total_days -= (_is_leap_year ? 366 : 365);
        _year++;
        _is_leap_year = (_year % 4 == 0 && _year % 100 != 0) || (_year % 400 == 0);
    }
    for (_month = 1; _month <= 12; ++_month) {
        _days_in_month = __stream__C_month_days[_month];
        if (_month == 2 && _is_leap_year) {
            _days_in_month = 29;
        }
        if (_total_days < _days_in_month) {
            break;
        }
        _total_days -= _days_in_month;
    }
    _day = _total_days + 1;
    _hour = int(_remaining_seconds / 3600);
    _minute = int((_remaining_seconds % 3600) / 60);
    _second = _remaining_seconds % 60;
    return sprintf( \
        "%04d-%02d-%02d %02d:%02d:%02d UTC", \
        _year, _month, _day, _hour, _minute, _second);
    # '}'
}
# }}}
# {{{ stream::read_ansi_string
# OEM/DBCS bytearray -> UTF-8 string conversion
function \
stream__read_ansi_string( \
    stream, size, terminator, \
    \
    _iit, _it_end, _c, _o, \
    _c0, _c1, _oit, _result \
) {
    _c1 = 0;
    _iit = stream[__stream__M_iit];
    _it_end = terminator ? stream[__stream__M_oit]: _iit + size;
    if (_iit >= _it_end) {
        return (-1);
    }

    if ((size > 0 && size < 16) || __feat__has_amortized_growth_strings) {
        #
        # gawk-specific strategy
        # ======================
        #
        # - gawk (GNU Awk) has amortized growth strings.
        #
        _o = "";

        if (acp__S_codepage >= 1250 && acp__S_codepage <= 1258) {  # iso8859
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else {
                    _o = _o (_c >= 128 ? acp__S_charmap[_c - 127]: str__chr[_c]);
                }
            }
        } else if (acp__S_codepage == 932) {
            _c1 = (255);
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1 != (255)) {
                    if (_c >= 64 && _c <= 126) {  # 40 - 7e (64-126, 63)
                        _o = _o acp__S_charmap[_c1 * 188 + _c - 63];  # - 64 + 1
                    } else if (_c >= 128 && _c <= 252) { # 80 - fc (128-252, 125)
                        _o = _o acp__S_charmap[_c1 * 188 + _c - 64];  # - 128 + 63 + 1
                    } else {
                        #=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
                        #=#     ASSERT( \
                        #=#         sprintf( \
                        #=#             "invalid subsequent character: c1=%02x c2=%02x", \
                        #=#             _c1 >= 240 ? _c1 + 240 - 31: _c1 + 129, _c));
                        #=# ')"}'
                    }
                    _c1 = (255);
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _o = _o str__chr[_c];
                } else if (_c >= 129 && _c <= 159) {   # 0x81 - 0x9f (129-159,31)
                    _c1 = _c - 129;
                } else if (_c >= 161 && _c <= 191) {   # kana
                    _o = _o "\357\275" str__chr[_c];
                } else if (_c >= 192 && _c <= 223) {   # kana
                    _o = _o "\357\276" str__chr[_c - 64];
                } else if (_c >= 224 && _c <= 252) {   # 0xe0 0xfc
                    _c1 = _c - 224 + 31;
                } else {
                    #=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
                    #=#     ASSERT("invalid lead byte: c1=%02x", _c);
                    #=# ')"}'
                }
            }
        } else if (acp__S_codepage == 936) {
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 64 && _c <= 254) {  # 40-fe
                        _c = (_c1 - 129) * 191 + _c - 64 + 1;
                    }
                    _o = _o acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _o = _o str__chr[_c];
                } else if (_c >= 129 && _c <= 254) {  # 81-fe
                    _c1 = _c;
                }
            }
        } else if (acp__S_codepage == 949) {
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 65 && _c <= 90) {  # 41-5a
                        _c = (_c1 - 129) * 178 + _c - 65 + 1;
                    } else if (_c >= 97 && _c <= 122) {  # 61-7a
                        _c = (_c1 - 129) * 178 + _c - 71 + 1;
                    } else if (_c >= 129 && _c <= 254) {  # 81-fe
                        _c = (_c1 - 129) * 178 + _c - 77 + 1;
                    }
                    _o = _o acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _o = _o str__chr[_c];
                } else if (_c >= 129 && _c <= 254) {  # 81-fe
                    _c1 = _c;
                }
            }
        } else if (acp__S_codepage == 950) {  # cp950
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 64 && _c <= 126) {  # 40-7e
                        _c = (_c1 - 161) * 157 + _c - 64 + 1;
                    } else if (_c >= 161 && _c <= 254) {  # a1-fe
                        _c = (_c1 - 161) * 157 + _c - 161 + 1;
                    }
                    _o = _o acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _o = _o str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _o = _o str__chr[_c];
                } else if (_c >= 161 && _c <= 249) {  # a1-f9
                    _c1 = _c;
                }
            }
        }

    } else {
        #
        # generic strategy
        # ================
        #
        # once push all chars onto an array, and concat each of them
        # with binary join.
        #
        _oit = 0;

        if (acp__S_codepage >= 1250 && acp__S_codepage <= 1258) {  # iso8859
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else {
                    _result[++_oit] = _c >= 128 ? \
                        acp__S_charmap[_c - 127]: str__chr[_c];
                }
            }
        } else if (acp__S_codepage == 932) {
            _c1 = (255);
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1 != (255)) {
                    if (_c >= 64 && _c <= 126) {  # 40 - 7e (64-126, 63)
                        _result[++_oit] = acp__S_charmap[_c1 * 188 + _c - 63];  # - 64 + 1
                    } else if (_c >= 128 && _c <= 252) { # 80 - fc (128-252, 125)
                        _result[++_oit] = acp__S_charmap[_c1 * 188 + _c - 64];  # - 128 + 63 + 1
                    } else {
                        #=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
                        #=#     ASSERT( \
                        #=#         sprintf( \
                        #=#             "invalid subsequent character: c1=%02x c2=%02x", \
                        #=#             _c1 >= 240 ? _c1 + 240 - 31: _c1 + 129, _c));
                        #=# ')"}'
                    }
                    _c1 = (255);
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _result[++_oit] = str__chr[_c];
                } else if (_c >= 129 && _c <= 159) {   # 0x81 - 0x9f (129-159,31)
                    _c1 = _c - 129;
                } else if (_c >= 161 && _c <= 191) {   # kana
                    _result[++_oit] = "\357\275" str__chr[_c];
                } else if (_c >= 192 && _c <= 223) {   # kana
                    _result[++_oit] = "\357\276" str__chr[_c - 64];
                } else if (_c >= 224 && _c <= 252) {   # 0xe0 0xfc
                    _c1 = _c - 224 + 31;
                } else {
                    #=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
                    #=#     ASSERT("invalid lead byte: c1=%02x", _c);
                    #=# ')"}'
                }
            }
        } else if (acp__S_codepage == 936) {
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 64 && _c <= 254) {  # 40-fe
                        _c = (_c1 - 129) * 191 + _c - 64 + 1;
                    }
                    _result[++_oit] = acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _result[++_oit] = str__chr[_c];
                } else if (_c >= 129 && _c <= 254) {  # 81-fe
                    _c1 = _c;
                }
            }
        } else if (acp__S_codepage == 949) {
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 65 && _c <= 90) {  # 41-5a
                        _c = (_c1 - 129) * 178 + _c - 65 + 1;
                    } else if (_c >= 97 && _c <= 122) {  # 61-7a
                        _c = (_c1 - 129) * 178 + _c - 71 + 1;
                    } else if (_c >= 129 && _c <= 254) {  # 81-fe
                        _c = (_c1 - 129) * 178 + _c - 77 + 1;
                    }
                    _result[++_oit] = acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _result[++_oit] = str__chr[_c];
                } else if (_c >= 129 && _c <= 254) {  # 81-fe
                    _c1 = _c;
                }
            }
        } else if (acp__S_codepage == 950) {  # cp950
            while (_iit < _it_end) {
                _c = stream[++_iit];
                if (_c1) {
                    if (_c >= 64 && _c <= 126) {  # 40-7e
                        _c = (_c1 - 161) * 157 + _c - 64 + 1;
                    } else if (_c >= 161 && _c <= 254) {  # a1-fe
                        _c = (_c1 - 161) * 157 + _c - 161 + 1 + 63;
                    }
                    _result[++_oit] = acp__S_charmap[_c];
                    _c1 = 0;
                } else if (_c == 0) {
                    if (terminator == stream__C_NULL) {
                        break;
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c == 10 || _c == 13) {
                    if (terminator == stream__C_NWLN) {
                        if (_iit >= _it_end) {
                            break;
                        }
                        _c0 = _c;
                        _c = stream[++_iit];
                        if (_c0 != _c && (_c == 10 || _c == 13)) {
                            break;
                        }
                    } else {
                        _result[++_oit] = str__chr[_c];
                    }
                } else if (_c <= 127) {
                    _result[++_oit] = str__chr[_c];
                } else if (_c >= 161 && _c <= 249) {  # a1-f9
                    _c1 = _c;
                }
            }
        }

        _o = str__binary_join(_result, 1, _iit - stream[__stream__M_iit]);
    }

    stream[__stream__M_iit] = _iit;
    if (terminator) {
        return stream[__stream__M_line] = _o;
    }
    return _o;
}
# }}}
# {{{ stream::currentline
function \
stream__currentline(stream) {
    return stream[__stream__M_line];
}
# }}}
# {{{ stream::read_utf16le_string
#
# UTF-16 bytearray -> UTF-8 string conversion
#
function \
stream__read_utf16le_string( \
    stream, size, \
    \
    _c, _o, _c1, _c2, _c3, _c4, _iit, \
    _it_end, _low, _high \
) {
    _iit = stream[__stream__M_iit];
    _it_end = _iit + size;
    _o = "";
    _c1 = _c2 = _c3 = _c4 = 0;
    while (_iit < _it_end) {
        _low = stream[++_iit];
        _high = stream[++_iit];
        _c = _high * 256 + _low;
        if (_c == 0) {
            _iit = _it_end;
            break;
        } else if (_c < 128) {
            _o = _o str__chr[_c];
        } else if (_c < 2048) {
            _c1 = num__or(192, num__rshift(_c, 6));
            _c2 = num__or(128, num__and(_c, 63));
            _o = _o str__chr[_c1] str__chr[_c2];
        } else if (_c < 55296) {
            _c1 = num__or(224, num__rshift(_c, 12));
            _c2 = num__or(128, num__and(num__rshift(_c, 6), 63));
            _c3 = num__or(128, num__and(_c, 63));
            _o = _o str__chr[_c1] str__chr[_c2] str__chr[_c3];
        } else if (_c < 56320) {
            _low = stream[++_iit];
            _high = stream[++_iit];
            _c = 65536 \
                + (_c - 55296) * 1024 \
                + _high * 256 + _low - 56320;
            _c1 = num__or(240, num__rshift(_c, 18));
            _c2 = num__or(128, num__and(num__rshift(_c, 12), 63));
            _c3 = num__or(128, num__and(num__rshift(_c, 6), 63));
            _c4 = num__or(128, num__and(_c, 63));
            _o = _o str__chr[_c1] str__chr[_c2] str__chr[_c3] str__chr[_c4];
        } else {
            _c1 = num__or(224, num__rshift(_c, 12));
            _c2 = num__or(128, num__and(num__rshift(_c, 6), 63));
            _c3 = num__or(128, num__and(_c, 63));
            _o = _o str__chr[_c1] str__chr[_c2] str__chr[_c3];
        }
    }
    stream[__stream__M_iit] = _iit;

    return _o;
}
# }}}
# {{{ stream::write_uint8
function \
stream__write_uint8(stream, c) {
    stream[++stream[__stream__M_oit]] = c;
}
# }}}
# {{{ stream::write_string
function \
stream__write_string(stream, str,    _size, _i, _oit) {

    _oit = stream[__stream__M_oit];

    _size = length(str);
    for (_i = 1; _i <= _size; ++_i) {
        stream[++_oit] = str__ord[substr(str, _i, 1)];
    }

    stream[__stream__M_oit] += _size;

}
# }}}
# {{{ stream::copy
function \
stream__copy(istream, ostream, size,    _i, _iit, _oit) {

    _iit = istream[__stream__M_iit];
    _oit = ostream[__stream__M_oit];

    for (_i = 0; _i < size; ++_i) {
        ostream[++_oit] = istream[++_iit];
    }

    istream[__stream__M_iit] = _iit;
    ostream[__stream__M_oit] = _oit;
}
# }}}
# {{{ stream::lz77_copy
# '${__pp_comment:+'
#
# sliding window, the core concept of LZ77
#
# the encoded data consists of a sequence:
#
#   (offset, len)
#
#     offset: How far back in the output buffer to copy from.
#
#     len: Number of characters to copy.
#
# For example, (4, 3, "x") means:
# "copy 3 characters from 4 positions back in the output
#
# * Handling Self-Referencing (Overlap Copy)
#
#   This is the core feature of LZ77. It allows referencing
#   data that is still being built in the output buffer.
#
#   Example:
#
#       Buffer: [a b c d]
#       Triplet: (2, 4)
#       -> Copy: c d c d
#       -> Final: a b c d c d c d
#
# '}'
function \
stream__lz77_copy( \
    stream, offset, len, \
    \
    _i, _it, _c \
) {
    _it = stream[__stream__M_oit];

    for (_i = 0; _i < len; ++_i) {
        _c = stream[_it - offset + 1];
        stream[++_it] = _c;
    }

    stream[__stream__M_oit] = _it;
}
# }}}
# {{{ stream::decode_huffman
function \
stream__decode_huffman(stream, huffman_table,    _p, _l) {

    _l = 0;
    _p = 1;

    do {
        _p = _p * 2 + stream__read_bits(stream, 1);
        if (++_l > 16) {
            E__message = "Failed to read Huffman encoded data.";
            #=# '${__pp_trace__zip_error+"$(cut -d\# -f3-<<<'
            #=# TRACE5(\
            #=#     "Huffman: 0x%03x <-%3d:%s, position: %d/%d", \
            #=#     huffman_table[_p], \
            #=#     length(_p), \
            #=#     _p, \
            #=#     stream[__stream__M_iit] + 1,
            #=#     stream[__stream__M_ibit]);
            #=# ')"}'
            return (-1);
        }
    } while (! (_p in huffman_table));

    return huffman_table[_p];
}
# }}}
# }}}
# }}}
# {{{ @module addr, a simple addressing model
#
#  +------------------------------------+
#  | global address: 0 ~ 1048575        |
#  | unused, reserved for immediate     |
#  +------------------------------------+
#  | global address: 1048576 ~ 2097151  |
#  | stack address block                |
#  +------------------------------------+
#  | global address: 2097152 ~ 3145727  |
#  | immutable address block            |
#  +------------------------------------+
#  | global address: 3145728 ~ 4194303  |
#  | mutable address block              |
#  +------------------------------------+
#
# {{{ addr::init
function \
addr__init() {

    if (__addr__init_guard) {
        return (1);
    }

    addr__errno = 0;

    addr__C_err_success         = (0);
    addr__C_err_invalid_addr    = (-1);
    addr__C_err_overflow        = (-2);
    addr__C_err_underflow       = (-3);

    addr__C_NIL = 0;

    # address block
    split("", __addr__S_stack_block, "");
    split("", __addr__S_immutable_block, "");
    split("", __addr__S_mutable_block, "");

    # RIT, reverse index table for immutable block
    split("", __addr__S_RIT, "");

    # addressing mode
    __addr__C_mod_immediate = 0;
    __addr__C_mod_stack     = 1;
    __addr__C_mod_immutable = 2;
    __addr__C_mod_mutable   = 3;

    # last allocated address
    __addr__S_stack_block_p = 0;
    __addr__S_mutable_block_count = 0;
    __addr__S_immutable_block_count = 0;

    # block size
    __addr__C_blocksize = 2 ^ 20;

    # base offset address
    __addr__C_offset_stack     = 1 * __addr__C_blocksize;
    __addr__C_offset_immutable = 2 * __addr__C_blocksize;
    __addr__C_offset_mutable   = 3 * __addr__C_blocksize;

    # max block address
    __addr__C_max_blockaddr = __addr__C_blocksize - 1;

    __addr__init_guard = 1;

    return (0);
}
# }}}
# {{{ addr::push
function \
addr__push(v) {
    addr__errno = 0;

    if (__addr__S_stack_block_p >= __addr__C_max_blockaddr) {
        E__message = "stack overflow";
        return addr__errno = addr__C_err_overflow;
    }

    __addr__S_stack_block[++__addr__S_stack_block_p] = v;

    return addr__C_err_success;
}
# }}}
# {{{ addr::pop
function \
addr__pop() {
    addr__errno = 0;

    if (__addr__S_stack_block_p <= 0) {
        E__message = "stack underflow";
        addr__errno = addr__C_err_underflow;
        return;
    }

    return __addr__S_stack_block[__addr__S_stack_block_p--];
}
# }}}
# {{{ addr::ref
function \
addr__ref( \
    v, \
    \
    _id \
) {
    addr__errno = 0;

    if (v in __addr__S_RIT) {
        _id = __addr__S_RIT[v];
    } else if (__addr__S_immutable_block_count < __addr__C_max_blockaddr) {
        __addr__S_immutable_block[_id = __addr__S_RIT[v] = \
            ++__addr__S_immutable_block_count] = v;
    } else {
        E__message = "immutable address overflow";
        return addr__errno = addr__C_err_overflow;
    }

    return __addr__C_offset_immutable + _id;
}
# }}}
# {{{ addr::deref
function \
addr__deref(addr) {
    addr__errno = 0;

    if (addr < __addr__C_offset_stack) {
        # mod = 00:mutable
        return addr;
    } else if (addr < __addr__C_offset_immutable) {
        # mod = 01:stack
        addr -= __addr__C_offset_stack;
        if (addr >= __addr__S_stack_block_p) {
            E__message = "addr__deref, stack underflow: " addr;
            addr__errno = addr__C_err_invalid_addr;
            return;
        }
        return __addr__S_immutable_block[__addr__S_stack_block_p - addr];
    } else if (addr < __addr__C_offset_mutable) {
        # mod = 02:immutable
        addr -= __addr__C_offset_immutable;
        if (addr > __addr__S_immutable_block_count) {
            E__message = "addr__deref, invalid immutable address: " addr;
            addr__errno = addr__C_err_invalid_addr;
            return;
        }
        return __addr__S_immutable_block[addr];
    }
    # else mod = 03:mutable
    addr -= __addr__C_offset_mutable;
    if (addr > __addr__S_mutable_block_count) {
        E__message = "addr__deref, invalid mutable address: " addr;
        addr__errno = addr__C_err_invalid_addr;
        return;
    }

    return __addr__S_mutable_block[addr];
}
# }}}
# {{{ addr::malloc
function \
addr__malloc( \
    size, \
    \
    _p \
) {
    addr__errno = 0;

    if (__addr__S_mutable_block_count + size >= __addr__C_max_blockaddr) {
        E__message = "overflow";
        addr__errno = addr__C_err_overflow;
        return addr__C_NIL;
    }

    __addr__S_mutable_block[++__addr__S_mutable_block_count] = size;
    _p = __addr__S_mutable_block_count + 1;
    __addr__S_mutable_block_count += size;

    return __addr__C_offset_mutable + _p;
}
# }}}
# {{{ addr::copy
function \
addr__copy(src, dest, size) {

    dest -= __addr__C_offset_mutable;
    src -= __addr__C_offset_mutable;

    while (size-- > 0) {
        __addr__S_mutable_block[dest++] = __addr__S_mutable_block[src++];
    }

    return addr__C_err_success;
}
# }}}
# {{{ addr::mutable_ref
function \
addr__mutable_ref( \
    v, \
    \
    _id \
) {
    addr__errno = 0;

    if (__addr__S_mutable_block_count >= __addr__C_max_blockaddr) {
        E__message = "mutable address overflow";
        addr__errno = addr__C_err_overflow;
        return addr__C_NIL;
    }

    _id = ++__addr__S_mutable_block_count;

    __addr__S_mutable_block[_id] = v;

    return __addr__C_offset_mutable + _id;
}
# }}}
# {{{ addr::set
function \
addr__set(addr, v) {
    addr__errno = 0;

    addr -= __addr__C_offset_mutable;
    if (addr < 0) {
        E__message = "addr__set, mutable address underflow: " addr;
        return addr__errno = addr__C_err_invalid_addr;
    } else if (addr > __addr__C_blocksize) {
        E__message = "addr__set, invalid mutable address: " addr;
        return addr__errno = addr__C_err_invalid_addr;
    }

    __addr__S_mutable_block[addr] = v;

    return addr__C_err_success;
}
# }}}
# }}}
# {{{ @module cell, a data model consisting of only integers and references
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |      tag        |                    head                   | |
# +-----------------+-----------------------+-------------------+-+
# |                  tail                   |
# +-----------------------------------------+
#
# {{{ ut
# '${__pp_ut__cell__:+"$(cut -f3- -d\# <<<'
#=# function cell__ut(    _status) {
#=#
#=#     print "[cell::ut]";
#=#
#=#     cell__init();
#=#
#=#     return (0);
#=# }
# ')"}'
# }}}
# {{{ cell::init
function \
cell__init(    _status) {

    if (__cell__init_guard) {
        return (1);
    }

    cell__errno = 0;

    cell__C_err_success         = (0);
    cell__C_err_error           = (-1);
    cell__C_err_invalid_arg     = (-2);

    cell__C_tag_list   = 1;
    cell__C_tag_vector = 2;
    cell__C_tag_pair   = 3;
    cell__C_tag_map    = 4;
    cell__C_tag_MAX    = 16;

    # required modules
    _status = addr__init();
    if (_status < 0) {
        return _status;
    }

    __cell__init_guard = 1;

    return (0);
}
# }}}
# {{{ cell::new
function \
cell__new(tag, head, tail) {
    # tag | head << 9 | tail << 9 + 22
    return tag + head * 512 + tail * 2147483648;
}
# }}}
# {{{ cell::tag
function cell__tag(cell) {
    # cell & (2 ^ 9) - 1
    return cell % 512;
}
# }}}
# {{{ cell::head
function cell__head(cell) {
    # cell << 9 & (2 ^ 22) - 1
    return int(cell / 512) % 4194304;
}
# }}}
# {{{ cell::tail
function cell__tail(cell) {
    # cell << 9 + 22
    return int(cell / 2147483648);
}
# }}}
# {{{ cell::pair::new
function cell__pair__new(head, tail) {
    return cell__new(cell__C_tag_vector, head, tail);
}
# }}}
# }}}
# {{{ @module list
# {{{ ut
# '${__pp_ut__list__:+"$(cut -d\# -f3-<<<'
#=# # {{{ list::ut
#=# function list__ut(    _status) {
#=#
#=#     print "[list::ut]";
#=#
#=#     _status = list__init();
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     printf "%s", "__list__ut__00 ... "
#=#     _status = __list__ut__00();
#=#     print (_status == 0 ? "OK": "NG");
#=#
#=#     printf "%s", "__list__ut__01 ... "
#=#     _status = __list__ut__01();
#=#     print (_status == 0 ? "OK": "NG");
#=# }
#=# # }}}
#=# # {{{ list::ut::00
#=# function __list__ut__00(    _status, _v, _list) {
#=#
#=#     _list = list__new();
#=#
#=#     _status = list__append(_list, 13);
#=#     if (_status < 0) {
#=#         return (-1);
#=#     }
#=#
#=#     _status = list__append(_list, 45);
#=#     if (_status < 0) {
#=#         return (-1);
#=#     }
#=#
#=#     _v = list__at(_list, 2);
#=#     if (_v != 45 || list__errno < 0) {
#=#         return (-1);
#=#     }
#=#
#=#     return (0);
#=# }
#=# # }}}
#=# # {{{ list::ut::01
#=# function __list__ut__01(    _key, _count, _keys, _i, _status, _t1, _t2, _a, _list, _command) {
#=#     # {{{
#=#     _list = list__new();
#=#     # }}}
#=#     return (0);
#=# }
#=# # }}}
# ')"}'
# }}}
# {{{ list::init
function list__init(    _status) {

    if (__list__init_guard) {
        return (1);
    }

    list__C_err_success     = (0);
    list__C_err_error       = (-1);
    list__C_err_invalid_arg = (-2);

    list__errno             = list__C_err_success;

    # required modules
    _status = cell__init();
    if (_status < 0) {
        return _status;
    }

    __list__init_guard = 1;

    return (0);
}
# }}}
# {{{ list::new
function list__new(head, tail,    _p) {

    _p = cell__new(cell__C_tag_list, head, tail);

    _p = addr__mutable_ref(_p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ list::append
function list__append(p, v,    _p, _v, _cell, _tail) {

    _p = p;

    while (1) {
        _cell = addr__deref(_p);
        if (addr__errno < 0) {
            return (-1);
        }
        _tail = cell__tail(_cell);
        if (_tail == addr__C_NIL) {
            break;
        }
        _p = _tail;
    }

    _v = list__new(v)
    if (addr__errno < 0) {
        return (-1);
    }

    _cell = cell__new(cell__C_tag_list, cell__head(_cell), _v);
    if (addr__errno < 0) {
        return (-1);
    }

    addr__set(_p, _cell);
    if (addr__errno < 0) {
        return (-1);
    }

    return (0);
}

# }}}
# {{{ list::at
function list__at(p, idx,    _p, _v, _cell, _tail) {
    list__errno = list__C_err_success;

    _p = p;

    while (idx-- > 0) {
        _cell = addr__deref(_p);
        if (addr__errno < 0) {
            list__errno = list__C_err_error;
            return;
        }
        _tail = cell__tail(_cell);
        if (_tail == addr__C_NIL) {
            list__errno = list__C_err_error;
            return;
        }
        _p = _tail;
    }

    _v = addr__deref(_p);
    if (addr__errno < 0) {
        list__errno = list__C_err_error;
        return (-1);
    }

    return cell__head(_v);
}
# }}}
# {{{ list::clone
function list__clone(p,    _p) {

    _p = __list__clone_impl(p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    _p = addr__mutable_ref(_p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ (private)::list::clone_impl
function __list__clone_impl(p,    _p) {
    _p = addr__deref(p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    } else {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ list::walk
function list__walk(p,   _p, _arr) {

    _p = addr__deref(p);
    if (addr__errno < 0) {
        return;
    }

    if (_p > 0) {
        _arr[_p];
        __list__walk_impl(_p, _arr, "");
    }

    print > E__file;

    return;
}
# }}}
# {{{ (private)::list::walk_impl
function __list__walk_impl( \
    p, arr, indent, \
    \
    _color, _key, _value, _left, _right, _parent \
) {
    return;
}
# }}}
# }}}
# {{{ @module map, a red-black tree implementation
# {{{ ut
# '${__pp_ut__map__:+"$(cut -d\# -f3-<<<'
#=# function map__ut(    _status) {
#=#
#=#     _status = map__init();
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     printf "map__ut map_00 ..." > E__file;
#=#     _status = __map__ut__00();
#=#     print (_status == 0 ? "OK": "NG"), "\n" > E__file;
#=#
#=#     printf "map__ut map_01 ...\n" > E__file;
#=#     _status = __map__ut__01();
#=#     print (_status == 0 ? "OK": "NG"), "\n" > E__file;
#=# }
#=# # {{{ (private)::map::ut::00
#=# function __map__ut__00(    _status, _v, _map) {
#=#
#=#     _map = map__new();
#=#
#=#     _status = map__insert(_map, "a1", 10.1);
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, "a1");
#=#     if (_v != 10.1) {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "a2", "aaa");
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, "a2");
#=#     if (_v != "aaa") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "a3", "aab");
#=#     if (_status < 0) {
#=#         _status
#=#     }
#=#
#=#     _v = map__at(_map, "a3");
#=#     if (_v != "aab") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "a4", "aab");
#=#     if (_status < 0) {
#=#         return _status
#=#     }
#=#
#=#     _v = map__at(_map, "a4");
#=#     if (_v != "aab") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "a5", "aab");
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, "a5");
#=#     if (_v != "aab") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "a6", "aab");
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, "a6");
#=#     if (_v != "aab") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "0", "ccc");
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, "0");
#=#     if (_v != "ccc") {
#=#         return (-1);
#=#     }
#=#
#=#     _status = map__insert(_map, "11", "abc");
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _v = map__at(_map, 11);
#=#     if (_v != "abc") {
#=#         return (-1);
#=#     }
#=#
#=#     _map = map__clone(_map);
#=#     if (addr__errno < 0) {
#=#         return (-1);
#=#     }
#=#
#=#     _v = map__at(_map, 11);
#=#     if (_v != "abc") {
#=#         return (-1);
#=#     }
#=#
#=#     _v = map__at(_map, "a6");
#=#     if (_v != "aab") {
#=#         return (-1);
#=#     }
#=#
#=#     return (0);
#=# }
#=# # }}}
#=# # {{{ (private)::map::ut::01
#=# function __map__ut__01(    _key, _count, _keys, _i, _status, _t1, _t2, _a, _map, _command) {
#=#     # {{{
#=#     _map = map__new();
#=#
#=#     _command = "gdate +%s.%6N";
#=#     _count = split( \
#=# "DYpj1gl4XRu15b4kFq/olkfg51ScdEvZyVp3CbirO/yWC8DgLW6D46SV8NH9" \
#=# "1f2HDDUvokiqtF0217cilOLNErY4CGIuEriha70+wPdSlCWiBxegWVhykw3S" \
#=# "MdZbCqbGBGaS6ZKP4c4BNDfmu0+WW5JhNY2L2C1IVrh5gIWepiIrtAZHKqEL" \
#=# "Ya843sNw22+D7fzFqnwdGNTFo1Hix5V1DScq5c1L96M9lPKYXfJZ30DkzppB" \
#=# "MQvGSmsoV3G+9fxwLi/GKsAw1t0uVMy3N92i5uf4PpkC6OhpOgftsVhGWu++" \
#=# "Q59qprSSV7EheqlfnORCn0Gn+WakCqC7zy7HtZOZI5esWmijBwVZOtpp6tYN" \
#=# "TiEKi+xG2SpgCo+dNGY5UouDAavI3dsz6VhaW8MrkWcC4Zz7wZ9w69q/P+8Q" \
#=# "LGBkKdrmPVCD3yLnHC5oaAzOKS/Dnf5DQZ8xSl+ilZaMsEwzFtbxcaMA15Hd" \
#=# "I1nF3yZpSttPiIqDr8L9fFtO/r3XrDXn9K1YZFuaN3L4ETh/MZpuml1bQ7fG" \
#=# "WpdwpNBlM+X6zejwTXliAbqNtbGYPTmzU0XBOV6V6MD8bexCj1MPoNEHJe9t" \
#=# "TuRIF5t8c1ga4GwYJR8glHOURTB35M5f4akASTxrM7WbODyx0Grn2qk1xfKP" \
#=# "O6UeyGWgXPspuq+ziZqbPiGz+O3q2ouDX2AnCtObfZMj6LbhLi2ivkAWZsXe" \
#=# "b2dePo9087gIOGM2Yp1/E863KyU7hLv1a1TQgEY0pJqcK03qYdbWzICFXenp" \
#=# "I3TS3jrkWcLjWMgolQvM1IaQgx4Xg4re42HSJ/ibDrKgpTRiPQReRp720cv7" \
#=# "t1CfrVCM+mVbf7uS7uREX4nspnhHxwENxIIKJUazMeEZnD7hnZBvpzwHLCx1" \
#=# "JEbsM2ooJ7sY+hM0NFE30UNzDSC99R0czXisdv1eZXkC3sMGLlJ+1tmwA0KQ" \
#=# "2ud6A/QPBX7Qz8tiH61L5oAgnOuTZkhqDTVR2niK1bh/IfHp/btbR6FX2Ahp" \
#=# "IBdbB4tA6RhUb1HyVyW353H72JMgbwyQTUR5Sproa9SEjzhufTFM6IN21TMO" \
#=# "xNLnM4mG/ihDO3vfEF07pkyuuNKu04IAGD56upsnEZaHvTF5nva/+OdaqGFY" \
#=# "djDnP6dTpy+2NxqDqb8Y6Ga7jicHQ9i60LGdzB4tIPE2yZIpYiBwgi/T0gbD" \
#=# "05JTCY3TXM3/N6jH8zkhQ+ZbOOMGZzmHcgZ4KxplwX5fvGd1BF2PO0+jQqmA" \
#=# "u3aOejY+Lk4UeKKHHxfPoH+WgNtfZ1hpjhJc7lM6Lf0uTp0P8buY2uExM1ep" \
#=# "LiXTezmY+m6if4k4dgruv8RpV+7SqZLSVtPxxNd0tSBZbCpOdf49R/3IL5Yr" \
#=# "efPu9Xu2RvqiDwvXx5aFudRNflNR0NtesMYCLgPYLKaCcfa9V1e9ty8TF1zX" \
#=# "jeMGUguVzwbDThYapkk7HkIhyVqjZvXRBTyNuQTptJRXwweBlH0wzn2NijLF" \
#=# "ayA4ECV7QunmAL7OCNjmCoSMfdLLCGgclDueC2dDpUgGF1V7ui6zzy6AaZPs" \
#=# "5rQd+gcXCBofu8njr5/WxISMYLFDF6M2vGQjtTF7Vg40UBlOpESytwz6wWav" \
#=# "/xNJpAKcnLufgPWm5Y0NkJTxaVCQwHsGT6c8UyAbgyBwovOW5IvGrmo0c8xZ" \
#=# "QQJ+X6eqQ6dd6UAf3BwZ/LRJWDx1xpve6Ax8vvRSw3wZKUVx8dYi4iV4GqVe" \
#=# "Vm+G2n1GMHPfy0fBwX1jCis+abz/ONyV/5VZO7t2BlHIuT2SVngfeZhzzfGG" \
#=# "Xam+xquGwZiAaohTqA8j10295yTniLqPlHqJfeTzofmrG0e8MwDPbqcQceP6" \
#=# "2QiSAlmLcKw/EKIW5FklrMFGp+G1FrSURbcI/MfKwmBhDWzOSAQJ2m68hd1R" \
#=# "qSsDYuImbUmsXNhqGasgChVtnlQ/8k70z6QPRBnmMoDupEmAmTRHo795ah4w" \
#=# "e06k07gCKEv/5FFp52RGX7YOXLE7YlJ/5XaDKlciLbUAtmAtxC3zSEwWrhY8" \
#=# "cCHxmVhUZUsbZ5WeEwztqswyCNAMjbA0azOWoRpKr2T+vaWO56pMeaNFFai9" \
#=# "fiZK192OHFQN57m5BXSRLUWC1vALfBf+d7v25teIAzjxo5vVc5eBZyiz8uK1" \
#=# "ojIyizxfM3NNZxy2Gck66uWqXb2mKY6BZuzHZSVID9QjTMoHolgrTWVdxbuY" \
#=# "OzHYRltYkP54HxnP3BhM1N8y/Mn6jBGJo/EjzBb4dGNWCMwPO8r1rwFFNJoI" \
#=# "xjZiYjaXBUiJUvkb6bmbTUTyWxNp9Cu/ydhgdzP+M61qGmdQfuVE182PeGxf" \
#=# "kS09EbR1Tpuo7X5rpmbLQlKWlb4Bklf1IJILuVQEexabHwiR0KUZ6Xq2vDvW" \
#=# "4nZqslOQF3F8htHJgnP5GVXffFU7OT7boZr9SQ3mD9Bre0m8RLKJEG78d8D8" \
#=# "M/9xkOok0kYOk+Zl3OPkuVxRVfX5GbA8Jwrp4+SCHnBCdr9FqJXXB+ep70UJ" \
#=# "qvdoDWY/ncjIxa3alsEYqY8IrVYAYoCIGRG1/rKcjIxP09gsHwnk81NxGt9z" \
#=# "bQ0ApO2BmXwDG21Ot6jWO0fmhhBDbmu1v4nIsyhaYmOlMc4U9seqO/XNWV0z" \
#=# "o4nanWq1PzT+d1sDTU0+DMjvjMmtTY7APCFsDSZ9cuhFiTlsQExSs5v4Pe5h" \
#=# "MehAAs133zkds8HjryAG306oYedO37aI9HutlWPkTG3HbpmsxeDiBjxw7D1K" \
#=# "O23md35hDue7S+abPNx98jMUKUAEkbrHHbEJreNX+zwM82NYKW7/+TvbYIhZ" \
#=# "1+PvBpzSWLGTAyEgllUiDsIFM/dBrbEzSSxd758CB18hSnTk4WpEEXrfBgdR" \
#=# "v8YQdr6q2Xodpkgz6OfSdtZ2Jsys7NTrq8atQYZncTd7Ddq4pJ6VHBAA2JsH" \
#=# "TTU9+yXHh/SEfMxRJgkmWvxEoBBzm2o0AC5Q0aDn4p+5N7wMbmTIhCbw7wag" \
#=# "+JPjWTCTwFBw9ZvkJ/5GPYRu+AVAXiumNbgYuFibgBX3XOWx8D7kxJGhdtVH" \
#=# "o01R52qJ2CbC/u4PPs5zfwhaQn5kZ08ljL1zDCMmNP5DmBoZymWFuMrxjQ+x" \
#=# "JxCzLeeeQNs0hmBYZQ8thh02LHtBVxtdSRmaQnJMXBCF+MmJXasXyUjiRAVN" \
#=# "sz7yNH/II9/YoHtFLIsKuKpmQ0Rg9dbsS8kgAcRn3Y7ZRXWeuZAzHjdQ+YN8" \
#=# "dQsJ4mFNhEGrz8BykrzFvDhfeM42IMU9+YvPGzmqpueKX5ZjpjmpdupdewuX" \
#=# "mcB3MkCtaNEj97a9dNkRvs/0khq/SS1a78btjg2/ddBD4G2Jq/RZdFh3xPQi" \
#=# "mzMAHi0rhVVhkHhej07TNuwGsF/VND2uDjLBeD9vgJK92b8KqtZsfzln/EbI" \
#=# "dx8rRyOwhzWYx5dELji6bfdl3yxSw6h9UowinF4ZC4J6srUxSOYpkCq1yI3i" \
#=# "T184PhaNH6WPqfW6FD0Aoj8CObc+m3Qlnodq7HWEDMKEa9GZMtTlOYG2am1m" \
#=# "jqbMNKj8y3brX6v3RE2HWuEiOwYHkv97w1HHxD/a7fjQor3MIXXLLk1+B0bS" \
#=# "EuiRgdIIeQrZUGvO5cYt51m9518JUq4pvCkOvGZTTYRco0t5c+7BFC0k7w96" \
#=# "yYwvgA14x5R6o+J6yV3kOqV1Hpj+ltOMeY03FZKKOPV7sl8+p1GxHavTT1FA" \
#=# "pUwCmiBsB4llWArMWhILEJNnORP3mIoeJb8iSgeA4LnnhHGkyAjENF/VEtqC" \
#=# "oHkWdk+a71zczi2FZQ3DzFuniCVrT4Dpvs7EIBgmGGeGnQVvynzQ4wsmg7vo" \
#=# "cHlygkVJANYSTj7QVand3s+y9sVnPobkxTdfOH63pfsHj+WHIsqo6zmeFWZf" \
#=# "xFCQARrecyWnix29pVJpvstYlMl2VBftTf2CIFgDRwQIGt7XVq9i1tsTVThP" \
#=# "pOARFvG5Xlj7DS7NRCLewkbJWIyKm6eDudqFgO5gsLqzwZ0jIcQcQLaLpmnd" \
#=# "EIgEkhkP9BFkNs5y2AvtXf+elYIstlPzvB2WBUfrj5ZVudiIyDEbtpLRX/G3" \
#=# "8Z316ET+1lcHD6C2b3yMDoRRDO5enO5Oi068MsvYfcZ4SF15qQokUFAwB37+" \
#=# "I70/Y/dNRFg/0qjtWC5uMBmnR/CaehoBjHmoISOZh9Su8L9BRTR362SNyAdl" \
#=# "oEZNim/Irt/kjJbpJPaIA0K3BmV5SmNYX1MX//HllmZFC9J6dh6vAGNP4ZFd" \
#=# "uMMP6b3YeQ3R27toqIOvKeFchmBbyuPJ/LMNYQWE4zTwMVEa5WnlZiXNufVK" \
#=# "GNC04g08/mXnzf8rhd+eC0H38lBAkzzZrLp0BRJg/4NyhlGjU0rQaCRhexMG" \
#=# "6NR7f1rqnmGS+w+eH3I9G09b+/VW99OlOXumemaSkLkbSGaBao584ADsU6OL" \
#=# "UCOMzeYlqmQZPruZuPPn2FbGEGyx457Hy/RVJ8yDWkPGHScEKSs1NGLVekCw" \
#=# "S03LXYCe5cjFL2m5RCgd6/E/m06b+CYY3cHbreeg5ree72i38d0VIMqvcdec" \
#=# "G2c7R/FGGyJUWYcrrkTi6FOYW8NIwdyxQsniVSn7g3eNrVWSVfFDjHWNrncM" \
#=# "V8glqET0nPLfSIvoGi5As71VGRH1plCEAF1iZssfaiyNWXSjUCzPx5rYdq5T" \
#=# "Z3e3RoGQmI0nFi8h3PcUTZy/LdbG+Oh2mo/o3BC4n3F8YDGzdKBfMn6Q+F8K" \
#=# "kjrgMoH3VU9g5mhG0+DUXyvIa4iAIo2DmGXM5XOOn4CxEMOIg4UGJiVrxYhI" \
#=# "bUM9qoQbXA2Ge1eqQZFOjXc+kz/jruCjCZpBD4k1LmKfPEGZ8uvPQDOqFnlk" \
#=# "A0oCWxiWnAGMWLkAbeXjvL+u4pY6A067XAW9T8fPKPmn1jwfG4ANMhi6iUvH" \
#=# "8plXr1zIBPoJF/rcE+uDq0VZZUZVL0eaDTYHAOhvZ+WyOeu8V8mEcdmgYpze" \
#=# "2R51yBUBBgEu1P9GnLmmRYcEiObPVpMTlMgJ37IQELpm0q2ZHHsJd+pn+Spt" \
#=# "cLvt79V5bRcVxhdye4uBs9FqmwJ07cR7JW1V5vOOQDJ4qpMzIDQC0z7Xg1LH" \
#=# "yhCIdvMEhKMIKOHmVT1WxUQxqnQtn/LuFUjcfg75JImjkOOb71iEAZfo5hrE" \
#=# "D8AL1nFLaxPdcks0D34La6PfDH8fOdF/qVRqE4czodmLhPg7ApzfHsiWWElp" \
#=# "l8avsRPKSbFH5a4nHK64zqNu50cbRsT+B9YQ8I285+13pZ6n7CXOFB/e5qqB" \
#=# "ooghSnbXzFnkUXj6w15xXSJ+ObbhAqzeVYyn5CCAjz3vfpMMD6lmoIAXp3ub" \
#=# "trFRmUyED3lxRtx+ugXLWBmjWmlX5vqsiGqTKKEtOuxfYRmOMAMBupNgKji3" \
#=# "SMvle0vhdmAHjc6T6ZOd4VXL8+02HLgvIh8zaU0HxDrLIcImu642a94bpF1e" \
#=# "UUnp360sxksz+AUsKD1d3STkIYIKAJd2n5vXxsuGpZ84PAPQT/2ikZmIrMUO" \
#=# "hpfuHFwhzAMUD6Wbbu6qj+cltRTWuHdYTyV3JDwP4DQkFu2JhjVnEGd9qotc" \
#=# "sx42eHUuOUkqeECabcleKtw0hHxcTHXh0nA/K8SzCt+hvHL5vj5CFNMIc+kD" \
#=# "6CKJAHc+jZge6N15lrQZ1ReDyiXt1giStA8PibP5zZi1mE9AHm/QM62CJaFf" \
#=# "1LeA+X7RKlnmvjSTjoa0IKT4iC6sWyKcF4AU2ezy/43YCgLJD8dkcxJgALhG" \
#=# "JWx0/rGnGGiPNr9H1xEPrUbHcLxsH0QXtP5qVUlqUGfOVIw1GxHDKEmSWIMm" \
#=# "mOv53mYr9uf2hqJrmCjRU0ti6tK/0ObljGrrYBvgZESgw9YmqMgXjyiYE61O" \
#=# "qoSB3pc/hMQTOg5OVX8E99J3bk5oCcmw5LviJZGiqHLdp/bHggWz13KiJsts" \
#=# "1CrJVPjEU9HQ/fueCh27rzIxLGansiK5f92mbBHCe3g1cPpp84DhDp6vlP6K" \
#=#         , _keys, "");
#=#
#=#     _command | getline _t1; close(_command);
#=#
#=#     for (_i = 1; _i <= _count; ++_i) {
#=#
#=#         _key = _keys[_i];
#=# #print "\n\ni: " _i ", key: " _key > E__file
#=#         _status = map__insert(_map, _key, rand());
#=#         if (_status < 0) {
#=#             return _status;
#=#         }
#=# #        map__walk(_map);
#=#     }
#=#
#=#     _command | getline _t2; close(_command);
#=#     print _t2 - _t1 > E__file;
#=#
#=# #        map__walk(_map);
#=#     _command | getline _t1; close(_command);
#=#
#=#     for (_i = 1; _i <= _count; ++_i) {
#=#         _key = _keys[_i];
#=#         _a[_key] = rand();
#=#     }
#=#
#=#     _command | getline _t2; close(_command);
#=#     print _t2 - _t1 > E__file;
#=#
#=#     _command | getline _t1; close(_command);
#=#
#=#     for (_i = 1; _i <= _count; ++_i) {
#=#         _key = _keys[_i];
#=#         map__at(_map, _key) > E__file;
#=#     }
#=#
#=#     _command | getline _t2; close(_command);
#=#     print _t2 - _t1 > E__file;
#=#
#=#     _command | getline _t1; close(_command);
#=#
#=#     for (_i = 1; _i <= _count; ++_i) {
#=#         _key = _keys[_i];
#=#         _a[_key];
#=#     }
#=#
#=#     _command | getline _t2; close(_command);
#=#     print _t2 - _t1 > E__file;
#=#     # }}}
#=#     return (0);
#=# }
#=# # }}}
# ')"}'
# }}}
# {{{ map::init
function map__init(    _status) {

    if (__map__init_guard) {
        return (1);
    }

    map__C_err_success     = (0);
    map__C_err_error       = (-1);
    map__C_err_invalid_arg = (-2);

    # required modules
    _status = cell__init();
    if (_status < 0) {
        return _status;
    }

    map__C_color_red   = 0;
    map__C_color_black = 1;

    map__M_color  = 0;
    map__M_key    = 1;
    map__M_value  = 2;
    map__M_parent = 3;
    map__M_left   = 4;
    map__M_right  = 5;

    __map__init_guard = 1;

    return (0);
}
# }}}
# {{{ map::new
function map__new(    _p) {
    _p = addr__mutable_ref(0);
    if (addr__errno < 0) {
        return 0;
    }
    return _p;
}
# }}}
# {{{ map::insert
function map__insert( \
    p, key, value, \
    \
    _p, _p_parent, _status, _v \
) {
    _p = addr__deref(p);
    if (addr__errno < 0) {
        return addr__errno;
    }
    _p_parent = 0;

    while (_p != 0) {
        _p_parent = _p;

        _v = addr__deref(_p + map__M_key);
        if (addr__errno < 0) {
            return addr__errno;
        }

        if (key < _v) {
            _p = addr__deref(_p + map__M_left);
            if (addr__errno < 0) {
                return addr__errno;
            }
        } else if (key > _v) {
            _p = addr__deref(_p + map__M_right);
            if (addr__errno < 0) {
                return addr__errno;
            }
        } else {  # key == _v
            _status = addr__set(_p + map__M_value, value);
            if (_status < 0) {
                return _status;
            }
            return cell__C_err_success;
        }
    }

    _p = addr__malloc(6);
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = addr__set(_p + map__M_color, map__C_color_red);
    if (_status < 0) {
        return _status;
    }

    _status = addr__set(_p + map__M_key, key);
    if (_status < 0) {
        return _status;
    }

    _status = addr__set(_p + map__M_left, 0);
    if (_status < 0) {
        return _status;
    }

    _status = addr__set(_p + map__M_right, 0);
    if (_status < 0) {
        return _status;
    }

    _status = addr__set(_p + map__M_parent, _p_parent);
    if (_status < 0) {
        return _status;
    }

    _status = addr__set(_p + map__M_value, value);
    if (_status < 0) {
        return _status;
    }

    if (_p_parent == 0) {
        _status = addr__set(p, _p);
        if (_status < 0) {
            return _status;
        }
    } else {
        _v = addr__deref(_p_parent + map__M_key);
        if (addr__errno < 0) {
            return addr__errno;
        }
        if (key < _v) {
            _status = addr__set(_p_parent + map__M_left, _p);
            if (_status < 0) {
                return _status;
            }
        } else {
            _status = addr__set(_p_parent + map__M_right, _p);
            if (_status < 0) {
                return _status;
            }
        }
    }

    _status = __map__fixup(p, _p);
    if (_status < 0) {
        return _status;
    }

    return cell__C_err_success;
}
# }}}
# {{{ (private)::map::fixup
function __map__fixup( \
    p, node, \
    \
    _status, _p1, _p2, _p3, _q1, _q2, _v \
) {
#    map__walk(p);
    if (addr__deref(p) <= 0) {
        return (1);
    }

    # parent(node)
    _p1 = addr__deref(node + map__M_parent);
    if (addr__errno < 0) {
        return addr__errno;
    }

    if (_p1 == 0) {
        _status = addr__set(node + map__M_color, map__C_color_black);
        if (_status < 0) {
            return _status;
        }
    } else {
        # color(parent(node))
        _v = addr__deref(_p1 + map__M_color);
        if (addr__errno < 0) {
            return addr__errno;
        }

        # if (color(node) == red)
        if (_v == map__C_color_red) {

            # parent(parent(node))
            _p2 = addr__deref(_p1 + map__M_parent);
            if (addr__errno < 0) {
                return addr__errno;
            }
            if (_p2 <= 0) {
                return (-1);
            }

            # left(parent(parent(node))
            _v = addr__deref(_p2 + map__M_left);
            if (addr__errno < 0) {
                return addr__errno;
            }

            # parent(node) == left(parent(parent(node)))
            if (_p1 == _v) {

                # _v = left(parent(node)))
                _v = addr__deref(_p1 + map__M_left);
                if (addr__errno < 0) {
                    return addr__errno;
                }

                # if (node == left(parent(node))
                if (node == _v) {
                    #
                    #                       +----+                     +----+
                    #                       | p3 |                     | p3 |
                    #                       +--*-+                     +--*-+
                    #                         /                          /
                    #                        /                          /
                    #                       /                          /
                    #                   +--*--+                    +--*--+
                    #                   |p2(B)|                    |p1(R)|
                    #                   +--*--+                    +--+--+
                    #                     / \                        / \
                    #                    /   \     rotate(LL)       /   \
                    #                   /               =>         /     \
                    #               +--*--+                  +----*--+ +--*--+
                    #               |p1(R)|                  |node(B)| |p2(B)|
                    #               +--*--+                  +--*----+ +--*--+
                    #                 / \                      / \       / \
                    #                /   \                    /   \     /   \
                    #               /     \                            /
                    #         +----*--+ +--*--+                    +--*--+
                    #         |node(R)| |q1(B)|                    |q1(B)|
                    #         +---*---+ +--*--+                    +--*--+
                    #            / \      / \                        / \
                    #           /   \    /   \                      /   \
                    #

                    # rotation pattern LL
                    # get p3

                    # change the color of node to black
                    _status = addr__set(node + map__M_color, map__C_color_black);
                    if (_status < 0) {
                        return _status;
                    }

                    # get q1
                    _q1 = addr__deref(_p1 + map__M_right);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # if q1 exists, set q1 as p2`s child
                    _status = addr__set(_p2 + map__M_left, _q1);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q1 > 0) {
                        # if q1 exists, set p2 as q1`s parent
                        _status = addr__set(_q1 + map__M_parent, _p2);
                        if (_status < 0) {
                            return _status;
                        }
                    }

                    _p3 = addr__deref(_p2 + map__M_parent);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set p2 as p1`s child
                    _status = addr__set(_p1 + map__M_right, _p2);
                    if (_status < 0) {
                        return _status;
                    }

                    # set p1 as p2`s parent
                    _status = addr__set(_p2 + map__M_parent, _p1);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_p3 == 0) {
                        # if p2 was root, set _p1 as root
                        _status = addr__set(p, _p1);
                        if (_status < 0) {
                            return _status;
                        }

                        # if p2 was root, set the color of _p1 as black
                        _status = addr__set(_p1 + map__M_color, map__C_color_black);
                        if (_status < 0) {
                            return _status;
                        }

                        # set 0 to the parent of p1
                        _status = addr__set(_p1 + map__M_parent, 0);
                        if (_status < 0) {
                            return _status;
                        }
                    } else {
                        # check p3`s left
                        _v = addr__deref(_p3 + map__M_left);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }
                        # set p1 as p3`s child
                        if (_v == _p2) {
                            _status = addr__set(_p3 + map__M_left, _p1);
                            if (_status < 0) {
                                return _status;
                            }
                        } else {
                            _status = addr__set(_p3 + map__M_right, _p1);
                            if (_status < 0) {
                                return _status;
                            }
                        }

                        # set p3 as p1`s parent
                        _status = addr__set(_p1 + map__M_parent, _p3);
                        if (_status < 0) {
                            return _status;
                        }

                        # check the color of p3
                        _v = addr__deref(_p3 + map__M_color);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }

                        if (_v == map__C_color_red) {
                            # if the color of p3 is red, check if p3 is root
                            _v = addr__deref(_p3 + map__M_parent);
                            if (_v == 0) {
                                # if p3 is root, set the color of p3 as black
                                _status = addr__set(_p3 + map__M_color, map__C_color_black);
                                if (_status < 0) {
                                    return _status;
                                }
                            } else {
#                                map__walk(cell);
                                # if the parent of p3 exists, apply the fixup process to p1
                                _status = __map__fixup(cell, _p1);
                                if (_status < 0) {
                                    return _status;
                                }
                            }
                        }
                    }

                } else {
                    #
                    #               +----+                         +----+
                    #               | p3 |                         | p3 |
                    #               +--*-+                         +--*-+
                    #                 /                              /
                    #                /                              /
                    #               /                              /
                    #           +--*--+                       +---*---+
                    #           |p2(B)|                       |node(R)|
                    #           +--*--+                       +---+---+
                    #             / \                            / \
                    #            /   \      rotate(LR)          /   \
                    #           /               =>             /     \
                    #       +--*--+                           /       \
                    #       |p1(R)|                          /         \
                    #       +--*--+                         /           \
                    #         / \                          /             \
                    #        /   \                     +--*--+         +--*--+
                    #             \                    |p1(B)|         |p2(B)|
                    #           +--*----+              +--*--+         +--*--+
                    #           |node(R)|                / \             / \
                    #           +----*--+               /   \           /   \
                    #               / \                      \         /
                    #              /   \                   +--*--+ +--*--+
                    #             /     \                  |q1(B)| |q2(B)|
                    #         +--*--+ +--*--+              +--*--+ +--*--+
                    #         |q1(B)| |q2(B)|                / \     / \
                    #         +--*--+ +--*--+               /   \   /   \
                    #           / \     / \
                    #          /   \   /   \
                    #

                    # rotation pattern LR
                    # get p3
                    # change the color of p1 to black
                    _status = addr__set(_p1 + map__M_color, map__C_color_black);
                    if (_status < 0) {
                        return _status;
                    }

                    # get q1
                    _q1 = addr__deref(node + map__M_left);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set q1 to p1`s right
                    _status = addr__set(_p1 + map__M_right, _q1);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q1 > 0) {
                        # if q1 exists set p1 as p1`s parent
                        _status = addr__set(_q1 + map__M_parent, _p1);
                        if (_status < 0) {
                            return _status;
                        }
                    }

                    # get q2
                    _q2 = addr__deref(node + map__M_right);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set q2 to p2`s left
                    _status = addr__set(_p2 + map__M_left, _q2);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q2 > 0) {
                        # if q2 exists, set p2 as q2`s parent
                        _status = addr__set(_q2 + map__M_parent, _p2);
                        if (_status < 0) {
                            return _status;
                        }
                    }

                    # set p1 as node`s child
                    _status = addr__set(node + map__M_left, _p1);
                    if (_status < 0) {
                        return _status;
                    }

                    # set node as p1`s parent
                    _status = addr__set(_p1 + map__M_parent, node);
                    if (_status < 0) {
                        return _status;
                    }

                    _p3 = addr__deref(_p2 + map__M_parent);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set p2 as node`s child
                    _status = addr__set(node + map__M_right, _p2);
                    if (_status < 0) {
                        return _status;
                    }

                    # set node as p2`s parent
                    _status = addr__set(_p2 + map__M_parent, node);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_p3 == 0) {
                        # if p2 was root, set node as root
                        _status = addr__set(p, node);
                        if (_status < 0) {
                            return _status;
                        }

                        # if p2 was root, set the color of node as black
                        _status = addr__set(node + map__M_color, map__C_color_black);
                        if (_status < 0) {
                            return _status;
                        }

                        # set 0 to the parent of node
                        _status = addr__set(node + map__M_parent, 0);
                        if (_status < 0) {
                            return _status;
                        }
                    } else {
                        # check p3`s left
                        _v = addr__deref(_p3 + map__M_left);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }

                        # set node as p3`s child
                        if (_v == _p2) {
                            _status = addr__set(_p3 + map__M_left, node);
                            if (_status < 0) {
                                return _status;
                            }
                        } else {
                            _status = addr__set(_p3 + map__M_right, node);
                            if (_status < 0) {
                                return _status;
                            }
                        }

                        # set p3 as node`s parent
                        _status = addr__set(node + map__M_parent, _p3);
                        if (_status < 0) {
                            return _status;
                        }

                        # check the color of p3
                        _v = addr__deref(_p3 + map__M_color);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }

                        if (_v == map__C_color_red) {
                            # if the color of p3 is red, check if p3 is root
                            _v = addr__deref(_p3 + map__M_parent);
                            if (_v == 0) {
                                # if p3 is root, set the color of p3 as black
                                _status = addr__set(_p3 + map__M_color, map__C_color_black);
                                if (_status < 0) {
                                    return _status;
                                }
                            } else {
#                                map__walk(cell);
                                # if the parent of p3 exists, apply the fixup process to node
                                _status = __map__fixup(cell, node);
                                if (_status < 0) {
                                    return _status;
                                }
                            }
                        }
                    }

                }
            } else {

                # _v = left(parent(node)))
                _v = addr__deref(_p1 + map__M_left);
                if (addr__errno < 0) {
                    return addr__errno;
                }

                # if (node == left(parent(node))
                if (node == _v) {
                    #
                    #               +----+                             +----+
                    #               | p3 |                             | p3 |
                    #               +--*-+                             +--*-+
                    #                 /                                  /
                    #                /                                  /
                    #               /                                  /
                    #           +--*--+                           +---*---+
                    #           |p2(B)|                           |node(R)|
                    #           +--*--+                           +---*---+
                    #             / \                                / \
                    #            /   \         rotate(RL)           /   \
                    #                 \             =>             /     \
                    #               +--*--+                       /       \
                    #               |p1(R)|                      /         \
                    #               +--*--+                     /           \
                    #                 / \                      /             \
                    #                /   \                 +--*--+         +--*--+
                    #               /                      |p2(B)|         |p1(B)|
                    #         +----*--+                    +--*--+         +--*--+
                    #         |node(R)|                      / \             / \
                    #         +---*---+                     /   \           /   \
                    #            / \                             \         /
                    #           /   \                          +--*--+ +--*--+
                    #          /     \                         |q1(B)| |q2(B)|
                    #      +--*--+ +--*--+                     +--*--+ +--*--+
                    #      |q1(B)| |q2(B)|                       / \     / \
                    #      +--*--+ +--*--+                      /   \   /   \
                    #        / \     / \
                    #       /   \   /   \
                    #
                    #

                    # rotation pattern RL
                    # get p3
                    # {{{

                    # change the color of p1 to black
                    _status = addr__set(_p1 + map__M_color, map__C_color_black);
                    if (_status < 0) {
                        return _status;
                    }

                    # get q2
                    # {{{
                    _q2 = addr__deref(node + map__M_right);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set 0 to q1`s left
                    _status = addr__set(_p1 + map__M_left, _q2);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q2 > 0) {
                        # if q2 exists, set p1 as q2`s parent
                        _status = addr__set(_q2 + map__M_parent, _p1);
                        if (_status < 0) {
                            return _status;
                        }
                    }
                    # }}}

                    # get q1
                    # {{{
                    _q1 = addr__deref(node + map__M_left);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set q1 to p2`s right
                    _status = addr__set(_p2 + map__M_right, _q1);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q1 > 0) {
                        # if q1 exists, set p1 as q1`s parent
                        _status = addr__set(_q1 + map__M_parent, _p2);
                        if (_status < 0) {
                            return _status;
                        }
                    }
                    # }}}

                    # set p1 as node`s child
                    # {{{
                    _status = addr__set(node + map__M_right, _p1);
                    if (_status < 0) {
                        return _status;
                    }

                    # set node as p1`s parent
                    _status = addr__set(_p1 + map__M_parent, node);
                    if (_status < 0) {
                        return _status;
                    }
                    # }}}

                    _p3 = addr__deref(_p2 + map__M_parent);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set p2 as node`s child
                    # {{{
                    _status = addr__set(node + map__M_left, _p2);
                    if (_status < 0) {
                        return _status;
                    }

                    # set node as p2`s parent
                    _status = addr__set(_p2 + map__M_parent, node);
                    if (_status < 0) {
                        return _status;
                    }
                    # }}}

                    if (_p3 == 0) {
                        # if p2 was root, set node as root
                        _status = addr__set(p, node);
                        if (_status < 0) {
                            return _status;
                        }

                        # if p2 was root, set the color of node as black
                        _status = addr__set(node + map__M_color, map__C_color_black);
                        if (_status < 0) {
                            return _status;
                        }

                        # set 0 to the parent of node
                        _status = addr__set(node + map__M_parent, 0);
                        if (_status < 0) {
                            return _status;
                        }
                    } else {
                        # check p3`s left
                        _v = addr__deref(_p3 + map__M_left);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }
                        # set node as p3`s child
                        if (_v == _p2) {
                            _status = addr__set(_p3 + map__M_left, node);
                            if (_status < 0) {
                                return _status;
                            }
                        } else {
                            _status = addr__set(_p3 + map__M_right, node);
                            if (_status < 0) {
                                return _status;
                            }
                        }

                        # set p3 as node`s parent
                        _status = addr__set(node + map__M_parent, _p3);
                        if (_status < 0) {
                            return _status;
                        }

                        # check the color of p3
                        _v = addr__deref(_p3 + map__M_color);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }

                        if (_v == map__C_color_red) {
                            # if the color of p3 is red, check if p3 is root
                            _v = addr__deref(_p3 + map__M_parent);
                            if (_v == 0) {
                                # if p3 is root, set the color of p3 as black
                                _status = addr__set(_p3 + map__M_color, map__C_color_black);
                                if (_status < 0) {
                                    return _status;
                                }
                            } else {
#                                map__walk(cell);
                                # if the parent of p3 exists, apply the fixup process to node
                                _status = __map__fixup(cell, node);
                                if (_status < 0) {
                                    return _status;
                                }
                            }
                        }
                    }
                    # }}}

                } else {
                    #
                    #               +----+                             +----+
                    #               | p3 |                             | p3 |
                    #               +--*-+                             +--*-+
                    #                 /                                  /
                    #                /                                  /
                    #               /                                  /
                    #           +--*--+                            +--*--+
                    #           |p2(B)|                            |p1(R)|
                    #           +--*--+                            +--*--+
                    #             / \                                / \
                    #            /   \          rotate(RR)          /   \
                    #                 \             =>             /     \
                    #               +--*--+                    +--*--+ +--*----+
                    #               |p1(R)|                    |p2(B)| |node(B)|
                    #               +--*--+                    +--*--+ +----*--+
                    #                 / \                        / \       / \
                    #                /   \                      /   \     /   \
                    #               /     \                          \
                    #           +--*--+ +--*----+                  +--*--+
                    #           |q1(B)| |node(R)|                  |q1(B)|
                    #           +--*--+ +---*---+                  +--*--+
                    #             / \      / \                       / \
                    #            /   \    /   \                     /   \
                    #

                    # rotation pattern RR
                    # get p3
                    # {{{

                    # change the color of node to black
                    _status = addr__set(node + map__M_color, map__C_color_black);
                    if (_status < 0) {
                        return _status;
                    }

                    # get q1
                    # {{{
                    _q1 = addr__deref(_p1 + map__M_left);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set q1 as p2`s child
                    _status = addr__set(_p2 + map__M_right, _q1);
                    if (_status < 0) {
                        return _status;
                    }

                    if (_q1 > 0) {
                        # if q1 exists, set p2 as q1`s parent
                        _status = addr__set(_q1 + map__M_parent, _p2);
                        if (_status < 0) {
                            return _status;
                        }
                    }
                    # }}}

                    _p3 = addr__deref(_p2 + map__M_parent);
                    if (addr__errno < 0) {
                        return addr__errno;
                    }

                    # set p2 as p1`s child
                    # {{{
                    _status = addr__set(_p1 + map__M_left, _p2);
                    if (_status < 0) {
                        return _status;
                    }

                    # set p1 as p2`s parent
                    _status = addr__set(_p2 + map__M_parent, _p1);
                    if (_status < 0) {
                        return _status;
                    }
                    # }}}

                    if (_p3 == 0) {
                        # if p2 was root, set _p1 as root
                        _status = addr__set(p, _p1);
                        if (_status < 0) {
                            return _status;
                        }

                        # if p2 was root, set the color of _p1 as black
                        _status = addr__set(_p1 + map__M_color, map__C_color_black);
                        if (_status < 0) {
                            return _status;
                        }

                        # set 0 to the parent of _p1
                        _status = addr__set(_p1 + map__M_parent, 0);
                        if (_status < 0) {
                            return _status;
                        }
                    } else {
                        # check p3`s left
                        _v = addr__deref(_p3 + map__M_left);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }
                        # set p1 as p3`s child
                        if (_v == _p2) {
                            _status = addr__set(_p3 + map__M_left, _p1);
                            if (_status < 0) {
                                return _status;
                            }
                        } else {
                            _status = addr__set(_p3 + map__M_right, _p1);
                            if (_status < 0) {
                                return _status;
                            }
                        }

                        # set p3 as p1`s parent
                        _status = addr__set(_p1 + map__M_parent, _p3);
                        if (_status < 0) {
                            return _status;
                        }

                        # check the color of p3
                        _v = addr__deref(_p3 + map__M_color);
                        if (addr__errno < 0) {
                            return addr__errno;
                        }

                        if (_v == map__C_color_red) {
                            # if the color of p3 is red, check if p3 is root
                            _v = addr__deref(_p3 + map__M_parent);
                            if (_v == 0) {
                                # if p3 is root, set the color of p3 as black
                                _status = addr__set(_p3 + map__M_color, map__C_color_black);
                                if (_status < 0) {
                                    return _status;
                                }
                            } else {
#                                map__walk(cell);
                                # if the parent of p3 exists, apply the fixup process to p1
                                _status = __map__fixup(cell, _p1);
                                if (_status < 0) {
                                    return _status;
                                }
                            }
                        }
                    }
                    # }}}
                }
            }
        }
    }

    return cell__C_err_success;
}
# }}}
# {{{ map::at
function map__at(p, key,    _p, _rhs) {

    _p = addr__deref(p);
    if (addr__errno < 0) {
        return;
    }

    while (_p != 0) {
        _rhs = addr__deref(_p + map__M_key);
        if (key < _rhs) {
            _p = addr__deref(_p + map__M_left);
        } else if (key > _rhs) {
            _p = addr__deref(_p + map__M_right);
        } else {
            return addr__deref(_p + map__M_value);
        }
    }

    return;
}
# }}}
# {{{ map::in
function map__in(p, key,    _p, _rhs) {

    _p = addr__deref(p);
    if (addr__errno < 0) {
        return;
    }

    while (_p != 0) {
        _rhs = addr__deref(_p + map__M_key);
        if (key < _rhs) {
            _p = addr__deref(_p + map__M_left);
        } else if (key > _rhs) {
            _p = addr__deref(_p + map__M_right);
        } else {
            return 1;
        }
    }

    return 0;
}
# }}}
# {{{ map::clone
function map__clone(p,    _p) {

    _p = __map__clone_impl(p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    _p = addr__mutable_ref(_p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ (private)::map::clone_impl
function __map__clone_impl(p,    _p, _v, _left, _right) {
    _v = addr__deref(p);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }
    if (_v > 0) {
        _p = addr__malloc(6);

        addr__copy(_v, _p, 4);
        if (addr__errno < 0) {
            return addr__C_NIL;
        }

        # left
        _left = __map__clone_impl(_v + map__M_left);
        if (addr__errno < 0) {
            return addr__C_NIL;
        }
        if (_left > 0) {
            addr__set(_p + map__M_left, _left);
            if (addr__errno < 0) {
                return addr__C_NIL;
            }
            addr__set(_left + map__M_parent, _p);
            if (addr__errno < 0) {
                return addr__C_NIL;
            }
        }

        # right
        _right = __map__clone_impl(_v + map__M_right);
        if (addr__errno < 0) {
            return addr__C_NIL;
        }
        if (_right > 0) {
            addr__set(_p + map__M_right, _right);
            if (addr__errno < 0) {
                return addr__C_NIL;
            }
            addr__set(_right + map__M_parent, _p);
            if (addr__errno < 0) {
                return addr__C_NIL;
            }
        }
    } else {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ map::walk
function map__walk(p,   _p, _arr) {

    _p = addr__deref(p);
    if (addr__errno < 0) {
        return;
    }

    if (_p > 0) {
        _arr[_p];
        __map__walk_impl(_p, _arr, "");
    }

    print > E__file;

    return;
}
# }}}
# {{{ (private)::map::walk_impl
function __map__walk_impl( \
    p, arr, indent, \
    \
    _color, _key, _value, _left, _right, _parent \
) {
    _color = addr__deref(p + map__M_color);
    _key = addr__deref(p + map__M_key);
    _value = addr__deref(p + map__M_value);
    _left = addr__deref(p + map__M_left);
    _right = addr__deref(p + map__M_right);
    _parent = addr__deref(p + map__M_parent);
    printf "%sp: %d, color: %d, key: %s, value: %s, parent: %d, left: %d, right: %d\n", \
        indent, p, _color, _key, _value, _parent, _left, _right > E__file;
    if (_left > 0) {
        if (_left in arr) {
            print indent "    duplicated(_left): " _left > E__file;
        } else {
            arr[_left];
            print indent "  left:" > E__file;
            __map__walk_impl(_left, arr, indent "    ");
        }
    }
    if (_right > 0) {
        if (_right in arr) {
            print indent "    duplicated(_right): " _right > E__file;
        } else {
            arr[_right];
            print indent "  right:" > E__file;
            __map__walk_impl(_right, arr, indent "    ");
        }
    }

    return;
}
# }}}
# }}}
# {{{ @module atom, type annotation for AWK scalar values
#
# The role of this module is to subdivide AWK`s rough built-in scalar
# types, and define formatting and validation using type annotations.
# It also provides a simple DSL for custom definition.
#
# There are basically only two scalar types in AWK: numeric and string.
# It is essentially up to the implementer`s discretion what meanings
# and restrictions to attach to it.
# However, this is also a burden on the implementer.
#
# We define three methods, declare(), validate(), and tostring(), which are
# designed to be as generic as possible, and propose a way to handle scalar
# types that follow certain rules.
#
# @interface
# - declare
# - tostring
# - validate
#
# syntax of declare() DSL
#
#     definition = "atom" , <header> , "{", <body> "}" ;
#
#     header = <type> , ":" , <type_with_validation> ;
#
#     type = identifier , "<" , ( <immediate> | <identifier> ) , ">" ;
#
#     body = attribute , { attributes } ;
#
#     attribute = size_attribute | format_attribute
#
# example:
#
#     atom bits<n> : Numeric {
#         size : n bits
#     }
#
#     atom hexbits<n> : bits<n> {
#         format : &H%0{int((n - 1) / 4)}X
#     }
#
#     atom bytes<n> : Numeric {
#         size : n bytes
#     }
#
#     atom uint8: bytes<1> { }
#
# {{{ atom::init
function \
atom__init(    _status) {

    if (__atom__init_guard) {
        return (1);
    }

    # required modules
    _status = str__init();
    if (_status < 0) {
        return _status;
    }
    _status = addr__init();
    if (_status < 0) {
        return _status;
    }

    # atom::type
    __atom__type__M_base     = 1;
    __atom__type__M_sizeunit = 2;
    __atom__type__M_encoding = 3;
    __atom__type__M_size     = 4;
    __atom__type__M_format   = 5;
    __atom__type__M_map      = 6;

    # atom::parserctx
    __atom__type__M_atomname = 1;
    __atom__type__M_basename = 2;
    __atom__type__M_sp       = 3;
    __atom__type__M_nparams  = 4;

    # keywords
    __atom__C_kwd_atom     = addr__ref("atom");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_type     = addr__ref("type");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_size     = addr__ref("size");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_format   = addr__ref("format");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_encoding = addr__ref("encoding");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_map      = addr__ref("map");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_signed   = addr__ref("signed");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_unsigned = addr__ref("unsigned");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_integer  = addr__ref("integer");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_float    = addr__ref("float");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_string   = addr__ref("string");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_bytes    = addr__ref("bytes");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_kwd_bits     = addr__ref("bits");
    if (addr__errno < 0) {
        return (-1);
    }

    # scanner state IDs
    __atom__C_lst_neutral    = addr__ref("neutral");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_operator   = addr__ref("operator");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_digits     = addr__ref("digits");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_identifier = addr__ref("identifier");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_quote      = addr__ref("quote");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_comment    = addr__ref("comment");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_lst_expr       = addr__ref("expr");
    if (addr__errno < 0) {
        return (-1);
    }

    # parser state IDs
    __atom__C_pst_neutral         = addr__ref("neutral");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom            = addr__ref("atom");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom_name       = addr__ref("atom_name");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom_param      = addr__ref("atom_param");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom_param_name = addr__ref("atom_param_name");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom_param_end  = addr__ref("atom_param_end");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_base            = addr__ref("base");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_base_name       = addr__ref("base_name");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_base_param      = addr__ref("base_param");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_base_param_name = addr__ref("base_param_name");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_base_param_end  = addr__ref("base_param_end");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_atom_def        = addr__ref("atom_def");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_attr_name       = addr__ref("attr_name");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_attr_value      = addr__ref("attr_value");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_attr_pending    = addr__ref("attr_pending");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_attr_quote      = addr__ref("attr_quote");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_map_start       = addr__ref("map_start");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_map_key         = addr__ref("map_key");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_map_colon       = addr__ref("map_colon");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_map_value       = addr__ref("map_value");
    if (addr__errno < 0) {
        return (-1);
    }
    __atom__C_pst_expr            = addr__ref("expr");
    if (addr__errno < 0) {
        return (-1);
    }

    # Encoding
    __atom__C_sym_encoding[__atom__C_enc_raw     = 0] = "RAW";
    __atom__C_sym_encoding[__atom__C_enc_raw_hex = 1] = "RAW-HEX";
    __atom__C_sym_encoding[__atom__C_enc_ansi    = 2] = "ANSI";
    __atom__C_sym_encoding[__atom__C_enc_unicode = 3] = "UNICODE";
    __atom__C_enum_encoding["RAW"]     = __atom__C_enc_raw;
    __atom__C_enum_encoding["RAW-HEX"] = __atom__C_enc_raw_hex;
    __atom__C_enum_encoding["ANSI"]    = __atom__C_enc_ansi;
    __atom__C_enum_encoding["UNICODE"] = __atom__C_enc_unicode;


    # token IDs
    __atom__C_sym_tok[__atom__C_tok_atom       =  1] = "atom";
    __atom__C_sym_tok[__atom__C_tok_digits     =  2] = "digits";
    __atom__C_sym_tok[__atom__C_tok_identifier =  3] = "identifier";
    __atom__C_sym_tok[__atom__C_tok_langle     =  4] = "langle";
    __atom__C_sym_tok[__atom__C_tok_rangle     =  5] = "rangle";
    __atom__C_sym_tok[__atom__C_tok_lbrace     =  6] = "lbrace";
    __atom__C_sym_tok[__atom__C_tok_rbrace     =  7] = "rbrace";
    __atom__C_sym_tok[__atom__C_tok_colon      =  8] = "colon";
    __atom__C_sym_tok[__atom__C_tok_dblcolon   =  9] = "dblcolon";
    __atom__C_sym_tok[__atom__C_tok_eq         = 10] = "operator_eq";
    __atom__C_sym_tok[__atom__C_tok_lt         = 11] = "operator_lt";
    __atom__C_sym_tok[__atom__C_tok_gt         = 12] = "operator_gt";
    __atom__C_sym_tok[__atom__C_tok_le         = 13] = "operator_le";
    __atom__C_sym_tok[__atom__C_tok_ge         = 14] = "operator_ge";
    __atom__C_sym_tok[__atom__C_tok_add        = 15] = "operator_add";
    __atom__C_sym_tok[__atom__C_tok_sub        = 16] = "operator_sub";
    __atom__C_sym_tok[__atom__C_tok_mul        = 17] = "operator_mul";
    __atom__C_sym_tok[__atom__C_tok_div        = 18] = "operator_div";
    __atom__C_sym_tok[__atom__C_tok_not        = 19] = "operator_not";
    __atom__C_sym_tok[__atom__C_tok_lparen     = 20] = "lparen";
    __atom__C_sym_tok[__atom__C_tok_rparen     = 21] = "rparen";
    __atom__C_sym_tok[__atom__C_tok_quote      = 22] = "quote";
    __atom__C_sym_tok[__atom__C_tok_bits       = 23] = "bits";
    __atom__C_sym_tok[__atom__C_tok_bytes      = 24] = "bytes";
    __atom__C_sym_tok[__atom__C_tok_comma      = 25] = "comma";
    __atom__C_sym_tok[__atom__C_tok_keyword    = 26] = "keyword";

    # tag
    __atom__C_sym_op[__atom__C_tag_ldi  = cell__C_tag_MAX +  1] = "ldi";  # int immediate (< 65536)
    __atom__C_sym_op[__atom__C_tag_ldp  = cell__C_tag_MAX +  2] = "ldp";  # parameter
    __atom__C_sym_op[__atom__C_tag_ldr  = cell__C_tag_MAX +  3] = "ldr";  # reference to a string
    __atom__C_sym_op[__atom__C_tag_cat  = cell__C_tag_MAX +  4] = "cat";  # concat
    __atom__C_sym_op[__atom__C_tag_pair = cell__C_tag_MAX +  5] = "pair";
    __atom__C_sym_op[__atom__C_tag_list = cell__C_tag_MAX +  6] = "list";
    __atom__C_sym_op[__atom__C_tag_add  = cell__C_tag_MAX + 13] = "add";
    __atom__C_sym_op[__atom__C_tag_sub  = cell__C_tag_MAX + 14] = "sub";
    __atom__C_sym_op[__atom__C_tag_mul  = cell__C_tag_MAX + 15] = "mul";
    __atom__C_sym_op[__atom__C_tag_div  = cell__C_tag_MAX + 16] = "div";

    # operator priority
    __atom__C_tag_priority[__atom__C_tok_add] = 0;
    __atom__C_tag_priority[__atom__C_tok_sub] = 0;
    __atom__C_tag_priority[__atom__C_tok_mul] = 1;
    __atom__C_tag_priority[__atom__C_tok_div] = 1;

    # unary test
    __atom__C_tag_unary[__atom__C_tag_ldi];
    __atom__C_tag_unary[__atom__C_tag_ldp];
    __atom__C_tag_unary[__atom__C_tag_ldr];

    # token -> op mapping
    __atom__C_tag_map[__atom__C_tok_add] = __atom__C_tag_add;
    __atom__C_tag_map[__atom__C_tok_sub] = __atom__C_tag_sub;
    __atom__C_tag_map[__atom__C_tok_mul] = __atom__C_tag_mul;
    __atom__C_tag_map[__atom__C_tok_div] = __atom__C_tag_div;

    __atom__init_guard = 1;

    return (0);
}
# }}}
# {{{ atom::declare
function \
atom__declare( \
    definition, \
    \
    _tokens, _status \
) {
    _status = __atom__scan(definition, _tokens);
    if (_status < 0) {
        return _status;
    }

    _status = __atom__parse(definition, _tokens);
    if (_status < 0) {
        return _status;
    }

    return (0);
}
# }}}
# {{{ atom::tostring
function \
atom__tostring( \
    t, v, \
    \
    _pos, _status, _key, _offset \
) {
    if (_pos = index(t, ",")) {
        t = substr(t, 1, _pos - 1);
    }
    _status = __atom__instantiate(t);
    if (_status < 0) {
        return v;
    }
    if (t in __atom__S_type) {
        _key = t ".offset";
        if (_key in __atom__S_type) {
            _offset = __atom__S_type[_key];
            if (v > _offset) {
                v -= _offset * 2;
            }
        }
        _key = t ".format";
        if (_key in __atom__S_type) {
            v = sprintf(__atom__S_type[_key], v)
        }
        _key = t "#" v;
        if (_key in __atom__S_type) {
            v = v ":" __atom__S_type[_key];
        }
        return v;
    }

    return v
}
# }}}
# {{{ atom::validate
function \
atom__validate( \
    t, v, valid_arg, \
    \
    _type, _arg1, _strval, _regexp, _range \
) {
    _type = t;
    while (index(_type, ",")) {
        if (match(_type, /,in_range\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 10, RLENGTH - 11);
            _type = substr(_type, RSTART + RLENGTH);
            split(_arg1, _range, ",");
            if (v < _range[1] || v > _range[2]) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be in range [%s].", \
                    _strval, _arg1);
                return (-1);
            }
        } else if (match(_type, /,one_of\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 8, RLENGTH - 9);
            _type = substr(_type, RSTART + RLENGTH);
            _regexp = _arg1;
            gsub(",", "|", _regexp);
            _regexp = "^(" _regexp ")$";
            if (! match(_regexp, v)) {
                _strval = atom__tostring(t, v);
                if (! match(_regexp, _strval)) {
                    E__message = sprintf( \
                        "Invalid value %s, MUST be one of (%s).", \
                        _strval, _arg1);
                    return (-1);
                }
            }
        } else if (match(_type, /,a_kind_of\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 11, RLENGTH - 12);
            _type = substr(_type, RSTART + RLENGTH);
            if (! (_arg1 "#" v in __atom__S_type)) {
                _strval = v;
                if (_strval != _arg1) {
                    E__message = sprintf( \
                        "Invalid value %s, MUST be a kind of %s.", \
                        _strval, _arg1);
                    return (-1);
                }
            }
        } else if (match(_type, /,mustbe\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 8, RLENGTH - 9);
            _type = substr(_type, RSTART + RLENGTH);
            if (v != _arg1) {
                _strval = atom__tostring(t, v);
                if (_strval != _arg1) {
                    E__message = sprintf( \
                        "Invalid value %s, MUST be %s.", \
                        _strval, _arg1);
                    return (-1);
                }
            }
        } else if (match(_type, /,le\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 4, RLENGTH - 5);
            _type = substr(_type, RSTART + RLENGTH);
            if (v > int(_arg1)) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be less than or equal to %s.", \
                    _strval, _arg1);
                return (-1);
            }
        } else if (match(_type, /,lt\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 4, RLENGTH - 5);
            _type = substr(_type, RSTART + RLENGTH);
            if (v >= int(_arg1)) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be less than %s.", \
                    _strval, _arg1);
                return (-1);
            }
        } else if (match(_type, /,ge\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 4, RLENGTH - 5);
            _type = substr(_type, RSTART + RLENGTH);
            if (v < int(_arg1)) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be greater than or equal to %s.", \
                    _strval, _arg1);
                return (-1);
            }
        } else if (match(_type, /,gt\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 4, RLENGTH - 5);
            _type = substr(_type, RSTART + RLENGTH);
            if (v >= int(_arg1)) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be greater than %s.", \
                    _strval, _arg1);
                return (-1);
            }
        } else if (match(_type, /,multiple_of\([^\)]+\)/)) {
            _arg1 = substr(_type, RSTART + 13, RLENGTH - 14);
            _type = substr(_type, RSTART + RLENGTH);
            if (v % int(_arg1)) {
                _strval = atom__tostring(t, v);
                E__message = sprintf( \
                    "Invalid value %s, MUST be multiple of %s.", \
                    _strval, _arg1);
                return (-1);
            }
        } else {
            E__message = sprintf("Invalid type specifier %s", t ":" _type);
            return (-1);
        }
    }

    return (0);
}
# }}}
# {{{ (private)::atom::scan
#
# @argument src: atom definitions
# @argument tokens: array of token.
#
function \
__atom__scan( \
    src, tokens, \
    \
    _chars, _count, _scanner_state, _c, _stack, \
    _v, _i, _s, _tn, _pos, _addr, _id \
) {
    _tn = 0;  # token counter

    _scanner_state = __atom__C_lst_neutral;

    # stack
    _stack[0] = 0;

    # split into characters, an EOF mark \0 is added.
    _count = split(src "\0", _chars, "");

    for (_i = 1; _i <= _count; ++_i) {
        _c = str__ord[_chars[_i]];

        if (_scanner_state == __atom__C_lst_neutral) {
            if (_c <= 32) {
                # _skip
            } else if (_c == 44) {  # ,
                _id = __atom__C_tok_comma;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 47) {  # /
                if (_i == _count) {
                    break;
                }
                _c = str__ord[_chars[++_i]];
                if (_c != 42) {  # *
                    break;
                }
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _scanner_state = __atom__C_lst_comment;
            } else if (_c == 45 || _c >= 48 && _c <= 57) {  # digits
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_digits;
            } else if (_c == 58 || _c == 60 || _c == 62) {  # < >
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _c;  # push current char
                _scanner_state = __atom__C_lst_operator;
            } else if ((_c >= 65 && _c <= 90) || _c == 95 || \
                       (_c >= 97 && _c <= 122)) {  # alpha or "_"
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_identifier;
            } else if (_c == 96) {  # backquote
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_quote;
            } else if (_c == 123) {  # {
                _id = __atom__C_tok_lbrace;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 125) {  # }
                _id = __atom__C_tok_rbrace;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else {
                break;
            }
        } else if (_scanner_state == __atom__C_lst_operator) {
            if (_c == 58) {  # :
                _c = _stack[_stack[0]--];
                if (_c == 58) {
                    _id = __atom__C_tok_dblcolon;
                    tokens[++_tn] = cell__new(_id, _i - 1, 0);
                } else {
                    break;
                }
            } else if (_c == 61) {  # =
                _c = _stack[_stack[0]--];
                if (_c == 60) {  # <
                    _id = __atom__C_tok_le;
                    tokens[++_tn] = cell__new(_id, _i - 1, 0);
                } else if (_c == 62) {  # >
                    _id = __atom__C_tok_ge;
                    tokens[++_tn] = cell__new(_id, _i - 1, 0);
                } else {
                    break;
                }
            } else {
                _c = _stack[_stack[0]--];
                if (_c == 58) {  # :
                    _id = __atom__C_tok_colon;
                    tokens[++_tn] = cell__new(_id, _i, 0);
                } else if (_c == 60) {  # <
                    _id = __atom__C_tok_lt;
                    tokens[++_tn] = cell__new(_id, _i, 0);
                } else if (_c == 62) {  # >
                    _id = __atom__C_tok_gt;
                    tokens[++_tn] = cell__new(_id, _i, 0);
                } else {
                    break;
                }
                --_i;  # backtrack
            }
            _scanner_state = _stack[_stack[0]--];
        } else if (_scanner_state == __atom__C_lst_digits) {
            if (_c < 48 || _c > 57) {  # not digits
                _pos = _stack[_stack[0]--];
                _s = + str__binary_join(_chars, _pos, _i - 1);
                _addr = addr__ref(_s);
                if (addr__errno < 0) {
                    break;
                }
                _id = __atom__C_tok_digits;
                tokens[++_tn] = cell__new(_id, _pos, _addr);
                if (_c == 62) {  # >
                    _id = __atom__C_tok_rangle;
                    tokens[++_tn] = cell__new(_id, _i, 0);
                } else {
                    --_i;
                }
                _scanner_state = _stack[_stack[0]--];
            }
        } else if (_scanner_state == __atom__C_lst_identifier) {
            if ((_c < 48 || _c > 57) && (_c < 65 || _c > 90) && \
                (_c != 95) && (_c < 97 || _c > 122)) {  # not identifier chars
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos, _i - 1);
                # check if current token is a keyword
                if (_s == "atom") {
                    _id = __atom__C_tok_atom;
                    tokens[++_tn] = cell__new(_id, _pos, 0);
                } else {  # identifier
                    _addr = addr__ref(_s);
                    if (_addr < 0) {
                        break;
                    }
                    _id = __atom__C_tok_identifier;
                    tokens[++_tn] = cell__new(_id, _pos, _addr);
                    if (_c == 60) {  # <
                        _id = __atom__C_tok_langle;
                        tokens[++_tn] = cell__new(_id, _pos, 0);
                    } else if (_c == 62) {  # >
                        _id = __atom__C_tok_rangle;
                        tokens[++_tn] = cell__new(_id, _pos, 0);
                    } else {
                        --_i;  # backtrack
                    }
                }

                _scanner_state = _stack[_stack[0]--];
            }
        } else if (_scanner_state == __atom__C_lst_quote) {
            if (_c == 96) {  # backquote
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos + 1, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __atom__C_tok_quote;
                tokens[++_tn] = cell__new(_id, _pos, _addr);
                _scanner_state = __atom__C_lst_neutral;
            } else if (_c == 123) {  # {
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos + 1, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __atom__C_tok_quote;
                tokens[++_tn] = cell__new(_id, _pos, _addr);
                _id = __atom__C_tok_lbrace;
                tokens[++_tn] = cell__new(_id, _i, _addr);
                _scanner_state = __atom__C_lst_expr;
            }
        } else if (_scanner_state == __atom__C_lst_comment) {
            if (_c == 42) {  # *
                if (_i == _count) {
                    break;
                }
                _c = str__ord[_chars[++_i]];
                if (_c == 47) {  # /
                    _scanner_state = _stack[_stack[0]--];
                }
            }
        } else if (_scanner_state == __atom__C_lst_expr) {
            if (_c <= 32) {
                # _skip
            } else if (_c == 40) {  # (
                _id = __atom__C_tok_lparen;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 41) {  # )
                _id = __atom__C_tok_rparen;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 42) {  # *
                _id = __atom__C_tok_mul;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 43) {  # +
                _id = __atom__C_tok_add;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 45) {  # -
                _id = __atom__C_tok_sub;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c == 47) {  # /
                _id = __atom__C_tok_div;
                tokens[++_tn] = cell__new(_id, _i, 0);
            } else if (_c >= 48 && _c <= 57) {  # digits
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_digits;
            } else if (_c == 60 || _c == 62) {  # < >
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _c;  # push current char
                _scanner_state = __atom__C_lst_operator;
            } else if ((_c >= 65 && _c <= 90) || _c == 95 || \
                       (_c >= 97 && _c <= 122)) {  # alpha or "_"
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_identifier;
            } else if (_c == 125) {  # }
                _id = __atom__C_tok_rbrace;
                tokens[++_tn] = cell__new(_id, _i, 0);
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __atom__C_lst_quote;
            } else {
                break;
            }
        } else {
            break;
        }
    }

    if (_scanner_state != __atom__C_lst_neutral || _stack[0] != 0 || _i < _count) {
        _v = addr__deref(_scanner_state);
        E__message = sprintf( \
            "%s(%s), pos: %d, \"%s\"", \
            _i == _count ? "unexpected EOF": "atom scanner error", \
            _v, \
            _i, \
            substr(src, _i - 20, 30));
        return (-1);
    }

    return (0);
}
# }}}
# {{{ (private)::atom::parse
function \
__atom__parse( \
    definition, tokens, \
    \
    _status, _i, _count, \
    _token, _parser_status, _stack, \
    _atomname, _params, _params_map, _baseparams, \
    _n_params, _v, _type, _attrid, _tag, _lhs, _rhs, \
    _priority_lhs, _priority_rhs, _nested, _n, _basename, \
    _has_baseimmediate, _has_immediate, _key, _op, _lparen, _rparen, \
    _s, _tokid \
) {
    __atom__S_pst_sp = 0;

    _parser_status = __atom__C_pst_neutral;

    _stack[0] = 0;

    _n_params = 0;
    split("", _params_map, "");
    split("", _baseparams, "");

    _count = length(tokens);

    for (_i = 1; _i <= _count; ++_i) {
        _token = tokens[_i];
        _tokid = cell__tag(_token);

        if (_parser_status == __atom__C_pst_neutral) {
            if (_tokid == __atom__C_tok_atom) {
                _status = __atom__type_new(_type);
                if (_status < 0) {
                    break;
                }
                _atomname = "";
                _basename = "";
                _n_params = 0;
                delete _params_map;
                _baseparams[0] = 0;
                _attrid = 0;
                _has_immediate = 0;
                _has_baseimmediate = 0;

                _parser_status = __atom__C_pst_atom;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_atom) {
            if (_tokid == __atom__C_tok_identifier) {
                _v = addr__deref(cell__tail(_token));
                _atomname = _atomname _v;
                _parser_status = __atom__C_pst_atom_name;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_atom_name) {
            if (_tokid == __atom__C_tok_langle) {
                _parser_status = __atom__C_pst_atom_param;
            } else if (_tokid == __atom__C_tok_colon) {
                _parser_status = __atom__C_pst_base;
            } else if (_tokid == __atom__C_tok_dblcolon) {
                _atomname = _atomname "::";
                _parser_status = __atom__C_pst_atom;
            } else if (_tokid == __atom__C_tok_lbrace) {
                _parser_status = __atom__C_pst_atom_def;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_atom_param) {
            if (_tokid == __atom__C_tok_identifier) {
                _v = addr__deref(cell__tail(_token));
                if (_v in _params_map) {
                    E__message = "param redefinition: " _v;
                    break;
                }
                ++_n_params;
                _params[_n_params] = "%" _n_params;
                _params_map[_v] = _n_params;
                _parser_status = __atom__C_pst_atom_param_name;
            } else if (_tokid == __atom__C_tok_digits) {
                _v = addr__deref(cell__tail(_token));
                _params[++_n_params] = _v;
                _parser_status = __atom__C_pst_atom_param_name;
                _has_immediate = 1;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_atom_param_name) {
            if (_tokid == __atom__C_tok_rangle) {
                _parser_status = __atom__C_pst_atom_param_end;
            } else if (_tokid == __atom__C_tok_comma) {
                _parser_status = __atom__C_pst_atom_param;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_atom_param_end) {
            if (_has_immediate) {
                _status = __atom__type_unpack(_type, _atomname);
                if (_status < 0) {
                    return _status;
                }
                _status = __atom__type__specialize(_type, _params);
                if (_status < 0) {
                    return _status;
                }
                _atomname = _atomname "<";
                for (_n = 1; _n <= _n_params; ++_n) {
                    if (_n > 1) {
                        _atomname = _atomname ",";
                    }
                    _s = _params[_n];
                    if (index(_s, "%") == 1) {
                        _atomname = _atomname "%" _n;
                    } else {
                        _atomname = _atomname _s;
                    }
                }

            }
            if (_tokid == __atom__C_tok_colon) {
                _parser_status = __atom__C_pst_base;
            } else if (_tokid == __atom__C_tok_lbrace) {
                _parser_status = __atom__C_pst_atom_def;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_base) {
            if (_tokid == __atom__C_tok_identifier) {
                _basename = addr__deref(cell__tail(_token));
                _parser_status = __atom__C_pst_base_name;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_base_name) {
            if (_tokid == __atom__C_tok_lbrace) {
                _status = __atom__type_unpack(_type, _basename);
                if (_status < 0) {
                    return _status;
                }
                _parser_status = __atom__C_pst_atom_def;
            } else if (_tokid == __atom__C_tok_langle) {
                _parser_status = __atom__C_pst_base_param;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_base_param) {
            if (_tokid == __atom__C_tok_identifier) {
                _v = addr__deref(cell__tail(_token));
                if (_v in _baseparams) {
                    E__message = "param redefinition: " _v;
                    break;
                } else if (! (_v in _params_map)) {
                    E__message = "invalid param: " _v;
                    break;
                }
                _baseparams[++_baseparams[0]] = "%" _v;
            } else if (_tokid == __atom__C_tok_digits) {
                _v = addr__deref(cell__tail(_token));
                _baseparams[++_baseparams[0]] = _v;
                _has_baseimmediate = 1;
            } else {
                break;
            }
            _parser_status = __atom__C_pst_base_param_name;
        } else if (_parser_status == __atom__C_pst_base_param_name) {
            if (_tokid == __atom__C_tok_rangle) {
                _parser_status = __atom__C_pst_base_param_end;
            } else if (_tokid == __atom__C_tok_comma) {
                _parser_status = __atom__C_pst_base_param;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_base_param_end) {
            if (_tokid != __atom__C_tok_lbrace) {
                break;
            }
            _s = ">";
            do {
                _n = _baseparams[0];
                if (index(_baseparams[_n], "%") == 1) {
                    _s = (_n == 1 ? "": ",") "%" _n _s;
                } else {
                    _s = (_n == 1 ? "": ",") _baseparams[_n] _s;
                }
            } while (--_baseparams[0]);
            _s = "<" _s;
            if (! (_basename _s in __atom__S_type)) {
                _status = __atom__type_unpack(_type, _basename);
                if (_status < 0) {
                    return _status;
                }
                _status = __atom__type__specialize(_type, _baseparams);
                if (_status < 0) {
                    return _status;
                }
                _v = __atom__type_pack(_type);
                if (_v == addr__C_NIL) {
                    return (-1);
                }
                __atom__S_type[_basename _s] = _v;
            } else {
                _status = __atom__type_unpack(_type, _basename _s);
                if (_status < 0) {
                    return _status;
                }
            }
            _parser_status = __atom__C_pst_atom_def;
        } else if (_parser_status == __atom__C_pst_atom_def) {
            if (_tokid == __atom__C_tok_identifier) {
                _attrid = cell__tail(_token);
                _parser_status = __atom__C_pst_attr_name;
            } else if (_tokid == __atom__C_tok_rbrace) {
                _v = __atom__type_pack(_type);
                if (_v == addr__C_NIL) {
                    return (-1);
                }
                __atom__S_type[_atomname] = _v;
                _parser_status = __atom__C_pst_neutral;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_attr_name) {
            if (_tokid == __atom__C_tok_colon) {
                _stack[++_stack[0]] = _tokid;
                _parser_status = __atom__C_pst_attr_value;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_attr_value) {
            if (_tokid == __atom__C_tok_identifier) {
                _stack[++_stack[0]] = _token;
                _parser_status = __atom__C_pst_attr_pending;
            } else if (_tokid == __atom__C_tok_digits) {
                _stack[++_stack[0]] = _token;
                _parser_status = __atom__C_pst_attr_pending;
            } else if (_tokid == __atom__C_tok_quote) {
                _v = cell__tail(_token);
                _v = cell__new(__atom__C_tag_ldr, _v);
                _v = addr__ref(_v);
                if (_v < 0) {
                    break;
                }
                _stack[++_stack[0]] = _v;
                _parser_status = __atom__C_pst_attr_quote;
            } else if (_tokid == __atom__C_tok_lbrace) {
                _parser_status = __atom__C_pst_map_start;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_attr_pending) {
            if (_tokid == __atom__C_tok_identifier) {
                _stack[++_stack[0]] = _token;
            } else if (_tokid == __atom__C_tok_rbrace) {
                _status = __atom__type_apply( \
                    _type, _attrid, _stack, _params_map);
                if (_status < 0) {
                    break;
                }
                _v = __atom__type_pack(_type);
                if (_v == addr__C_NIL) {
                    return (-1);
                }
                __atom__S_type[_atomname] = _v;
                _parser_status = __atom__C_pst_neutral;
            } else if (_tokid == __atom__C_tok_comma) {
                _status = __atom__type_apply( \
                    _type, _attrid, _stack, _params_map);
                if (_status < 0) {
                    break;
                }
                _parser_status = __atom__C_pst_atom_def;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_attr_quote) {
            if (_tokid == __atom__C_tok_quote) {
                _lhs = _stack[_stack[0]--];
                _v = cell__tail(_token);
                _v = cell__new(__atom__C_tag_ldr, _v);
                _rhs = addr__ref(_v);
                if (_rhs < 0) {
                    break;
                }
                _v = cell__new(__atom__C_tag_cat, _lhs, _rhs);
                _v = __atom__constant_folding(_v);
                _v = addr__ref(_v);
                if (_v < 0) {
                    break;
                }
                _stack[++_stack[0]] = _v;
            } else if (_tokid == __atom__C_tok_lbrace) {  # start expression
                _nested = 0;
                _lparen = __atom__C_tok_lbrace;
                _rparen = __atom__C_tok_rbrace;
                _stack[++_stack[0]] = _tokid;
                _parser_status = __atom__C_pst_expr;
            } else if (_tokid == __atom__C_tok_rbrace) {
                if (__atom__type_apply(_type, _attrid, _stack, _params_map) < 0) {
                    break;
                }
                _v = __atom__type_pack(_type);
                if (_v == addr__C_NIL) {
                    return (-1);
                }
                __atom__S_type[_atomname] = _v;
                _parser_status = __atom__C_pst_neutral;
            } else if (_tokid == __atom__C_tok_comma) {
                if (__atom__type_apply(_type, _attrid, _stack, _params_map) < 0) {
                    break;
                }
                _parser_status = __atom__C_pst_atom_def;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_expr) {
            if (_tokid == __atom__C_tok_identifier) {
                _v = addr__deref(cell__tail(_token));
                if (! (_v in _params_map)) {
                    E__message = "invalid param: " _v;
                    break;
                }
                _v = _params[_params_map[_v]];
                if (index(_v, "%") != 1) {
                    E__message = "logic error: " _v;
                    break;
                }
                _v = + substr(_v, 2);
                _v = cell__new(__atom__C_tag_ldp, _v);
                _v = addr__ref(_v);
                if (_v < 0) {
                    break;
                }
                _stack[++_stack[0]] = _v;
            } else if (_tokid == __atom__C_tok_digits) {
                _v = + addr__deref(cell__tail(_token));
                _v = cell__new(__atom__C_tag_ldi, _v);
                _v = addr__ref(_v);
                if (_v < 0) {
                    break;
                }
                _stack[++_stack[0]] = _v;
            } else if (_tokid in __atom__C_tag_map) {  # numeric binary operator
                _rhs = _stack[_stack[0]--];
                _op = _stack[_stack[0]--];
                if (_op == _lparen) {
                    _stack[++_stack[0]] = _op;
                    _stack[++_stack[0]] = _rhs;
                    _stack[++_stack[0]] = _tokid;
                } else if (_op in __atom__C_tag_priority) {
                    _priority_lhs = __atom__C_tag_priority[_op];
                    _priority_rhs = __atom__C_tag_priority[_tokid];
                    if (_priority_lhs < _priority_rhs) {
                        _stack[++_stack[0]] = _op;
                        _stack[++_stack[0]] = _rhs;
                        _stack[++_stack[0]] = _tokid;
                    } else {
                        _lhs = _stack[_stack[0]--];
                        _tag = __atom__C_tag_map[_op];
                        _v = cell__new(_tag, _lhs, _rhs);
                        _v = __atom__constant_folding(_v);
                        _v = addr__ref(_v);
                        if (_v < 0) {
                            break;
                        }
                        _stack[++_stack[0]] = _v;
                        _stack[++_stack[0]] = _tokid;
                    }
                } else {
                    break;
                }
            } else if (_tokid == _rparen) {
                while (1) {
                    _rhs = _stack[_stack[0]--];
                    _op = _stack[_stack[0]--];
                    if (_op == _lparen) {
                        _stack[++_stack[0]] = _rhs;
                        break;
                    } else {
                        _lhs = _stack[_stack[0]--];
                        _tag = __atom__C_tag_map[_op];
                        _v = cell__new(_tag, _lhs, _rhs);
                        _v = __atom__constant_folding(_v);
                        _v = addr__ref(_v);
                        if (_v < 0) {
                            break;
                        }
                        _stack[++_stack[0]] = _v;
                    }
                }
                if (_nested-- == 0) {
                    _rhs = _stack[_stack[0]--];
                    _lhs = _stack[_stack[0]--];
                    _tag = __atom__C_tag_cat;
                    _v = cell__new(_tag, _lhs, _rhs);
                    _v = __atom__constant_folding(_v);
                    _v = addr__ref(_v);
                    if (_v < 0) {
                        break;
                    }
                    _stack[++_stack[0]] = _v;
                    _parser_status = __atom__C_pst_attr_quote;
                }
                if (_nested == 0) {
                    _lparen = __atom__C_tok_lbrace;
                    _rparen = __atom__C_tok_rbrace;
                }
            } else if (_tokid == __atom__C_tok_lparen) {
                ++_nested;
                _lparen = __atom__C_tok_lparen;
                _rparen = __atom__C_tok_rparen;
                _stack[++_stack[0]] = _tokid;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_map_start) {
            if (_tokid == __atom__C_tok_digits) {
                _stack[++_stack[0]] = _token;
                _parser_status = __atom__C_pst_map_key;
            } else if (_tokid == __atom__C_tok_quote) {
                _stack[++_stack[0]] = _token;
                _parser_status = __atom__C_pst_map_key;
            } else if (_tokid == __atom__C_tok_rbrace) {
                _rhs = 0;
                _v = _stack[_stack[0]--];
                _tag = cell__tag(_v);
                while (_tag == __atom__C_tag_pair) {
                    _v = addr__ref(_v);
                    if (_v < 0) {
                        break;
                    }
                    _v = cell__new(__atom__C_tag_list, _v, _rhs);
                    _rhs = addr__ref(_v);
                    if (_rhs < 0) {
                        break;
                    }
                    _v = _stack[_stack[0]--];
                    _tag = cell__tag(_v);
                }
                if (_tag != __atom__C_tok_colon) {
                    break;
                }
                _type[__atom__type__M_map] = _rhs;
                _parser_status = __atom__C_pst_atom_def;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_map_key) {
            if (_tokid == __atom__C_tok_colon) {
                _parser_status = __atom__C_pst_map_colon;
            } else {
                break;
            }
        } else if (_parser_status == __atom__C_pst_map_colon) {
            if (_tokid == __atom__C_tok_digits || \
                _tokid == __atom__C_tok_quote) {
                _v = _stack[_stack[0]--];
                _lhs = cell__tail(_v);
                _rhs = cell__tail(_token);
                _v = cell__new(__atom__C_tag_pair, _lhs, _rhs);
                _stack[++_stack[0]] = _v;

                # instantiate
                _key = _atomname "#" addr__deref(_lhs);
                __atom__S_map[_key] = addr__deref(_rhs);

                _parser_status = __atom__C_pst_map_start;
            } else {
                break;
            }
        } else {
            break
        }
    }

    if (_parser_status != __atom__C_pst_neutral || _stack[0] != 0) {
        E__message = sprintf( \
            "%s(%s), token: %s, stack: %d", \
            E__message != "" ? E__message: "atom parse error", \
            addr__deref(_parser_status), \
            __atom__C_sym_tok[_tokid],
            _stack[0]);

        return (-1);
    }

    return (0);
}
# }}}
# {{{ (private)::atom::constant_folding
function \
__atom__constant_folding( \
    cell, \
    \
    _tag, _params, _v \
) {
    atom__errno = 0;
    _tag = cell__tag(cell);
    if (_tag == __atom__C_tag_add || \
        _tag == __atom__C_tag_sub || \
        _tag == __atom__C_tag_mul || \
        _tag == __atom__C_tag_div || \
        _tag == __atom__C_tag_cat) {
        # constant folding
        _v = __atom__eval(cell, _params);
        if (atom__errno == 0) {
            return _v;
        }
        E__message = "";
    }
    return cell;
}
# }}}
# {{{ (private)::atom::cell::pretty_print
function \
__atom__cell_pretty_print( \
    cell, indent, \
    \
    _tag, _arg, _lhs, _rhs \
) {
    _tag = cell__tag(cell);
    if (_tag == __atom__C_tag_ldp || _tag == __atom__C_tag_ldi) {
        _arg = cell__head(cell);
        return __atom__C_sym_op[_tag] ": " _arg;
    } else if (_tag == __atom__C_tag_ldr) {
        _arg = cell__head(cell);
        return __atom__C_sym_op[_tag] ":\n" \
               indent "    " _arg " -> " addr__deref(_arg) "\n" \
        ;
    } else if (_tag == __atom__C_tag_add || \
               _tag == __atom__C_tag_sub || \
               _tag == __atom__C_tag_mul || \
               _tag == __atom__C_tag_div \
               ) {
        _lhs = cell__head(cell);
        _rhs = cell__tail(cell);
        return __atom__C_sym_op[_tag] ":\n" \
               indent "    " _lhs " -> " \
               __atom__cell_pretty_print( \
                   addr__deref(_lhs), indent "    ") "\n" \
               indent "    " _rhs " -> " \
               __atom__cell_pretty_print( \
                   addr__deref(_rhs), indent "    ") "\n" \
        ;
    } else if (_tag == __atom__C_tag_cat) {
        _lhs = cell__head(cell);
        _rhs = cell__tail(cell);
        return __atom__C_sym_op[_tag] ":\n" \
               indent "    " _lhs " -> " \
               __atom__cell_pretty_print( \
                   addr__deref(_lhs), indent "    ") "\n" \
               indent "    " _rhs " -> " \
               __atom__cell_pretty_print( \
                   addr__deref(_rhs), indent "    ") "\n"  \
        ;
    } else if (_tag == __atom__C_tag_list) {
        _lhs = cell__head(cell);
        _rhs = cell__tail(cell);
        if (_rhs) {
            return __atom__C_sym_op[_tag] ":\n" \
                   indent _lhs " -> " \
                   __atom__cell_pretty_print( \
                       addr__deref(_lhs), indent) "\n" \
                   indent _rhs " -> " \
                   __atom__cell_pretty_print( \
                       addr__deref(_rhs), indent) \
            ;
        } else {
            return __atom__C_sym_op[_tag] ":\n" \
                   indent _lhs " -> " \
                   __atom__cell_pretty_print( \
                       addr__deref(_lhs), indent) \
            ;
        }
    } else if (_tag == __atom__C_tag_pair) {
        _lhs = cell__head(cell);
        _rhs = cell__tail(cell);
        return __atom__C_sym_op[_tag] ":\n" \
               indent "    " _lhs " -> " addr__deref(_lhs) "\n" \
               indent "    " _rhs " -> " addr__deref(_rhs) "\n" \
        ;
    }
    return "unknown, tag: " _tag ", " cell;
}
# }}}
# {{{ (private)::atom::type::new
function \
__atom__type_new( \
    type \
) {
    split("", type, "");

    type[__atom__type__M_base]     = 0;
    type[__atom__type__M_sizeunit] = 0;
    type[__atom__type__M_encoding] = 0;
    type[__atom__type__M_size]     = 0;
    type[__atom__type__M_format]   = 0;
    type[__atom__type__M_map]      = 0;

    return (0);
}
# }}}
# {{{ (private)::atom::type::pack
#
# A type object is type annotation information encoded in a 53-bit
# unsigned integer, with the following layout:
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | A |  B  |             Size              |      FormatId       |
# +---+-----+-------------------------------+---------------------+
# |    ...  |             Map               |
# +---------+-------------------------------+
#
# A - BasicType:
#   0(Unsigned Integer), 2(Signed Integer), 2(Float), 3(String)
#
# B - Subtype:
#   represent "sizeunit" if A = 0(Unsigned Integer) or A = 2(Signed Integer):
#       0: bytes
#       1: bits
#   represent "encoding" if A = 3(String):
#       0: RAW
#       1: RAW-HEX
#       2: ANSI
#       3: UNICODE
#
# Size:
#   An integer size if D(SizeIsParameterized) is 0.
#   Otherwise, this is a GOT address of ParameterizedFormat.
#       Integer: byte or bit size
#       Float: must be 4
#       String: byte size of a string
#
# FormatID:
#   Reference index of format string if D(SizeIsParameterized) is 0.
#   Otherwise, this is a GOT address of ParameterizedFormat.
#
# Encoding:
#
function \
__atom__type_pack( \
    type, \
    \
    _base, _subtype, _p \
) {
    _base = type[__atom__type__M_base];
    if (_base <= 1) {
        _subtype = type[__atom__type__M_sizeunit];
    } else if (_base == 3) {
        _subtype = type[__atom__type__M_encoding];
    } else {
        _subtype = 0;
    }

    _p = cell__new(__atom__C_tag_list, type[__atom__type__M_map], 0);
    if (atom__err < 0) {
        return addr__C_NIL;
    }

    _p = cell__new(__atom__C_tag_list, type[__atom__type__M_format], addr__ref(_p));
    if (atom__err < 0) {
        return addr__C_NIL;
    }

    _p = cell__new(__atom__C_tag_list, type[__atom__type__M_size], addr__ref(_p));
    if (atom__err < 0) {
        return addr__C_NIL;
    }

    _p = cell__new(__atom__C_tag_list, _base + _subtype * 4, addr__ref(_p));
    if (atom__err < 0) {
        return addr__C_NIL;
    }

    return _p;
}
# }}}
# {{{ (private)::atom::type::unpack
#
function \
__atom__type_unpack( \
    type, name, \
    \
    _v, _base, _head \
) {
    if (! (name in __atom__S_type)) {
        E__message = "unexpected base type: " name;
        return (-1);
    }

    _v = __atom__S_type[name];

    _head = cell__head(_v);

    type[__atom__type__M_base] = _base = _head % 4;
    if (_base <= 1) {
        type[__atom__type__M_sizeunit] = num__rshift(_head, 2) % 2;
    } else if (_base == 3) {
        type[__atom__type__M_encoding] = num__rshift(_head, 2) % 8;
    }

    _v = addr__deref(cell__tail(_v));
    if (addr__errno < 0) {
        return addr__errno;
    }

    type[__atom__type__M_size] = cell__head(_v);
    _v = addr__deref(cell__tail(_v));
    if (addr__errno < 0) {
        return addr__errno;
    }

    type[__atom__type__M_format] = cell__head(_v);
    _v = addr__deref(cell__tail(_v));
    if (addr__errno < 0) {
        return addr__errno;
    }

    type[__atom__type__M_map] = cell__head(_v);

    return (0);
}
# }}}
# {{{ (private)::atom::type::apply
function \
__atom__type_apply( \
    type, _attrid, stack, params, \
    \
    _token, _tokid, _word, _v \
) {
    if (_attrid == __atom__C_kwd_type) {
        _token = stack[stack[0]--];
        _tokid = cell__tag(_token);
        _word = cell__tail(_token);
        if (_tokid == __atom__C_tok_identifier) {
            if (_word == __atom__C_kwd_string) {
                type[__atom__type__M_base] = 3;  # 3:string
            } else if (_word == __atom__C_kwd_float) {
                type[__atom__type__M_base] = 2;  # 2: float
            } else if (_word == __atom__C_kwd_integer) {
                _token = stack[stack[0]--];
                _tokid = cell__tag(_token);
                _word = cell__tail(_token);
                if (_word == __atom__C_kwd_unsigned) {
                    type[__atom__type__M_base] = 0;  # 0:unsigned integer
                } else if (_word == __atom__C_kwd_signed) {
                    type[__atom__type__M_base] = 1;  # 1:signed integer
                }
            } else {
                E__message = "unexpected base type: " addr__deref(_word);
            }
        } else {
            E__message = "unexpected token: " _tokid;
            return (-1);
        }
    } else if (_attrid == __atom__C_kwd_size) {
        _token = stack[stack[0]--];
        _tokid = cell__tag(_token);
        _word = cell__tail(_token);
        if (_tokid == __atom__C_tok_identifier) {
            if (_word == __atom__C_kwd_bytes) {
                type[__atom__type__M_sizeunit] = 0;  # 0:bytes
            } else if (_word == __atom__C_kwd_bits) {
                type[__atom__type__M_sizeunit] = 1;  # 1:bits
            } else {
                E__message = "unexpected size unit: " addr__deref(_word);
                return (-1);
            }
        } else {
            E__message = "unexpected token: " _tokid;
            return (-1);
        }
        _token = stack[stack[0]--];
        _tokid = cell__tag(_token);
        if (_tokid == __atom__C_tok_identifier) {
            _v = cell__tail(_token);
            _v = addr__deref(_v);  # identifier
            if (addr__errno < 0) {
                return addr__errno;
            }
            if (! (_v in params)) {
                E__message = "unknown parameter: " _v
                return (-1);
            }
            # parameter index
            _v = cell__new(__atom__C_tag_ldp, params[_v]);
            _v = addr__ref(_v);
            if (_v < 0) {
                return (-1);
            }
            type[__atom__type__M_size] = _v;
        } else if (_tokid == __atom__C_tok_digits) {
            _v = cell__tail(_token);
            _v = + addr__deref(_v);
            if (_v < 0) {
                return (-1);
            }
            _v = cell__new(__atom__C_tag_ldi, _v);
            _v = addr__ref(_v);
            if (_v < 0) {
                return (-1);
            }
            type[__atom__type__M_size] = _v;
        } else {
            E__message = "unexpected token: " _tokid;
            return (-1);
        }
    } else if (_attrid == __atom__C_kwd_format) {
        type[__atom__type__M_format] = stack[stack[0]--];
    } else if (_attrid == __atom__C_kwd_encoding) {
        _v = stack[stack[0]--];
        _v = addr__deref(_v);
        if (_v < 0) {
            return (-1);
        }
        if (cell__tag(_v) != __atom__C_tag_ldr) {
            return (-1);
        }
        _v = cell__head(_v);
        if (_v < 0) {
            return (-1);
        }
        _v = addr__deref(_v);
        if (_v in __atom__C_enum_encoding) {
            type[__atom__type__M_encoding] = __atom__C_enum_encoding[_v];
        } else {
            E__message = "unexpected encoding: " _v "\n";
            return (-1);
        }
    } else {
        E__message = "unexpected attribute id: " _attrid;
        return (-1);
    }
    _token = stack[stack[0]--];
    _tokid = cell__tag(_token);
    if (_tokid != __atom__C_tok_colon) {
        E__message = "unexpected token: " _tokid;
        return (-1);
    }
    return (0);
}
# }}}
# {{{ (private)::atom::type::specialize
function \
__atom__type__specialize( \
    type, params, \
    \
    _size, _format, _v, _tag \
) {
    _size = type[__atom__type__M_size];
    _v = addr__deref(_size);
    if (_v < 0) {
        return (-1);
    }
    _tag = cell__tag(_v);
    if (_tag != __atom__C_tag_ldi) {
        _v = __atom__eval(_v, params);
        if (atom__errno < 0) {
            return atom__errno;
        }
        if (atom__errno == 0) {
            _v = addr__ref(_v);
            if (_v < 0) {
                return (-1);
            }
            type[__atom__type__M_size] = _v;
        }
    }

    _format = type[__atom__type__M_format];
    if (_format > 0) {
        _v = addr__deref(_format);
        if (_v < 0) {
            return (-1);
        } else if (_v > 0) {
            _tag = cell__tag(_v);
            if (_tag != __atom__C_tag_ldr) {
                _v = __atom__eval(_v, params);
                if (atom__errno < 0) {
                    return atom_errno;
                }
                if (atom__errno == 0) {
                    _v = addr__ref(_v);
                    if (_v < 0) {
                        return (-1);
                    }
                    type[__atom__type__M_format] = _v;
                }
            }
        }
    }

    return (0);
}
# }}}
# {{{ (private)::atom::type::instantiate
function \
__atom__instantiate( \
    atomname, \
    \
    _type, _pos, _next, \
    _lhs, _rhs, _v, _params, \
    _size, _sizeunit, _encoding, _base, _status \
) {
    # test if atomname is a concrete type
    if (atomname ".base" in __atom__S_type) {
        return (1);
    }

    if (atomname in __atom__S_type) {
        _status = __atom__type_unpack(_type, atomname);
        if (_status < 0) {
            return _status;
        }
    } else {
        _pos = index(atomname, "<");
        if (_pos == 0) {
            return (-1);
        }

        _v = substr(atomname, 1, _pos - 1);
        _status = __atom__type_unpack(_type, _v);
        if (_status < 0) {
            return _status;
        }

        _v = substr(atomname, _pos + 1, length(atomname) - _pos - 1);
        split(_v, _params, ",");
        _status = __atom__type__specialize(_type, _params);
        if (_status < 0) {
            return _status;
        }

        _v = __atom__type_pack(_type);
        if (_v == addr__C_NIL) {
            return (-1);
        }

        __atom__S_type[atomname] = _v;
    }

    _base = _type[__atom__type__M_base];
    __atom__S_type[atomname ".base"] = _base;

    if (_base <= 1) {
        _sizeunit = _type[__atom__type__M_sizeunit];
        __atom__S_type[atomname ".sizeunit"] = _sizeunit;
    } else if (_base == 3) {
        _encoding = _type[__atom__type__M_encoding];
        __atom__S_type[atomname ".encoding"] = _encoding;
    }

    _v = _type[__atom__type__M_size];
    if (_v == 0) {
        E__message = "size is not defined, type: " atomname;
        return (-1);
    }
    _v = addr__deref(_v);
    if (addr__errno < 0) {
        return (-1);
    }
    if (cell__tag(_v) != __atom__C_tag_ldi) {
        return (-1);
    }
    _size = cell__head(_v);
    if (_size == 0) {
        E__message = "invalid size, type: " atomname ", size: " _size;
        return (-1);
    }
    __atom__S_type[atomname ".size"] = _size;
    if (_base == 1) {  # signed integer
        if (_sizeunit == 0) {
            _size *= 8;
        }
        __atom__S_type[atomname ".offset"] = 2 ^ (_size - 1);
    }

    _v = _type[__atom__type__M_format];
    if (_v != 0) {
        _v = addr__deref(_v);
        if (addr__errno < 0) {
            return (-1);
        }
        if (cell__tag(_v) != __atom__C_tag_ldr) {
            return (-1);
        }
        _v = cell__head(_v);
        if (_v == 0) {
            return (-1);
        }
        _v = addr__deref(_v);
        if (addr__errno < 0) {
            return (-1);
        }
        __atom__S_type[atomname ".format"] = _v;
    }

    _v = _type[__atom__type__M_map];
    if (_v != 0) {
        __atom__S_type[atomname ".map"] = "#";
        do {
            _v = addr__deref(_v);
            if (addr__errno < 0) {
                return (-1);
            }
            if (cell__tag(_v) != __atom__C_tag_list) {
                return (-1);
            }
            _next = cell__tail(_v);
            _v = cell__head(_v);
            if (_v == 0) {
                return (-1);
            }
            _v = addr__deref(_v)
            if (addr__errno < 0) {
                return (-1);
            }
            _lhs = cell__head(_v);
            _lhs = addr__deref(_lhs);
            if (addr__errno < 0) {
                return (-1);
            }
            _rhs = cell__tail(_v);
            _rhs = addr__deref(_rhs);
            if (addr__errno < 0) {
                return (-1);
            }
            __atom__S_type[atomname "#" _lhs] = _rhs;
            if (_next == 0) {
                break;
            }
            _v = _next;
        } while (_v != 0);
    }
    return (0);
}
# }}}
# {{{ (private)::atom::eval
function \
__atom__eval( \
    cell, params, \
    \
    _tag, _lhs, _rhs, _v \
) {
    atom__errno = 0;
    if (! cell) {
        E__message = "invalid cell: " cell;
        return atom__errno = (-1);
    }
    _tag = cell__tag(cell);
    if (_tag in __atom__C_tag_unary) {
        if (_tag == __atom__C_tag_ldi) {
            return cell;
        } else if (_tag == __atom__C_tag_ldp) {
            _v = cell__head(cell);
            if (! (_v in params)) {
                E__message = "unknown parameter: " _v;
                return atom__errno = (-1);
            }
            _v = params[_v];
            if (index(_v, "%") == 1) {
                return atom__errno = (1);
            }
            return cell__new(__atom__C_tag_ldi, _v);
        } else if (_tag == __atom__C_tag_ldr) {
            return cell;
        }
        # else
        E__message = "not impl: " _tag ", cell: " cell;
        return atom__errno = (-1);
    }
    # else
    # tag is a binary operator
    # lhs
    _v = cell__head(cell);
    _lhs = addr__deref(_v);
    if (addr__errno < 0) {
        return (-1);
    }
    if (_lhs < 0) {
        E__message = "GOT reference error, addr: " _v;
        return atom__errno = (-1);
    }
    if (cell__tag(_lhs) != 0) {
        _lhs = __atom__eval(_lhs, params);
        if (atom__errno != 0) {
            return atom__errno;
        }
    }
    _v = cell__tag(_lhs);
    if (_v == __atom__C_tag_ldr) {
        _lhs = addr__deref(cell__head(_lhs));
        if (addr__errno < 0) {
            return (-1);
        }
    } else if (_v == __atom__C_tag_ldi) {
        _lhs = cell__head(_lhs);
    } else {
        E__message = "logic error(eval/lhs), tag: " _tag;
        return atom__errno = (-1);
    }

    # rhs
    _v = cell__tail(cell);
    _rhs = addr__deref(_v);
    if (addr__errno < 0) {
        return (-1);
    }
    if (_rhs < 0) {
        E__message = "GOT reference error, addr: " _v;
        return atom__errno = (-1);
    }
    if (cell__tag(_rhs) != 0) {
        _rhs = __atom__eval(_rhs, params);
        if (atom__errno != 0) {
            return atom__errno;
        }
    }
    _v = cell__tag(_rhs);
    if (_v == __atom__C_tag_ldr) {
        _rhs = addr__deref(cell__head(_rhs));
        if (addr__errno < 0) {
            return (-1);
        }
    } else if (_v == __atom__C_tag_ldi) {
        _rhs = cell__head(_rhs);
    } else {
        E__message = "logic error(eval/rhs), tag: " _tag;
        return atom__errno = (-1);
    }

    if (_tag == __atom__C_tag_cat) {
        _v = addr__ref(_lhs _rhs);
        if (_v < 0) {
            return atom__errno = (-1);
        }
        return cell__new(__atom__C_tag_ldr, _v);
    } else if (_tag == __atom__C_tag_add) {
        _v = _lhs + _rhs;
        return cell__new(__atom__C_tag_ldi, _v);
    } else if (_tag == __atom__C_tag_sub) {
        _v = _lhs - _rhs;
        return cell__new(__atom__C_tag_ldi, _v);
    } else if (_tag == __atom__C_tag_mul) {
        _v = _lhs * _rhs;
        return cell__new(__atom__C_tag_ldi, _v);
    } else if (_tag == __atom__C_tag_div) {
        _v = int(_lhs / _rhs);
        return cell__new(__atom__C_tag_ldi, _v);
    }
    # else
    E__message "not impl: " _tag;
    return atom__errno = (-1);
}
# }}}
# {{{ (private)::atom::encode_token
#
# a Token has the following layout
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |       Id        |                 Position                  | |
# +-----------------+------------------------+------------------+-+
# |              Piece address               |
# +------------------------------------------+
#
# Id (5 bits):
#    token ID
#
# Position (16 bits):
#    position in source
#
# Piece ID (16 bits):
#    reference of a piece string
#
# }}}
# }}}
# {{{ @module astore, type annotated hierarchical property store
#
# @interface
# - class astore
#
# {{{ astore::init
function \
astore__init(    _status) {

    if (__astore__init_guard) {
        return (1);
    }

    # required modules
    _status = atom__init();
    if (_status < 0) {
        return _status;
    }

    # basic types
    _status = atom__declare(" \
                                                    \
    /* basic integer types */                       \
    atom integer<n> {                               \
        size: n bytes                               \
      , format: `%d`                                \
    }                                               \
                                                    \
    atom uint<n>: integer<n> {                      \
        type: unsigned integer                      \
    }                                               \
                                                    \
    atom int<n>: integer<n> {                       \
        type: signed integer                        \
    }                                               \
                                                    \
    atom hexint<n>: uint<n> {                       \
        format: `&H%0{n * 2}X`                      \
    }                                               \
                                                    \
    atom bits<n> {                                  \
        type: unsigned integer                      \
      , size: n bits                                \
      , format: `&H%0{(n - 1) / 4 + 1}X`            \
    }                                               \
                                                    \
    atom bool: bits<1> {                            \
        format: `%d`                                \
      , map: {                                      \
            0: `False`                              \
            1: `True`                               \
        }                                           \
    }                                               \
                                                    \
    /* synonyms */                                  \
    atom uint8: uint<1> {}                          \
    atom uint16: uint<2> {}                         \
    atom uint24: uint<3> {}                         \
    atom uint32: uint<4> {}                         \
    atom uint64: uint<8> {}                         \
                                                    \
    atom int8: int<1> {}                            \
    atom int16: int<2> {}                           \
    atom int24: int<3> {}                           \
    atom int32: int<4> {}                           \
                                                    \
    atom hexint8: hexint<1> {}                      \
    atom hexint16: hexint<2> {}                     \
    atom hexint24: hexint<3> {}                     \
    atom hexint32: hexint<4> {}                     \
                                                    \
    /* basic string types */                        \
    atom string {                                   \
        type: string                                \
    }                                               \
                                                    \
    atom RawString<n>: string {                     \
        size : n bytes                              \
      , encoding: `RAW`                             \
    }                                               \
                                                    \
    atom AnsiString<n>: string {                    \
        size : n bytes                              \
      , encoding: `ANSI`                            \
    }                                               \
                                                    \
    atom UnicodeString<n>: string {                 \
        size : n bytes                              \
      , encoding: `UNICODE`                         \
    }                                               \
                                                    \
    atom HexString<n>: string {                     \
        size : n bytes                              \
      , encoding: `RAW-HEX`                         \
    }                                               \
                                                    \
     ");
    if (_status < 0) {
        return _status;
    }

    _status = atom__declare(" \
    atom zipmagic: HexString<8> {                   \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # LCID (4 bytes)
    #
    # [MS-LCID] 2.2 LCID Structure
    #
    # This protocol references commonly used data types as defined in [MS-DTYP].
    # An LCID is a 4-byte value. The value supplied in an LCID is a standard
    # numeric substitution for the international [RFC5646] string.
    # The following diagram is shown in host byte order.
    #
    # +===============================================================+
    # |                    1                   2                   3  |
    # |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
    # +===============================================================+
    # |        Reserved       |Sort ID|         Language ID           |
    # +-----------------------+-------+-------------------------------+
    #
    # * VBA always uses 1033(0x00000409)
    #
    _status = atom__declare(" \
    atom LCID: uint32 {                             \
        map: {                                      \
            1033: `en-US`                           \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # CodePage (2 bytes)
    #
    # [Code Page Identifiers]
    # https://learn.microsoft.com/en-us/windows/win32/intl/code-page-identifiers
    #
    _status = atom__declare(" \
    atom CodePage: uint16 {                                                   \
        map: {                                                                \
           874: `Thai (Windows)`                                              \
           932: `ANSI/OEM Japanese; Japanese (Shift-JIS)`                     \
           936: `ANSI/OEM Simplified Chinese (PRC, Singapore); "              \
                "Chinese Simplified (GB2312)`                                 \
           949: `ANSI/OEM Korean (Unified Hangul Code)`                       \
           950: `ANSI/OEM Traditional Chinese (Taiwan; Hong Kong SAR, PRC); " \
                "Chinese Traditional (Big5)`                                  \
          1250: `ANSI Central European; Central European (Windows)`           \
          1251: `ANSI Cyrillic; Cyrillic (Windows)`                           \
          1252: `ANSI Latin 1; Western European (Windows)`                    \
          1253: `ANSI Greek; Greek (Windows)`                                 \
          1254: `ANSI Turkish; Turkish (Windows)`                             \
          1255: `ANSI Hebrew; Hebrew (Windows)`                               \
          1256: `ANSI Arabic; Arabic (Windows)`                               \
          1257: `ANSI Baltic; Baltic (Windows)`                               \
          1258: `ANSI/OEM Vietnamese; Vietnamese (Windows)`                   \
        }                                                                     \
    }                                                                         \
    ");
    if (_status < 0) {
        return _status;
    }

    # OleColorType
    _status = atom__declare(" \
    atom OleColorType: uint8 {                      \
        map: {                                      \
            0:  `Default`                           \
            1:  `PaletteEntry`                      \
            2:  `RgbColor`                          \
          128:  `SystemPalette`                     \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # system colors
    _status = atom__declare(" \
    atom SystemColor: uint24 {                      \
        map: {                                      \
            0:  `COLOR_SCROLLBAR`                   \
            1:  `COLOR_DESKTOP`                     \
            2:  `COLOR_ACTIVECAPTION`               \
            3:  `COLOR_INACTIVECAPTION`             \
            4:  `COLOR_MENU`                        \
            5:  `COLOR_WINDOW`                      \
            6:  `COLOR_WINDOWFRAME`                 \
            7:  `COLOR_MENUTEXT`                    \
            8:  `COLOR_WINDOWTEXT`                  \
            9:  `COLOR_CAPTIONTEXT`                 \
           10: `COLOR_ACTIVEBORDER`                 \
           11: `COLOR_INACTIVEBORDER`               \
           12: `COLOR_APPWORKSPACE`                 \
           13: `COLOR_HIGHLIGHT`                    \
           14: `COLOR_HIGHLIGHTTEXT`                \
           15: `COLOR_BTNFACE`                      \
           16: `COLOR_BTNSHADOW`                    \
           17: `COLOR_GRAYTEXT`                     \
           18: `COLOR_BTNTEXT`                      \
           19: `COLOR_INACTIVECAPTIONTEXT`          \
           20: `COLOR_BTNHIGHLIGHT`                 \
           21: `COLOR_3DDKSHADOW`                   \
           22: `COLOR_3DLIGHT`                      \
           23: `COLOR_INFOTEXT`                     \
           24: `COLOR_INFOBK`                       \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # SysKind (4 bytes):
    # 0x00000000 For 16-bit Windows Platforms.
    # 0x00000001 For 32-bit Windows Platforms.
    # 0x00000002 For Macintosh Platforms.
    # 0x00000003 For 64-bit Windows Platforms.
    #
    # oaidl.h
    #
    # typedef enum tagSYSKIND {
    #   SYS_WIN16 = 0,
    #   SYS_WIN32,
    #   SYS_MAC,
    #   SYS_WIN64
    # } SYSKIND;
    #
    # '}'
    _status = atom__declare(" \
    atom SysKind: uint32 {                          \
        map: {                                      \
            0: `For 16-bit Windows Platforms`       \
            1: `For 32-bit Windows Platforms`       \
            2: `For Macintosh Platforms`            \
            3: `For 64-bit Windows Platforms`       \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # VBA Signatures
    #
    _status = atom__declare(" \
                                                    \
    atom VBAMagic: uint16 {                         \
        map: {                                      \
             1: `PROJECTSYSKIND`                    \
             2: `PROJECTLCID`                       \
             3: `PROJECTCODEPAGE`                   \
             4: `PROJECTNAME`                       \
             5: `PROJECTDOCSTRING`                  \
             6: `PROJECTHELPFILE`                   \
             7: `PROJECTHELPCONTEXT`                \
             8: `PROJECTLIBFLAGS`                   \
             9: `PROJECTVERSION`                    \
            12: `PROJECTCONSTANTS`                  \
            15: `PROJECTMODULES`                    \
            16: `PROJECTTERMINATOR`                 \
            19: `PROJECTCOOKIE`                     \
            20: `PROJECTLCIDINVOKE`                 \
            22: `REFERENCENAME`                     \
            25: `MODULENAME`                        \
            26: `MODULESTREAMNAME`                  \
            28: `MODULEDOCSTRING`                   \
            30: `MODULEHELPCONTEXT`                 \
            33: `MODULETYPE_PROCEDUAL`              \
            34: `MODULETYPE_NONPROC`                \
            37: `MODULEREADONLY`                    \
            40: `MODULEPRIVATE`                     \
            43: `MODULETERMINATOR`                  \
            44: `MODULECOOKIE`                      \
            49: `MODULEOFFSET`                      \
            71: `MODULENAMEUNICODE`                 \
            74: `PROJECTCOMPATVERSION`              \
        }                                           \
    }                                               \
                                                    \
    atom VBAMagic::ReferenceType: uint16 {          \
        map: {                                      \
            13: `REFERENCEREGISTERED`               \
            14: `REFERENCEPROJECT`                  \
            47: `REFERENCECONTROL`                  \
            51: `REFERENCEORIGINAL`                 \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # VBA Signatures
    #
    _status = atom__declare(" \
    atom VBAMagic::Compression: uint16 {            \
        map: {                                      \
            1: `CompressedContainer`                \
            3: `CompressedChunk`                    \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # Clipboard Format
    #
    # 0x00000002 CF_BITMAP       Bitmap16 Object structure
    # 0x00000003 CF_METAFILEPICT Windows metafile
    # 0x00000008 CF_DIB          DeviceIndependentBitmap Object structure
    # 0x0000000E CF_ENHMETAFILE  Enhanced Metafile
    #
    _status = atom__declare(" \
    atom ClipboardFormat: uint32 {                                  \
        map: {                                                      \
            2: `CF_BITMAP(Bitmap16 Object structure)`               \
            3: `CF_METAFILEPICT(Windows metafile)`                  \
            8: `CF_DIB(DeviceIndependentBitmap Object structure)`   \
           14: `CF_ENHMETAFILE(Enhanced Metafile)`                  \
        }                                                           \
    }                                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.2.10.8 SITE_TYPE
    #
    # Specifies the type of an embedded control. MUST be set to 1.
    #
    # +----------------------------------
    # | Name   | Value | Meaning        |
    # +--------+-------+----------------+
    # | ST_Ole | 0x01  | An OLE control.|
    # +--------+-------+----------------+
    #
    _status = atom__declare(" \
    atom SITE_TYPE: uint8 {                         \
        map: {                                      \
            1: `ST_Ole`                             \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # [MS-OFORMS]
    # 2.5.50 MousePointer
    # 2.5.50.1 fmMousePointer
    #
    # fmMousePointerDefault     0x00 Standard pointer.
    # fmMousePointerArrow       0x01 Arrow.
    # fmMousePointerCross       0x02 Cross-hair pointer.
    # fmMousePointerIBeam       0x03 I-beam.
    # fmMousePointerSizeNESW    0x06 Double arrow pointing northeast and southwest.
    # fmMousePointerSizeNS      0x07 Double arrow pointing north and south.
    # fmMousePointerSizeNWSE    0x08 Double arrow pointing northwest and southeast.
    # fmMousePointerSizeWE      0x09 Double arrow pointing west and east.
    # fmMousePointerUpArrow     0x0A Up arrow.
    # fmMousePointerHourGlass   0x0B Hourglass.
    # fmMousePointerNoDrop      0x0C "Not" symbol (circle with a diagonal line)
    # fmMousePointerAppStarting 0x0D Arrow with an hourglass.
    # fmMousePointerHelp        0x0E Arrow with a question mark.
    # fmMousePointerSizeAll     0x0F "Size-all" cursor (arrows pointing north,
    #                                south, east, and west).
    # fmMousePointerCustom      0x63 Uses the icon specified by the MouseIcon property.
    #
    # '}'
    _status = atom__declare(" \
    atom fmMousePointer: uint8 {                    \
        map: {                                      \
            1: `fmMousePointerDefault`              \
            2: `fmMousePointerArrow`                \
            3: `fmMousePointerCross`                \
            6: `fmMousePointerIBeam`                \
            7: `fmMousePointerSizeNESW`             \
            8: `fmMousePointerSizeNS`               \
            9: `fmMousePointerSizeNWSE`             \
           10: `fmMousePointerSizeWE`               \
           11: `fmMousePointerUpArrow`              \
           12: `fmMousePointerHourGlass`            \
           13: `fmMousePointerNoDrop`               \
           14: `fmMousePointerAppStarting`          \
           15: `fmMousePointerHelp`                 \
           16: `fmMousePointerSizeAll`              \
           99: `fmMousePointerCustom`               \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # PictureAlignment (1 byte)
    #
    # [MS-OFORMS]
    # 2.5.63 PictureAlignment
    # 2.5.63.1 fmPictureAlignment
    #
    # An fmPictureAlignment that specifies the alignment of the picture in
    # the Form or Image. The file format default is 0x02,
    # fmPictureAlignmentCenter.
    #
    # fmPictureAlignmentTopLeft     0x00 The top-left corner.
    # fmPictureAlignmentTopRight    0x01 The top-right corner.
    # fmPictureAlignmentCenter      0x02 The center.
    # fmPictureAlignmentBottomLeft  0x03 The bottom-left corner.
    # fmPictureAlignmentBottomRight 0x04 The bottom-right corner.
    #
    _status = atom__declare(" \
    atom fmPictureAlignment: uint8 {                \
        map: {                                      \
            0: `fmPictureAlignmentTopLeft`          \
            1: `fmPictureAlignmentTopRight`         \
            2: `fmPictureAlignmentCenter`           \
            3: `fmPictureAlignmentBottomLeft`       \
            4: `fmPictureAlignmentBottomRight`      \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # fmIMEMode (4 bits)
    #
    # [MS-OFORMS] 2.5.96.2 fmIMEMode
    #
    # The following table specifies the values of this enumeration and their
    # meanings.
    #
    # fmIMEModeNoControl    0x0 Does not control IME.
    # fmIMEModeOn           0x1 IME on.
    # fmIMEModeOff          0x2 IME off. English mode.
    # fmIMEModeDisable      0x3 IME off. User cannot turn on IME by keyboard.
    # fmIMEModeHiragana     0x4 IME on with full-width hiragana mode.
    # fmIMEModeKatakana     0x5 IME on with full-width katakana mode.
    # fmIMEModeKatakanaHalf 0x6 IME on with half-width katakana mode.
    # fmIMEModeAlphaFull    0x7 IME on with full-width alphanumeric mode.
    # fmIMEModeAlpha        0x8 IME on with half-width alphanumeric mode.
    # fmIMEModeHangulFull   0x9 IME on with full-width Hangul mode.
    # fmIMEModeHangul       0xA IME on with half-width Hangul mode.
    # fmIMEModeHanziFull    0xB IME on with full-width hanzi mode.
    # fmIMEModeHanzi        0xC IME on with half-width hanzi mode.
    #
    _status = atom__declare(" \
    atom fmIMEMode: bits<4> {                       \
        map: {                                      \
            0: `fmIMEModeNoControl`                 \
            1: `fmIMEModeOn`                        \
            2: `fmIMEModeOff`                       \
            3: `fmIMEModeDisable`                   \
            4: `fmIMEModeHiragana`                  \
            5: `fmIMEModeKatakana`                  \
            6: `fmIMEModeKatakanaHalf`              \
            7: `fmIMEModeAlphaFull`                 \
            8: `fmIMEModeAlpha`                     \
            9: `fmIMEModeHangulFull`                \
           10: `fmIMEModeHangul`                    \
           11: `fmIMEModeHanziFull`                 \
           12: `fmIMEModeHanzi`                     \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # fmBackStyle (1 byte)
    #
    # [MS-OFFICEVBA] BackStyle property (Microsoft Forms)
    #
    # +-----------------------+-------+--------------------------------------+
    # | Constant              | Value | Description                          |
    # +-----------------------+-------+--------------------------------------+
    # | fmBackStyleTransparent| 0     | The background is transparent.       |
    # +-----------------------+-------+--------------------------------------+
    # | fmBackStyleOpaque     | 1     | The background is opaque (default).  |
    # +-----------------------+-------+--------------------------------------+
    #
    _status = atom__declare(" \
    atom fmBackStyle: bits<1> {                     \
        map: {                                      \
            0: `fmBackStyleTransparent`             \
            1: `fmBackStyleOpaque`                  \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # SpecialEffect property
    #
    # [MS-OFORMS] 2.5.80.1 fmSpecialEffect
    #
    # The following table specifies the values of this enumeration and
    # their meanings. In this enumeration, "form" refers to the surface
    # on which the control appears.
    #
    # +-----------------------+-------+--------------------------------------+
    # | Name                  | Value | Meaning                              |
    # +-----------------------+-------+--------------------------------------+
    # | fmSpecialEffectFlat   | 0x00  | Control appears flat.                |
    # +-----------------------+-------+--------------------------------------+
    # | fmSpecialEffectRaised | 0x01  | Control appears to be raised up from |
    # |                       |       | the form.                            |
    # +-----------------------+-------+--------------------------------------+
    # | fmSpecialEffectSunken | 0x02  | Control appears to be carved into    |
    # |                       |       | the form.                            |
    # +-----------------------+-------+--------------------------------------+
    # | fmSpecialEffectEtched | 0x03  | The control border appears to be     |
    # |                       |       | carved into the form.                |
    # +-----------------------+-------+--------------------------------------+
    # | fmSpecialEffectBump   | 0x06  | The control border appears to be     |
    # |                       |       | raised up from the form.             |
    # +-----------------------+-------+--------------------------------------+
    #
    _status = atom__declare(" \
    atom fmSpecialEffect: uint8 {                   \
        map: {                                      \
            0: `fmSpecialEffect`                    \
            1: `fmSpecialEffectRaised`              \
            2: `fmSpecialEffectSunken`              \
            3: `fmSpecialEffectEtched`              \
            6: `fmSpecialEffectBump`                \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.5.8.1 fmBorderStyle
    #
    # The following table specifies the values of the fmBorderStyle
    # enumeration and their meanings.
    #
    # +---------------------+-------+----------------------------------------+
    # | Name                | Value | Meaning                                |
    # +---------------------+-------+----------------------------------------+
    # | fmBorderStyleNone   | 0x00  | The control has no visible border line.|
    # +---------------------+-------+----------------------------------------+
    # | fmBorderStyleSingle | 0x01  | The control has a single-line border.  |
    # +---------------------+-------+----------------------------------------+
    #
    _status = atom__declare(" \
    atom fmBorderStyle: uint8 {                     \
        map: {                                      \
            0: `fmBorderStyleNone`                  \
            1: `fmBorderStyleSingle`                \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.5.64.1 fmPicturePosition
    #
    # The following table specifies the values of this enumeration and their
    # meanings.
    #
    # +------------------------------+------------+-----------------------------+
    # | Name                         | Value      | Meaning                     |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionLeftTop     | 0x00020000 | The picture appears to the  |
    # |                              |            | left of the caption. The    |
    # |                              |            | is caption aligned with     |
    # |                              |            | the top of the picture.     |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionLeftCenter  | 0x00050003 | The picture appears to the  |
    # |                              |            | left of the caption. The    |
    # |                              |            | caption is centered         |
    # |                              |            | relative to the picture.    |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionLeftBottom  | 0x00080006 | The picture appears to the  |
    # |                              |            | left of the caption. The    |
    # |                              |            | caption is aligned with the |
    # |                              |            | bottom of the picture.      |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionRightTop    | 0x00000002 | The picture appears to the  |
    # |                              |            | right of the caption. The   |
    # |                              |            | caption is aligned with the |
    # |                              |            | top of the picture.         |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionRightCenter | 0x00030005 | The picture appears to the  |
    # |                              |            | right of the caption. The   |
    # |                              |            | caption is centered         |
    # |                              |            | relative to the picture.    |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionRightBottom | 0x00060008 | The picture appears to the  |
    # |                              |            | right of the caption. The   |
    # |                              |            | caption is aligned with the |
    # |                              |            | bottom of the picture.      |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionAboveLeft   | 0x00060000 | The picture appears above   |
    # |                              |            | the caption. The caption is |
    # |                              |            | aligned with the left edge  |
    # |                              |            | of the picture.             |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionAboveCenter | 0x00070001 | The picture appears above   |
    # |                              |            | the caption. The caption is |
    # |                              |            | centered below the picture. |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionAboveRight  | 0x00080002 | The picture appears above   |
    # |                              |            | the caption. The caption is |
    # |                              |            | aligned with the right edge |
    # |                              |            | of the picture.             |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionBelowLeft   | 0x00000006 | The picture appears below   |
    # |                              |            | the caption. The caption is |
    # |                              |            | aligned with the left edge  |
    # |                              |            | of the picture.             |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionBelowCenter | 0x00010007 | The picture appears below   |
    # |                              |            | the caption. The caption is |
    # |                              |            | centered above the picture. |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionBelowRight  | 0x00020008 | The picture appears below   |
    # |                              |            | the caption. The caption is |
    # |                              |            | aligned with the right edge |
    # |                              |            | of the picture.             |
    # +------------------------------+------------+-----------------------------+
    # | fmPicturePositionCenter      | 0x00040004 | The picture appears in the  |
    # |                              |            | center of the control. The  |
    # |                              |            | caption is centered         |
    # |                              |            | horizontally and vertically |
    # |                              |            | above the picture.          |
    # +------------------------------+------------+-----------------------------+
    #
    _status = atom__declare(" \
    atom fmPicturePosition: uint8 {                 \
        map: {                                      \
            131072: `fmPicturePositionLeftTop`      \
            327683: `fmPicturePositionLeftCenter`   \
            524294: `fmPicturePositionLeftBottom`   \
                 2: `fmPicturePositionRightTop`     \
            196613: `fmPicturePositionRightCenter`  \
            393224: `fmPicturePositionRightBottom`  \
            393216: `fmPicturePositionAboveLeft`    \
            458753: `fmPicturePositionAboveCenter`  \
            524290: `fmPicturePositionAboveRight`   \
                 6: `fmPicturePositionBelowLeft`    \
             65543: `fmPicturePositionBelowCenter`  \
            131080: `fmPicturePositionBelowRight`   \
            262148: `fmPicturePositionCenter`       \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.5.29.2 fmFontPitch
    #
    # The following table specifies the values of the fmFontPitch enumeration and
    # their meanings.
    #
    # +----------------+-------+------------------------------------------------+
    # | Name           | Value | Meaning                                        |
    # +----------------+-------+------------------------------------------------+
    # | DEFAULT_PITCH  | 0x0   | Does not specify a character pitch. Behavior   |
    # |                |       | is determined by the client application using  |
    # |                |       | this field.                                    |
    # +----------------+-------+------------------------------------------------+
    # | FIXED_PITCH    | 0x1   | All characters have the same width.            |
    # +----------------+-------+------------------------------------------------+
    # | VARIABLE_PITCH | 0x2   | Characters have varying widths.                |
    # +----------------+-------+------------------------------------------------+
    #
    _status = atom__declare(" \
    atom fmFontPitch: bits<4> {                     \
        map: {                                      \
            0: `DEFAULT_PITCH`                      \
            1: `FIXED_PITCH`                        \
            2: `VARIABLE_PITCH`                     \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.5.29.3 fmFontFamily
    #
    # The following table specifies the values of the fmFontFamily enumeration and
    # their meanings.
    #
    # +----------------+-------+------------------------------------------------+
    # | Name           | Value | Meaning                                        |
    # +----------------+-------+------------------------------------------------+
    # | FF_DONTCARE    | 0x0   | Specifies that the default font is used.       |
    # +----------------+-------+------------------------------------------------+
    # | FF_ROMAN       | 0x1   | Specifies that fonts with variable stroke      |
    # |                |       | width (proportional) and with serifs are used. |
    # +----------------+-------+------------------------------------------------+
    # | FF_SWISS       | 0x2   | Specifies that fonts with variable stroke      |
    # |                |       | width (proportional) and without serifs are    |
    # |                |       | used.                                          |
    # +----------------+-------+------------------------------------------------+
    # | FF_MODERN      | 0x3   | Specifies that fonts with constant stroke      |
    # |                |       | width (monospace), with or without serifs are  |
    # |                |       | used.                                          |
    # +----------------+-------+------------------------------------------------+
    # | FF_SCRIPT      | 0x4   | Specifies that fonts designed to look like     |
    # |                |       | handwriting are used.                          |
    # +----------------+-------+------------------------------------------------+
    # | FF_DECORATIVE  | 0x5   | Specifies that novelty fonts are used.         |
    # +----------------+-------+------------------------------------------------+
    #
    _status = atom__declare(" \
    atom fmFontFamily: bits<4> {                    \
        map: {                                      \
            0: `FF_DONTCARE`                        \
            1: `FF_ROMAN`                           \
            2: `FF_SWISS`                           \
            3: `FF_MODERN`                          \
            4: `FF_SCRIPT`                          \
            5: `FF_DECORATIVE`                      \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # charset from wingdi.h
    #
    _status = atom__declare(" \
    atom gdiFontCharset: uint8 {                    \
        map: {                                      \
            0: `ANSI_CHARSET`                       \
            1: `DEFAULT_CHARSET`                    \
            2: `SYMBOL_CHARSET`                     \
           77: `MAC_CHARSET`                        \
          128: `SHIFTJIS_CHARSET`                   \
          129: `HANGEUL_CHARSET`                    \
          129: `HANGUL_CHARSET`                     \
          130: `JOHAB_CHARSET`                      \
          134: `GB2312_CHARSET`                     \
          136: `CHINESEBIG5_CHARSET`                \
          161: `GREEK_CHARSET`                      \
          162: `TURKISH_CHARSET`                    \
          163: `VIETNAMESE_CHARSET`                 \
          177: `HEBREW_CHARSET`                     \
          178: `ARABIC_CHARSET`                     \
          186: `BALTIC_CHARSET`                     \
          204: `RUSSIAN_CHARSET`                    \
          222: `THAI_CHARSET`                       \
          238: `EASTEUROPE_CHARSET`                 \
          255: `OEM_CHARSET`                        \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # [MS-OFORMS] 2.5.60.1 PARAFORMAT_Alignment
    #
    # The following table specifies the values of this enumeration and their
    # meanings.
    #
    # +------------+-------+----------------------------------------------------+
    # | Name       | Value | Meaning                                            |
    # +------------+-------+----------------------------------------------------+
    # | PFA_LEFT   | 0x01  | The text used by the control is aligned to the     |
    # |            |       | left.                                              |
    # +------------+-------+----------------------------------------------------+
    # | PFA_RIGHT  | 0x02  | The text used by the control is aligned to the     |
    # |            |       | right.                                             |
    # +------------+-------+----------------------------------------------------+
    # | PFA_CENTER | 0x03  | The text used by the control is aligned to the     |
    # |            |       | center.                                            |
    # +------------+-------+----------------------------------------------------+
    #
    _status = atom__declare(" \
    atom PARAFORMAT_Alignment: uint8 {              \
        map: {                                      \
            1: `PFA_LEFT`                           \
            2: `PFA_RIGHT`                          \
            3: `PFA_CENTER`                         \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # fmClickControlMode (1 byte)
    #
    # [MS-OFORMS] 2.5.12.1 fmClickControlMode
    #
    # fmClickControlModeInherit          0xFE  Use the same value as the
    #                                          client application design-time settings.
    # fmClickControlModeDefault          0xFF  Use the client application default value.
    # fmClickControlModeInsertionPoint   0x00  Select the control under the cursor, and
    #                                          set the insertion point under the cursor,
    #                                          both on the same click.
    # fmClickControlModeSelectThenInsert 0x01  If the control under the cursor is
    #                                          already selected, set the insertion
    #                                          point under the cursor; otherwise,
    #                                          select the control.
    _status = atom__declare(" \
    atom fmClickControlMode: int8 {                 \
        map: {                                      \
           -2: `fmClickControlModeInherit`          \
           -1: `fmClickControlModeDefault`          \
            0: `fmClickControlModeInsertionPoint`   \
            1: `fmClickControlModeSelectThenInsert` \
        }                                           \
    }                                               \
    ");
    if (_status < 0) {
        return _status;
    }

    #
    # fmDblClickControlMode (1 byte)
    #
    # [MS-OFORMS] 2.5.18.1 fmDblClickControlMode
    #
    # fmDblClickControlModeInherit        0xFE Use the same value as the client
    #                                          application design-time settings.
    # fmDblClickControlModeSelectText     0x00 Select any text that is under the
    #                                          cursor.
    # fmDblClickControlModeEditCode       0x01 Display and set focus to the code
    #                                          associated with the control that
    #                                          is under the cursor.
    # fmDblClickControlModeEditProperties 0x02 Display the properties of the
    #                                          control that is under the cursor.
    _status = atom__declare(" \
    atom fmDblClickControlMode: int8 {                  \
        map: {                                          \
           -2: `fmDblClickControlModeInherit`           \
            0: `fmDblClickControlModeSelectText`        \
            1: `fmDblClickControlModeEditCode`          \
            2: `fmDblClickControlModeEditProperties`    \
        }                                               \
    }                                                   \
    ");
    if (_status < 0) {
        return _status;
    }

    __astore__S_hash["/"];
    __astore__class_init();

    __astore__init_guard = 1;

    return (0);
}
# }}}
# {{{ @class astore, a hierarchical property store (astore)
# '${__pp_comment:+'
#
# @interface
# - create
# - branch
# - chdir
# - set
# - get
# - has
# - enum_reset
# - enum_next
# - enum_end
# - build_from_xmlstream
# - pretty_print
#
# The property store object (astore) is an extension of an associative array
# that stores scalar values, with its keys restricted to path expressions.
# In reality, it is simply a facade to the global singleton array
# "__astore__S_hash", and by forcing access to this array to follow certain
# rules, it provides functionality such as directory scanning, type checking,
# and stringification according to a format.
#
# This object was created with the aim of creating a tree-structured data
# store in AWK. gawk (GNU AWK) has a function called multiarray that can
# represent tree structures, but using this function significantly reduces
# portability. Therefore, we have achieved the same functionality by adding
# an index for each path separator to a normal associative array.
#
#
# The substance of a property store object is just an array.
#
# It has only the following two member elements.
#
#   - Working directory (__astore__M_workdir, index 1)
#
#   - Enumeration iterator (__astore__M_enum_it, index 2)
#
# The working directory is the base path when an operation by relative path
# is specified. The enumeration iterator is used by the enumeration functions
# (astore__enum_next, astore__enum_end) as a value indicating the current
# enumeration position.
#
# To create an object, use astore__new() or astore__fork(). astore__new()
# only accepts absolute paths, while astore__fork can accept both absolute
# and relative path expressions. astore__set() is used to set a value,
# and astore__get() does the reverse, to reference a value.
#
# The path expression is a slightly restricted and extended version of the
# format used in normal UNIX file systems, and is defined by the following EBNF:
#
#    <qualified-absolute-path>      ::= "/" [ <qualified-path-components> ]
#
#    <qualified-relative-path>      ::= <qualified-path-components>
#
#    <qualified-path>               ::= <qualified-absolute-path> | <qualified-relative-path>
#
#    <qualified-path-components>    ::= <qualified-component> { "/" <qualified-component> }
#
#    <qualified-component>          ::= <name> | <typed-name> | "." | ".."
#
#    <typed-name>                   ::= <name> "::" <type-qualifier>
#
#    <name>                         ::= <name-char> { <name-char> }
#
#    <name-char>                    ::= <printable-char> - `/` - `:`
#
#    <printable-char>               ::= ? character range in [0x21-0x7E] ?
#
# Note that a <typed-name> beginning with "::" is introduced within the
# components separated by the path separator ("/"). This is a type modifier,
# and is used to determine the validation process performed during
# astore__set() processing and the format in which the value is displayed
# by astore__pretty_print(). The type modifier operator "::" and the type
# modifiers below it are removed from the normalized path in which the value
# is actually stored, and are stored in a different location from the type
# modifiers. In addition, the directory traversal index that is implicitly
# created when the value is set is also created in a different location
# from the path in which the value is stored.
#
# The normalized path format in which astore__set() actually stores
# information is shown below.
#
#    <index-information-path>       ::= <absolute-path> "/"
#
#    <type-information-path>        ::= <absolute-path> "::"
#
#    <absolute-path>                ::= "/" [ <path-components> ]
#
#    <path-components>              ::= <component> { "/" <component> }
#
#    <component>                    ::= <name> | "." | ".."
#
# As mentioned above, in the normalized path expression, the type-qualified
# <typed-name> is removed and replaced with a format that uses only <name>.
# The value set by the second argument of astore__set() is stored in __astore__S_hash
# with <absolute-path> as the key.
#
# In addition, the implicitly generated directory index information is stored
# in <index-information-path>, which is the absolute path of each directory
# with "/" added.
#
# If a type modifier is set for the path using the first argument to
# astore__set(), the type information is stored in __astore__S_hash using the
# <type-information-path>, which is the <absolute-path> that stores that value
# with "::" appended, as the key.
#
# '}'
# {{{ (private)::astore::class_init
function \
__astore__class_init() {
    # member functions
    __astore__M_workdir = 1;
    __astore__M_enum_it = 2;
}
# }}}
# {{{ (private)::astore::path_canonicalize
function \
__astore__path_canonicalize(key) {
    #
    # The backreference feature of regular expressions is not a POSIX standard,
    # and the environments in which it can actually be used are limited, so we
    # use it as an alternative by repeatedly applying match() and substr() to a
    # single string.
    #
    while (match(key, /\/[^\/\.]*\/\.\.(\/|$)|\/\.(\/|$)|\/\/|\/$/)) {
        if (RSTART + RLENGTH - 1 >= length(key)) {
            key = substr(key, 1, RSTART - 1);
        } else {
            key = substr(key, 1, RSTART - 1) substr(key, RSTART + RLENGTH - 1);
        }
    }
    return key;
}
# '${__pp_ut__:+"$(__pp_ut__ <<< '
function \
__pp_ut____astore__path_canonicalize(ut) {
    - __astore__path_canonicalize("a/b/c/..") == "a/b";
    - __astore__path_canonicalize("/b/c/../d") == "/b/d";
    - __astore__path_canonicalize("a/b/c/.") == "a/b/c";
    - __astore__path_canonicalize("/b/c/.d") == "/b/c/.d";
    - __astore__path_canonicalize("a/b/c/./d") == "a/b/c/d";
    - __astore__path_canonicalize("/b/c/") == "/b/c";
    - __astore__path_canonicalize("a/b//c") == "a/b/c";
    - __astore__path_canonicalize("/b/c//") == "/b/c";
}
# ')"}'
# }}}
# {{{ astore::new
function \
astore__new( \
    store, key, \
    \
    _base \
) {
    #=# '${__pp_debug_assert:+"$(cut -d\# -f3-<<<'
    #=#     ASSERT(index(key, "/") == 1);
    #=# ')"}'

    key = __astore__path_canonicalize(key);

    # store type qualifiers
    while (match(key, /::[^\/]+/)) {
        _base = substr(key, 1, RSTART - 1);
        __astore__S_hash[_base "::"] = substr(key, RSTART + 2, RLENGTH - 2);
        key = _base substr(key, RSTART + RLENGTH);
    }

    store[__astore__M_workdir] = key;
    store[__astore__M_enum_it] = 0;
}
# }}}
# {{{ astore::fork
function \
astore__fork(store, key, newstore) {
    astore__new(newstore, store[__astore__M_workdir] "/" key);
}
# }}}
# {{{ astore::chdir
function \
astore__chdir(store, key) {
    if (index(key, "/") == 1) {
        store[__astore__M_workdir] = key;
    } else {
        store[__astore__M_workdir] \
            = __astore__path_canonicalize(store[__astore__M_workdir] "/" key);
    }
}
# }}}
# {{{ astore::set
function \
astore__set( \
    store, key, val, valid_arg, \
    \
    _base, _path, \
    _leaf, _dir, _type, _target, \
    _ret, _dir_index_path, _branch_index_path, \
    _pos, _t, _status \
) {
    _base = store[__astore__M_workdir];

    # make full path
    if (index(key, "/") == 1) {  # key is absolute path
        _path = key;
    } else {  # key is relative path
        _path = _base "/" key;
    }

    # canonicalize
    _path = __astore__path_canonicalize(_path);

    # extract type qualifiers
    while (match(_path, /::[^\/]+/)) {
        _target = substr(_path, 1, RSTART - 1);
        _type = substr(_path, RSTART + 2, RLENGTH - 2);
        sub("%", valid_arg, _type);
        __astore__S_hash[_target "::"] = _type;
        _path = _target substr(_path, RSTART + RLENGTH);
        # instantiate
        _pos = index(_type, ",");
        _t = _pos > 0 ? substr(_type, 1, _pos - 1): _type;
        _status = __atom__instantiate(_t);
        if (_status < 0) {
            return _status;
        }
        # validate
        if ((_ret = atom__validate(_type, val, valid_arg)) < 0) {
            E__message = sprintf( \
               "astore__set() failed, path: %s, %s", \
               _path, E__message);
            return _ret;
        }
    }

    match(_path, /^.*\//);
    _dir = substr(_path, 1, RLENGTH - 1);
    _leaf = substr(_path, RLENGTH + 1);
    __astore__S_hash[_path] = val;

    _branch_index_path = _dir "/";
    if (_branch_index_path in __astore__S_hash) {
        __astore__S_hash[_branch_index_path] \
           = __astore__S_hash[_branch_index_path] _leaf "/";
    } else {
        __astore__S_hash[_branch_index_path] = _leaf "/";
    }
    while (match(_dir, /^.*\//)) {
        _leaf = substr(_dir, RLENGTH + 1);
        _dir = substr(_dir, 1, RLENGTH - 1);
        _dir_index_path = _dir "/"
        if (! (_dir_index_path in __astore__S_hash)) {
            __astore__S_hash[_dir_index_path] = _leaf "/";
        } else if (index(__astore__S_hash[_dir_index_path], "/" _leaf "/") == 0 && \
                   index(__astore__S_hash[_dir_index_path], _leaf "/") != 1) {
            __astore__S_hash[_dir_index_path] \
                = __astore__S_hash[_dir_index_path] _leaf "/";
        } else {
            break;
        }
    }

    return (0);
}
# }}}
# {{{ astore::get
function \
astore__get(store, key,    _path) {
    key = __astore__path_canonicalize(key);
    if (index(key, "/") == 1) {
        _path = __astore__path_canonicalize(key);
    } else {
        _path = __astore__path_canonicalize(store[__astore__M_workdir] "/" key);
    }
    if (_path in __astore__S_hash) {
        return __astore__S_hash[_path];
    }

    return;
}
# }}}
# {{{ astore::has
function \
astore__has(store, key,    _path) {
    if (index(key, "/") == 1) {
        _path = __astore__path_canonicalize(key);
    } else {
        _path = __astore__path_canonicalize(store[__astore__M_workdir] "/" key);
    }
    return _path in __astore__S_hash || (_path "/") in __astore__S_hash;
}
# }}}
# {{{ astore::enum_reset
function \
astore__enum_reset(store) {
    store[__astore__M_enum_it] = 0;
}
# }}}
# {{{ astore::enum_next
function \
astore__enum_next(store,    _base, _arr) {
    _base = store[__astore__M_workdir];
    split(__astore__S_hash[_base "/"], _arr, "/");
    return _arr[++store[__astore__M_enum_it]];
}
# }}}
# {{{ astore::enum_end
function \
astore__enum_end(store,    _base, _arr) {
    _base = store[__astore__M_workdir];
    # ex. __astore__S_hash[_base "/"] -> "filea/fileb/filec/"
    split(__astore__S_hash[_base "/"], _arr, "/");
    # ex. _arr -> "filea", "fileb", "filec", ""
    return ! (store[__astore__M_enum_it] + 2 in _arr);
}
# }}}
# {{{ astore::pretty_print
function \
astore__pretty_print( \
    store, key, indent, verbose, \
    \
    _keys, _i, _dir, _comp, \
    _index, _path, _type, _v, _count, _key \
) {
    if (index(key, "/") == 1) {
        _dir = key;
    } else {
        _dir = store[__astore__M_workdir] (key == "" ? "": "/" key);
    }
    _dir = __astore__path_canonicalize(_dir);
    if (indent == "") {
        split(_dir, _comp, "/");
        _count = length(_comp);
        for (_i = 2; _i <= _count; ++_i) {
            printf("%s%s -> (nested array)\n", indent, _comp[_i]);
            indent = "    " indent;
        }
    }
    _index = __astore__S_hash[_dir "/"];
    split(_index, _keys, "/");
    _count = length(_keys) - 1;
    for (_i = 1; _i <= _count; ++_i) {
        _key = _keys[_i];
        _path = _dir "/" _key;
        if (_path in __astore__S_hash) {
            _v = __astore__S_hash[_path];
            if (_path "::" in __astore__S_hash) {
                if (verbose) {
                    _type = __astore__S_hash[_path "::"];
                    printf( \
                        "%s[%s::%s] = %s\n", \
                        indent, _key, _type, atom__tostring(_type, _v));
                } else {
                    printf( \
                        "%s[%s] = %s\n", \
                        indent, _key, atom__tostring(_type, _v));
                }
            } else {
                printf("%s[%s] = %s\n", indent, _key, _v);
            }
        } else {
            if (_path "::" in __astore__S_hash) {
                if (verbose) {
                    _type = __astore__S_hash[_path "::"];
                    printf("%s[%s::%s] -> (nested array)\n", indent, _key, _type);
                } else {
                    printf("%s[%s] -> (nested array)\n", indent, _key);
                }
            } else {
                printf("%s[%s] -> (nested array)\n", indent, _key);
            }
            if (key == "") {
                astore__pretty_print(store, _key, indent "    ", verbose);
            } else {
                astore__pretty_print(store, key "/" _key, indent "    ", verbose);
            }
        }
    }

    return (0);
}
# }}}
# }}}
# }}}
# {{{ @module struct, a binary packer/unpacker
#
# @heapclass struct
# - declare
# - unpack
#
#    +-----------------+
#    |      <int>      |
#    |     n_params    |
#    +-----------------+
#    |      <map>      |
#    |      params     |
#    +-----------------+
#    |      <map>      |
#    |      rmap       |
#    +-----------------+
#    |      <map>      |
#    |     members     |
#    +-----------------+
#
# {{{ struct::init
function \
struct__init(    _status) {

    if (__struct__init_guard) {
        return (1);
    }

    # required modules
    _status = cell__init();
    if (_status < 0) {
        return _status;
    }
    _status = astore__init();
    if (_status < 0) {
        return _status;
    }
    _status = struct__type__init();
    if (_status < 0) {
        return _status;
    }

    # scanner state IDs
    __struct__C_sym_lst[__struct__C_lst_neutral    = 1] = "neutral";
    __struct__C_sym_lst[__struct__C_lst_word       = 2] = "word";
    __struct__C_sym_lst[__struct__C_lst_path       = 3] = "path";
    __struct__C_sym_lst[__struct__C_lst_operator   = 4] = "operator";
    __struct__C_sym_lst[__struct__C_lst_digits     = 5] = "digits";
    __struct__C_sym_lst[__struct__C_lst_comment    = 6] = "comment";

    # token IDs
    __struct__C_sym_tok[__struct__C_tok_struct     =  1] = "struct";
    __struct__C_sym_tok[__struct__C_tok_digits     =  2] = "digits";
    __struct__C_sym_tok[__struct__C_tok_identifier =  3] = "identifier";
    __struct__C_sym_tok[__struct__C_tok_path       =  4] = "identifier";
    __struct__C_sym_tok[__struct__C_tok_variable   =  5] = "variable";
    __struct__C_sym_tok[__struct__C_tok_langle     =  6] = "langle";
    __struct__C_sym_tok[__struct__C_tok_rangle     =  7] = "rangle";
    __struct__C_sym_tok[__struct__C_tok_lbrace     =  8] = "lbrace";
    __struct__C_sym_tok[__struct__C_tok_rbrace     =  9] = "rbrace";
    __struct__C_sym_tok[__struct__C_tok_pipe       = 10] = "pipe";
    __struct__C_sym_tok[__struct__C_tok_dblcolon   = 11] = "dblcolon";
    __struct__C_sym_tok[__struct__C_tok_not        = 12] = "not";
    __struct__C_sym_tok[__struct__C_tok_lparen     = 13] = "lparen";
    __struct__C_sym_tok[__struct__C_tok_rparen     = 14] = "rparen";
    __struct__C_sym_tok[__struct__C_tok_quote      = 15] = "quote";
    __struct__C_sym_tok[__struct__C_tok_comma      = 16] = "comma";
    __struct__C_sym_tok[__struct__C_tok_block      = 17] = "block";
    __struct__C_sym_tok[__struct__C_tok_exists     = 18] = "exists";
    __struct__C_sym_tok[__struct__C_tok_aligned    = 19] = "aligned";
    __struct__C_sym_tok[__struct__C_tok_with       = 20] = "with";
    __struct__C_sym_tok[__struct__C_tok_must       = 21] = "must";
    __struct__C_sym_tok[__struct__C_tok_only       = 22] = "only";
    __struct__C_sym_tok[__struct__C_tok_if         = 23] = "if";
    __struct__C_sym_tok[__struct__C_tok_always     = 24] = "always";
    __struct__C_sym_tok[__struct__C_tok_be         = 25] = "be";
    __struct__C_sym_tok[__struct__C_tok_by         = 26] = "by";
    __struct__C_sym_tok[__struct__C_tok_on         = 27] = "on";
    __struct__C_sym_tok[__struct__C_tok_variable   = 28] = "variable";
    __struct__C_sym_tok[__struct__C_tok_boundary   = 29] = "boundary";
    __struct__C_sym_tok[__struct__C_tok_as         = 30] = "as";
    __struct__C_sym_tok[__struct__C_tok_sized      = 31] = "sized";


    # parser state
    __struct__C_sym_pst[__struct__C_pst_neutral                    =  0] = "neutral";
    __struct__C_sym_pst[__struct__C_pst_struct                     =  1] = "struct_name";
    __struct__C_sym_pst[__struct__C_pst_struct_name                =  2] = "struct_name_x";
    __struct__C_sym_pst[__struct__C_pst_struct_name_langle         =  3] = "struct_name_langle";
    __struct__C_sym_pst[__struct__C_pst_struct_name_arg            =  4] = "struct_name_arg";
    __struct__C_sym_pst[__struct__C_pst_struct_name_comma          =  5] = "struct_name_comma";
    __struct__C_sym_pst[__struct__C_pst_struct_name_rangle         =  6] = "struct_name_rangle";
    __struct__C_sym_pst[__struct__C_pst_struct_open                =  7] = "struct_open";
    __struct__C_sym_pst[__struct__C_pst_struct_identifier          =  8] = "struct_identifier";
    __struct__C_sym_pst[__struct__C_pst_struct_dblcolon            =  9] = "struct_dblcolon";
    __struct__C_sym_pst[__struct__C_pst_struct_type                = 10] = "struct_type";
    __struct__C_sym_pst[__struct__C_pst_struct_comma               = 11] = "struct_comma";
    __struct__C_sym_pst[__struct__C_pst_struct_validator           = 12] = "struct_validator";
    __struct__C_sym_pst[__struct__C_pst_struct_validator_lparen    = 13] = "struct_validator_lparen";
    __struct__C_sym_pst[__struct__C_pst_struct_validator_arg       = 14] = "struct_validator_arg";
    __struct__C_sym_pst[__struct__C_pst_struct_validator_rparen    = 15] = "struct_validator_rparen";
    __struct__C_sym_pst[__struct__C_pst_struct_member              = 16] = "struct_member";
    __struct__C_sym_pst[__struct__C_pst_struct_member_langle       = 17] = "struct_member_langle";
    __struct__C_sym_pst[__struct__C_pst_struct_member_arg          = 18] = "struct_member_arg";
    __struct__C_sym_pst[__struct__C_pst_struct_member_comma        = 19] = "struct_member_comma";
    __struct__C_sym_pst[__struct__C_pst_struct_member_rangle       = 20] = "struct_member_rangle";
    __struct__C_sym_pst[__struct__C_pst_struct_exists              = 21] = "struct_exists";
    __struct__C_sym_pst[__struct__C_pst_struct_exists_only         = 22] = "struct_exists_only";
    __struct__C_sym_pst[__struct__C_pst_struct_exists_only_if      = 23] = "struct_exists_only_if";
    __struct__C_sym_pst[__struct__C_pst_struct_exists_only_if_not  = 24] = "struct_exists_only_if_not";
    __struct__C_sym_pst[__struct__C_pst_struct_aligned             = 25] = "struct_aligned";
    __struct__C_sym_pst[__struct__C_pst_struct_aligned_on          = 26] = "struct_aligned_on";
    __struct__C_sym_pst[__struct__C_pst_struct_aligned_on_boundary = 27] = "struct_aligned_on_boundary";
    __struct__C_sym_pst[__struct__C_pst_struct_with                = 28] = "struct_with";
    __struct__C_sym_pst[__struct__C_pst_struct_with_variable       = 29] = "struct_with_variable";
    __struct__C_sym_pst[__struct__C_pst_struct_with_variable_x     = 30] = "struct_with_variable_x";
    __struct__C_sym_pst[__struct__C_pst_struct_with_variable_x_as  = 31] = "struct_with_variable_x_as";
    __struct__C_sym_pst[__struct__C_pst_struct_block               = 32] = "struct_block";
    __struct__C_sym_pst[__struct__C_pst_struct_block_end           = 33] = "struct_block_end";
    __struct__C_sym_pst[__struct__C_pst_struct_block_end_sized     = 34] = "struct_block_end_sized";
    __struct__C_sym_pst[__struct__C_pst_struct_block_end_sized_by  = 35] = "struct_block_end_sized_by";
    __struct__C_sym_pst[__struct__C_pst_struct_must_be_x           = 36] = "struct_must_be_x";
    __struct__C_sym_pst[__struct__C_pst_struct_must_be_x_if        = 37] = "struct_must_be_x_if";
    __struct__C_sym_pst[__struct__C_pst_struct_must_be_x_if_not    = 38] = "struct_must_be_x_if_not";

    __struct__init_guard = 1;

    return (0);
}
# }}}
# {{{ struct::declare
function \
struct__declare( \
    def, \
    \
    _status, _tokens \
) {
    _status = __struct__scan(def, _tokens);
    if (_status < 0) {
        return _status;
    }

    _status = __struct__parse(def, _tokens);
    if (_status < 0) {
        return _status;
    }

    return (0);
}
# }}}
# {{{ (private)::struct::scan
#
# a Token has the following layout
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |       Id        |                  Position                 | |
# +-----------------+-----------------------+-------------------+-+
# |                Piece ID                 |
# +-----------------------------------------+
#
# Id (9 bits):
#    token ID
#
# Position (22 bits):
#    the position in source
#
# Piece ID (22 bits):
#    a GOT reference of a piece string
#
function \
__struct__scan( \
    src, tokens, \
    \
    _chars, _count, _scanner_state, _c, _stack, \
    _v, _i, _s, _pos, _addr, _id \
) {
    _scanner_state = __struct__C_lst_neutral;

    # stack
    _stack[0] = 0;

    # split into characters, an EOF mark \0 is added.
    _count = split(src "\0", _chars, "");

    # {{{
    for (_i = 1; _i <= _count; ++_i) {
        _c = str__ord[_chars[_i]];
#        print "_scanner_state: " addr__deref(_scanner_state) ", c: " _c ", i: ", _i " / " _count, "stack: ", _stack[0], "\n" substr(src, _i - 10, 20), "\n          ^";

        if (_scanner_state == __struct__C_lst_neutral) {
            # {{{
            if (_c <= 32) {
                # _skip
            } else if (_c == 40) {  # (
                _id = __struct__C_tok_lparen;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 41) {  # )
                _id = __struct__C_tok_rparen;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 44) {  # ,
                _id = __struct__C_tok_comma;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 47) {  # /
                if (_i == _count) {
                    break;
                }
                _c = str__ord[_chars[++_i]];
                if (_c != 42) {  # *
                    break;
                }
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _scanner_state = __struct__C_lst_comment;
            } else if (_c == 45 || _c >= 48 && _c <= 57) {  # digits
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_digits;
            } else if (_c == 58) {  # : < >
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _c;  # push current char
                _scanner_state = __struct__C_lst_operator;
            } else if (_c == 60) {  # <
                _id = __struct__C_tok_langle;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 62) {  # >
                _id = __struct__C_tok_rangle;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 46) {  # "."
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_path;
            } else if ((_c >= 65 && _c <= 90) || \
                       _c == 95 || (_c >= 97 && _c <= 122)) {  # alpha or "_"
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_word;
            } else if (_c == 96) {  # backquote
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_quote;
            } else if (_c == 123) {  # {
                _id = __struct__C_tok_lbrace;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 124) {  # |
                _id = __struct__C_tok_pipe;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else if (_c == 125) {  # }
                _id = __struct__C_tok_rbrace;
                tokens[++tokens[0]] = cell__new(_id, _i, 0);
            } else {
                break;
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_word) {
            # {{{
            if ((_c < 48 || _c > 57) && (_c < 65 || _c > 90) && \
                (_c != 95) && (_c < 97 || _c > 122)) {  # not identifier chars
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos, --_i);
                # check if current token is a keyword
                if (_s == "struct") {
                    _id = __struct__C_tok_struct;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "block") {
                    _id = __struct__C_tok_block;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "exists") {
                    _id = __struct__C_tok_exists;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "aligned") {
                    _id = __struct__C_tok_aligned;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "with") {
                    _id = __struct__C_tok_with;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "must") {
                    _id = __struct__C_tok_must;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "only") {
                    _id = __struct__C_tok_only;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "if") {
                    _id = __struct__C_tok_if;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "always") {
                    _id = __struct__C_tok_always;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "be") {
                    _id = __struct__C_tok_be;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "by") {
                    _id = __struct__C_tok_by;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "on") {
                    _id = __struct__C_tok_on;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "variable") {
                    _id = __struct__C_tok_variable;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "boundary") {
                    _id = __struct__C_tok_boundary;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "as") {
                    _id = __struct__C_tok_as;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else if (_s == "sized") {
                    _id = __struct__C_tok_sized;
                    tokens[++tokens[0]] = cell__new(_id, _pos, 0);
                } else {  # identifier
                    _addr = addr__ref(_s);
                    if (_addr < 0) {
                        break;
                    }
                    _id = __struct__C_tok_identifier;
                    tokens[++tokens[0]] = cell__new(_id, _pos, _addr);
                }
                _scanner_state = _stack[_stack[0]--];
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_operator) {
            # {{{
            if (_c == 58) {  # :
                _c = _stack[_stack[0]--];
                if (_c == 58) {
                    _id = __struct__C_tok_dblcolon;
                    tokens[++tokens[0]] = cell__new(_id, _i - 1, 0);
                } else {
                    break;
                }
            } else if (_c == 61) {  # =
                _c = _stack[_stack[0]--];
                if (_c == 60) {  # <
                    _id = __struct__C_tok_le;
                    tokens[++tokens[0]] = cell__new(_id, _i - 1, 0);
                } else if (_c == 62) {  # >
                    _id = __struct__C_tok_ge;
                    tokens[++tokens[0]] = cell__new(_id, _i - 1, 0);
                } else {
                    break;
                }
            } else {
                _c = _stack[_stack[0]--];
                if (_c == 60) {  # <
                    _id = __struct__C_tok_lt;
                    tokens[++tokens[0]] = cell__new(_id, _i, 0);
                } else if (_c == 62) {  # >
                    _id = __struct__C_tok_gt;
                    tokens[++tokens[0]] = cell__new(_id, _i, 0);
                } else {
                    break;
                }
                --_i;  # backtrack
            }
            _scanner_state = _stack[_stack[0]--];
            # }}}
        } else if (_scanner_state == __struct__C_lst_digits) {
            # {{{
            if (_c < 48 || _c > 57) {  # not digits
                _pos = _stack[_stack[0]--];
                _s = + str__binary_join(_chars, _pos, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __struct__C_tok_digits;
                tokens[++tokens[0]] = cell__new(_id, _pos, _addr);
                if (_c == 62) {  # >
                    _id = __struct__C_tok_rangle;
                    tokens[++tokens[0]] = cell__new(_id, _i, 0);
                } else {
                    --_i;
                }
                _scanner_state = _stack[_stack[0]--];
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_path) {
            # {{{
            if ((_c < 46 || _c > 57) && (_c < 65 || _c > 90) && \
                (_c != 95) && (_c < 97 || _c > 122)) {  # not path chars
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __struct__C_tok_path;
                tokens[++tokens[0]] = cell__new(_id, _pos, _addr);
                _scanner_state = _stack[_stack[0]--];
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_quote) {
            # {{{
            if (_c == 96) {  # backquote
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos + 1, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __struct__C_tok_quote;
                tokens[++tokens[0]] = cell__new(_id, _pos, _addr);
                _scanner_state = __struct__C_lst_neutral;
            } else if (_c == 123) {  # {
                _pos = _stack[_stack[0]--];
                _s = str__binary_join(_chars, _pos + 1, _i - 1);
                _addr = addr__ref(_s);
                if (_addr < 0) {
                    break;
                }
                _id = __struct__C_tok_quote;
                tokens[++tokens[0]] = cell__new(_id, _pos, _addr);
                _id = __struct__C_tok_lbrace;
                tokens[++tokens[0]] = cell__new(_id, _i, _addr);
                _scanner_state = __struct__C_lst_expr;
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_comment) {
            # {{{
            if (_c == 42) {  # *
                if (_i == _count) {
                    break;
                }
                _c = str__ord[_chars[++_i]];
                if (_c == 47) {  # /
                    _scanner_state = _stack[_stack[0]--];
                }
            }
            # }}}
        } else if (_scanner_state == __struct__C_lst_expr) {
            # {{{
            if (_c <= 32) {
                # _skip
            } else if (_c == 40) {  # (
                _id = __struct__C_tok_lparen;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c == 41) {  # )
                _id = __struct__C_tok_rparen;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c == 42) {  # *
                _id = __struct__C_tok_mul;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c == 43) {  # +
                _id = __struct__C_tok_add;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c == 45) {  # -
                _id = __struct__C_tok_sub;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c == 47) {  # /
                _id = __struct__C_tok_div;
                tokens[++tokens[0]] = cell__new(_id, _i);
            } else if (_c >= 48 && _c <= 57) {  # digits
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_digits;
            } else if (_c == 60 || _c == 62) {  # < >
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _c;  # push current char
                _scanner_state = __struct__C_lst_operator;
            } else if (_c == 46 || (_c >= 65 && _c <= 90) || \
                       _c == 95 || (_c >= 97 && _c <= 122)) {  # alpha or "_", "."
                _stack[++_stack[0]] = _scanner_state;  # push current state
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_path;
            } else if (_c == 125) {  # }
                _id = __struct__C_tok_rbrace;
                tokens[++tokens[0]] = cell__new(_id, _i);
                _stack[++_stack[0]] = _i;  # push current position
                _scanner_state = __struct__C_lst_quote;
            } else {
                break;
            }
            # }}}
        } else {
            break;
        }
    }
    # }}}

    if (_scanner_state != __struct__C_lst_neutral || _stack[0] != 0 || _i < _count) {
        # {{{
        _v = addr__deref(_scanner_state);
        E__message = sprintf( \
            "%s(%s), pos: %d, \"%s\"", \
            _i == _count ? "unexpected EOF": "struct scanner error", \
            _v, \
            _i, \
            substr(src, _i - 20, 30));
        # }}}
        return (-1);
    }

    return (0);
}
# }}}
# {{{ (private)::struct::parse
#
function \
__struct__parse( \
    src, tokens, \
    \
    _v, _stack, _count, _i, _token, _pos, _key, _map, _list, \
    _tokid, _position, _tail, _typename, _type, _type_m, \
    _stem, _n, _struct_name, _params, _rmap, _index, _x, \
    _status, _member, _pos1, _pos2 \
) {
    # current parser state
    __struct__S_pst = __struct__C_pst_neutral;

    # stack pointer
    _stack[0] = 0;

    # {{{
    #for (_i = 1; _i <= length(tokens); ++_i) {
    #    _token = tokens[_i];
    #    _tokid = cell__tag(_token);
    #    _pos = cell__head(_token);
    #    _tail = cell__tail(_token);
    #    if (match(substr(src, 1, _pos), "^.*  ")) {
    #        _pos1 = RLENGTH + 1;
    #    }
    #    if (! (_pos2 = index(substr(src, _pos), "  "))) {
    #        _pos2 = length(src);
    #    }
    #    print "-----------------"
    #    print substr(src, _pos1, _pos + _pos2 - _pos1) "      (" __struct__C_sym_tok[_tokid] ")";
    #    print substr("                                                    ", 1, _pos - _pos1) "^";
    #}
    # }}}
    # {{{
    #
    #
    # type
    #
    #                                     first member    last member
    # +---+---+   +---+---+   +---+---+   +---+---+       +---+---+
    # | * | *---> | * | *---> | * | *---> | * | *---> ... | * |nil|
    # +-|-+---+   +-|-+---+   +-|-+---+   +-|-+---+       +---+---+
    #   v           v           v           v
    #  <integer>  <map>       <map>       <map>
    #  n_params   bounded     rmap      attribute
    #
    #
    # layout of struct
    #
    #    struct example_type<5, 3, arg3>
    #
    #    +-----------------+
    #    |      <int>      |  count of parameters
    #    |     n_params    |  3
    #    +-----------------+
    #    |      <map>      |  bounded arguments
    #    |      bounded    |  {1:5, 2:3}
    #    +-----------------+
    #    |      <map>      |  reverse index
    #    |      rmap       |  {arg1:1, arg2:2, arg3:3}
    #    +-----------------+
    #    |     <list>      |
    #    |     members     |  [ map1, map2, map3 ... ]
    #    +-----------------+
    #
    #
    # '${__pp_comment:+'
    #
    # struct = "struct" , "{" ,  <members> , "}" ;
    #
    # members = ( <member> | <block> ) , <members> ;
    #
    # block = "{" ,  <members> , "}" ;
    #
    # member = <identifier> "::" <type> [ <options> ] ;
    #
    # options = <option> | <options> ;
    #
    # options = "exists" , "only", "if", <expression>
    #         | "aligned", "on", <digits>
    #         | "with", "variable", <expression>, "as", <identifier>
    #         | "advance" "loop" "counter" "by" <expression> if <expression>
    #         | "must", "be", <primaryExpression>, [ "if", <expression> ]
    #         ;
    #
    # expression = <logicalOrExpression>
    #            |  "(" <expression> ")"
    #            ;
    #
    # logicalExpression = <logicalAndExpression>
    #                   , { ( "and" | "or" ) ,  <equalityExpression> }
    #                   ;
    #
    # equalityExpression = <multiplicativeExpression>
    #                    , {
    #                        (
    #                            "equal" , "to"
    #                          | "less" , "than"
    #                          | "less" , "than" , "or" , "equal"
    #                          | "greater" , "than"
    #                          | "greater" , "than" , "or" , "equal"
    #                        )
    #                        , <multiplicativeExpression>
    #                      }
    #                    ;
    #
    # additiveExpression := <multiplicativeExpression>
    #                    , { ( "+" | "-" ) , <multiplicativeExpression> }
    #                    ;
    #
    # multiplicativeExpression := <unaryExpression>
    #                          , { ( "*" | "/" | "%" ) , <unaryExpression> }
    #                          ;
    #
    # unaryExpression := <primaryExpression>
    #                  | { ( "+" | "-" | "not" ) , <unaryExpression> } ;
    #
    # primaryExpression := <variable>
    #                   |  <path>
    #                   |  <digits>
    #                   ;
    # '}'
    # }}}
    _count = tokens[0];
    for (_pos = 1; _pos <= _count; ++_pos) {
        _token = tokens[_pos];
        _tokid = cell__tag(_token);
        _position = cell__head(_token);
        _tail = cell__tail(_token);

        # {{{
        if (0) {
        print _position ": " __struct__C_sym_tok[_tokid] ": " addr__deref(_tail);
        if (match(substr(src, 1, _position), "^.*  ")) {
            _pos1 = RLENGTH + 1;
        }
        if (! (_pos2 = index(substr(src, _position), "  "))) {
            _pos2 = length(src);
        }
        print "----------------- " __struct__C_sym_pst[__struct__S_pst];
        print substr(src, _pos1, _position + _pos2 - _pos1) "      (" __struct__C_sym_tok[_tokid] ")";
        print substr("                                                    ", 1, _position - _pos1) "^";
        }
        # }}}

        # {{{
        if (__struct__S_pst == __struct__C_pst_neutral) {
            # {{{
            if (_tokid == __struct__C_tok_struct) {
                _stack[++_stack[0]] = __struct__S_pst;
                __struct__S_pst = __struct__C_pst_struct;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _struct_name = _stem = addr__deref(_tail);
                if (addr__errno < 0) {
                    break;
                }
                split("", _params, "");
                _params[0] = 0;
                delete _rmap;
                _type = struct__type__new();
                if (_type == addr__C_NIL) {
                    return (-1);
                }
                __struct__S_pst = __struct__C_pst_struct_name;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_name) {
            # {{{
            if (_tokid == __struct__C_tok_lbrace) {
                __struct__S_type[_struct_name ".type"] = _type;
                __struct__S_pst = __struct__C_pst_struct_open;
            } else if (_tokid == __struct__C_tok_langle) {
                _struct_name = _struct_name "<";
                __struct__S_pst = __struct__C_pst_struct_name_langle;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_name_langle) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[_rmap[_v] = _n = ++_params[0]] = _v;
                _struct_name = _struct_name "%" _n;
                _status = struct__type__add_param(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else if (_tokid == __struct__C_tok_digits) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[++_params[0]] = + _v;
                _struct_name = _struct_name _v;
                _status = struct__type__bind_num(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else if (_tokid == __struct__C_tok_path) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[++_params[0]] = "@" _v;
                _struct_name = _struct_name _v;
                _status = struct__type__bind_path(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_name_arg) {
            # {{{
            if (_tokid == __struct__C_tok_comma) {
                _struct_name = _struct_name ",";
                __struct__S_pst = __struct__C_pst_struct_name_comma;
            } else if (_tokid == __struct__C_tok_rangle) {
                _struct_name = _struct_name ">";
                __struct__S_pst = __struct__C_pst_struct_name_rangle;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_name_comma) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[_rmap[_v] = _n = ++_params[0]] = _v;
                _struct_name = _struct_name "%" _n;
                _status = struct__type__add_param(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else if (_tokid == __struct__C_tok_digits) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[++_params[0]] = +_v;
                if (addr__errno < 0) {
                    break;
                }
                _struct_name = _struct_name _v;
                _status = struct__type__bind_num(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else if (_tokid == __struct__C_tok_path) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _params[_rmap[_v] = _n = ++_params[0]] = "@" _v;
                _struct_name = _struct_name _v;
                _status = struct__type__bind_path(_type, _v);
                if (_status < 0) {
                    return _status;
                }
                __struct__S_pst = __struct__C_pst_struct_name_arg;
            } else if (_tokid == __struct__C_tok_rangle) {
                _struct_name = _struct_name ">";
                __struct__S_pst = __struct__C_pst_struct_name_rangle;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_name_rangle) {
            # {{{
            if (_tokid == __struct__C_tok_lbrace) {
                __struct__S_type[_struct_name ".type"] = _type;
                __struct__S_pst = __struct__C_pst_struct_open;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_open) {
            # {{{
            if (_tokid == __struct__C_tok_rbrace) {
                --__struct__S_sp;
                __struct__S_pst = _stack[_stack[0]--];
            } else if (_tokid == __struct__C_tok_lbrace) {
                # [struct name] "*block." [block index] -> [member index]
                _key = _struct_name "*block." ++__struct__S_type[_struct_name "*block"] ".start";
                __struct__S_type[_key] = __struct__S_type[_struct_name];

                # push terminator
                _stack[++_stack[0]] = __struct__C_pst_struct_block_end;

                # next status
                __struct__S_pst = __struct__C_pst_struct_open;
            } else if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _member = _v;
                _typename = "";
                _type_m = struct__member__new();
                addr__set(_type_m + __struct__member__M_identifier, _v);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_pst = __struct__C_pst_struct_identifier;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_identifier) {
            # {{{
            if (_tokid == __struct__C_tok_dblcolon) {
                _member = _member "::";
                __struct__S_pst = __struct__C_pst_struct_dblcolon;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_dblcolon) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                addr__set(_type_m + __struct__member__M_type_stem, _typename);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_pst = __struct__C_pst_struct_type;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_type) {
            # {{{
            if (_tokid == __struct__C_tok_dblcolon) {
                _typename = _typename "::";
                __struct__S_pst = __struct__C_pst_struct_dblcolon;
            } else if (_tokid == __struct__C_tok_comma) {
                _member = _member _typename ",";
                __struct__S_pst = __struct__C_pst_struct_comma;
            } else if (_tokid == __struct__C_tok_langle) {
                _typename = _typename "<";
                __struct__S_pst = __struct__C_pst_struct_member_langle;
            } else {
                _key = _struct_name "." ++__struct__S_type[_struct_name];
                __struct__S_type[_key] = _member _typename;
                --_pos;
                __struct__S_pst = __struct__C_pst_struct_member;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_comma) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _member = _member _v;

                _map = addr__deref(_type + __struct__type__M_rmap);
                if (addr__errno < 0) {
                    return (-1);
                }
                _v = map__at(_map, _v);
                if (addr__errno < 0) {
                    return (-1);
                }
                _list = addr__deref(_type_m + __struct__member__M_type_params);
                if (addr__errno < 0) {
                    return (-1);
                }
                if (_list == addr__C_NIL) {
                    _list = list__new(_v);
                    if (addr__errno < 0) {
                        return (-1);
                    }
                    addr__set(_type_m + __struct__member__M_type_params, _list);
                    if (addr__errno < 0) {
                        return (-1);
                    }
                } else {
                    list__append(_list, _v);
                    if (addr__errno < 0) {
                        return (-1);
                    }
                }
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_pst = __struct__C_pst_struct_validator;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_validator) {
            # {{{
            if (_tokid == __struct__C_tok_lparen) {
                _member = _member "(";
                __struct__S_pst = __struct__C_pst_struct_validator_lparen;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_validator_lparen) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                if (! (_v in _rmap)) {
                    break;
                }
                _member = _member _v;
                __struct__S_pst = __struct__C_pst_struct_validator_arg;
            } else if (_tokid == __struct__C_tok_digits) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _member = _member _v;
                __struct__S_pst = __struct__C_pst_struct_validator_arg;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_validator_arg) {
            # {{{
            if (_tokid == __struct__C_tok_rparen) {
                _member = _member ")";
                __struct__S_pst = __struct__C_pst_struct_validator_rparen;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_validator_rparen) {
            # {{{
            if (_tokid == __struct__C_tok_comma) {
                _member = _member ",";
                __struct__S_pst = __struct__C_pst_struct_comma;
            } else {
                _key = _struct_name "." ++__struct__S_type[_struct_name];
                __struct__S_type[_key] = _member;
                --_pos;
                __struct__S_pst = __struct__C_pst_struct_member;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_member) {
            # {{{
            if (_tokid == __struct__C_tok_pipe) {
                __struct__S_pst = __struct__C_pst_struct_open;
            } else if (_tokid == __struct__C_tok_rbrace) {
                __struct__S_pst = _stack[_stack[0]--];
            } else if (_tokid == __struct__C_tok_exists) {
                __struct__S_pst = __struct__C_pst_struct_exists;
            } else if (_tokid == __struct__C_tok_aligned) {
                __struct__S_pst = __struct__C_pst_struct_aligned;
            } else if (_tokid == __struct__C_tok_with) {
                __struct__S_pst = __struct__C_pst_struct_with;
            } else if (_tokid == __struct__C_tok_must) {
                __struct__S_pst = __struct__C_pst_struct_must;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_member_langle) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else if (_tokid == __struct__C_tok_digits) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else if (_tokid == __struct__C_tok_path) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_member_arg) {
            # {{{
            if (_tokid == __struct__C_tok_comma) {
                _typename = _typename ",";
                __struct__S_pst = __struct__C_pst_struct_member_comma;
            } else if (_tokid == __struct__C_tok_rangle) {
                _typename = _typename ">";
                __struct__S_pst = __struct__C_pst_struct_member_rangle;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_member_comma) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else if (_tokid == __struct__C_tok_digits) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else if (_tokid == __struct__C_tok_path) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                _typename = _typename _v;
                __struct__S_pst = __struct__C_pst_struct_member_arg;
            } else if (_tokid == __struct__C_tok_rangle) {
                _typename = _typename ">";
                __struct__S_pst = __struct__C_pst_struct_member_rangle;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_member_rangle) {
            # {{{
            if (_tokid == __struct__C_tok_comma) {
                _member = _member _typename ",";
                __struct__S_pst = __struct__C_pst_struct_comma;
            } else {
                _key = _struct_name "." ++__struct__S_type[_struct_name];
                __struct__S_type[_key] = _member _typename;
                --_pos;
                __struct__S_pst = __struct__C_pst_struct_member;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_exists) {
            # {{{
            if (_tokid == __struct__C_tok_only) {
                __struct__S_pst = __struct__C_pst_struct_exists_only;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_exists_only) {
            # {{{
            if (_tokid == __struct__C_tok_if) {
                __struct__S_pst = __struct__C_pst_struct_exists_only_if;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_exists_only_if) {
            # {{{
            if (_tokid == __struct__C_tok_not) {
                __struct__S_pst = __struct__C_pst_struct_exists_only_if_not;
            } else if (_tokid == __struct__C_tok_path) {
                _key = _struct_name "." __struct__S_type[_struct_name] "*exists_only_if";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_exists_only_if_not) {
            # {{{
            if (_tokid == __struct__C_tok_path) {
                _key = _struct_name "." __struct__S_type[_struct_name] "*exists_only_if_not";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_with) {
            # {{{
            if (_tokid == __struct__C_tok_variable) {
                __struct__S_pst = __struct__C_pst_struct_with_variable;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_aligned) {
            # {{{
            if (_tokid == __struct__C_tok_on) {
                __struct__S_pst = __struct__C_pst_struct_aligned_on;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_aligned_on) {
            # {{{
            if (_tokid == __struct__C_tok_boundary) {
                __struct__S_pst = __struct__C_pst_struct_aligned_on_boundary;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_aligned_on_boundary) {
            # {{{
            if (_tokid == __struct__C_tok_digits) {
                _key = _struct_name "." __struct__S_type[_struct_name] "*aligned";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = + _v;
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_block_end) {
            # {{{
            if (_tokid == __struct__C_tok_sized) {
                __struct__S_pst = __struct__C_pst_struct_block_end_sized;
            } else if (_tokid == __struct__C_tok_pipe) {
                __struct__S_pst = __struct__C_pst_struct_open;
            } else if (_tokid == __struct__C_tok_identifier) {
                # parse identifier
                # [struct name] "." [member index] -> [member identifier]
                _key = _struct_name "." ++__struct__S_type[_struct_name];
                if (_key in __struct__S_type) {
                    break;
                }
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;

                # next status
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_block_end_sized) {
            # {{{
            if (_tokid == __struct__C_tok_by) {
                __struct__S_pst = __struct__C_pst_struct_block_end_sized_by;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_block_end_sized_by) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _index = __struct__S_type[_struct_name "*block"];

                _key = _struct_name "*block." _index ".end";
                __struct__S_type[_key] = __struct__S_type[_struct_name];

                _key = _struct_name "*block." _index ".sized_by";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;

                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_must) {
            # {{{
            if (_tokid == __struct__C_tok_be) {
                __struct__S_pst = __struct__C_pst_struct_must_be;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_must_be) {
            # {{{
            if (_tokid == __struct__C_identifier) {
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                if (! (_v in _rmap)) {
                    break;
                }
                __struct__S_stack[++__struct__S_sp] = _rmap[_v];
                __struct__S_pst = __struct__C_pst_struct_must_be;
            } else if (_tokid == __struct__C_digits) {
                __struct__S_stack[++__struct__S_sp] = + _tail;
                __struct__S_pst = __struct__C_pst_struct_must_be;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_must_be_x) {
            # {{{
            if (_tokid == __struct__C_tok_always) {
                _x = __struct__S_stack[__struct__S_sp--];
                _key = _struct_name "." __struct__S_type[_struct_name] "*must_be";
                __struct__S_type[_key] = _x;
                __struct__S_pst = __struct__C_pst_struct_member;
            } else if (_tokid == __struct__C_tok_if) {
                __struct__S_pst = __struct__C_pst_struct_must_be_x_if;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_must_be_x_if) {
            # {{{
            if (_tokid == __struct__C_tok_not) {
                __struct__S_pst = __struct__C_pst_struct_must_be_x_if_not;
            } else if (_tokid == __struct__C_tok_identifier) {
                _key = _struct_name "." __struct__S_type[_struct_name] "*must_be_if";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;
                __struct__S_type[_key ".val"] = __struct__S_stack[__struct__S_sp--];
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else if (__struct__S_pst == __struct__C_pst_struct_must_be_x_if_not) {
            # {{{
            if (_tokid == __struct__C_tok_identifier) {
                _key = _struct_name "." __struct__S_type[_struct_name] "*must_be_if_not";
                _v = addr__deref(_tail);
                if (addr__errno < 0) {
                    return (-1);
                }
                __struct__S_type[_key] = _v;
                __struct__S_type[_key ".val"] = __struct__S_stack[__struct__S_sp--];
                __struct__S_pst = __struct__C_pst_struct_member;
            } else {
                break;
            }
            # }}}
        } else {
            break;
        }
        # }}}
    }

    for (_key in __struct__S_type) {
        if (_key ~ /\.type$/) {
            print _key, __struct__S_type[_key];
        }
    }

    if (__struct__S_pst != __struct__C_pst_neutral) {
        # {{{
        if (match(substr(src, 1, _position), "^.*  ")) {
            _pos1 = RLENGTH + 1;
        }
        if (! (_pos2 = index(substr(src, _position), "  "))) {
            _pos2 = length(src);
        }
        print "----------------- " __struct__C_sym_pst[__struct__S_pst] " -----------------"
        print substr(src, _pos1, _position + _pos2 - _pos1) "      (" __struct__C_sym_tok[_tokid] ")";
        print substr("                                                    ", 1, _position - _pos1) "^";

        E__message = "struct parse error, state: " \
            __struct__C_sym_pst[__struct__S_pst] ", token: " \
            __struct__C_sym_tok[_tokid] ", tail: " \
            addr__deref(_tail);
        # }}}
        return (-1);
    }

    return (0);
}
# }}}
# {{{ struct::type::init
#
# layout of type
#
#    struct example_type<5, 3, arg3> {
#        ....
#    }
#
#    +-----------------+
#    |      <int>      |  count of parameters
#    |     n_params    |  3
#    +-----------------+
#    |      <map>      |  bounded arguments
#    |      bounded    |  {1:5, 2:3}
#    +-----------------+
#    |      <map>      |  reverse parameter map
#    |      rmap       |  {arg1:1, arg2:2, arg3:3}
#    +-----------------+
#    |     <list>      |  list of member
#    |     members     |  [ member1, member2, member3 ... ]
#    +-----------------+
#
#
# layout of member
#
#    +-----------------+
#    |    <binary>     |
#    |     header      |
#    +-----------------+
#    |    <string>     |
#    |   identifier    |
#    +-----------------+
#    |    <string>     |
#    |    type_stem    |
#    +-----------------+
#    |     <list>      |
#    |   type_params   |
#    +-----------------+
#    |     <list>      |
#    |   validators    |
#    +-----------------+
#
# layout of header
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|  Reserved   |
# +-+-------------+
#
# A - StructFlag, 0:atom, 1:struct
#
#
function \
struct__type__init( \
    type, \
    \
    _status \
) {
    if (__struct__type__init_guard) {
        return (1);
    }

    _status = map__init();
    if (_status < 0) {
        return _status;
    }
    _status = list__init();
    if (_status < 0) {
        return _status;
    }
    _status = struct__member__init();
    if (_status < 0) {
        return _status;
    }

    __struct__type__M_n_params      = 0;
    __struct__type__M_bounded_num   = 1;
    __struct__type__M_bounded_path  = 2;
    __struct__type__M_rmap          = 3;
    __struct__type__M_members       = 4;

    __struct__type__init_guard = 1;

    return (0);
}
# }}}
# {{{ struct::type::new
#
# layout of type
#
#    [generic type]
#    example_type<5, 3, arg3, ./a/b/c>
#
#    [specialized type]
#    example_type<arg1, arg2, arg3, arg4>
#
#    +-----------------+
#    |      <int>      |  count of parameters
#    |     n_params    |  3
#    +-----------------+
#    |      <map>      |  bounded number arguments
#    |    bounded_num  |  {1:5, 2:3}
#    +-----------------+
#    |      <map>      |  bounded path arguments
#    |    bounded_path |  {4:./a/b/c}
#    +-----------------+
#    |      <map>      |  reverse index
#    |      rmap       |  {arg1:1, arg2:2, arg3:3, arg4:4}
#    +-----------------+
#    |     <list>      |
#    |     members     |  [ map1, map2, map3 ... ]
#    +-----------------+
#
function \
struct__type__new(    _type, _v) {

    _type = addr__malloc(6);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    # n_params: count of parameters
    addr__set(_type + __struct__type__M_n_params, 0);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    # bounded_num
    _v = map__new();
    if (_v == addr__C_NIL) {
        return (-1);
    }

    addr__set(_type + __struct__type__M_bounded_num, _v);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    # bounded_path
    _v = map__new();
    if (_v == addr__C_NIL) {
        return (-1);
    }

    addr__set(_type + __struct__type__M_bounded_path, _v);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    # rmap
    _v = map__new();
    if (_v == addr__C_NIL) {
        return (-1);
    }

    addr__set(_type + __struct__type__M_rmap, _v);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    # members
    addr__set(_type + __struct__type__M_members, addr__C_NIL);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    return _type;
}
# }}}
# {{{ struct::type::add_param
#
function \
struct__type__add_param( \
    type, v, \
    \
    _n, _rmap, _status \
) {
    _n = addr__deref(type + __struct__type__M_n_params) + 1;
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = addr__set(type + __struct__type__M_n_params, _n);
    if (_status < 0) {
        return _status;
    }

    _rmap = addr__deref(type + __struct__type__M_rmap);
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = map__insert(_rmap, v, _n);
    if (_status < 0) {
        return (-1);
    }

    return (0);
}
# }}}
# {{{ struct::type::bind_num
#
function \
struct__type__bind_num( \
    type, v, \
    \
    _n, _bounded, _status \
) {
    _n = addr__deref(type + __struct__type__M_n_params) + 1;
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = addr__set(type + __struct__type__M_n_params, _n);
    if (_status < 0) {
        return _status;
    }

    _bounded = addr__deref(type + __struct__type__M_bounded_num);
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = map__insert(_bounded, _n, v);
    if (_status < 0) {
        return (-1);
    }

    return (0);
}
# }}}
# {{{ struct::type::bind_path
#
function \
struct__type__bind_path( \
    type, v, \
    \
    _n, _bounded, _status \
) {
    _n = addr__deref(type + __struct__type__M_n_params) + 1;
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = addr__set(type + __struct__type__M_n_params, _n);
    if (_status < 0) {
        return _status;
    }

    _bounded = addr__deref(type + __struct__type__M_bounded_path);
    if (addr__errno < 0) {
        return addr__errno;
    }

    _status = map__insert(_bounded, _n, v);
    if (_status < 0) {
        return (-1);
    }

    return (0);
}
# }}}
# {{{ struct::type::pretty_print
#
function \
struct__type__pretty_print( \
    type \
) {
    return (0);
}
# }}}
# {{{ struct::member::init
#
function \
struct__member__init( \
    type, \
    \
    _status \
) {
    if (__struct__member__init_guard) {
        return (1);
    }

    _status = map__init();
    if (_status < 0) {
        return _status;
    }
    _status = list__init();
    if (_status < 0) {
        return _status;
    }

    __struct__member__M_header        = 0;
    __struct__member__M_identifier    = 1;
    __struct__member__M_type_stem     = 2;
    __struct__member__M_type_params   = 3;
    __struct__member__M_validators    = 4;

    __struct__member__init_guard = 1;

    return (0);
}
# }}}
# {{{ struct::member::new
#
function \
struct__member__new(     _member) {

    _member = addr__malloc(5);
    if (addr__errno < 0) {
        return addr__C_NIL;
    }

    return _member;
}
# }}}
# {{{ struct::instantiate
function \
__struct__instantiate( \
    typename, store, \
    \
    _v, _params, _typename, _stem, _pos1, _pos2 \
) {
    _pos1 = index(_typename, "<");
    if (_pos1 > 0) {
        _pos2 = index(_typename, ">");
        _stem = substr(_typename, 1, _pos1 - 1);
        _v = substr(_typename, _pos1 + 1, _pos2 - _pos1 - 1);
        split(_v, _params, ",");
    }

    return (0);
}
# }}}
# {{{ struct::unpack
function \
struct__unpack( \
    stream, store, def, vars, \
    \
    _pos, _typename, _store, _v, _i, _j, _k, _n, _c, \
    _key, _option_key, _argkey, _argval, _expr, \
    _stream_pos, _stream_pos_base, _align_offset, _is_array, \
    _count, _status, _encoding \
) {
    # op_expansion
    # replace variables such as $... to a immediate value
    while (match(def, /\$[[:alpha:]_][[:alnum:]_]*/)) {
        _n = substr(def, RSTART + 1, RLENGTH - 1);
        if (! (_n in vars)) {
            return (-1);
        }
        def = substr(def, 1, RSTART - 1) vars[_n] \
              substr(def, RSTART + RLENGTH);
    }

    # extract type name
    _pos = index(def, "::");
    if (_pos == 0) {
        E__message = "parse error: " def;
        return (-1);
    }

    _typename = substr(def, _pos + 2);
    _pos = match(_typename, /^[[:alpha:]_][[:alnum:]_]*(<[^>]+>)?,/);
    if (_pos == 1) {
        _typename = substr(_typename, 1, RLENGTH - 1);
    }
    if (match(_typename, /\[[^\]]+\]$/)) {
        # array type such as typename[n]
        _is_array = 1;
        _v = substr(_typename, RSTART + 1, RLENGTH - 2);
        _typename = substr(_typename, 1, RSTART - 1);

        if (match(_v, /^[[:digit:]]+$/)) {
            # array size is immediate value, such as typename[10]
            _count = + _v;
        } else {
            # array size is path expression, such as typename[../Data/Count]
            _v = astore__get(store, _v);
            if (match(_v, /^[[:digit:]]+$/)) {
                _count = + _v;
            } else {
                E__message = "reference error: " def;
                return (-1);
            }
        }
    } else {
        # non-array type
        _is_array = 0;
        _count = 1;
        astore__fork(store, def, _store);
    }

    if (! (_typename in __struct__S_type)) {
        _status = __atom__instantiate(_typename);
        if (_status < 0) {
            _status = __struct__instantiate(_typename, store);
            if (_status < 0) {
                return (-1);
            }
        }
    }

    for (_k = 1; _k <= _count; ++_k) {
        if (_is_array) {
            astore__fork(store, def "/" _k "::" _typename, _store);
        }
        if (_typename in __atom__S_type) {
            if (__atom__S_type[_typename ".base"] <= 1) {
                if (__atom__S_type[_typename ".sizeunit"] == 0) {
                    _n = __atom__S_type[_typename ".size"]
                    if (_n == 1) {
                        _v = stream__read_uint8(stream);
                    } else if (_n == 2) {
                        _v = stream__read_uint16(stream);
                    } else if (_n == 4) {
                        _v = stream__read_uint32(stream);
                    } else if (_n == 8) {
                        _v = stream__read_uint32(stream);
                    } else {
                        E__message = "parse error(bytes): " _typename;
                        return (-1);
                    }
                    _status = astore__set(store, def, _v);
                    if (_status < 0) {
                        return _status;
                    }
                } else {
                    _n = __atom__S_type[_typename ".size"]
                    _v = stream__read_bits(stream, _n);
                    _status = astore__set(store, def, _v);
                    if (_status < 0) {
                        return _status;
                    }
                }
            } else if (__atom__S_type[_typename ".base"] == 3) {
                _n = __atom__S_type[_typename ".size"];
                _encoding = __atom__S_type[_typename ".encoding"];
                if (_encoding == __atom__C_enc_raw) {
                    _v = stream__read_raw_string(stream, _n);
                } else if (_encoding == __atom__C_enc_raw_hex) {
                    _v = stream__read_hex_string(stream, _n);
                } else if (_encoding == __atom__C_enc_ansi) {
                    _v = stream__read_ansi_string(stream, _n);
                } else if (_encoding == __atom__C_enc_unicode) {
                    _v = stream__read_utf16le_string(stream, _n);
                } else {
                    E__message = "parse error(string): " _typename "\n" \
                                      "encoding: " _encoding;
                    return (-1);
                }
                _status = astore__set(store, def, _v);
                if (_status < 0) {
                    return _status;
                }
            } else {  # float
                E__message = "notimpl, floating type: " _typename;
                return (-1);
            }
        } else if (_typename in __struct__S_type) {
            _n = __struct__S_type[_typename]
            _stream_pos_base = stream__pos(stream);
            for (_i = 1; _i <= _n; ++_i) {
                _key = _typename "." _i;
                _v = __struct__S_type[_key];

                _option_key = _key "*aligned" ;
                if (_option_key in __struct__S_type) {
                    _n = __struct__S_type[_option_key];
                    if (_n > 1) {
                        _stream_pos = stream__pos(stream);
                        _align_offset = (_stream_pos - _stream_pos_base) % _n;
                        if (_align_offset > 0) {
                            stream__skip(stream, _n - _align_offset);
                        }
                    }
                }

                _option_key = _key "*variable" ;
                if (_option_key in __struct__S_type) {
                    _c = __struct__S_type[_option_key];
                    for (_j = 1; _j <= _c; ++_j) {
                        _option_key = _key "*variable:" _j;
                        _argkey = __struct__S_type[_option_key ".key"];
                        _argval = __struct__S_type[_option_key ".val"];
                        vars[_argkey] = astore__get(_store, _argval);
                    }
                }

                _option_key = _key "*exists_only_if" ;
                if (_option_key in __struct__S_type) {
                    _expr = __struct__S_type[_option_key];
                    if (index(_expr, "$") == 1) {
                        if (! vars[substr(_expr, 2)]) {
                            continue;
                        }
                    } else if (! astore__get(_store, _expr)) {
                        continue;
                    }
                }

                _option_key = _key "*exists_only_if_not" ;
                if (_option_key in __struct__S_type) {
                    _expr = __struct__S_type[_option_key];
                    if (index(_expr, "$") == 1) {
                        if (vars[substr(_expr, 2)]) {
                            continue;
                        }
                    } else if (astore__get(_store, _expr)) {
                        continue;
                    }
                }

                _status = struct__unpack(stream, _store, _v, vars);
                if (_status < 0) {
                    return _status;
                }
            }
        } else {
            E__message = "undefined type: " _typename;
            return (-1);
        }
    }
}
# }}}
# {{{ struct::test
function \
struct__ut(    _status) {

    print "struct__ut start";

    _status = struct__init();
    if (_status < 0) {
        return _status;
    }

    _status = struct__declare(" \
                                                                            \
    struct fmPosition {                                                     \
        Left::uint32                                                        \
      | Top::uint32                                                         \
    }                                                                       \
                                                                            \
    struct fmString<cb,compressed> {                                        \
        Value::RawString<cb>                                                \
    }                                                                       \
                                                                            \
    struct fmString<cb,0> {                                                 \
        Value::UnicodeString<cb>                                            \
    }                                                                       \
                                                                            \
    struct FormObjectDepthTypeCount {                                       \
        Depth::uint8                                                        \
      | {                                                                   \
            TypeOrCount::bits<7>                                            \
          | fCount::bool                                                    \
        } /* TypeOrCount must be 1 if not fCount */                         \
          /* advance loop counter by TypeOrCount - 1 if fCount */           \
      | OptionalType::uint8 exists only if ./fCount                         \
    }                                                                       \
                                                                            \
    struct OleSiteConcreteControl {                                         \
        Version::uint16,mustbe(0)                                           \
      | cbSite::uint16                                                      \
      | {                                                                   \
            PropMask::SitePropMask                                          \
          | DataBlock::SiteDataBlock                                        \
          | ExtraDataBlock::SiteExtraDataBlock                              \
        } sized by cbSite                                                   \
    }                                                                       \
                                                                            \
    struct CountOfBytesWithCompressionFlag {                                \
        cb::bits<31>                                                        \
      | fCompressed::bool                                                   \
    }                                                                       \
                                                                            \
    struct SITE_FLAG {                                                      \
        fTabStop::bool                                                      \
      | fVisible::bool                                                      \
      | fDefault::bool                                                      \
      | fCancel::bool                                                       \
      | fStreamed::bool                                                     \
      | fAutoSize::bool                                                     \
      | Unused1::bits<2>,mustbe(0)                                          \
      | fPreserveHeight::bool                                               \
      | fFitToParent::bool                                                  \
      | Reserved1::bits<3>                                                  \
      | fSelectChild::bool                                                  \
      | Unused2::bits<4>,mustbe(0)                                          \
      | fPromoteControls::bool                                              \
      | Unused3::bits<13>,mustbe(0)                                         \
    }                                                                       \
                                                                            \
    ");
    if (_status < 0) {
        return _status;
    }

    _status = struct__declare(" \
                                                                            \
    struct SitePropMask {                                                   \
        fName::bool                                                         \
      | fTag::bool                                                          \
      | fID::bool                                                           \
      | fHelpContextID::bool                                                \
      | fBitFlags::bool                                                     \
      | fObjectStreamSize::bool                                             \
      | fTabIndex::bool                                                     \
      | fClsidCacheIndex::bool                                              \
      | fPosition::bool                                                     \
      | fGroupID::bool                                                      \
      | Unused1::bits<1>,mustbe(0)                                          \
      | fControlTipText::bool                                               \
      | fRuntimeLicKey::bool                                                \
      | fControlSource::bool                                                \
      | fRowSource::bool                                                    \
      | Unused2::bits<17>,mustbe(0)                                         \
    }                                                                       \
                                                                            \
    struct SiteDataBlock {                                                  \
        NameData::CountOfBytesWithCompressionFlag                           \
            exists only if ../PropMask/fName                                \
      | TagData::CountOfBytesWithCompressionFlag                            \
            exists only if ../PropMask/fTag                                 \
      | ID::uint32                                                          \
            exists only if ../PropMask/fID                                  \
      | HelpContextID::uint32                                               \
            exists only if ../PropMask/fHelpContextID                       \
      | BitFlags::SITE_FLAG                                                 \
            exists only if ../PropMask/fBitFlags                            \
      | ObjectStreamSize::uint32                                            \
            exists only if ../PropMask/fObjectStreamSize                    \
      | TabIndex::uint16                                                    \
            exists only if ../PropMask/fTabIndex                            \
      | ClsidCacheIndex::uint16                                             \
            exists only if ../PropMask/fClsidCacheIndex                     \
      | GroupID::uint16                                                     \
            exists only if ../PropMask/fGroupID                             \
      | ControlTipTextData::CountOfBytesWithCompressionFlag                 \
            exists only if ../PropMask/fControlTipText                      \
      | RuntimeLicKeyData::CountOfBytesWithCompressionFlag                  \
            exists only if ../PropMask/fRuntimeLicKey                       \
      | ControlSourceData::CountOfBytesWithCompressionFlag                  \
            exists only if ../PropMask/fControlSource                       \
      | RowSourceData::CountOfBytesWithCompressionFlag                      \
            exists only if ../PropMask/fRowSource                           \
    }                                                                       \
                                                                            \
    struct SiteExtraDataBlock {                                             \
        Name::fmString<                                                     \
            ../DataBlock/NameData/cb                                        \
          , ../DataBlock/NameData/fCompressed                               \
          > exists only if ../PropMask/fName                                \
      | Tag::fmString<                                                      \
            ../DataBlock/TagData/cb                                         \
          , ../DataBlock/TagData/fCompressed                                \
          > exists only if ../PropMask/fTag                                 \
            aligned on boundary 4                                           \
      | SitePosition::fmPosition                                            \
            exists only if ../PropMask/fPosition                            \
            aligned on boundary 4                                           \
      | ControlTipText::fmString<                                           \
            ../DataBlock/ControlTipTextData/cb                              \
          , ../DataBlock/ControlTipTextData/fCompressed                     \
          > exists only if ../PropMask/fControlTipText                      \
            aligned on boundary 4                                           \
      | RuntimeLicKey::fmString<                                            \
            ../DataBlock/RuntimeLicKeyData/cb                               \
          , ../DataBlock/RuntimeLicKeyData/fCompressed                      \
          > exists only if ../PropMask/fRuntimeLicKey                       \
            aligned on boundary 4                                           \
      | ControlSource::fmString<                                            \
            ../DataBlock/ControlSourceData/cb                               \
          , ../DataBlock/ControlSourceData/fCompressed                      \
          > exists only if ../PropMask/fControlSource                       \
            aligned on boundary 4                                           \
      | RowSource::fmString<                                                \
            ../DataBlock/RowSourceData/cb                                   \
          , ../DataBlock/RowSourceData/fCompressed                          \
          > exists only if ../PropMask/fRowSource                           \
            aligned on boundary 4                                           \
    }                                                                       \
                                                                            \
    ");
    if (_status < 0) {
        return _status;
    }

    print "struct__ut end";

    return (0);
}
# }}}
# }}}
# {{{ @module xmlp, a tiny event driven xml parser
# {{{ xmlp::init
function xmlp__init(    _status) {
    if (__xmlp__init_guard) {
        return (1);
    }

    _status = xmlp__class_init();
    if (_status < 0) {
        return _status;
    }

    xml__C_magic_XML_DECLARATION = "3c3f786d6c207665";

    __xmlp__init_guard = 1;

    return (0);
}
# }}}
# {{{ xmlp::class_init

# '${__pp_comment:+'
#
# @class xmlp
#
# A tiny, zero-string-copy, event driven xml parser, like a SAX parser,
# provides stack-based APIs because we can not use callback functions in AWK.
#
# @membes
# - __xmlp__M_st: parser state
# - __xmlp__M_sp: stack pointer
#
# @methods
# - push
# - pop
# - top
# - parse
#
# xmlp object is just an array.
#
# It has only the following two member elements.
#
#   - Parser State (__xmlp__M_st, index 1)
#
#   - Stack Pointer (__xmlp__M_sp, index 2)
#
#        +----------------+
#      1 |  Parser State  |
#        +----------------+
#      2 |  Stack Pointer |--+
#        +================+  |
#      3 |    stack[0]    |  |
#        +----------------+  |
#      4 |    stack[2]    |  |
#        +----------------+  |
#        |                |  |
#        .                .  .
#        .                .  .
#        |                |  |
#        +----------------+  |
#  n + 2 |    stack[n]    |<-+
#        +----------------+
#        |                |
#        .                .
#        .                .
#
# '}'
function xmlp__class_init() {

    # events
    xmlp__C_event_PARSE_ERROR     =   -1;
    xmlp__C_event_END_DOCUMENT    =    0;
    xmlp__C_event_START_DOCUMENT  =    1;
    xmlp__C_event_DECLARATION     =    2;
    xmlp__C_event_START_ELEMENT   =    4;
    xmlp__C_event_END_ELEMENT     =    8;
    xmlp__C_event_ATTRIBUTE       =   16;
    xmlp__C_event_CHARACTERS      =   32;
    xmlp__C_event_ALL             = 1023;

    __xmlp__M_st      = 1;  # parser state
    __xmlp__M_sp      = 2;  # stack pointer
    __xmlp__C_offset  = 2;

    __xmlp__C_pst_DOCUMENT_START   = 0;
    __xmlp__C_pst_CHARACTERS_START = 1;
    __xmlp__C_pst_CHARACTERS       = 2;
    __xmlp__C_pst_TAG_OPEN         = 3;
    __xmlp__C_pst_TAG_NAME         = 4;
    __xmlp__C_pst_TAG_NAME_CLOSING = 5;
    __xmlp__C_pst_ATTR             = 6;
    __xmlp__C_pst_ATTR_EQ          = 7;
    __xmlp__C_pst_ATTR_VAL         = 8;
    __xmlp__C_pst_ATTR_VAL_SQ      = 9;
    __xmlp__C_pst_ATTR_VAL_DQ      = 10;
    __xmlp__C_pst_COMMENT          = 11;
    __xmlp__C_pst_DECLARATION      = 14;
    __xmlp__C_pst_DOCTYPE          = 15;
    __xmlp__C_pst_EMPTY_SLASH      = 16;
}
# }}}
# {{{ xmlp::new
function \
xmlp__new(xmlp) {
    xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START;
    xmlp[__xmlp__M_sp] = __xmlp__C_offset;
}
# }}}
# {{{ xmlp::push
function \
xmlp__push(xmlp, val) {
    xmlp[++xmlp[__xmlp__M_sp]] = val;
}
# }}}
# {{{ xmlp::pop
function \
xmlp__pop(xmlp) {
    return xmlp[xmlp[__xmlp__M_sp]--];
}
# }}}
# {{{ xmlp::top
function \
xmlp__top(xmlp, n) {
    return xmlp[xmlp[__xmlp__M_sp] - n];
}
# }}}
# {{{ xmlp::parse
function \
xmlp__parse(xmlp, stream,    _c, _st, _it) {
    while (! stream__is_end(stream)) {
        _st = xmlp[__xmlp__M_st];
        _c = stream[_it = ++stream[__stream__M_iit]];  # friend access
        if (_st == __xmlp__C_pst_CHARACTERS_START) {
            if (_c == 60) {  # <
                xmlp[__xmlp__M_st] = __xmlp__C_pst_TAG_OPEN;
            } else {
                xmlp__push(xmlp, _it);
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS;
            }
        } else if (_st == __xmlp__C_pst_CHARACTERS) {
            if (_c == 60) {  # <
                xmlp[__xmlp__M_st] = __xmlp__C_pst_TAG_OPEN;
                xmlp__push(xmlp, _it - 1);
                return xmlp__C_event_CHARACTERS;
            }
        } else if (_st == __xmlp__C_pst_TAG_OPEN) {
            if (_c == 63) {  # ?
                xmlp[__xmlp__M_st] = __xmlp__C_pst_DECLARATION;
            } else if (_c == 33) {  # !
                xmlp[__xmlp__M_st] = __xmlp__C_pst_COMMENT;
                if (45 != (_c = stream__read_uint8(stream))) {  # -
                    return xmlp__C_event_PARSE_ERROR;
                }
                if (45 != (_c = stream__read_uint8(stream))) {  # -
                    return xmlp__C_event_PARSE_ERROR;
                }
            } else if (_c == 47) {  # /
                xmlp[__xmlp__M_st] = __xmlp__C_pst_TAG_NAME_CLOSING;
            } else if (_c > 32) {  # any printable
                xmlp__push(xmlp, _it);  # startelement
                xmlp[__xmlp__M_st] = __xmlp__C_pst_TAG_NAME;
            } else {
                return xmlp__C_event_PARSE_ERROR;
            }
        } else if (_st == __xmlp__C_pst_TAG_NAME) {
            if (_c == 32 || _c == 9 || _c == 10 || _c == 13) {  # whitespace
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR;
                xmlp__push(xmlp, _it - 1);
                # '${__pp_xmlp__enable_endelment_args:+"$(cut -f2- -d\# <<< '
                # xmlp__push(xmlp, xmlp__top(xmlp, 1));
                # xmlp__push(xmlp, _it - 1);
                # ')"}'
                return xmlp__C_event_START_ELEMENT;
            } else if (_c == 62) {  # >
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START
                xmlp__push(xmlp, _it - 1);
                # '${__pp_xmlp__enable_endelment_args:+"$(cut -f2- -d\# <<< '
                # xmlp__push(xmlp, xmlp__top(xmlp, 1));
                # xmlp__push(xmlp, _it - 1);
                # ')"}'
                return xmlp__C_event_START_ELEMENT;
            } else if (_c == 47) {  # /
                xmlp[__xmlp__M_st] = __xmlp__C_pst_EMPTY_SLASH
                xmlp__push(xmlp, _it - 1);
                # '${__pp_xmlp__enable_endelment_args:+"$(cut -f2- -d\# <<< '
                # xmlp__push(xmlp, xmlp__top(xmlp, 1));
                # xmlp__push(xmlp, _it - 1);
                # ')"}'
                return xmlp__C_event_START_ELEMENT;
            }
        } else if (_st == __xmlp__C_pst_TAG_NAME_CLOSING) {
            if (_c == 32 || _c == 9 || _c == 10 || _c == 13) {  # whitespace
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR;
            } else if (_c == 62) {  # >
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START
                return xmlp__C_event_END_ELEMENT
            }
        } else if (_st == __xmlp__C_pst_ATTR) {
            if (_c == 62) {  # >
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START;
            } else if (_c == 47) {  # /
                xmlp[__xmlp__M_st] = __xmlp__C_pst_EMPTY_SLASH;
            } else if (_c > 32) {  # any printable chars
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR_EQ;
                xmlp__push(xmlp, _it);
            }
        } else if (_st == __xmlp__C_pst_ATTR_EQ) {
            if (_c == 61) {  # =
                xmlp__push(xmlp, _it - 1);
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR_VAL;
            }
        } else if (_st == __xmlp__C_pst_ATTR_VAL) {
            if (_c == 34) {  # "
                xmlp__push(xmlp, _it + 1);
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR_VAL_DQ;
            } else if (_c == 39) {  # single quote
                xmlp__push(xmlp, _it + 1);
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR_VAL_SQ;
            }
        } else if (_st == __xmlp__C_pst_ATTR_VAL_DQ) {
            if (_c == 34) {  # "
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR;
                xmlp__push(xmlp, _it - 1);
                return xmlp__C_event_ATTRIBUTE;
            }
        } else if (_st == __xmlp__C_pst_ATTR_VAL_SQ) {
            if (_c == 39) {  # single quote
                xmlp[__xmlp__M_st] = __xmlp__C_pst_ATTR
                xmlp__push(xmlp, _it - 1);
                return xmlp__C_event_ATTRIBUTE;
            }
        } else if (_st == __xmlp__C_pst_EMPTY_SLASH) {
            if (_c == 62) {  # >
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START
                return xmlp__C_event_END_ELEMENT;
            }
        } else if (_st == __xmlp__C_pst_DOCUMENT_START) {
            xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START;
            return xmlp__C_event_START_DOCUMENT;
        } else if (_st == __xmlp__C_pst_COMMENT1) {
            if (_c == 45) {  # -
                if ((_c = stream__read_uint8(stream)) == 45) {  # -
                    if ((_c = stream__read_uint8(stream)) == 62) {  # >
                        return __xmlp__C_pst_CHARACTERS_START;
                    }
                }
            }
        } else if (_st == __xmlp__C_pst_DECLARATION) {
            if (_c == 62) { # >
                xmlp[__xmlp__M_st] = __xmlp__C_pst_CHARACTERS_START;
                # '${__pp_xmlp__enable_declaration_event:+"$(cut -f2- -d\# <<< '
                # return xmlp__C_event_DECLARATION;
                # ')"}'
            }
        }
    }

    return xmlp__C_event_END_DOCUMENT;
}
# }}}
# }}}
# {{{ @module acp ANSI Code Pages for VBA
#
# This module has only one static member acp__S_codepage
# and one public static method build_map_to_u8char().
#
# {{{ acp::build_map_to_u8char
function \
acp__build_map_to_u8char(codepage) {

    # dispatch
    if (codepage == 874) {
        __acp__build_map_874_to_u8char();
    } else if (codepage == 932) {
        __acp__build_map_932_to_u8char();
    } else if (codepage == 936) {
        __acp__build_map_936_to_u8char();
    } else if (codepage == 949) {
        __acp__build_map_949_to_u8char();
    } else if (codepage == 950) {
        __acp__build_map_950_to_u8char();
    } else if (codepage == 1250) {
        __acp__build_map_1250_to_u8char();
    } else if (codepage == 1251) {
        __acp__build_map_1251_to_u8char();
    } else if (codepage == 1252) {
        __acp__build_map_1252_to_u8char();
    } else if (codepage == 1253) {
        __acp__build_map_1253_to_u8char();
    } else if (codepage == 1254) {
        __acp__build_map_1254_to_u8char();
    } else if (codepage == 1255) {
        __acp__build_map_1255_to_u8char();
    } else if (codepage == 1256) {
        __acp__build_map_1256_to_u8char();
    } else if (codepage == 1257) {
        __acp__build_map_1257_to_u8char();
    } else if (codepage == 1258) {
        __acp__build_map_1258_to_u8char();
    } else {
        E__message = sprintf("Unsupported code page %d.", codepage);
        return (-1);
    }

    acp__S_codepage = codepage;

    return (0);
}
# }}}
# {{{ (private)::acp::decode_charmap
function \
__acp__decode_charmap( \
    map, base64str, \
    \
    _iit, _oit, _size, \
    _o, _c, _i, _cl, _cr, _tmp, _buf \
) {
    split(base64str, _buf, "");
    _size = length(base64str);
    _iit = 0;
    _i = 0;
    _o = "";
    _tmp = "";

    while (1) {
        while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);
        if (_iit > _size) {
            break;
        }

        # cl << 2 | cr >> 4
        _c = __base64_map[_cl] * 4 + num__rshift(__base64_map[_cr], 4);
        if (_c == 44) {
            map[++_i] = _tmp;
            _tmp = "";
        } else {
            _tmp = _tmp str__chr[_c];
        }

        while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        # cr & ((1 << 4) - 1) | cl >> 2
        _c = (__base64_map[_cr] % 16) * 16 + num__rshift(__base64_map[_cl], 2);
        if (_c == 44) {
            map[++_i] = _tmp;
            _tmp = "";
        } else {
            _tmp = _tmp str__chr[_c];
        }

        while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        # (cr & ((1 << 2) - 1)) << 6 | cl
        _c = (__base64_map[_cl] % 4) * 64 + __base64_map[_cr];
        if (_c == 44) {
            map[++_i] = _tmp;
            _tmp = "";
        } else {
            _tmp = _tmp str__chr[_c];
        }
    }
    map[++_i] = _tmp;

    return (0);
}
# }}}
# {{{ (private)::acp::build_map_874_to_u8char
# '${__pp_comment:+'
#
# cp874 (WINDOWS-874)
#
# Thai (Windows)
#
# '}'
function \
__acp__build_map_874_to_u8char() {
    # cp873 character mappings
    split( \
        "\342\202\254 ? ? ? ? \342\200\246 ? ? ? ? ? ? ? ? ? ? ? \342\200\230 \342\200\231 \342\200\234 " \
        "\342\200\235 \342\200\242 \342\200\223 \342\200\224 ? ? ? ? ? ? ? ? \302\240 " \
        "\340\270\201 \340\270\202 \340\270\203 \340\270\204 \340\270\205 " \
        "\340\270\206 \340\270\207 \340\270\210 \340\270\211 \340\270\212 " \
        "\340\270\213 \340\270\214 \340\270\215 \340\270\216 \340\270\217 " \
        "\340\270\220 \340\270\221 \340\270\222 \340\270\223 \340\270\224 " \
        "\340\270\225 \340\270\226 \340\270\227 \340\270\230 \340\270\231 " \
        "\340\270\232 \340\270\233 \340\270\234 \340\270\235 \340\270\236 " \
        "\340\270\237 \340\270\240 \340\270\241 \340\270\242 \340\270\243 " \
        "\340\270\244 \340\270\245 \340\270\246 \340\270\247 \340\270\250 " \
        "\340\270\251 \340\270\252 \340\270\253 \340\270\254 \340\270\255 " \
        "\340\270\256 \340\270\257 \340\270\260 \340\270\261 \340\270\262 " \
        "\340\270\263 \340\270\264 \340\270\265 \340\270\266 \340\270\267 " \
        "\340\270\270 \340\270\271 \340\270\272 ? ? ? ? \340\270\277 \340\271\200 " \
        "\340\271\201 \340\271\202 \340\271\203 \340\271\204 \340\271\205 " \
        "\340\271\206 \340\271\207 \340\271\210 \340\271\211 \340\271\212 " \
        "\340\271\213 \340\271\214 \340\271\215 \340\271\216 \340\271\217 " \
        "\340\271\220 \340\271\221 \340\271\222 \340\271\223 \340\271\224 " \
        "\340\271\225 \340\271\226 \340\271\227 \340\271\230 \340\271\231 " \
        "\340\271\232 \340\271\233 ? ? ? ? ", \
        acp__S_charmap, " ");

    return (0);
}
# }}}
# {{{ (private)::acp::build_map_932_to_u8char
# '${__pp_comment:+'
#
# cp932 (WINDOWS-932)
#
# ANSI/OEM Japanese; Japanese (Shift-JIS)
#
# [UNICODE-MAPPING]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP932.TXT
#
# [UNICODE-BESTFIT]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit932.txt
#
# [MS-OVBA] 3.3.5.1.1 Japanese Identifiers
#
# VBA support for identifiers containing Japanese characters is based upon
# Windows Codepage 932 [UNICODE-BESTFIT]. Japanese characters are encoded as
# both 8 bit single byte and 16 bit double byte characters with code points
# beginning at %x80. The Unicode equivalents of Windows Codepage 932 code
# points are specified by the file bestfit932.txt provided at
# [UNICODE-BESTFIT]. Many of the characters in the range %x80-FF are lead
# bytes that serve as the first byte of a 16 bit encoding of a code point.
# However, valid characters also occur within this range.
#
# A <CP932-initial-character> can be any Unicode character that corresponds
# to a defined code page 932 character whose Windows Codepage 932 code point
# is greater than %x7F except for code points in the range %x80-FF that are
# lead bytes and except for the following code points that are explicitly
# excluded: %x8140, %x8143-8151,%x815E-8197,%x824f-8258.
#
# A <CP932-subsequent-character> is defined identically to
# <CP932-initial-character> except that code points in the range are
# %x824f-8258 are not excluded.
#
# '}'
function \
__acp__build_map_932_to_u8char() {
    # cp932 character mappings
    # '${__pp__enable_multibyte:+'
    __acp__decode_charmap(acp__S_charmap, \
        "44CALOOAgSzjgIIs77yMLO+8jizjg7ss77yaLO+8myzvvJ8s77yBLOOCmyzjgpwswrQ" \
        "s772ALMKoLO+8vizvv6Ms77y/LOODvSzjg74s44KdLOOCnizjgIMs5LudLOOAhSzjgI" \
        "Ys44CHLOODvCzigJUs4oCQLO+8jyzvvLws772eLOKIpSzvvZws4oCmLOKApSzigJgs4" \
        "oCZLOKAnCzigJ0s77yILO+8iSzjgJQs44CVLO+8uyzvvL0s772bLO+9nSzjgIgs44CJ" \
        "LOOAiizjgIss44CMLOOAjSzjgI4s44CPLOOAkCzjgJEs77yLLO+8jSzCsSzDlyzDtyz" \
        "vvJ0s4omgLO+8nCzvvJ4s4ommLOKJpyziiJ4s4oi0LOKZgizimYAswrAs4oCyLOKAsy" \
        "zihIMs77+lLO+8hCzvv6As77+hLO+8hSzvvIMs77yGLO+8iizvvKAswqcs4piGLOKYh" \
        "Szil4ss4pePLOKXjizil4cs4peGLOKWoSzilqAs4pazLOKWsizilr0s4pa8LOKAuyzj" \
        "gJIs4oaSLOKGkCzihpEs4oaTLOOAkywsLCwsLCwsLCwsLOKIiCziiIss4oqGLOKKhyz" \
        "iioIs4oqDLOKIqiziiKksLCwsLCwsLCziiKcs4oioLO+/oizih5Is4oeULOKIgCziiI" \
        "MsLCwsLCwsLCwsLCziiKAs4oqlLOKMkiziiIIs4oiHLOKJoSziiZIs4omqLOKJqyzii" \
        "Jos4oi9LOKInSziiLUs4oirLOKIrCwsLCwsLCws4oSrLOKAsCzima8s4pmtLOKZqizi" \
        "gKAs4oChLMK2LCwsLCzil68sLCwsLCwsLCwsLCwsLCws77yQLO+8kSzvvJIs77yTLO+" \
        "8lCzvvJUs77yWLO+8lyzvvJgs77yZLCwsLCwsLCzvvKEs77yiLO+8oyzvvKQs77ylLO" \
        "+8pizvvKcs77yoLO+8qSzvvKos77yrLO+8rCzvvK0s77yuLO+8ryzvvLAs77yxLO+8s" \
        "izvvLMs77y0LO+8tSzvvLYs77y3LO+8uCzvvLks77y6LCwsLCwsLO+9gSzvvYIs772D" \
        "LO+9hCzvvYUs772GLO+9hyzvvYgs772JLO+9iizvvYss772MLO+9jSzvvY4s772PLO+" \
        "9kCzvvZEs772SLO+9kyzvvZQs772VLO+9lizvvZcs772YLO+9mSzvvZosLCwsLOOBgS" \
        "zjgYIs44GDLOOBhCzjgYUs44GGLOOBhyzjgYgs44GJLOOBiizjgYss44GMLOOBjSzjg" \
        "Y4s44GPLOOBkCzjgZEs44GSLOOBkyzjgZQs44GVLOOBlizjgZcs44GYLOOBmSzjgZos" \
        "44GbLOOBnCzjgZ0s44GeLOOBnyzjgaAs44GhLOOBoizjgaMs44GkLOOBpSzjgaYs44G" \
        "nLOOBqCzjgaks44GqLOOBqyzjgaws44GtLOOBrizjga8s44GwLOOBsSzjgbIs44GzLO" \
        "OBtCzjgbUs44G2LOOBtyzjgbgs44G5LOOBuizjgbss44G8LOOBvSzjgb4s44G/LOOCg" \
        "CzjgoEs44KCLOOCgyzjgoQs44KFLOOChizjgocs44KILOOCiSzjgoos44KLLOOCjCzj" \
        "go0s44KOLOOCjyzjgpAs44KRLOOCkizjgpMsLCwsLCwsLCwsLCzjgqEs44KiLOOCoyz" \
        "jgqQs44KlLOOCpizjgqcs44KoLOOCqSzjgqos44KrLOOCrCzjgq0s44KuLOOCryzjgr" \
        "As44KxLOOCsizjgrMs44K0LOOCtSzjgrYs44K3LOOCuCzjgrks44K6LOOCuyzjgrws4" \
        "4K9LOOCvizjgr8s44OALOODgSzjg4Is44ODLOODhCzjg4Us44OGLOODhyzjg4gs44OJ" \
        "LOODiizjg4ss44OMLOODjSzjg44s44OPLOODkCzjg5Es44OSLOODkyzjg5Qs44OVLOO" \
        "Dlizjg5cs44OYLOODmSzjg5os44ObLOODnCzjg50s44OeLOODnyzjg6As44OhLOODoi" \
        "zjg6Ms44OkLOODpSzjg6Ys44OnLOODqCzjg6ks44OqLOODqyzjg6ws44OtLOODrizjg" \
        "68s44OwLOODsSzjg7Is44OzLOODtCzjg7Us44O2LCwsLCwsLCwszpEszpIszpMszpQs" \
        "zpUszpYszpcszpgszpkszposzpsszpwszp0szp4szp8szqAszqEszqMszqQszqUszqY" \
        "szqcszqgszqksLCwsLCwsLCzOsSzOsizOsyzOtCzOtSzOtizOtyzOuCzOuSzOuizOuy" \
        "zOvCzOvSzOvizOvyzPgCzPgSzPgyzPhCzPhSzPhizPhyzPiCzPiSwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLNCQLNCRLNCSLNCTLNCULNCVLNCBLNCW" \
        "LNCXLNCYLNCZLNCaLNCbLNCcLNCdLNCeLNCfLNCgLNChLNCiLNCjLNCkLNClLNCmLNC" \
        "nLNCoLNCpLNCqLNCrLNCsLNCtLNCuLNCvLCwsLCwsLCwsLCwsLCwsLNCwLNCxLNCyLN" \
        "CzLNC0LNC1LNGRLNC2LNC3LNC4LNC5LNC6LNC7LNC8LNC9LNC+LNC/LNGALNGBLNGCL" \
        "NGDLNGELNGFLNGGLNGHLNGILNGJLNGKLNGLLNGMLNGNLNGOLNGPLCwsLCwsLCwsLCws" \
        "LCzilIAs4pSCLOKUjCzilJAs4pSYLOKUlCzilJws4pSsLOKUpCzilLQs4pS8LOKUgSz" \
        "ilIMs4pSPLOKUkyzilJss4pSXLOKUoyzilLMs4pSrLOKUuyzilYss4pSgLOKUryzilK" \
        "gs4pS3LOKUvyzilJ0s4pSwLOKUpSzilLgs4pWCLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLOKRoCzikaEs4pGiLOKRoyzikaQs4pGlLOKRpizikacs4pGo" \
        "LOKRqSzikaos4pGrLOKRrCzika0s4pGuLOKRryzikbAs4pGxLOKRsizikbMs4oWgLOK" \
        "FoSzihaIs4oWjLOKFpCzihaUs4oWmLOKFpyzihags4oWpLCzjjYks44yULOOMoizjjY" \
        "0s44yYLOOMpyzjjIMs44y2LOONkSzjjZcs44yNLOOMpizjjKMs44yrLOONiizjjLss4" \
        "46cLOOOnSzjjp4s446OLOOOjyzjj4Qs446hLCwsLCwsLCws4427LOOAnSzjgJ8s4oSW" \
        "LOOPjSzihKEs44qkLOOKpSzjiqYs44qnLOOKqCzjiLEs44iyLOOIuSzjjb4s4429LOO" \
        "NvCziiZIs4omhLOKIqyziiK4s4oiRLOKImiziiqUs4oigLOKInyziir8s4oi1LOKIqS" \
        "ziiKosLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOS6nCzllJ" \
        "Ys5aiDLOmYvyzlk4As5oSbLOaMqCzlp7Ys6YCiLOiRtSzojJws56mQLOaCqizmj6Es5" \
        "rilLOaXrSzokaYs6IqmLOmvtSzmopMs5ZynLOaWoSzmibEs5a6bLOWnkCzombss6aO0" \
        "LOe1oizntr4s6a6OLOaIliznsp8s6KK3LOWuiSzlurUs5oyJLOaalyzmoYgs6ZeHLOm" \
        "ejSzmnY8s5LulLOS8iizkvY0s5L6dLOWBiSzlm7Is5aS3LOWnlCzlqIEs5bCJLOaDny" \
        "zmhI8s5oWwLOaYkyzmpIUs54K6LOeVjyznlbAs56e7LOe2rSznt68s6IODLOiQjizoo" \
        "aMs6KyCLOmBlSzpgbos5Yy7LOS6lSzkuqUs5Z+fLOiCsizpg4Es56OvLOS4gCzlo7Es" \
        "5rqiLOmAuCznqLIs6IyoLOiKiyzpsK8s5YWBLOWNsCzlkr0s5ZOhLOWboCzlp7ss5by" \
        "VLOmjsizmt6ss6IOkLOiUrSzpmaIs6ZmwLOmaoCzpn7ss5ZCLLOWPsyzlrocs54OPLO" \
        "e+vSzov4Is6ZuoLOWNryzptZws56q6LOS4kSznopMs6Ie8LOa4pizlmJgs5ZSELOasn" \
        "SzolJos6bC7LOWnpSzljqks5rWmLOeTnCzplo8s5ZmCLOS6kSzpgYss6ZuyLOiNjyzp" \
        "pIws5Y+hLOWWtizlrLAs5b2xLOaYoCzmm7Ms5qCELOawuCzms7Ms5rSpLOeRmyznm4g" \
        "s56mOLOmgtCzoi7Es6KGbLOipoCzpi60s5rayLOeWqyznm4os6aeFLOaCpizorIEs6L" \
        "aKLOmWsizmpo4s5Y6tLOWGhizlnJIs5aCwLOWlhCzlrrQs5bu2LOaAqCzmjqks5o+0L" \
        "OayvyzmvJQs54KOLOeElCznhZks54eVLOeMvyznuIEs6Im2LOiLkSzolpcs6YGgLOmJ" \
        "myzptJss5aGpLOaWvCzmsZos55SlLOWHuSzlpK4s5aWlLOW+gCzlv5ws5oq8LOaXuiz" \
        "mqKos5qynLOautCznjoss57+BLOillizptKws6bSOLOm7hCzlsqEs5rKWLOiNuyzlhI" \
        "Qs5bGLLOaGtizoh4Ys5qG2LOeJoSzkuZks5L+6LOWNuCzmgaks5ripLOepjyzpn7Ms5" \
        "LiLLOWMlizku64s5L2VLOS8vSzkvqEs5L2zLOWKoCzlj68s5ZiJLOWkjyzlq4Es5a62" \
        "LOWvoSznp5Es5pqHLOaenCzmnrYs5q2MLOaysyzngass54+CLOemjSznpr4s56i8LOe" \
        "uhyzoirEs6IubLOiMhCzojbcs6I+vLOiPkyzonaYs6KqyLOWYqSzosqgs6L+mLOmBji" \
        "zpnJ4s6JqKLOS/hCzls6gs5oiRLOeJmSznlLss6IelLOiKvSzom74s6LOALOmbhSzpp" \
        "JMs6aeVLOS7iyzkvJos6KejLOWbnizloYos5aOKLOW7uyzlv6ss5oCqLOaClCzmgaIs" \
        "5oeQLOaIkizmi5As5pS5LOmtgSzmmaYs5qKwLOa1tyzngbAs55WMLOeahizntbUs6Iq" \
        "lLOifuSzploss6ZqOLOiynSzlh7Es5Yq+LOWklizlkrMs5a6zLOW0lizmhags5qaCLO" \
        "a2ryznoo0s6JOLLOihlyzoqbIs6Y6nLOmquCzmtaws6aaoLOibmSzlnqMs5p+/LOibj" \
        "izpiI4s5YqDLOWahyzlkIQs5buTLOaLoSzmkrks5qC8LOaguCzmrrss542yLOeiuizn" \
        "qass6KaaLOinkizotass6LyDLOmDrSzplqMs6ZqULOmdqSzlraYs5bKzLOalvSzpoY0" \
        "s6aGOLOaOmyznrKAs5qirLOapvyzmorYs6bCNLOa9nyzlibIs5ZadLOaBsCzmi6ws5r" \
        "S7LOa4hyzmu5Es6JGbLOikkCzovYQs5LiULOmwuSzlj7Ys5qSbLOaouizpnoQs5qCqL" \
        "OWFnCznq4Ms6JKyLOmHnCzpjows5ZmbLOm0qCzmoKIs6IyFLOiQsSznsqUs5YiILOiL" \
        "hSznk6Ys5Lm+LOS+gyzlhqAs5a+SLOWIiizli5gs5YunLOW3uyzllpos5aCqLOWnpiz" \
        "lrows5a6YLOWvmyzlubIs5bm5LOaCoyzmhJ8s5oWjLOaGvizmj5ss5pWiLOafkSzmoZ" \
        "Ms5qO6LOasvizmrZMs5rGXLOa8oizmvpcs5r2FLOeSsCznlJgs55ujLOeciyznq78s5" \
        "66hLOewoSznt6ks57y2LOe/sCzogp0s6ImmLOiOnizoprMs6KuMLOiyqyzpgoQs6ZGR" \
        "LOmWkyzplpEs6ZaiLOmZpSzpn5Ms6aSoLOiImCzkuLgs5ZCrLOWyuCzlt4ws546pLOe" \
        "ZjCznnLws5bKpLOe/qyzotIss6ZuBLOmgkSzpoZQs6aGYLOS8gSzkvI4s5Y2xLOWWnC" \
        "zlmags5Z+6LOWlhyzlrIks5a+ELOWykCzluIws5bm+LOW/jCzmj64s5py6LOaXlyzml" \
        "6Is5pyfLOajiyzmo4Qs5qmfLOW4sCzmr4Us5rCXLOaxvSznlb8s56WILOWtoyznqIAs" \
        "57SALOW+vSzopo8s6KiYLOiytCzotbcs6LuMLOi8nSzpo6Is6aiOLOmsvCzkuoAs5YG" \
        "9LOWEgCzlppMs5a6cLOaIryzmioAs5pOsLOasuizniqAs55aRLOelhyznvqks6J+7LO" \
        "iqvCzorbAs5o6sLOiPiizpnqAs5ZCJLOWQgyzllqss5qGULOapmCzoqbAs56CnLOadt" \
        "Szpu40s5Y20LOWuoizohJos6JmQLOmAhizkuJgs5LmFLOS7hyzkvJEs5Y+KLOWQuCzl" \
        "rq4s5byTLOaApSzmlZEs5py9LOaxgizmsbIs5rOjLOeBuCznkIMs56m2LOeqriznrIg" \
        "s57SaLOezvizntaYs5penLOeJmyzljrss5bGFLOW3qCzmi5Is5ougLOaMmSzmuKAs6J" \
        "maLOiosSzot50s6Yu4LOa8gSznpqYs6a2aLOS6qCzkuqss5LqsLOS+myzkvqAs5YORL" \
        "OWFhyznq7Ys5YWxLOWHtizljZQs5YyhLOWNvyzlj6ss5ZasLOWigyzls6Es5by3LOW9" \
        "iizmgK8s5oGQLOaBrSzmjJ8s5pWZLOapiyzms4Es54uCLOeLrSznn68s6IO4LOiEhSz" \
        "oiIgs6JWOLOmDtyzpj6Es6Z+/LOmllyzpqZos5LuwLOWHnSzlsK0s5pqBLOalrSzlsY" \
        "As5puyLOaltSznjoks5qGQLOeygSzlg4Us5YukLOWdhyzlt74s6YymLOaWpCzmrKMs5" \
        "qy9LOeQtCznpoEs56a9LOetiyznt4os6Iq5LOiPjCzoob8s6KWfLOisuSzov5Es6YeR" \
        "LOWQnyzpioAs5LmdLOWAtizlj6Us5Yy6LOeLlyznjpYs55+pLOiLpizouq8s6aeGLOm" \
        "niCzpp5Is5YW3LOaEmizomZ4s5ZawLOepuizlgbYs5a+TLOmBhyzpmoUs5LiyLOarmy" \
        "zph6cs5bGRLOWxiCzmjpgs56qfLOaykyzpnbQs6L2hLOeqqiznhoos6ZqILOeygizmo" \
        "Jcs57mwLOahkSzpjaws5YuyLOWQmyzolqss6KiTLOe+pCzou40s6YOhLOWNpizooogs" \
        "56WBLOS/gizlgr4s5YiRLOWFhCzllZMs5ZytLOePqizlnoss5aWRLOW9oizlvoQs5oG" \
        "1LOaFtizmhacs5oapLOaOsizmkLos5pWsLOaZryzmoYIs5riTLOeVpiznqL0s57O7LO" \
        "e1jCzntpks57mLLOe9qyzojI4s6I2KLOibjSzoqIgs6KmjLOitpizou70s6aCaLOm2j" \
        "yzoirgs6L+OLOmvqCzliocs5oifLOaSgyzmv4As6ZqZLOahgSzlgpEs5qygLOaxuizm" \
        "vZQs56m0LOe1kCzooYAs6KijLOaciCzku7Ys5YC5LOWApizlgaUs5YW8LOWIuCzliaM" \
        "s5ZanLOWcjyzloIUs5auMLOW7uizmhrIs5oe4LOaLsyzmjbIs5qScLOaoqSznib0s54" \
        "qsLOeMriznoJQs56GvLOe1uSznnIws6IKpLOimiyzorJks6LOiLOi7kizpgaMs6Y21L" \
        "OmZuizpoZUs6aiTLOm5uCzlhYMs5Y6fLOWOsyzlubss5bymLOa4myzmupAs546ELOeP" \
        "vizntYMs6Ii3LOiogCzoq7os6ZmQLOS5jizlgIss5Y+kLOWRvCzlm7os5aeRLOWtpCz" \
        "lt7Es5bqrLOW8pyzmiLgs5pWFLOaeryzmuZYs54uQLOeziizoorQs6IKhLOiDoSzoj7" \
        "As6JmOLOiqhyzot6gs6Yi3LOmbhyzpoacs6byTLOS6lCzkupIs5LyNLOWNiCzlkYks5" \
        "ZC+LOWoryzlvows5b6hLOaCnyzmoqcs5qqOLOeRmiznooEs6KqeLOiqpCzorbcs6YaQ" \
        "LOS5nizpr4ks5LqkLOS9vCzkvq8s5YCZLOWAlizlhYks5YWsLOWKnyzlirks5Yu+LOW" \
        "Omizlj6Ms5ZCRLOWQjizlloks5Z2RLOWeoizlpb0s5a2ULOWtnSzlro8s5belLOW3py" \
        "zlt7cs5bm4LOW6gyzlupos5bq3LOW8mCzmgZIs5oWMLOaKlyzmi5gs5o6nLOaUuyzmm" \
        "IIs5pmDLOabtCzmna0s5qChLOailyzmp4ss5rGfLOa0qizmtaks5rivLOa6nSznlLIs" \
        "55qHLOehrCznqL8s57OgLOe0hSzntJgs57WeLOe2sSzogJUs6ICDLOiCryzogrEs6IW" \
        "ULOiGjyzoiKos6I2SLOihjCzooaEs6KybLOiyoizos7ws6YOKLOmFtSzpibEs56C/LO" \
        "mLvCzplqQs6ZmNLOmghSzpppks6auYLOm0uyzliZss5YqrLOWPtyzlkIgs5aOVLOaLt" \
        "yzmv6As6LGqLOi9nyzpurks5YWLLOWIuyzlkYos5Zu9LOepgCzphbcs6bWgLOm7kizn" \
        "jYQs5ryJLOiFsCznlJEs5b+9LOaDmizpqqgs54ubLOi+vCzmraQs6aCDLOS7iizlm7A" \
        "s5Z2kLOWivizlqZos5oGoLOaHhyzmmI8s5piGLOaguSzmorEs5re3LOeXlSzntLos6I" \
        "muLOmtgizkupss5L2QLOWPiSzllIYs5bWvLOW3pizlt64s5p+7LOaymSznkbMs56CCL" \
        "OipkCzpjpYs6KOfLOWdkCzluqcs5oyrLOWCtSzlgqws5YaNLOacgCzlk4ks5aGeLOWm" \
        "uyzlrrAs5b2pLOaJjSzmjqEs5qC9LOatsyzmuIgs54G9LOmHhyznioAs56CVLOegpiz" \
        "npa0s5paOLOe0sCzoj5ws6KOBLOi8iSzpmpss5YmkLOWcqCzmnZAs572qLOiyoSzlhr" \
        "Qs5Z2CLOmYqizloLos5qaKLOiCtCzlkrIs5bSOLOWfvCznopUs6be6LOS9nCzliYos5" \
        "ZKLLOaQvizmmKgs5pyULOaftSznqoQs562WLOe0oizpjK8s5qGcLOmurSznrLks5YyZ" \
        "LOWGiizliLcs5a+fLOaLtizmkq4s5pOmLOacrSzmrros6JapLOmbkSznmpAs6a+WLOa" \
        "NjCzpjIYs6a6rLOeavyzmmZIs5LiJLOWCmCzlj4Is5bGxLOaDqCzmkpIs5pWjLOahny" \
        "znh6Ys54+KLOeUoyznrpcs57qCLOialSzoroMs6LObLOmFuCzppJAs5pasLOaaqyzmr" \
        "oss5LuVLOS7lCzkvLos5L2/LOWIuizlj7gs5Y+yLOWXoyzlm5ss5aOrLOWniyzlp4ks" \
        "5ae/LOWtkCzlsY0s5biCLOW4qyzlv5cs5oCdLOaMhyzmlK8s5a2cLOaWryzmlr0s5pe" \
        "oLOaenSzmraIs5q27LOawjyznjYUs56WJLOengSzns7gs57SZLOe0qyzogqIs6ISCLO" \
        "iHsyzoppYs6KmeLOipqSzoqaYs6KqMLOirrizos4cs6LOcLOmbjCzpo7ws5q2vLOS6i" \
        "yzkvLws5L6NLOWFkCzlrZcs5a+6LOaFiCzmjIEs5pmCLOasoSzmu4ss5rK7LOeIvizn" \
        "kr0s55eULOejgSznpLos6ICMLOiAsyzoh6os6JKULOi+nizmsZAs6bm/LOW8jyzorZg" \
        "s6bSrLOeruizou7gs5a6NLOmbqyzkuIMs5Y+xLOWftyzlpLEs5auJLOWupCzmgoks5r" \
        "m/LOa8hiznlr4s6LOqLOWunyzolIAs56+gLOWBsizmn7Qs6IqdLOWxoSzolYos57ieL" \
        "OiIjizlhpks5bCELOaNqCzotaYs5pacLOeFriznpL4s57SXLOiAhSzorJ0s6LuKLOmB" \
        "rizom4cs6YKqLOWAnyzli7os5bC6LOadkyzngbws54i1LOmFjCzph4gs6YyrLOiLpSz" \
        "lr4Is5byxLOaDuSzkuLss5Y+WLOWuiCzmiYss5pyxLOauiizni6ks54+gLOeorizoha" \
        "ss6LajLOmFkizpppYs5YSSLOWPlyzlkaos5a+/LOaOiCzmqLks57asLOmcgCzlm5os5" \
        "Y+OLOWRqCzlrpcs5bCxLOW3nizkv64s5oSBLOaLvizmtLIs56eALOeniyzntYIs57mN" \
        "LOe/kizoh60s6IifLOiSkCzooYYs6KWyLOiukCzoubQs6LyvLOmAsSzphYss6YWsLOm" \
        "bhizphpws5LuALOS9jyzlhYUs5Y2BLOW+kyzmiI4s5p+ULOaxgSzmuIss542jLOe4pi" \
        "zph40s6YqDLOWPlCzlpJks5a6/LOa3kSznpZ0s57iuLOeymyzlob4s54afLOWHuizoo" \
        "ZMs6L+wLOS/iizls7ss5pilLOeerCznq6Ms6IicLOmnvyzlh4Ys5b6qLOaXrCzmpa8s" \
        "5q6JLOa3syzmupYs5r2kLOebvizntJQs5behLOmBtSzphocs6aCGLOWHpizliJ0s5om" \
        "ALOaakSzmm5ks5riaLOW6tiznt5Is572yLOabuCzolq8s6Je3LOiruCzliqks5Y+ZLO" \
        "Wlsyzluo8s5b6QLOaBlSzpi6Qs6ZmkLOWCtyzlhJ8s5YudLOWMoCzljYcs5Y+sLOWTq" \
        "CzllYYs5ZSxLOWYlyzlpags5aa+LOWovCzlrrUs5bCGLOWwjyzlsJEs5bCaLOW6hCzl" \
        "uoos5bugLOW9sCzmib8s5oqELOaLmyzmjows5o23LOaYhyzmmIws5pitLOaZtizmnb4" \
        "s5qKiLOaonyzmqLUs5rK8LOa2iCzmuIks5rmYLOeEvCznhKYs54WnLOeXhyznnIEs56" \
        "GdLOekgSznpaUs56ewLOeroCznrJEs57KnLOe0uSzogpYs6I+WLOiSiyzolYks6KGdL" \
        "OijsyzoqJ8s6Ki8LOiplCzoqbMs6LGhLOiznizphqQs6YmmLOmNvizpkJgs6ZqcLOme" \
        "mCzkuIos5LiILOS4nizkuZcs5YaXLOWJsCzln44s5aC0LOWjjCzlrKIs5bi4LOaDhSz" \
        "mk74s5p2hLOadlizmtYQs54q2LOeVsyznqaMs6JK4LOitsizphrgs6YygLOWYsSzln7" \
        "Qs6aO+LOaLrSzmpI0s5q6WLOeHrSznuZQs6IG3LOiJsizop6Ys6aOfLOidlSzovrEs5" \
        "bC7LOS8uCzkv6Es5L61LOWUhyzlqKAs5a+dLOWvqSzlv4Ms5oWOLOaMryzmlrAs5pmL" \
        "LOajrizmppss5rW4LOa3sSznlLMs55a5LOecnyznpZ4s56emLOe0syzoh6Ms6IqvLOi" \
        "Wqizopqos6Ki6LOi6qyzovpss6YCyLOmHnSzpnIcs5Lq6LOS7gSzliIMs5aG1LOWjrC" \
        "zlsIss55SaLOWwvSzohY4s6KiKLOi/hSzpmaMs6Z2tLOespSzoq48s6aCILOmFoizlm" \
        "7Ms5Y6oLOmAlyzlkLks5Z6CLOW4pSzmjqgs5rC0LOeCiiznnaEs57KLLOe/oCzoobAs" \
        "6YGCLOmFlCzpjJAs6YyYLOmajyznkZ4s6auELOW0hyzltaks5pWwLOaeoizotqgs6Zu" \
        "bLOaNrizmnYks5qSZLOiPhSzpoJcs6ZuALOijvizmvoQs5pG6LOWvuCzkuJYs54CsLO" \
        "eVnSzmmK8s5YeELOWItizli6Is5aeTLOW+gSzmgKcs5oiQLOaUvyzmlbQs5pifLOaZt" \
        "Czmo7Is5qCWLOatoyzmuIUs54myLOeUnyznm5ss57K+LOiBlizlo7As6KO9LOilvyzo" \
        "qqAs6KqTLOiriyzpgJ0s6YaSLOmdkizpnZks5paJLOeojizohIYs6Zq7LOW4rSzmg5w" \
        "s5oiaLOaWpSzmmJQs5p6QLOefsyznqY0s57GNLOe4vizohIos6LKsLOi1pCzot6Es6L" \
        "mfLOeiqSzliIcs5ouZLOaOpSzmkYIs5oqYLOiorSznqoMs56+ALOiqrCzpm6os57W2L" \
        "OiIjCzonYks5LuZLOWFiCzljYMs5Y2gLOWuoyzlsIIs5bCWLOW3nSzmiKYs5omHLOaS" \
        "sCzmoJMs5qC0LOaziSzmtYUs5rSXLOafkyzmvZws54WOLOeFvSzml4ss56m/LOeurSz" \
        "nt5os57mKLOe+qCzohbos6IibLOiIuSzolqYs6KmuLOizjizot7Us6YG4LOmBtyzpiq" \
        "0s6YqRLOmWgyzprq4s5YmNLOWWhCzmvLgs54S2LOWFqCznpoUs57mVLOiGsyzns44s5" \
        "ZmMLOWhkSzlsqgs5o6qLOabvizmm70s5qWaLOeLmSznlo8s55aOLOekjiznpZYs56ef" \
        "LOeylyzntKAs57WELOiYhyzoqLQs6Zi7LOmBoSzpvKAs5YOnLOWJtSzlj4ws5Y+iLOW" \
        "AiSzllqos5aOuLOWljyzniL0s5a6LLOWxpCzljJ0s5oOjLOaDsyzmjZws5o6DLOaMvy" \
        "zmjrss5pONLOaXqSzmm7ks5bejLOanjSzmp70s5ryVLOeHpSzkuoks55epLOebuCznq" \
        "pMs57OfLOe3jyzntpws6IGhLOiNiSzojZgs6JGsLOiSvCzol7ss6KOFLOi1sCzpgIEs" \
        "6YGtLOmOlyzpnJws6aiSLOWDjyzlopcs5oaOLOiHkyzolLUs6LSILOmAoCzkv4Ms5YG" \
        "0LOWJhyzljbMs5oGvLOaNiSzmnZ8s5risLOi2syzpgJ8s5L+XLOWxnizos4os5pePLO" \
        "e2mizljZIs6KKWLOWFtizmj4Ms5a2YLOWtqyzlsIos5pCNLOadkSzpgZws5LuWLOWkm" \
        "izlpKos5rGwLOipkSzllL4s5aCVLOWmpSzmg7As5omTLOafgSzoiLUs5qWVLOmZgCzp" \
        "p4Qs6aioLOS9kyzloIYs5a++LOiAkCzlsrEs5bivLOW+hSzmgKAs5oWLLOaItCzmm78" \
        "s5rOwLOa7nizog44s6IW/LOiLlCzoooss6LK4LOmAgCzpgK4s6ZqKLOm7myzpr5ss5L" \
        "ujLOWPsCzlpKcs56ysLOmGjSzpoYws6be5LOa7nSzngKcs5Y2TLOWVhCzlroUs5omYL" \
        "OaKnizmi5Ms5rKiLOa/ryznkKIs6KiXLOmQuCzmv4Es6Ku+LOiMuCzlh6cs6Ju4LOWP" \
        "qizlj6ks5L2GLOmBlCzovrAs5aWqLOiEsSzlt70s56uqLOi+vyzmo5os6LC3LOeLuCz" \
        "psYgs5qi9LOiqsCzkuLks5Y2YLOWYhizlnaYs5ouFLOaOoizml6Ys5q2OLOa3oSzmuZ" \
        "ss54KtLOefrSznq68s566qLOe2uyzogL0s6IOGLOibiyzoqpUs6Y2bLOWboyzlo4cs5" \
        "by+LOaWrSzmmpYs5qqALOautSznlLcs6KuHLOWApCznn6Us5ZywLOW8myzmgaUs5pm6" \
        "LOaxoCznl7Qs56iaLOe9rizoh7Qs6JyYLOmBhSzpprMs56+JLOeVnCznq7ks562RLOi" \
        "ThCzpgJAs56epLOeqkizojLYs5auhLOedgCzkuK0s5LuyLOWumSzlv6As5oq9LOaYvC" \
        "zmn7Es5rOoLOiZqyzoobcs6Ki7LOmFjizpi7Ms6aeQLOaolyzngKYs54yqLOiLpyzok" \
        "Zcs6LKvLOS4gSzlhYYs5YeLLOWWiyzlr7Us5biWLOW4syzluoEs5byULOW8tSzlvass" \
        "5b60LOaHsizmjJEs5pqiLOacnSzmva4s54mSLOeUuiznnLos6IG0LOiEuSzohbgs6J2" \
        "2LOiqvyzoq5ws6LaFLOi3syzpipos6ZW3LOmggizps6Us5YuFLOaNlyznm7Qs5pyVLO" \
        "ayiCznj40s6LODLOmOrizpmbMs5rSlLOWinCzmpI4s5qeMLOi/vSzpjpos55ebLOmAm" \
        "izloZos5qCCLOaOtCzmp7ss5L2DLOa8rCzmn5gs6L67LOiUpizntrQs6Y2ULOakvyzm" \
        "vbAs5Z2qLOWjtyzlrKws57SsLOeIqizlkIos6YejLOm2tCzkuq0s5L2OLOWBnCzlgbU" \
        "s5YmDLOiynizlkYgs5aCkLOWumizluJ0s5bqVLOW6rSzlu7cs5byfLOaCjCzmirUs5o" \
        "y6LOaPkCzmoq8s5rGALOeihyznpo4s56iLLOe3oCzoiYcs6KiCLOirpizouYQs6YCTL" \
        "OmCuCzphK0s6YeYLOm8jizms6Us5pGYLOaToizmlbUs5ru0LOeahCznrJss6YGpLOmP" \
        "kSzmuros5ZOyLOW+uSzmkqQs6L2NLOi/rSzpiYQs5YW4LOWhqyzlpKks5bGVLOW6lyz" \
        "mt7ss57qPLOeUnCzosrws6LuiLOmhmyzngrks5LydLOauvyzmvrEs55SwLOmbuyzlhY" \
        "4s5ZCQLOWgtSzloZcs5aasLOWxoCzlvpIs5paXLOadnCzmuKEs55m7LOiPnyzos60s6" \
        "YCULOmDvSzpjY0s56ClLOeguizliqos5bqmLOWcnyzlpbQs5oCSLOWAkizlhZos5Yas" \
        "LOWHjSzliIAs5ZSQLOWhlCzloZgs5aWXLOWulSzls7Ys5baLLOaCvCzmipUs5pCtLOa" \
        "dsSzmoYMs5qK8LOajnyznm5cs5reYLOa5ryzmtpss54GvLOeHiCzlvZMs55eYLOelty" \
        "znrYks562ULOetkizns5Ys57WxLOWIsCzokaMs6JWpLOiXpCzoqI4s6KyELOixhizou" \
        "I8s6YCDLOmAjyzpkJks6Zm2LOmgrSzpqLAs6ZeYLOWDjSzli5Us5ZCMLOWggizlsI4s" \
        "5oanLOaSnizmtJ4s556zLOerpSzog7Qs6JCELOmBkyzpioUs5bOgLOm0hyzljL8s5b6" \
        "XLOW+syzmtpws54m5LOedoyznpr8s56+kLOavkizni6ws6KqtLOaggyzmqaEs5Ye4LO" \
        "eqgSzmpLQs5bGKLOmztizoi6ss5a+FLOmFiSzngJ4s5Zm4LOWxryzmg4cs5pWmLOayj" \
        "CzosZos6YGBLOmgkyzlkZEs5puHLOmIjSzlpYgs6YKjLOWGhSzkuY0s5YeqLOiWmSzo" \
        "rI4s54GYLOaNuizpjYss5qWiLOmmtCznuIQs55W3LOWNlyzmpaAs6LufLOmboyzmsZ0" \
        "s5LqMLOWwvCzlvJAs6L+pLOWMgizos5Es6IKJLOiZuSzlu78s5pelLOS5syzlhaUs5a" \
        "aCLOWwvyzpn64s5Lu7LOWmiizlv40s6KqNLOa/oSznprAs56WiLOWvpyzokbEs54yrL" \
        "OeGsSzlubQs5b+1LOaNuyzmkpos54eDLOeymCzkuYMs5bu8LOS5iyzln5ws5ZqiLOaC" \
        "qSzmv4Ms57SNLOiDvSzohLMs6Ia/LOi+sizoppcs6JqkLOW3tCzmioos5pKtLOimhyz" \
        "mnbcs5rOiLOa0viznkLYs56C0LOWphiznvbUs6IqtLOmmrCzkv7Ms5buDLOaLnSzmjp" \
        "Is5pWXLOadryznm4Ms54mMLOiDjCzogros6LypLOmFjSzlgI0s5Z+5LOWqkizmooUs5" \
        "qWzLOeFpCzni70s6LK3LOWjsizos6As6ZmqLOmAmSzonb8s56ekLOefpyzokKks5Lyv" \
        "LOWJpSzljZos5ouNLOafjyzms4os55m9LOeulCznspUs6Ii2LOiWhCzov6ss5pudLOa" \
        "8oCzniIYs57ibLOiOqyzpp4Es6bqmLOWHvSznrrEs56GyLOeuuCzogocs562ILOarqC" \
        "zluaEs6IKMLOeVkSznlaAs5YWrLOmJoizmuows55m6LOmGlyzpq6os5LyQLOe9sCzmi" \
        "pws562PLOmWpSzps6ks5Zm6LOWhmSzom6Qs6Zq8LOS8tCzliKQs5Y2KLOWPjSzlj5ss" \
        "5biGLOaQrCzmlpEs5p2/LOawvizmsY4s54mILOeKryznj60s55WULOe5gSzoiKws6Je" \
        "pLOiyqSznr4Qs6YeGLOeFqSzpoJIs6aOvLOaMvSzmmaks55WqLOebpCzno5As6JWDLO" \
        "ibrizljKos5Y2RLOWQpizlpoMs5bqHLOW9vCzmgrIs5omJLOaJuSzmiqss5paQLOavl" \
        "Czms4ws55ayLOeariznopEs56eYLOe3iyznvbcs6IKlLOiiqyzoqrks6LK7LOmBvyzp" \
        "nZ4s6aObLOaoiyznsLgs5YKZLOWwvizlvq4s5p6HLOavmCznkLUs55yJLOe+jizpvLs" \
        "s5p+KLOeolyzljLks55aLLOmrrSzlvaYs6IadLOiPsSzogpgs5by8LOW/hSznlaIs56" \
        "2GLOmAvCzmoacs5aerLOWqmyzntJAs55m+LOisrCzkv7Us5b2qLOaomSzmsLcs5ryCL" \
        "OeToiznpags6KGoLOiplSzosbks5bufLOaPjyznl4Us56eSLOiLlyzpjKgs6YuyLOiS" \
        "nCzom60s6bCtLOWTgSzlvaws5paMLOa1nCzngJUs6LKnLOizkyzpoLss5pWPLOeTtiz" \
        "kuI0s5LuYLOWfoCzlpKss5ammLOWvjCzlhqgs5biDLOW6nCzmgJYs5om2LOaVtyzmlq" \
        "cs5pmuLOa1rizniLYs56ymLOiFkCzohpos6IqZLOitnCzosqAs6LOmLOi1tCzpmJws6" \
        "ZmELOS+rizmkqss5q2mLOiInizokaEs6JWqLOmDqCzlsIEs5qWTLOmiqCzokbos6JWX" \
        "LOS8jyzlia8s5b6pLOW5hSzmnI0s56aPLOiFuSzopIcs6KaGLOa3tSzlvJcs5omVLOa" \
        "yuCzku48s54mpLOmukizliIYs5ZC7LOWZtCzlorMs5oakLOaJriznhJos5aWuLOeyiS" \
        "zns54s57SbLOmbsCzmlocs6IGeLOS4mSzkvbUs5YW1LOWhgCzluaMs5bmzLOW8iizmn" \
        "4Qs5LimLOiUvSzploks6ZmbLOexsyzpoIEs5YO7LOWjgSznmZYs56KnLOWIpSznnqUs" \
        "6JSRLOeuhizlgY8s5aSJLOeJhyznr4cs57eoLOi+uizov5Qs6YGNLOS+vyzli4ks5ai" \
        "pLOW8gSzpnq0s5L+dLOiIlyzpi6os5ZyDLOaNlSzmraks55SrLOijnCzovJQs56mCLO" \
        "WLnyzlopMs5oWVLOaIiizmmq4s5q+NLOewvyzoj6ks5YCjLOS/uCzljIUs5ZGGLOWgs" \
        "SzlpYks5a6dLOWzsCzls68s5bSpLOW6lizmirEs5o2nLOaUvizmlrks5pyLLOazlSzm" \
        "s6Es54O5LOegsiznuKss6IOeLOiKsyzokIws6JOsLOicgizopJIs6KiqLOixiizpgqY" \
        "s6YuSLOmjvSzps7Ms6bWsLOS5jyzkuqEs5YKNLOWJlizlnYos5aaoLOW4vSzlv5gs5b" \
        "+ZLOaIvyzmmrQs5pybLOafkCzmo5Is5YaSLOe0oSzogqos6IaoLOisgCzosows6LK/L" \
        "OmJvizpmLIs5ZCgLOmgrCzljJcs5YOVLOWNnCzloqgs5pKyLOactCzniacs552mLOep" \
        "hizph6Ys5YuDLOayoSzmroYs5aCALOW5jCzlpZQs5pysLOe/uyzlh6Es55uGLOaRqSz" \
        "no6gs6a2ULOm6uyzln4ss5aa5LOaYpyzmnpos5q+OLOWTqSzmp5ks5bmVLOiGnCzmnp" \
        "Us6a6qLOafvizpsZIs5qGdLOS6pizkv6Ms5Y+ILOaKuSzmnKss5rKrLOi/hCzkvq0s5" \
        "7mtLOm6vyzkuIcs5oWiLOa6gCzmvKss6JSTLOWRsyzmnKos6a2FLOW3syznrpUs5bKs" \
        "LOWvhizonJws5rmKLOiTkSznqJQs6ISILOWmmSznso0s5rCRLOecoCzli5ks5aSiLOe" \
        "EoSzniZ8s55+bLOmcpyzptaEs5qSLLOWpvyzlqJgs5YalLOWQjSzlkb0s5piOLOebny" \
        "zov7cs6YqYLOmztCzlp6os54mdLOa7hSzlhY0s5qOJLOe2vyznt6ws6Z2iLOm6uizmk" \
        "bgs5qihLOiMgizlpoQs5a2fLOavmyznjJss55uyLOe2sizogJcs6JKZLOWEsizmnKgs" \
        "6buZLOebrizmnaIs5Yu/LOmkhSzlsKQs5oi7LOexvizosrAs5ZWPLOaCtizntIss6Za" \
        "ALOWMgSzkuZ8s5Ya2LOWknCzniLos6IC2LOmHjizlvKUs55+iLOWOhCzlvbks57SELO" \
        "iWrCzoqLMs6LqNLOmdlizmn7Ms6JauLOmRkyzmhIks5oSILOayuSznmZIs6KutLOi8u" \
        "CzllK8s5L2RLOWEqizli4cs5Y+LLOWupSzlub0s5oKgLOaGgizmj5Ys5pyJLOafmizm" \
        "uacs5raMLOeMtiznjLcs55SxLOelkCzoo5Us6KqYLOmBiizpgpEs6YO1LOmbhCzono0" \
        "s5aSVLOS6iCzkvZks5LiOLOiqiSzovL8s6aCQLOWCrSzlubws5aaWLOWuuSzlurgs5o" \
        "+aLOaPuizmk4Es5pucLOaliizmp5gs5rSLLOa6tiznhpQs55SoLOeqryznvoos6ICAL" \
        "OiRiSzok4ks6KaBLOisoSzouIos6YGlLOmZvSzppIos5oW+LOaKkSzmrLIs5rKDLOa1" \
        "tCznv4ws57+8LOa3gCznvoUs6J66LOijuCzmnaUs6I6xLOmgvCzpm7cs5rSbLOe1oSz" \
        "okL0s6YWqLOS5sSzljbUs5bWQLOashCzmv6ss6JeNLOiYrSzopqcs5YipLOWQjyzlsa" \
        "Us5p2OLOaiqCznkIYs55KDLOeXoizoo48s6KOhLOmHjCzpm6Is6Zm4LOW+iyznjocs5" \
        "6uLLOiRjizmjqAs55WlLOWKiSzmtYEs5rqcLOeQiSznlZks56GrLOeykizpmoYs56uc" \
        "LOm+jSzkvrYs5oWuLOaXhSzomZws5LqGLOS6rizlg5os5LihLOWHjCzlr64s5paZLOa" \
        "igSzmtrws54yfLOeZgiznnq0s56icLOezpyzoia8s6KuSLOmBvCzph48s6Zm1LOmgmC" \
        "zlipss57eRLOWAqyzljpgs5p6XLOa3iyznh5As55CzLOiHqCzovKos6ZqjLOmxlyzpu" \
        "p8s55GgLOWhgSzmtpks57SvLOmhnizku6Qs5Ly2LOS+iyzlhrcs5YqxLOW2uizmgJws" \
        "546yLOekvCzoi5Ms6Yi0LOmatyzpm7Ys6ZyKLOm6lyzpvaIs5pqmLOattCzliJcs5Yq" \
        "jLOeDiCzoo4Is5buJLOaBiyzmhpAs5ryjLOeFiSznsL4s57e0LOiBryzok64s6YCjLO" \
        "mMrCzlkYIs6a2vLOarkyzngoks6LOCLOi3ryzpnLIs5Yq0LOWpgSzlu4os5byELOacl" \
        "yzmpbws5qaULOa1qizmvI8s54miLOeLvCznr60s6ICBLOiBvizonYss6YOOLOWFrSzp" \
        "upMs56aELOiCiyzpjLIs6KuWLOWArSzlkows6KmxLOatqizos4Qs6ISHLOaDkSzmnqA" \
        "s6beyLOS6mSzkupgs6bCQLOipqyzol4Es6JWoLOakgCzmub4s56KXLOiFlSwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws5byMLOS4kCzkuJUs5" \
        "LiqLOS4sSzkuLYs5Li8LOS4vyzkuYIs5LmWLOS5mCzkuoIs5LqFLOixqyzkuoos6IiS" \
        "LOW8jSzkuo4s5LqeLOS6nyzkuqAs5LqiLOS6sCzkurMs5Lq2LOS7jizku40s5LuELOS" \
        "7hizku4Is5LuXLOS7nizku60s5LufLOS7tyzkvIks5L2aLOS8sCzkvZss5L2dLOS9ly" \
        "zkvYcs5L22LOS+iCzkvo8s5L6YLOS9uyzkvaks5L2wLOS+kSzkva8s5L6GLOS+lizlh" \
        "Jgs5L+ULOS/nyzkv44s5L+YLOS/myzkv5Es5L+aLOS/kCzkv6Qs5L+lLOWAmizlgKgs" \
        "5YCULOWAqizlgKUs5YCFLOS8nCzkv7Ys5YChLOWAqSzlgKws5L++LOS/ryzlgJEs5YC" \
        "GLOWBgyzlgYcs5pyDLOWBlSzlgZAs5YGILOWBmizlgZYs5YGsLOWBuCzlgoAs5YKaLO" \
        "WChSzlgrQs5YKyLOWDiSzlg4os5YKzLOWDgizlg5Ys5YOeLOWDpSzlg60s5YOjLOWDr" \
        "izlg7ks5YO1LOWEiSzlhIEs5YSCLOWElizlhJUs5YSULOWEmizlhKEs5YS6LOWEtyzl" \
        "hLws5YS7LOWEvyzlhYAs5YWSLOWFjCzlhZQs5YWiLOeruCzlhaks5YWqLOWFrizlhoA" \
        "s5YaCLOWbmCzlhows5YaJLOWGjyzlhpEs5YaTLOWGlSzlhpYs5YakLOWGpizlhqIs5Y" \
        "apLOWGqizlhqss5YazLOWGsSzlhrIs5YawLOWGtSzlhr0s5YeFLOWHiSzlh5ss5YegL" \
        "OiZlSzlh6ks5YetLOWHsCzlh7Us5Ye+LOWIhCzliIss5YiULOWIjizliKcs5YiqLOWI" \
        "rizliLMs5Yi5LOWJjyzliYQs5YmLLOWJjCzliZ4s5YmULOWJqizlibQs5YmpLOWJsyz" \
        "lib8s5Ym9LOWKjSzlipQs5YqSLOWJsSzliogs5YqRLOi+qCzovqcs5YqsLOWKrSzlir" \
        "ws5Yq1LOWLgSzli40s5YuXLOWLnizli6Ms5YumLOmjrSzli6As5YuzLOWLtSzli7gs5" \
        "Yu5LOWMhizljIgs55S4LOWMjSzljJAs5YyPLOWMlSzljJos5YyjLOWMryzljLEs5Yyz" \
        "LOWMuCzljYAs5Y2GLOWNhSzkuJcs5Y2JLOWNjSzlh5Ys5Y2eLOWNqSzlja4s5aSYLOW" \
        "Nuyzljbcs5Y6CLOWOlizljqAs5Y6mLOWOpSzljq4s5Y6wLOWOtizlj4Ms57CSLOmbmS" \
        "zlj58s5pu8LOeHrizlj64s5Y+oLOWPrSzlj7os5ZCBLOWQvSzlkYAs5ZCsLOWQrSzlk" \
        "Lws5ZCuLOWQtizlkKks5ZCdLOWRjizlko8s5ZG1LOWSjizlkZ8s5ZGxLOWRtyzlkbAs" \
        "5ZKSLOWRuyzlkoAs5ZG2LOWShCzlkpAs5ZKGLOWThyzlkqIs5ZK4LOWSpSzlkqws5ZO" \
        "ELOWTiCzlkqgs5ZKrLOWTgizlkqQs5ZK+LOWSvCzlk5gs5ZOlLOWTpizllI8s5ZSULO" \
        "WTvSzlk64s5ZOtLOWTuizlk6Is5ZS5LOWVgCzllaMs5ZWMLOWUrizllZws5ZWFLOWVl" \
        "izllZcs5ZS4LOWUsyzllZ0s5ZaZLOWWgCzlkq8s5ZaKLOWWnyzllbss5ZW+LOWWmCzl" \
        "lp4s5ZauLOWVvCzlloMs5ZapLOWWhyzllqgs5ZeaLOWXhSzll58s5ZeELOWXnCzll6Q" \
        "s5ZeULOWYlCzll7cs5ZiWLOWXvizll70s5ZibLOWXuSzlmY4s5ZmQLOeHnyzlmLQs5Z" \
        "i2LOWYsizlmLgs5ZmrLOWZpCzlmK8s5ZmsLOWZqizlmoYs5ZqALOWaiizlmqAs5ZqUL" \
        "OWajyzlmqUs5ZquLOWatizlmrQs5ZuCLOWavCzlm4Es5ZuDLOWbgCzlm4gs5ZuOLOWb" \
        "kSzlm5Ms5ZuXLOWbrizlm7ks5ZyALOWbvyzlnIQs5ZyJLOWciCzlnIss5ZyNLOWckyz" \
        "lnJgs5ZyWLOWXhyzlnJws5ZymLOWctyzlnLgs5Z2OLOWcuyzlnYAs5Z2PLOWdqSzln4" \
        "As5Z6ILOWdoSzlnb8s5Z6JLOWekyzlnqAs5Z6zLOWepCzlnqos5Z6wLOWfgyzln4Ys5" \
        "Z+ULOWfkizln5Ms5aCKLOWflizln6Ms5aCLLOWgmSzloJ0s5aGyLOWgoSzloaIs5aGL" \
        "LOWhsCzmr4As5aGSLOWgvSzlobks5aKFLOWiuSzlop8s5aKrLOWiuizlo54s5aK7LOW" \
        "iuCzloq4s5aOFLOWjkyzlo5Es5aOXLOWjmSzlo5gs5aOlLOWjnCzlo6Qs5aOfLOWjry" \
        "zlo7os5aO5LOWjuyzlo7ws5aO9LOWkgizlpIos5aSQLOWkmyzmoqYs5aSlLOWkrCzlp" \
        "K0s5aSyLOWkuCzlpL4s56uSLOWllSzlpZAs5aWOLOWlmizlpZgs5aWiLOWloCzlpacs" \
        "5aWsLOWlqSzlpbgs5aaBLOWmnSzkvZ4s5L6rLOWmoyzlprIs5aeGLOWnqCzlp5ws5aa" \
        "NLOWnmSzlp5os5ailLOWonyzlqJEs5aicLOWoiSzlqJos5amALOWprCzlqYks5ai1LO" \
        "WotizlqaIs5amqLOWqmizlqrws5aq+LOWriyzlq4Is5aq9LOWroyzlq5cs5aumLOWrq" \
        "Szlq5Ys5au6LOWruyzlrIws5ayLLOWslizlrLIs5auQLOWsqizlrLYs5ay+LOWtgyzl" \
        "rYUs5a2ALOWtkSzlrZUs5a2aLOWtmyzlraUs5a2pLOWtsCzlrbMs5a21LOWtuCzmlog" \
        "s5a26LOWugCzlroMs5a6mLOWuuCzlr4Ms5a+HLOWviSzlr5Qs5a+QLOWvpCzlr6Ys5a" \
        "+iLOWvnizlr6Us5a+rLOWvsCzlr7Ys5a+zLOWwhSzlsIcs5bCILOWwjSzlsJMs5bCgL" \
        "OWwoizlsKgs5bC4LOWwuSzlsYEs5bGGLOWxjizlsZMs5bGQLOWxjyzlrbEs5bGsLOWx" \
        "rizkuaIs5bG2LOWxuSzlsows5bKRLOWylCzlppss5bKrLOWyuyzlsrYs5bK8LOWytyz" \
        "ls4Us5bK+LOWzhyzls5ks5bOpLOWzvSzls7os5bOtLOW2jCzls6os5bSLLOW0lSzltJ" \
        "cs5bWcLOW0nyzltJss5bSRLOW0lCzltKIs5bSaLOW0mSzltJgs5bWMLOW1kizltY4s5" \
        "bWLLOW1rCzltbMs5bW2LOW2hyzltoQs5baCLOW2oizltp0s5basLOW2rizltr0s5baQ" \
        "LOW2tyzltrws5beJLOW3jSzlt5Ms5beSLOW3lizlt5ss5berLOW3sizlt7Us5biLLOW" \
        "4mizluJks5biRLOW4myzluLYs5bi3LOW5hCzluYMs5bmALOW5jizluZcs5bmULOW5ny" \
        "zluaIs5bmkLOW5hyzlubUs5bm2LOW5uizpurws5bm/LOW6oCzlu4Es5buCLOW7iCzlu" \
        "5As5buPLOW7lizlu6Ms5budLOW7mizlu5ss5buiLOW7oSzlu6gs5bupLOW7rCzlu7Es" \
        "5buzLOW7sCzlu7Qs5bu4LOW7vizlvIMs5byJLOW9nSzlvZws5byLLOW8kSzlvJYs5by" \
        "pLOW8rSzlvLgs5b2BLOW9iCzlvYws5b2OLOW8ryzlvZEs5b2WLOW9lyzlvZks5b2hLO" \
        "W9rSzlvbMs5b23LOW+gyzlvoIs5b2/LOW+iizlvogs5b6RLOW+hyzlvp4s5b6ZLOW+m" \
        "CzlvqAs5b6oLOW+rSzlvrws5b+WLOW/uyzlv6Qs5b+4LOW/sSzlv50s5oKzLOW/vyzm" \
        "gKEs5oGgLOaAmSzmgJAs5oCpLOaAjizmgLEs5oCbLOaAlSzmgKss5oCmLOaAjyzmgLo" \
        "s5oGaLOaBgSzmgaos5oG3LOaBnyzmgYos5oGGLOaBjSzmgaMs5oGDLOaBpCzmgYIs5o" \
        "GsLOaBqyzmgZks5oKBLOaCjSzmg6cs5oKDLOaCmizmgoQs5oKbLOaClizmgpcs5oKSL" \
        "OaCpyzmgoss5oOhLOaCuCzmg6As5oOTLOaCtCzlv7As5oK9LOaDhizmgrUs5oOYLOaF" \
        "jSzmhJUs5oSGLOaDtizmg7cs5oSALOaDtCzmg7os5oSDLOaEoSzmg7ss5oOxLOaEjSz" \
        "mhI4s5oWHLOaEvizmhKgs5oSnLOaFiizmhL8s5oS8LOaErCzmhLQs5oS9LOaFgizmhY" \
        "Qs5oWzLOaFtyzmhZgs5oWZLOaFmizmhass5oW0LOaFryzmhaUs5oWxLOaFnyzmhZ0s5" \
        "oWTLOaFtSzmhpks5oaWLOaGhyzmhqws5oaULOaGmizmhoos5oaRLOaGqyzmhq4s5oeM" \
        "LOaHiizmh4ks5oe3LOaHiCzmh4Ms5oeGLOaGuizmh4ss5725LOaHjSzmh6Ys5oejLOa" \
        "Htizmh7os5oe0LOaHvyzmh70s5oe8LOaHvizmiIAs5oiILOaIiSzmiI0s5oiMLOaIlC" \
        "zmiJss5oieLOaIoSzmiKos5oiuLOaIsCzmiLIs5oizLOaJgSzmiY4s5omeLOaJoyzmi" \
        "Zss5omgLOaJqCzmibws5oqCLOaKiSzmib4s5oqSLOaKkyzmipYs5ouULOaKgyzmipQs" \
        "5ouXLOaLkSzmirss5ouPLOaLvyzmi4Ys5pOULOaLiCzmi5ws5ouMLOaLiizmi4Is5ou" \
        "HLOaKmyzmi4ks5oyMLOaLrizmi7Es5oynLOaMgizmjIgs5ouvLOaLtSzmjZAs5oy+LO" \
        "aNjSzmkJws5o2PLOaOlizmjo4s5o6ALOaOqyzmjbYs5o6jLOaOjyzmjoks5o6fLOaOt" \
        "Szmjass5o2pLOaOvizmj6ks5o+ALOaPhizmj6Ms5o+JLOaPkizmj7Ys5o+ELOaQlizm" \
        "kLQs5pCGLOaQkyzmkKYs5pC2LOaUnSzmkJcs5pCoLOaQjyzmkacs5pGvLOaRtizmkY4" \
        "s5pSqLOaSlSzmkpMs5pKlLOaSqSzmkogs5pK8LOaTmizmk5Is5pOFLOaThyzmkrss5p" \
        "OYLOaTgizmk7Es5pOnLOiIiSzmk6As5pOhLOaKrCzmk6Ms5pOvLOaUrCzmk7Ys5pO0L" \
        "OaTsizmk7os5pSALOaTvSzmlJgs5pScLOaUhSzmlKQs5pSjLOaUqyzmlLQs5pS1LOaU" \
        "tyzmlLYs5pS4LOeViyzmlYgs5pWWLOaVlSzmlY0s5pWYLOaVnizmlZ0s5pWyLOaVuCz" \
        "mloIs5paDLOiuiizmlpss5pafLOaWqyzmlrcs5peDLOaXhizml4Es5peELOaXjCzml5" \
        "Is5pebLOaXmSzml6As5pehLOaXsSzmnbIs5piKLOaYgyzml7ss5p2zLOaYtSzmmLYs5" \
        "pi0LOaYnCzmmY8s5pmELOaZiSzmmYEs5pmeLOaZnSzmmaQs5pmnLOaZqCzmmZ8s5pmi" \
        "LOaZsCzmmoMs5pqILOaajizmmoks5pqELOaamCzmmp0s5puBLOaauSzmm4ks5pq+LOa" \
        "avCzmm4Qs5pq4LOablizmm5os5pugLOaYvyzmm6Ys5pupLOabsCzmm7Us5pu3LOacjy" \
        "zmnJYs5pyeLOacpizmnKcs6Zy4LOacrizmnL8s5py2LOadgSzmnLgs5py3LOadhizmn" \
        "Z4s5p2gLOadmSzmnaMs5p2kLOaeiSzmnbAs5p6pLOadvCzmnaos5p6MLOaeiyzmnqYs" \
        "5p6hLOaehSzmnrcs5p+vLOaetCzmn6ws5p6zLOafqSzmnrgs5p+kLOafnizmn50s5p+" \
        "iLOafrizmnrks5p+OLOafhizmn6cs5qqcLOagnizmoYYs5qCpLOahgCzmoY0s5qCyLO" \
        "ahjizmorMs5qCrLOahmSzmoaMs5qG3LOahvyzmop8s5qKPLOairSzmopQs5qKdLOaim" \
        "yzmooMs5qquLOaiuSzmobQs5qK1LOaioCzmoros5qSPLOaijSzmob4s5qSBLOajiizm" \
        "pIgs5qOYLOakoizmpKYs5qOhLOakjCzmo40s5qOULOajpyzmo5Us5qS2LOakkizmpIQ" \
        "s5qOXLOajoyzmpKUs5qO5LOajoCzmo68s5qSoLOakqizmpJos5qSjLOakoSzmo4Ys5q" \
        "W5LOaltyzmpZws5qW4LOalqyzmpZQs5qW+LOalrizmpLks5qW0LOakvSzmpZks5qSwL" \
        "OaloSzmpZ4s5qWdLOamgSzmpaos5qayLOamrizmp5As5qa/LOangSzmp5Ms5qa+LOan" \
        "jizlr6gs5qeKLOannSzmprss5qeDLOampyzmqK4s5qaRLOamoCzmppws5qaVLOamtCz" \
        "mp54s5qeoLOaogizmqJss5qe/LOasiizmp7ks5qeyLOanpyzmqIUs5qaxLOaonizmp6" \
        "0s5qiULOanqyzmqIos5qiSLOargSzmqKMs5qiTLOaphCzmqIws5qmyLOaotizmqbgs5" \
        "qmHLOapoizmqZks5qmmLOapiCzmqLgs5qiiLOaqkCzmqo0s5qqgLOaqhCzmqqIs5qqj" \
        "LOaqlyzomJcs5qq7LOargyzmq4Is5qq4LOaqsyzmqqws5queLOarkSzmq58s5qqqLOa" \
        "rmizmq6os5qu7LOashSzomJYs5qu6LOaskizmrJYs6ayxLOasnyzmrLgs5qy3LOebnC" \
        "zmrLks6aOuLOathyzmrYMs5q2JLOatkCzmrZks5q2ULOatmyzmrZ8s5q2hLOatuCzmr" \
        "bks5q2/LOaugCzmroQs5q6DLOaujSzmrpgs5q6VLOaunizmrqQs5q6qLOauqyzmrq8s" \
        "5q6yLOausSzmrrMs5q63LOauvCzmr4Ys5q+LLOavkyzmr58s5q+sLOavqyzmr7Ms5q+" \
        "vLOm6vizmsIgs5rCTLOawlCzmsJss5rCkLOawoyzmsZ4s5rGVLOaxoizmsaos5rKCLO" \
        "ayjSzmspos5rKBLOaymyzmsb4s5rGoLOaxsyzmspIs5rKQLOazhCzms7Es5rOTLOayv" \
        "Szms5cs5rOFLOaznSzmsq4s5rKxLOayvizmsros5rObLOazryzms5ks5rOqLOa0nyzo" \
        "oY0s5rS2LOa0qyzmtL0s5rS4LOa0mSzmtLUs5rSzLOa0kizmtIws5rWjLOa2kyzmtaQ" \
        "s5rWaLOa1uSzmtZks5raOLOa2lSzmv6Qs5raFLOa3uSzmuJUs5riKLOa2tSzmt4cs5r" \
        "emLOa2uCzmt4Ys5resLOa3nizmt4ws5reoLOa3kizmt4Us5re6LOa3mSzmt6Qs5reVL" \
        "Oa3qizmt64s5ritLOa5rizmuK4s5riZLOa5sizmuZ8s5ri+LOa4oyzmuass5rirLOa5" \
        "tizmuY0s5rifLOa5gyzmuLos5rmOLOa4pCzmu78s5ridLOa4uCzmuoIs5rqqLOa6mCz" \
        "mu4ks5rq3LOa7kyzmur0s5rqvLOa7hCzmurIs5ruULOa7lSzmuo8s5rqlLOa7gizmup" \
        "8s5r2BLOa8kSzngYws5rusLOa7uCzmu74s5ry/LOa7sizmvLEs5ruvLOa8sizmu4ws5" \
        "ry+LOa8kyzmu7cs5r6GLOa9uizmvbgs5r6BLOa+gCzmva8s5r2bLOa/syzmva0s5r6C" \
        "LOa9vCzmvZgs5r6OLOa+kSzmv4Is5r2mLOa+syzmvqMs5r6hLOa+pCzmvrks5r+GLOa" \
        "+qizmv58s5r+VLOa/rCzmv5Qs5r+YLOa/sSzmv64s5r+bLOeAiSzngIss5r+6LOeAkS" \
        "zngIEs54CPLOa/vizngJss54CaLOa9tCzngJ0s54CYLOeAnyzngLAs54C+LOeAsizng" \
        "ZEs54GjLOeCmSzngpIs54KvLOeDsSzngqws54K4LOeCsyzngq4s54OfLOeDiyzng50s" \
        "54OZLOeEiSzng70s54ScLOeEmSznhaUs54WVLOeGiCznhaYs54WiLOeFjCznhZYs54W" \
        "sLOeGjyznh7ss54aELOeGlSznhqgs54asLOeHlyznhrks54a+LOeHkiznh4ks54eULO" \
        "eHjiznh6As54esLOeHpyznh7Us54e8LOeHuSznh78s54iNLOeIkCzniJss54ioLOeIr" \
        "SzniKws54iwLOeIsizniLss54i8LOeIvyzniYAs54mGLOeJiyzniZgs54m0LOeJvizn" \
        "ioIs54qBLOeKhyznipIs54qWLOeKoizniqcs54q5LOeKsizni4Ms54uGLOeLhCzni44" \
        "s54uSLOeLoizni6As54uhLOeLuSzni7cs5YCPLOeMlyznjIos54ycLOeMliznjJ0s54" \
        "y0LOeMryznjKks54ylLOeMviznjY4s542PLOm7mCznjZcs542qLOeNqCznjbAs5424L" \
        "OeNtSznjbss5426LOePiCznjrMs54+OLOeOuyznj4As54+lLOePriznj54s55KiLOeQ" \
        "hSznka8s55ClLOePuCznkLIs55C6LOeRlSznkL8s55GfLOeRmSznkYEs55GcLOeRqSz" \
        "nkbAs55GjLOeRqiznkbYs55G+LOeSiyznkp4s55KnLOeTiiznk48s55OULOePsSznk6" \
        "As55OjLOeTpyznk6ks55OuLOeTsiznk7As55OxLOeTuCznk7cs55SELOeUgyznlIUs5" \
        "5SMLOeUjiznlI0s55SVLOeUkyznlJ4s55SmLOeUrCznlLws55WELOeVjSznlYos55WJ" \
        "LOeVmyznlYYs55WaLOeVqSznlaQs55WnLOeVqyznla0s55W4LOeVtiznloYs55aHLOe" \
        "VtCznloos55aJLOeWgiznlpQs55aaLOeWnSznlqUs55ajLOeXgiznlrMs55eDLOeWtS" \
        "znlr0s55a4LOeWvCznlrEs55eNLOeXiiznl5Is55eZLOeXoyznl54s55e+LOeXvyznl" \
        "7ws55iBLOeXsCznl7os55eyLOeXsyznmIss55iNLOeYiSznmJ8s55inLOeYoCznmKEs" \
        "55iiLOeYpCznmLQs55iwLOeYuyznmYcs55mILOeZhiznmZws55mYLOeZoSznmaIs55m" \
        "oLOeZqSznmaos55mnLOeZrCznmbAs55myLOeZtiznmbgs55m8LOeagCznmoMs55qILO" \
        "eaiyznmo4s55qWLOeakyznmpks55qaLOeasCznmrQs55q4LOeauSznmros55uCLOebj" \
        "Sznm5Ys55uSLOebniznm6Es55ulLOebpyznm6os6JivLOebuyznnIgs55yHLOechCzn" \
        "nKks55ykLOecniznnKUs55ymLOecmyznnLcs55y4LOedhyznnZos552oLOedqyznnZs" \
        "s552lLOedvyznnb4s5525LOeejiznnoss556RLOeeoCznnp4s556wLOeetiznnrks55" \
        "6/LOeevCznnr0s5567LOefhyznn40s55+XLOefmiznn5ws55+jLOefriznn7ws56CML" \
        "OegkiznpKYs56CgLOekqiznoYUs56KOLOehtCznooYs56G8LOeimiznoows56KjLOei" \
        "tSznoqos56KvLOejkSzno4Ys56OLLOejlCznor4s56K8LOejhSzno4os56OsLOejpyz" \
        "no5os56O9LOejtCznpIcs56SSLOekkSznpJks56SsLOekqyznpYAs56WgLOellyznpZ" \
        "8s56WaLOellSznpZMs56W6LOelvyznpoos56adLOempyzpvYss56aqLOemriznprMs5" \
        "6a5LOemuiznp4ks56eVLOenpyznp6ws56ehLOenoyznqIgs56iNLOeomCznqJks56ig" \
        "LOeonyznpoAs56ixLOeouyznqL4s56i3LOepgyznqZcs56mJLOepoSznqaIs56mpLOm" \
        "+nSznqbAs56m5LOepvSznqogs56qXLOeqlSznqpgs56qWLOeqqSznq4gs56qwLOeqti" \
        "znq4Us56uELOeqvyzpgoMs56uHLOeriiznq40s56uPLOerlSznq5Ms56uZLOermiznq" \
        "50s56uhLOeroiznq6Ys56utLOersCznrIIs56yPLOesiiznrIYs56yzLOesmCznrJks" \
        "56yeLOestSznrKgs56y2LOetkCznrbos56yELOetjSznrIss562MLOethSznrbUs562" \
        "lLOettCznracs562wLOetsSznraws562uLOeunSznrpgs566fLOeujSznrpws566aLO" \
        "euiyznrpIs566PLOetnSznrpks56+LLOevgSznr4ws56+PLOeutCznr4Ys56+dLOevq" \
        "SznsJEs57CULOevpiznr6Us57GgLOewgCznsIcs57CTLOevsyznr7cs57CXLOewjSzn" \
        "r7Ys57CjLOewpyznsKos57CfLOewtyznsKss57C9LOexjCznsYMs57GULOexjyznsYA" \
        "s57GQLOexmCznsZ8s57GkLOexliznsaUs57GsLOextSznsoMs57KQLOeypCznsq0s57" \
        "KiLOeyqyznsqEs57KoLOeysyznsrIs57KxLOeyriznsrks57K9LOezgCzns4Us57OCL" \
        "OezmCzns5Is57OcLOezoizprLss57OvLOezsizns7Qs57O2LOezuizntIYs57SCLOe0" \
        "nCzntJUs57SKLOe1hSzntYss57SuLOe0sizntL8s57S1LOe1hizntbMs57WWLOe1jiz" \
        "ntbIs57WoLOe1rizntY8s57WjLOe2kyzntoks57WbLOe2jyzntb0s57abLOe2uizntq" \
        "4s57ajLOe2tSznt4cs57a9LOe2qyznuL0s57aiLOe2ryznt5ws57a4LOe2nyzntrAs5" \
        "7eYLOe3nSznt6Qs57eeLOe3uyznt7Is57ehLOe4hSznuIos57ijLOe4oSznuJIs57ix" \
        "LOe4nyznuIks57iLLOe4oiznuYYs57mmLOe4uyznuLUs57i5LOe5gyznuLcs57iyLOe" \
        "4uiznuacs57mdLOe5liznuZ4s57mZLOe5miznubks57mqLOe5qSznubws57m7LOe6gy" \
        "znt5Us57m9LOi+riznub8s57qILOe6iSznuows57qSLOe6kCznupMs57qULOe6liznu" \
        "o4s57qbLOe6nCznvLgs57y6LOe9hSznvYws572NLOe9jiznvZAs572RLOe9lSznvZQs" \
        "572YLOe9nyznvaAs572oLOe9qSznvacs5724LOe+giznvoYs576DLOe+iCznvocs576" \
        "MLOe+lCznvp4s576dLOe+miznvqMs576vLOe+siznvrks576uLOe+tiznvrgs6K2xLO" \
        "e/hSznv4Ys57+KLOe/lSznv5Qs57+hLOe/piznv6ks57+zLOe/uSzpo5ws6ICGLOiAh" \
        "CzogIss6ICSLOiAmCzogJks6ICcLOiAoSzogKgs6IC/LOiAuyzogYos6IGGLOiBkizo" \
        "gZgs6IGaLOiBnyzogaIs6IGoLOiBsyzogbIs6IGwLOiBtizogbks6IG9LOiBvyzogoQ" \
        "s6IKGLOiChSzogpss6IKTLOiCmizogq0s5YaQLOiCrCzog5ss6IOlLOiDmSzog50s6I" \
        "OELOiDmizog5Ys6ISJLOiDryzog7Es6ISbLOiEqSzohKMs6ISvLOiFiyzpmoss6IWGL" \
        "OiEvizohZMs6IWRLOiDvCzohbEs6IWuLOiFpSzohaYs6IW0LOiGgyzohogs6IaKLOiG" \
        "gCzohoIs6IagLOiGlSzohqQs6IajLOiFnyzohpMs6IapLOiGsCzohrUs6Ia+LOiGuCz" \
        "ohr0s6IeALOiHgizohros6IeJLOiHjSzoh5Es6IeZLOiHmCzoh4gs6IeaLOiHnyzoh6" \
        "As6IenLOiHuizoh7ss6Ie+LOiIgSzoiIIs6IiFLOiIhyzoiIos6IiNLOiIkCzoiJYs6" \
        "IipLOiIqyzoiLgs6IizLOiJgCzoiZks6ImYLOiJnSzoiZos6ImfLOiJpCzoiaIs6Imo" \
        "LOiJqizoiass6IiuLOiJsSzoibcs6Im4LOiJvizoio0s6IqSLOiKqyzoip8s6Iq7LOi" \
        "KrCzoi6Es6IujLOiLnyzoi5Is6Iu0LOiLsyzoi7os6I6TLOiMgyzoi7ss6Iu5LOiLni" \
        "zojIYs6IucLOiMiSzoi5ks6Iy1LOiMtCzojJYs6IyyLOiMsSzojYAs6Iy5LOiNkCzoj" \
        "YUs6IyvLOiMqyzojJcs6IyYLOiOhSzojpos6I6qLOiOnyzojqIs6I6WLOiMoyzojo4s" \
        "6I6HLOiOiizojbws6I61LOiNsyzojbUs6I6gLOiOiSzojqgs6I+0LOiQkyzoj6ss6I+" \
        "OLOiPvSzokIMs6I+YLOiQiyzoj4Es6I+3LOiQhyzoj6As6I+yLOiQjSzokKIs6JCgLO" \
        "iOvSzokLgs6JSGLOiPuyzoka0s6JCqLOiQvCzolZos6JKELOiRtyzokass6JKtLOiRr" \
        "izokoIs6JGpLOiRhizokKws6JGvLOiRuSzokLUs6JOKLOiRoizokrks6JK/LOiSnyzo" \
        "k5ks6JONLOiSuyzok5os6JOQLOiTgSzok4Ys6JOWLOiSoSzolKEs6JO/LOiTtCzolJc" \
        "s6JSYLOiUrCzolJ8s6JSVLOiUlCzok7ws6JWALOiVoyzolZgs6JWILOiVgSzomIIs6J" \
        "WLLOiVlSzoloAs6JakLOiWiCzolpEs6JaKLOiWqCzola0s6JaULOiWmyzol6os6JaHL" \
        "OiWnCzolbcs6JW+LOiWkCzol4ks6Ja6LOiXjyzolrks6JeQLOiXlSzol50s6JelLOiX" \
        "nCzol7ks6JiKLOiYkyzomIss6Je+LOiXuizomIYs6JiiLOiYmizomLAs6Ji/LOiZjSz" \
        "kuZUs6JmULOiZnyzomacs6JmxLOiakyzomqMs6JqpLOiaqizomoss6JqMLOiatizomq" \
        "8s6JuELOibhizomrAs6JuJLOigoyzomqss6JuULOibnizom6ks6JusLOibnyzom5ss6" \
        "JuvLOickizonIYs6JyILOicgCzonIMs6Ju7LOickSzonIks6JyNLOibuSzonIos6Jy0" \
        "LOicvyzonLcs6Jy7LOicpSzonKks6JyaLOidoCzonZ8s6J24LOidjCzonY4s6J20LOi" \
        "dlyzonags6J2uLOidmSzonZMs6J2jLOidqizooIUs6J6iLOienyzonoIs6J6vLOifiy" \
        "zonr0s6J+ALOifkCzpm5Ys6J6rLOifhCzonrMs6J+HLOifhizonrss6J+vLOifsizon" \
        "6As6KCPLOigjSzon74s6J+2LOiftyzooI4s6J+SLOigkSzooJYs6KCVLOigoizooKEs" \
        "6KCxLOigtizooLks6KCnLOiguyzooYQs6KGCLOihkizooZks6KGeLOihoizooass6KK" \
        "BLOihvizoop4s6KG1LOihvSzoorUs6KGyLOiigizoopcs6KKSLOiirizoopks6KKiLO" \
        "iijSzooqQs6KKwLOiivyzoorEs6KODLOijhCzoo5Qs6KOYLOijmSzoo50s6KO5LOikg" \
        "izoo7ws6KO0LOijqCzoo7Is6KSELOikjCzopIos6KSTLOilgyzopJ4s6KSlLOikqizo" \
        "pKss6KWBLOilhCzopLss6KS2LOikuCzopYws6KSdLOiloCzopZ4s6KWmLOilpCzopa0" \
        "s6KWqLOilryzopbQs6KW3LOilvizopoMs6KaILOimiizoppMs6KaYLOimoSzopqks6K" \
        "amLOimrCzopq8s6KayLOimuizopr0s6Ka/LOingCzop5os6KecLOinnSzop6cs6Ke0L" \
        "OinuCzoqIMs6KiWLOiokCzoqIws6KibLOionSzoqKUs6Ki2LOipgSzoqZss6KmSLOip" \
        "hizoqYgs6Km8LOiprSzoqaws6KmiLOiqhSzoqoIs6KqELOiqqCzoqqEs6KqRLOiqpSz" \
        "oqqYs6KqaLOiqoyzoq4Qs6KuNLOirgizoq5os6KurLOirsyzoq6cs6KukLOirsSzorJ" \
        "Qs6KugLOiroizoq7cs6KueLOirmyzorIws6KyHLOismizoq6Es6KyWLOiskCzorJcs6" \
        "KygLOissyzpnqss6KymLOisqyzorL4s6KyoLOitgSzorYws6K2PLOitjizorYks6K2W" \
        "LOitmyzorZos6K2rLOitnyzoraws6K2vLOittCzorb0s6K6ALOiujCzoro4s6K6SLOi" \
        "ukyzorpYs6K6ZLOiumizosLos6LGBLOiwvyzosYgs6LGMLOixjizosZAs6LGVLOixoi" \
        "zosaws6LG4LOixuizosoIs6LKJLOiyhSzosoos6LKNLOiyjizospQs6LG8LOiymCzmi" \
        "J0s6LKtLOiyqizosr0s6LKyLOiysyzosq4s6LK2LOiziCzos4Es6LOkLOizoyzos5os" \
        "6LO9LOizuizos7ss6LSELOi0hSzotIos6LSHLOi0jyzotI0s6LSQLOm9jizotJMs6LO" \
        "NLOi0lCzotJYs6LWnLOi1rSzotbEs6LWzLOi2gSzotpks6LeCLOi2vizotros6LePLO" \
        "i3mizot5Ys6LeMLOi3myzot4ss6LeqLOi3qyzot58s6LejLOi3vCzouIgs6LiJLOi3v" \
        "yzouJ0s6LieLOi4kCzouJ8s6LmCLOi4tSzouLAs6Li0LOi5iizouYcs6LmJLOi5jCzo" \
        "uZAs6LmILOi5mSzouaQs6LmgLOi4qizouaMs6LmVLOi5tizoubIs6Lm8LOi6gSzouoc" \
        "s6LqFLOi6hCzouoss6LqKLOi6kyzoupEs6LqULOi6mSzouqos6LqhLOi6rCzourAs6L" \
        "uGLOi6sSzour4s6LuFLOi7iCzou4ss6LubLOi7oyzou7ws6Lu7LOi7qyzou74s6LyKL" \
        "Oi8hSzovJUs6LySLOi8mSzovJMs6LycLOi8nyzovJss6LyMLOi8pizovLMs6Ly7LOi8" \
        "uSzovYUs6L2CLOi8vizovYws6L2JLOi9hizovY4s6L2XLOi9nCzovaIs6L2jLOi9pCz" \
        "ovpws6L6fLOi+oyzovq0s6L6vLOi+tyzov5os6L+lLOi/oizov6os6L+vLOmChyzov7" \
        "Qs6YCFLOi/uSzov7os6YCRLOmAlSzpgKEs6YCNLOmAnizpgJYs6YCLLOmApyzpgLYs6" \
        "YC1LOmAuSzov7gs6YGPLOmBkCzpgZEs6YGSLOmAjizpgYks6YC+LOmBlizpgZgs6YGe" \
        "LOmBqCzpga8s6YG2LOmaqCzpgbIs6YKCLOmBvSzpgoEs6YKALOmCiizpgoks6YKPLOm" \
        "CqCzpgq8s6YKxLOmCtSzpg6Is6YOkLOaJiCzpg5ss6YSCLOmEkizphJks6YSyLOmEsC" \
        "zphYos6YWWLOmFmCzphaMs6YWlLOmFqSzphbMs6YWyLOmGiyzphoks6YaCLOmGoizph" \
        "qss6YavLOmGqizphrUs6Ya0LOmGuizph4As6YeBLOmHiSzph4ss6YeQLOmHlizph58s" \
        "6YehLOmHmyzph7ws6Ye1LOmHtizpiJ4s6Ye/LOmIlCzpiKws6YiVLOmIkSzpiZ4s6Ym" \
        "XLOmJhSzpiYks6YmkLOmJiCzpipUs6Yi/LOmJiyzpiZAs6YqcLOmKlizpipMs6YqbLO" \
        "mJmizpi48s6Yq5LOmKtyzpi6ks6YyPLOmLuizpjYQs6YyuLOmMmSzpjKIs6YyaLOmMo" \
        "yzpjLos6Yy1LOmMuyzpjZws6Y2gLOmNvCzpja4s6Y2WLOmOsCzpjqws6Y6tLOmOlCzp" \
        "jrks6Y+WLOmPlyzpj6gs6Y+lLOmPmCzpj4Ms6Y+dLOmPkCzpj4gs6Y+kLOmQmizpkJQ" \
        "s6ZCTLOmQgyzpkIcs6ZCQLOmQtizpkKss6ZC1LOmQoSzpkLos6ZGBLOmRkizpkYQs6Z" \
        "GbLOmRoCzpkaIs6ZGeLOmRqizpiKks6ZGwLOmRtSzpkbcs6ZG9LOmRmizpkbws6ZG+L" \
        "OmSgSzpkb8s6ZaCLOmWhyzploos6ZaULOmWlizplpgs6ZaZLOmWoCzplqgs6ZanLOmW" \
        "rSzplrws6Za7LOmWuSzplr4s6ZeKLOa/tizpl4Ms6ZeNLOmXjCzpl5Us6ZeULOmXliz" \
        "pl5ws6ZehLOmXpSzpl6Is6ZihLOmYqCzpmK4s6ZivLOmZgizpmYws6ZmPLOmZiyzpmb" \
        "cs6ZmcLOmZnizpmZ0s6ZmfLOmZpizpmbIs6ZmsLOmajSzpmpgs6ZqVLOmalyzpmqos6" \
        "ZqnLOmasSzpmrIs6ZqwLOmatCzpmrYs6Zq4LOmauSzpm44s6ZuLLOmbiSzpm40s6KWN" \
        "LOmbnCzpnI0s6ZuVLOmbuSzpnIQs6ZyGLOmciCzpnJMs6ZyOLOmckSzpnI8s6ZyWLOm" \
        "cmSzpnKQs6ZyqLOmcsCzpnLks6Zy9LOmcvizpnYQs6Z2GLOmdiCzpnYIs6Z2JLOmdnC" \
        "zpnaAs6Z2kLOmdpizpnags5YuSLOmdqyzpnbEs6Z25LOmehSzpnbws6Z6BLOmduizpn" \
        "oYs6Z6LLOmejyzpnpAs6Z6cLOmeqCzpnqYs6Z6jLOmesyzpnrQs6Z+DLOmfhizpn4gs" \
        "6Z+LLOmfnCzpn60s6b2PLOmfsiznq58s6Z+2LOmftSzpoI8s6aCMLOmguCzpoKQs6aC" \
        "hLOmgtyzpoL0s6aGGLOmhjyzpoYss6aGrLOmhryzpobAs6aGxLOmhtCzpobMs6aKqLO" \
        "miryzporEs6aK2LOmjhCzpo4Ms6aOGLOmjqSzpo6ss6aSDLOmkiSzppJIs6aSULOmkm" \
        "CzppKEs6aSdLOmknizppKQs6aSgLOmkrCzppK4s6aS9LOmkvizppYIs6aWJLOmlhSzp" \
        "pZAs6aWLLOmlkSzppZIs6aWMLOmllSzpppcs6aaYLOmmpSzppq0s6aauLOmmvCzpp58" \
        "s6aebLOmnnSzpp5gs6aeRLOmnrSzpp64s6aexLOmnsizpp7ss6ae4LOmogSzpqI8s6a" \
        "iFLOmnoizpqJks6airLOmotyzpqYUs6amCLOmpgCzpqYMs6ai+LOmplSzpqY0s6ambL" \
        "OmplyzpqZ8s6amiLOmppSzpqaQs6ampLOmpqyzpqaos6aqtLOmqsCzpqrws6auALOmr" \
        "jyzpq5Es6auTLOmrlCzpq54s6aufLOmroizpq6Ms6aumLOmrryzpq6ss6auuLOmrtCz" \
        "pq7Es6au3LOmruyzprIYs6ayYLOmsmizprJ8s6ayiLOmsoyzprKUs6aynLOmsqCzprK" \
        "ks6ayqLOmsrizprK8s6ayyLOmthCzprYMs6a2PLOmtjSzprY4s6a2RLOmtmCzprbQs6" \
        "a6TLOmugyzprpEs6a6WLOmulyzprp8s6a6gLOmuqCzprrQs6a+ALOmviizprrks6a+G" \
        "LOmvjyzpr5Es6a+SLOmvoyzpr6Is6a+kLOmvlCzpr6Es6bC6LOmvsizpr7Es6a+wLOm" \
        "wlSzpsJQs6bCJLOmwkyzpsIws6bCGLOmwiCzpsJIs6bCKLOmwhCzpsK4s6bCbLOmwpS" \
        "zpsKQs6bChLOmwsCzpsYcs6bCyLOmxhizpsL4s6bGaLOmxoCzpsacs6bG2LOmxuCzps" \
        "6cs6bOsLOmzsCzptIks6bSILOmzqyzptIMs6bSGLOm0qizptKYs6bavLOm0oyzptJ8s" \
        "6bWELOm0lSzptJIs6bWBLOm0vyzptL4s6bWGLOm1iCzptZ0s6bWeLOm1pCzptZEs6bW" \
        "QLOm1mSzptbIs6baJLOm2hyzptqss6bWvLOm1uizptpos6bakLOm2qSzptrIs6beELO" \
        "m3gSzptrss6ba4LOm2uizpt4Ys6bePLOm3gizpt5ks6beTLOm3uCzpt6Ys6betLOm3r" \
        "yzpt70s6biaLOm4myzpuJ4s6bm1LOm5uSzpub0s6bqBLOm6iCzpuoss6bqMLOm6kizp" \
        "upUs6bqRLOm6nSzpuqUs6bqpLOm6uCzpuqos6bqtLOmdoSzpu4ws6buOLOm7jyzpu5A" \
        "s6buULOm7nCzpu54s6budLOm7oCzpu6Us6buoLOm7ryzpu7Qs6bu2LOm7tyzpu7ks6b" \
        "u7LOm7vCzpu70s6byHLOm8iCznmrcs6byVLOm8oSzpvKws6by+LOm9iizpvZIs6b2UL" \
        "Om9oyzpvZ8s6b2gLOm9oSzpvaYs6b2nLOm9rCzpvaos6b23LOm9sizpvbYs6b6VLOm+" \
        "nCzpvqAs5aCvLOanhyzpgZks55GkLOWHnCznhpksLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCznuoos6KScLO" \
        "mNiCzpiogs6JOcLOS/iSzngrss5pixLOajiCzpi7ks5pu7LOW9hSzkuKgs5LuhLOS7v" \
        "CzkvIAs5LyDLOS8uSzkvZYs5L6SLOS+iizkvpos5L6ULOS/jSzlgYAs5YCiLOS/vyzl" \
        "gJ4s5YGGLOWBsCzlgYIs5YKULOWDtCzlg5gs5YWKLOWFpCzlhp0s5Ya+LOWHrCzliJU" \
        "s5YqcLOWKpizli4As5YubLOWMgCzljIcs5YykLOWNsizljpMs5Y6yLOWPnSzvqI4s5Z" \
        "KcLOWSiizlkqks5ZO/LOWWhizlnZks5Z2lLOWerCzln4gs5Z+HLO+ojyzvqJAs5aKeL" \
        "OWisizlpIss5aWTLOWlmyzlpZ0s5aWjLOWmpCzlpros5a2WLOWvgCznlK8s5a+YLOWv" \
        "rCzlsJ4s5bKmLOWyuizls7Us5bSnLOW1kyzvqJEs5bWCLOW1rSzltrgs5ba5LOW3kCz" \
        "lvKEs5by0LOW9pyzlvrcs5b+eLOaBnSzmgoUs5oKKLOaDnizmg5Us5oSgLOaDsizmhJ" \
        "Es5oS3LOaEsCzmhpgs5oiTLOaKpizmj7Us5pGgLOaSnSzmk44s5pWOLOaYgCzmmJUs5" \
        "pi7LOaYiSzmmK4s5pieLOaYpCzmmaUs5pmXLOaZmSzvqJIs5pmzLOaamSzmmqAs5pqy" \
        "LOaavyzmm7os5pyOLO+kqSzmnaYs5p67LOahkizmn4As5qCBLOahhCzmo48s76iTLOa" \
        "lqCzvqJQs5qaYLOanoizmqLAs5qmrLOaphizmqbMs5qm+LOaroizmq6Qs5q+WLOawvy" \
        "zmsZws5rKGLOaxryzms5os5rSELOa2hyzmta8s5raWLOa2rCzmt48s5re4LOa3sizmt" \
        "7ws5ri5LOa5nCzmuKcs5ri8LOa6vyzmvogs5r61LOa/tSzngIUs54CHLOeAqCzngoUs" \
        "54KrLOeEjyznhIQs54WcLOeFhiznhYcs76iVLOeHgSznh74s54qxLOeKviznjKQs76i" \
        "WLOeNtyznjr0s54+JLOePliznj6Ms54+SLOeQhyznj7Us55CmLOeQqiznkKks55CuLO" \
        "eRoiznkoks55KfLOeUgSznla8s55qCLOeanCznmp4s55qbLOeapizvqJcs552GLOWKr" \
        "yznoKEs56GOLOehpCznobos56SwLO+omCzvqJks76iaLOemlCzvqJss56abLOerkSzn" \
        "q6cs76icLOerqyznrp4s76idLOe1iCzntZws57a3LOe2oCznt5Ys57mSLOe9hyznvqE" \
        "s76ieLOiMgSzojaIs6I2/LOiPhyzoj7Ys6JGILOiStCzolZMs6JWZLOiVqyzvqJ8s6J" \
        "awLO+ooCzvqKEs6KCHLOijtSzoqJIs6Ki3LOipuSzoqqcs6Kq+LOirnyzvqKIs6Ku2L" \
        "Oitkyzorb8s6LOwLOiztCzotJIs6LW2LO+ooyzou48s76ikLO+opSzpgacs6YOeLO+o" \
        "pizphJUs6YSnLOmHmizph5cs6YeeLOmHrSzph64s6YekLOmHpSzpiIYs6YiQLOmIiiz" \
        "piLos6YmALOmIvCzpiY4s6YmZLOmJkSzpiLks6YmnLOmKpyzpibcs6Ym4LOmLpyzpi5" \
        "cs6YuZLOmLkCzvqKcs6YuVLOmLoCzpi5Ms6YylLOmMoSzpi7ss76ioLOmMnizpi78s6" \
        "YydLOmMgizpjbAs6Y2XLOmOpCzpj4Ys6Y+eLOmPuCzpkLEs6ZGFLOmRiCzplpIs76ec" \
        "LO+oqSzpmp0s6ZqvLOmcsyzpnLss6Z2DLOmdjSzpnY8s6Z2RLOmdlSzpoZcs6aGlLO+" \
        "oqizvqKss6aSnLO+orCzppp4s6amOLOmrmSzpq5ws6a21LOmtsizpro8s6a6xLOmuuy" \
        "zpsIAs6bWwLOm1qyzvqK0s6biZLOm7kSwsLOKFsCzihbEs4oWyLOKFsyzihbQs4oW1L" \
        "OKFtizihbcs4oW4LOKFuSzvv6Is77+kLO+8hyzvvIIsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCzugIAs7oCBLO6AgizugIMs7oCELO6AhSzugIYs7oCH" \
        "LO6AiCzugIks7oCKLO6AiyzugIws7oCNLO6AjizugI8s7oCQLO6AkSzugJIs7oCTLO6" \
        "AlCzugJUs7oCWLO6AlyzugJgs7oCZLO6AmizugJss7oCcLO6AnSzugJ4s7oCfLO6AoC" \
        "zugKEs7oCiLO6AoyzugKQs7oClLO6ApizugKcs7oCoLO6AqSzugKos7oCrLO6ArCzug" \
        "K0s7oCuLO6AryzugLAs7oCxLO6AsizugLMs7oC0LO6AtSzugLYs7oC3LO6AuCzugLks" \
        "7oC6LO6AuyzugLws7oC9LO6AvizugL8s7oGALO6BgSzugYIs7oGDLO6BhCzugYUs7oG" \
        "GLO6BhyzugYgs7oGJLO6BiizugYss7oGMLO6BjSzugY4s7oGPLO6BkCzugZEs7oGSLO" \
        "6BkyzugZQs7oGVLO6BlizugZcs7oGYLO6BmSzugZos7oGbLO6BnCzugZ0s7oGeLO6Bn" \
        "yzugaAs7oGhLO6BoizugaMs7oGkLO6BpSzugaYs7oGnLO6BqCzugaks7oGqLO6Bqyzu" \
        "gaws7oGtLO6Brizuga8s7oGwLO6BsSzugbIs7oGzLO6BtCzugbUs7oG2LO6Btyzugbg" \
        "s7oG5LO6Buizugbss7oG8LO6BvSzugb4s7oG/LO6CgCzugoEs7oKCLO6CgyzugoQs7o" \
        "KFLO6Chizugocs7oKILO6CiSzugoos7oKLLO6CjCzugo0s7oKOLO6CjyzugpAs7oKRL" \
        "O6CkizugpMs7oKULO6ClSzugpYs7oKXLO6CmCzugpks7oKaLO6Cmyzugpws7oKdLO6C" \
        "nizugp8s7oKgLO6CoSzugqIs7oKjLO6CpCzugqUs7oKmLO6Cpyzugqgs7oKpLO6Cqiz" \
        "ugqss7oKsLO6CrSzugq4s7oKvLO6CsCzugrEs7oKyLO6CsyzugrQs7oK1LO6Ctizugr" \
        "cs7oK4LO6CuSzugros7oK7LO6CvCzugr0s7oK+LO6Cvyzug4As7oOBLO6Dgizug4Ms7" \
        "oOELO6DhSzug4Ys7oOHLO6DiCzug4ks7oOKLO6Diyzug4ws7oONLO6Djizug48s7oOQ" \
        "LO6DkSzug5Is7oOTLO6DlCzug5Us7oOWLO6Dlyzug5gs7oOZLO6Dmizug5ss7oOcLO6" \
        "DnSzug54s7oOfLO6DoCzug6Es7oOiLO6Doyzug6Qs7oOlLO6Dpizug6cs7oOoLO6DqS" \
        "zug6os7oOrLO6DrCzug60s7oOuLO6Dryzug7As7oOxLO6Dsizug7Ms7oO0LO6DtSzug" \
        "7Ys7oO3LO6DuCzug7ks7oO6LO6Duyzug7ws7oO9LO6Dvizug78s7oSALO6EgSzuhIIs" \
        "7oSDLO6EhCzuhIUs7oSGLO6EhyzuhIgs7oSJLO6EiizuhIss7oSMLO6EjSzuhI4s7oS" \
        "PLO6EkCzuhJEs7oSSLO6EkyzuhJQs7oSVLO6ElizuhJcs7oSYLO6EmSzuhJos7oSbLO" \
        "6EnCzuhJ0s7oSeLO6EnyzuhKAs7oShLO6EoizuhKMs7oSkLO6EpSzuhKYs7oSnLO6Eq" \
        "CzuhKks7oSqLO6EqyzuhKws7oStLO6ErizuhK8s7oSwLO6EsSzuhLIs7oSzLO6EtCzu" \
        "hLUs7oS2LO6EtyzuhLgs7oS5LO6EuizuhLss7oS8LO6EvSzuhL4s7oS/LO6FgCzuhYE" \
        "s7oWCLO6FgyzuhYQs7oWFLO6FhizuhYcs7oWILO6FiSzuhYos7oWLLO6FjCzuhY0s7o" \
        "WOLO6FjyzuhZAs7oWRLO6FkizuhZMs7oWULO6FlSzuhZYs7oWXLO6FmCzuhZks7oWaL" \
        "O6FmyzuhZws7oWdLO6FnizuhZ8s7oWgLO6FoSzuhaIs7oWjLO6FpCzuhaUs7oWmLO6F" \
        "pyzuhags7oWpLO6Fqizuhass7oWsLO6FrSzuha4s7oWvLO6FsCzuhbEs7oWyLO6Fsyz" \
        "uhbQs7oW1LO6Ftizuhbcs7oW4LO6FuSzuhbos7oW7LO6FvCzuhb0s7oW+LO6Fvyzuho" \
        "As7oaBLO6GgizuhoMs7oaELO6GhSzuhoYs7oaHLO6GiCzuhoks7oaKLO6Giyzuhows7" \
        "oaNLO6Gjizuho8s7oaQLO6GkSzuhpIs7oaTLO6GlCzuhpUs7oaWLO6Glyzuhpgs7oaZ" \
        "LO6Gmizuhpss7oacLO6GnSzuhp4s7oafLO6GoCzuhqEs7oaiLO6GoyzuhqQs7oalLO6" \
        "Gpizuhqcs7oaoLO6GqSzuhqos7oarLO6GrCzuhq0s7oauLO6GryzuhrAs7oaxLO6Gsi" \
        "zuhrMs7oa0LO6GtSzuhrYs7oa3LO6GuCzuhrks7oa6LO6Guyzuhrws7oa9LO6Gvizuh" \
        "r8s7oeALO6HgSzuh4Is7oeDLO6HhCzuh4Us7oeGLO6Hhyzuh4gs7oeJLO6Hiizuh4ss" \
        "7oeMLO6HjSzuh44s7oePLO6HkCzuh5Es7oeSLO6Hkyzuh5Qs7oeVLO6Hlizuh5cs7oe" \
        "YLO6HmSzuh5os7oebLO6HnCzuh50s7oeeLO6Hnyzuh6As7oehLO6Hoizuh6Ms7oekLO" \
        "6HpSzuh6Ys7oenLO6HqCzuh6ks7oeqLO6Hqyzuh6ws7oetLO6Hrizuh68s7oewLO6Hs" \
        "Szuh7Is7oezLO6HtCzuh7Us7oe2LO6Htyzuh7gs7oe5LO6Huizuh7ss7oe8LO6HvSzu" \
        "h74s7oe/LO6IgCzuiIEs7oiCLO6IgyzuiIQs7oiFLO6IhizuiIcs7oiILO6IiSzuiIo" \
        "s7oiLLO6IjCzuiI0s7oiOLO6IjyzuiJAs7oiRLO6IkizuiJMs7oiULO6IlSzuiJYs7o" \
        "iXLO6ImCzuiJks7oiaLO6ImyzuiJws7oidLO6InizuiJ8s7oigLO6IoSzuiKIs7oijL" \
        "O6IpCzuiKUs7oimLO6IpyzuiKgs7oipLO6IqizuiKss7oisLO6IrSzuiK4s7oivLO6I" \
        "sCzuiLEs7oiyLO6IsyzuiLQs7oi1LO6ItizuiLcs7oi4LO6IuSzuiLos7oi7LO6IvCz" \
        "uiL0s7oi+LO6IvyzuiYAs7omBLO6JgizuiYMs7omELO6JhSzuiYYs7omHLO6JiCzuiY" \
        "ks7omKLO6JiyzuiYws7omNLO6JjizuiY8s7omQLO6JkSzuiZIs7omTLO6JlCzuiZUs7" \
        "omWLO6JlyzuiZgs7omZLO6JmizuiZss7omcLO6JnSzuiZ4s7omfLO6JoCzuiaEs7omi" \
        "LO6JoyzuiaQs7omlLO6Jpizuiacs7omoLO6JqSzuiaos7omrLO6JrCzuia0s7omuLO6" \
        "JryzuibAs7omxLO6JsizuibMs7om0LO6JtSzuibYs7om3LO6JuCzuibks7om6LO6Juy" \
        "zuibws7om9LO6Jvizuib8s7oqALO6KgSzuioIs7oqDLO6KhCzuioUs7oqGLO6Khyzui" \
        "ogs7oqJLO6Kiizuioss7oqMLO6KjSzuio4s7oqPLO6KkCzuipEs7oqSLO6KkyzuipQs" \
        "7oqVLO6Klizuipcs7oqYLO6KmSzuipos7oqbLO6KnCzuip0s7oqeLO6KnyzuiqAs7oq" \
        "hLO6KoizuiqMs7oqkLO6KpSzuiqYs7oqnLO6KqCzuiqks7oqqLO6Kqyzuiqws7oqtLO" \
        "6Krizuiq8s7oqwLO6KsSzuirIs7oqzLO6KtCzuirUs7oq2LO6Ktyzuirgs7oq5LO6Ku" \
        "izuirss7oq8LO6KvSzuir4s7oq/LO6LgCzui4Es7ouCLO6Lgyzui4Qs7ouFLO6Lhizu" \
        "i4cs7ouILO6LiSzui4os7ouLLO6LjCzui40s7ouOLO6Ljyzui5As7ouRLO6Lkizui5M" \
        "s7ouULO6LlSzui5Ys7ouXLO6LmCzui5ks7ouaLO6Lmyzui5ws7oudLO6Lnizui58s7o" \
        "ugLO6LoSzui6Is7oujLO6LpCzui6Us7oumLO6Lpyzui6gs7oupLO6Lqizui6ss7ousL" \
        "O6LrSzui64s7ouvLO6LsCzui7Es7ouyLO6Lsyzui7Qs7ou1LO6Ltizui7cs7ou4LO6L" \
        "uSzui7os7ou7LO6LvCzui70s7ou+LO6LvyzujIAs7oyBLO6MgizujIMs7oyELO6MhSz" \
        "ujIYs7oyHLO6MiCzujIks7oyKLO6MiyzujIws7oyNLO6MjizujI8s7oyQLO6MkSzujJ" \
        "Is7oyTLO6MlCzujJUs7oyWLO6MlyzujJgs7oyZLO6MmizujJss7oycLO6MnSzujJ4s7" \
        "oyfLO6MoCzujKEs7oyiLO6MoyzujKQs7oylLO6MpizujKcs7oyoLO6MqSzujKos7oyr" \
        "LO6MrCzujK0s7oyuLO6MryzujLAs7oyxLO6MsizujLMs7oy0LO6MtSzujLYs7oy3LO6" \
        "MuCzujLks7oy6LO6MuyzujLws7oy9LO6MvizujL8s7o2ALO6NgSzujYIs7o2DLO6NhC" \
        "zujYUs7o2GLO6NhyzujYgs7o2JLO6NiizujYss7o2MLO6NjSzujY4s7o2PLO6NkCzuj" \
        "ZEs7o2SLO6NkyzujZQs7o2VLO6NlizujZcs7o2YLO6NmSzujZos7o2bLO6NnCzujZ0s" \
        "7o2eLO6NnyzujaAs7o2hLO6NoizujaMs7o2kLO6NpSzujaYs7o2nLO6NqCzujaks7o2" \
        "qLO6Nqyzujaws7o2tLO6Nrizuja8s7o2wLO6NsSzujbIs7o2zLO6NtCzujbUs7o22LO" \
        "6Ntyzujbgs7o25LO6Nuizujbss7o28LO6NvSzujb4s7o2/LO6OgCzujoEs7o6CLO6Og" \
        "yzujoQs7o6FLO6Ohizujocs7o6ILO6OiSzujoos7o6LLO6OjCzujo0s7o6OLO6Ojyzu" \
        "jpAs7o6RLO6OkizujpMs7o6ULO6OlSzujpYs7o6XLO6OmCzujpks7o6aLO6Omyzujpw" \
        "s7o6dLO6Onizujp8s7o6gLO6OoSzujqIs7o6jLO6OpCzujqUs7o6mLO6Opyzujqgs7o" \
        "6pLO6Oqizujqss7o6sLO6OrSzujq4s7o6vLO6OsCzujrEs7o6yLO6OsyzujrQs7o61L" \
        "O6Otizujrcs7o64LO6OuSzujros7o67LO6OvCzujr0s7o6+LO6Ovyzuj4As7o+BLO6P" \
        "gizuj4Ms7o+ELO6PhSzuj4Ys7o+HLO6PiCzuj4ks7o+KLO6Piyzuj4ws7o+NLO6Pjiz" \
        "uj48s7o+QLO6PkSzuj5Is7o+TLO6PlCzuj5Us7o+WLO6Plyzuj5gs7o+ZLO6Pmizuj5" \
        "ss7o+cLO6PnSzuj54s7o+fLO6PoCzuj6Es7o+iLO6Poyzuj6Qs7o+lLO6Ppizuj6cs7" \
        "o+oLO6PqSzuj6os7o+rLO6PrCzuj60s7o+uLO6Pryzuj7As7o+xLO6Psizuj7Ms7o+0" \
        "LO6PtSzuj7Ys7o+3LO6PuCzuj7ks7o+6LO6Puyzuj7ws7o+9LO6Pvizuj78s7pCALO6" \
        "QgSzukIIs7pCDLO6QhCzukIUs7pCGLO6QhyzukIgs7pCJLO6QiizukIss7pCMLO6QjS" \
        "zukI4s7pCPLO6QkCzukJEs7pCSLO6QkyzukJQs7pCVLO6QlizukJcs7pCYLO6QmSzuk" \
        "Jos7pCbLO6QnCzukJ0s7pCeLO6QnyzukKAs7pChLO6QoizukKMs7pCkLO6QpSzukKYs" \
        "7pCnLO6QqCzukKks7pCqLO6QqyzukKws7pCtLO6QrizukK8s7pCwLO6QsSzukLIs7pC" \
        "zLO6QtCzukLUs7pC2LO6QtyzukLgs7pC5LO6QuizukLss7pC8LO6QvSzukL4s7pC/LO" \
        "6RgCzukYEs7pGCLO6RgyzukYQs7pGFLO6RhizukYcs7pGILO6RiSzukYos7pGLLO6Rj" \
        "CzukY0s7pGOLO6RjyzukZAs7pGRLO6RkizukZMs7pGULO6RlSzukZYs7pGXLO6RmCzu" \
        "kZks7pGaLO6RmyzukZws7pGdLO6RnizukZ8s7pGgLO6RoSzukaIs7pGjLO6RpCzukaU" \
        "s7pGmLO6Rpyzukags7pGpLO6Rqizukass7pGsLO6RrSzuka4s7pGvLO6RsCzukbEs7p" \
        "GyLO6RsyzukbQs7pG1LO6Rtizukbcs7pG4LO6RuSzukbos7pG7LO6RvCzukb0s7pG+L" \
        "O6RvyzukoAs7pKBLO6SgizukoMs7pKELO6ShSzukoYs7pKHLO6SiCzukoks7pKKLO6S" \
        "iyzukows7pKNLO6Sjizuko8s7pKQLO6SkSzukpIs7pKTLO6SlCzukpUs7pKWLO6Slyz" \
        "ukpgs7pKZLO6Smizukpss7pKcLO6SnSzukp4s7pKfLO6SoCzukqEs7pKiLO6Soyzukq" \
        "Qs7pKlLO6Spizukqcs7pKoLO6SqSzukqos7pKrLO6SrCzukq0s7pKuLO6SryzukrAs7" \
        "pKxLO6SsizukrMs7pK0LO6StSzukrYs7pK3LO6SuCzukrks7pK6LO6Suyzukrws7pK9" \
        "LO6Svizukr8s7pOALO6TgSzuk4Is7pODLO6ThCzuk4Us7pOGLO6Thyzuk4gs7pOJLO6" \
        "Tiizuk4ss7pOMLO6TjSzuk44s7pOPLO6TkCzuk5Es7pOSLO6Tkyzuk5Qs7pOVLO6Tli" \
        "zuk5cs7pOYLO6TmSzuk5os7pObLO6TnCzuk50s7pOeLO6Tnyzuk6As7pOhLO6Toizuk" \
        "6Ms7pOkLO6TpSzuk6Ys7pOnLO6TqCzuk6ks7pOqLO6Tqyzuk6ws7pOtLO6Trizuk68s" \
        "7pOwLO6TsSzuk7Is7pOzLO6TtCzuk7Us7pO2LO6Ttyzuk7gs7pO5LO6Tuizuk7ss7pO" \
        "8LO6TvSzuk74s7pO/LO6UgCzulIEs7pSCLO6UgyzulIQs7pSFLO6UhizulIcs7pSILO" \
        "6UiSzulIos7pSLLO6UjCzulI0s7pSOLO6UjyzulJAs7pSRLO6UkizulJMs7pSULO6Ul" \
        "SzulJYs7pSXLO6UmCzulJks7pSaLO6UmyzulJws7pSdLO6UnizulJ8s7pSgLO6UoSzu" \
        "lKIs7pSjLO6UpCzulKUs7pSmLO6UpyzulKgs7pSpLO6UqizulKss7pSsLO6UrSzulK4" \
        "s7pSvLO6UsCzulLEs7pSyLO6UsyzulLQs7pS1LO6UtizulLcs7pS4LO6UuSzulLos7p" \
        "S7LO6UvCzulL0s7pS+LO6UvyzulYAs7pWBLO6VgizulYMs7pWELO6VhSzulYYs7pWHL" \
        "O6ViCzulYks7pWKLO6ViyzulYws7pWNLO6VjizulY8s7pWQLO6VkSzulZIs7pWTLO6V" \
        "lCzulZUs7pWWLO6VlyzulZgs7pWZLO6VmizulZss7pWcLO6VnSzulZ4s7pWfLO6VoCz" \
        "ulaEs7pWiLO6VoyzulaQs7pWlLO6Vpizulacs7pWoLO6VqSzulaos7pWrLO6VrCzula" \
        "0s7pWuLO6VryzulbAs7pWxLO6VsizulbMs7pW0LO6VtSzulbYs7pW3LO6VuCzulbks7" \
        "pW6LO6Vuyzulbws7pW9LO6Vvizulb8s7paALO6WgSzuloIs7paDLO6WhCzuloUs7paG" \
        "LO6Whyzulogs7paJLO6Wiizuloss7paMLO6WjSzulo4s7paPLO6WkCzulpEs7paSLO6" \
        "WkyzulpQs7paVLO6Wlizulpcs7paYLO6WmSzulpos7pabLO6WnCzulp0s7paeLO6Wny" \
        "zulqAs7pahLO6WoizulqMs7pakLO6WpSzulqYs7panLO6WqCzulqks7paqLO6Wqyzul" \
        "qws7patLO6Wrizulq8s7pawLO6WsSzulrIs7pazLO6WtCzulrUs7pa2LO6Wtyzulrgs" \
        "7pa5LO6Wuizulrss7pa8LO6WvSzulr4s7pa/LO6XgCzul4Es7peCLO6Xgyzul4Qs7pe" \
        "FLO6Xhizul4cs7peILO6XiSzul4os7peLLO6XjCzul40s7peOLO6Xjyzul5As7peRLO" \
        "6Xkizul5Ms7peULO6XlSzul5Ys7peXLO6XmCzul5ks7peaLO6Xmyzul5ws7pedLO6Xn" \
        "izul58s7pegLO6XoSzul6Is7pejLO6XpCzul6Us7pemLO6Xpyzul6gs7pepLO6Xqizu" \
        "l6ss7pesLO6XrSzul64s7pevLO6XsCzul7Es7peyLO6Xsyzul7Qs7pe1LO6Xtizul7c" \
        "s7pe4LO6XuSzul7os7pe7LO6XvCzul70s7pe+LO6XvyzumIAs7piBLO6YgizumIMs7p" \
        "iELO6YhSzumIYs7piHLO6YiCzumIks7piKLO6YiyzumIws7piNLO6YjizumI8s7piQL" \
        "O6YkSzumJIs7piTLO6YlCzumJUs7piWLO6YlyzumJgs7piZLO6YmizumJss7picLO6Y" \
        "nSzumJ4s7pifLO6YoCzumKEs7piiLO6YoyzumKQs7pilLO6YpizumKcs7pioLO6YqSz" \
        "umKos7pirLO6YrCzumK0s7piuLO6YryzumLAs7pixLO6YsizumLMs7pi0LO6YtSzumL" \
        "Ys7pi3LO6YuCzumLks7pi6LO6YuyzumLws7pi9LO6YvizumL8s7pmALO6ZgSzumYIs7" \
        "pmDLO6ZhCzumYUs7pmGLO6ZhyzumYgs7pmJLO6ZiizumYss7pmMLO6ZjSzumY4s7pmP" \
        "LO6ZkCzumZEs7pmSLO6ZkyzumZQs7pmVLO6ZlizumZcs7pmYLO6ZmSzumZos7pmbLO6" \
        "ZnCzumZ0s7pmeLO6ZnyzumaAs7pmhLO6ZoizumaMs7pmkLO6ZpSzumaYs7pmnLO6ZqC" \
        "zumaks7pmqLO6Zqyzumaws7pmtLO6Zrizuma8s7pmwLO6ZsSzumbIs7pmzLO6ZtCzum" \
        "bUs7pm2LO6Ztyzumbgs7pm5LO6Zuizumbss7pm8LO6ZvSzumb4s7pm/LO6agCzumoEs" \
        "7pqCLO6agyzumoQs7pqFLO6ahizumocs7pqILO6aiSzumoos7pqLLO6ajCzumo0s7pq" \
        "OLO6ajyzumpAs7pqRLO6akizumpMs7pqULO6alSzumpYs7pqXLO6amCzumpks7pqaLO" \
        "6amyzumpws7pqdLO6anizump8s7pqgLO6aoSzumqIs7pqjLO6apCzumqUs7pqmLO6ap" \
        "yzumqgs7pqpLO6aqizumqss7pqsLO6arSzumq4s7pqvLO6asCzumrEs7pqyLO6asyzu" \
        "mrQs7pq1LO6atizumrcs7pq4LO6auSzumros7pq7LO6avCzumr0s7pq+LO6avyzum4A" \
        "s7puBLO6bgizum4Ms7puELO6bhSzum4Ys7puHLO6biCzum4ks7puKLO6biyzum4ws7p" \
        "uNLO6bjizum48s7puQLO6bkSzum5Is7puTLO6blCzum5Us7puWLO6blyzum5gs7puZL" \
        "O6bmizum5ss7pucLO6bnSzum54s7pufLO6boCzum6Es7puiLO6boyzum6Qs7pulLO6b" \
        "pizum6cs7puoLO6bqSzum6os7purLO6brCzum60s7puuLO6bryzum7As7puxLO6bsiz" \
        "um7Ms7pu0LO6btSzum7Ys7pu3LO6buCzum7ks7pu6LO6buyzum7ws7pu9LO6bvizum7" \
        "8s7pyALO6cgSzunIIs7pyDLO6chCzunIUs7pyGLO6chyzunIgs7pyJLO6ciizunIss7" \
        "pyMLO6cjSzunI4s7pyPLO6ckCzunJEs7pySLO6ckyzunJQs7pyVLO6clizunJcs7pyY" \
        "LO6cmSzunJos7pybLO6cnCzunJ0s7pyeLO6cnyzunKAs7pyhLO6coizunKMs7pykLO6" \
        "cpSzunKYs7pynLO6cqCzunKks7pyqLO6cqyzunKws7pytLO6crizunK8s7pywLO6csS" \
        "zunLIs7pyzLO6ctCzunLUs7py2LO6ctyzunLgs7py5LO6cuizunLss7py8LO6cvSzun" \
        "L4s7py/LO6dgCzunYEs7p2CLO6dgyzunYQs7p2FLO6dhizunYcs7p2ILO6diSzunYos" \
        "7p2LLO6djCzunY0s7p2OLO6djyzunZAs7p2RLO6dkizunZMs7p2ULO6dlSzunZYs7p2" \
        "XLOKFsCzihbEs4oWyLOKFsyzihbQs4oW1LOKFtizihbcs4oW4LOKFuSzihaAs4oWhLO" \
        "KFoizihaMs4oWkLOKFpSzihaYs4oWnLOKFqCzihaks77+iLO+/pCzvvIcs77yCLOOIs" \
        "SzihJYs4oShLOKItSznuoos6KScLOmNiCzpiogs6JOcLOS/iSzngrss5pixLOajiCzp" \
        "i7ks5pu7LOW9hSzkuKgs5LuhLOS7vCzkvIAs5LyDLOS8uSzkvZYs5L6SLOS+iizkvpo" \
        "s5L6ULOS/jSzlgYAs5YCiLOS/vyzlgJ4s5YGGLOWBsCzlgYIs5YKULOWDtCzlg5gs5Y" \
        "WKLOWFpCzlhp0s5Ya+LOWHrCzliJUs5YqcLOWKpizli4As5YubLOWMgCzljIcs5YykL" \
        "OWNsizljpMs5Y6yLOWPnSzvqI4s5ZKcLOWSiizlkqks5ZO/LOWWhizlnZks5Z2lLOWe" \
        "rCzln4gs5Z+HLO+ojyzvqJAs5aKeLOWisizlpIss5aWTLOWlmyzlpZ0s5aWjLOWmpCz" \
        "lpros5a2WLOWvgCznlK8s5a+YLOWvrCzlsJ4s5bKmLOWyuizls7Us5bSnLOW1kyzvqJ" \
        "Es5bWCLOW1rSzltrgs5ba5LOW3kCzlvKEs5by0LOW9pyzlvrcs5b+eLOaBnSzmgoUs5" \
        "oKKLOaDnizmg5Us5oSgLOaDsizmhJEs5oS3LOaEsCzmhpgs5oiTLOaKpizmj7Us5pGg" \
        "LOaSnSzmk44s5pWOLOaYgCzmmJUs5pi7LOaYiSzmmK4s5pieLOaYpCzmmaUs5pmXLOa" \
        "ZmSzvqJIs5pmzLOaamSzmmqAs5pqyLOaavyzmm7os5pyOLO+kqSzmnaYs5p67LOahki" \
        "zmn4As5qCBLOahhCzmo48s76iTLOalqCzvqJQs5qaYLOanoizmqLAs5qmrLOaphizmq" \
        "bMs5qm+LOaroizmq6Qs5q+WLOawvyzmsZws5rKGLOaxryzms5os5rSELOa2hyzmta8s" \
        "5raWLOa2rCzmt48s5re4LOa3sizmt7ws5ri5LOa5nCzmuKcs5ri8LOa6vyzmvogs5r6" \
        "1LOa/tSzngIUs54CHLOeAqCzngoUs54KrLOeEjyznhIQs54WcLOeFhiznhYcs76iVLO" \
        "eHgSznh74s54qxLOeKviznjKQs76iWLOeNtyznjr0s54+JLOePliznj6Ms54+SLOeQh" \
        "yznj7Us55CmLOeQqiznkKks55CuLOeRoiznkoks55KfLOeUgSznla8s55qCLOeanCzn" \
        "mp4s55qbLOeapizvqJcs552GLOWKryznoKEs56GOLOehpCznobos56SwLO+omCzvqJk" \
        "s76iaLOemlCzvqJss56abLOerkSznq6cs76icLOerqyznrp4s76idLOe1iCzntZws57" \
        "a3LOe2oCznt5Ys57mSLOe9hyznvqEs76ieLOiMgSzojaIs6I2/LOiPhyzoj7Ys6JGIL" \
        "OiStCzolZMs6JWZLOiVqyzvqJ8s6JawLO+ooCzvqKEs6KCHLOijtSzoqJIs6Ki3LOip" \
        "uSzoqqcs6Kq+LOirnyzvqKIs6Ku2LOitkyzorb8s6LOwLOiztCzotJIs6LW2LO+ooyz" \
        "ou48s76ikLO+opSzpgacs6YOeLO+opizphJUs6YSnLOmHmizph5cs6YeeLOmHrSzph6" \
        "4s6YekLOmHpSzpiIYs6YiQLOmIiizpiLos6YmALOmIvCzpiY4s6YmZLOmJkSzpiLks6" \
        "YmnLOmKpyzpibcs6Ym4LOmLpyzpi5cs6YuZLOmLkCzvqKcs6YuVLOmLoCzpi5Ms6Yyl" \
        "LOmMoSzpi7ss76ioLOmMnizpi78s6YydLOmMgizpjbAs6Y2XLOmOpCzpj4Ys6Y+eLOm" \
        "PuCzpkLEs6ZGFLOmRiCzplpIs76ecLO+oqSzpmp0s6ZqvLOmcsyzpnLss6Z2DLOmdjS" \
        "zpnY8s6Z2RLOmdlSzpoZcs6aGlLO+oqizvqKss6aSnLO+orCzppp4s6amOLOmrmSzpq" \
        "5ws6a21LOmtsizpro8s6a6xLOmuuyzpsIAs6bWwLOm1qyzvqK0s6biZLOm7kQ==" \
    );
    # '}'
    return (0);
}
# }}}
# {{{ (private)::acp::build_map_936_to_u8char
# '${__pp_comment:+'
#
# cp936 (WINDOWS-936)
#
# ANSI/OEM Simplified Chinese (PRC, Singapore); Chinese Simplified (GB2312)
#
# [UNICODE-MAPPING]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT
#
# [UNICODE-BESTFIT]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit936.txt
#
# [MS-VBAL] 3.3.5.1.3 Simplified Chinese Identifiers
#
# VBA support for identifiers containing Simplified Chinese characters is
# based upon Windows Codepage 936 [UNICODE-BESTFIT]. Simplified Chinese
# characters are encoded as 16 bit double byte characters with code points
# beginning at %x8140. The Unicode equivalents of Windows Codepage 936 code
# points are specified by the file bestfit936.txt provided at [UNICODE-BESTFIT].
#
# A <CP936-initial-character> MAY be any Unicode character that corresponds to
# defined code points in the following ranges of Windows Codepage 936 code
# points: %xA3C1-A3DA; %xA3E1-A3FA; %xA1A2A1AA; %xA1AC-A1AD; %xA1B2-A1E6;
# %xA1E8-A1EF; %xA2B1-A2FC; %xA4A1-FE4F. A <CP936-subsequent-character> is
# defined identically to <CP949-initial-character> with the addition of code
# point %xA3DF and code points in the range %xA3B0-A3B9.
#
# '}'
function \
__acp__build_map_936_to_u8char() {
    # cp936 character mappings
    # '${__pp__enable_multibyte:+'
    __acp__decode_charmap(acp__S_charmap, \
        "5LiCLOS4hCzkuIUs5LiGLOS4jyzkuJIs5LiXLOS4nyzkuKAs5LihLOS4oyzkuKYs5Li" \
        "pLOS4rizkuK8s5LixLOS4syzkuLUs5Li3LOS4vCzkuYAs5LmBLOS5gizkuYQs5LmGLO" \
        "S5iizkuZEs5LmVLOS5lyzkuZos5LmbLOS5oizkuaMs5LmkLOS5pSzkuacs5LmoLOS5q" \
        "izkuass5LmsLOS5rSzkua4s5LmvLOS5sizkubQs5Lm1LOS5tizkubcs5Lm4LOS5uSzk" \
        "ubos5Lm7LOS5vCzkub0s5Lm/LOS6gCzkuoEs5LqCLOS6gyzkuoQs5LqFLOS6hyzkuoo" \
        "sLOS6kCzkupYs5LqXLOS6mSzkupws5LqdLOS6nizkuqMs5LqqLOS6ryzkurAs5LqxLO" \
        "S6tCzkurYs5Lq3LOS6uCzkurks5Lq8LOS6vSzkur4s5LuILOS7jCzku48s5LuQLOS7k" \
        "izku5os5LubLOS7nCzku6As5LuiLOS7pizku6cs5LupLOS7rSzku64s5LuvLOS7sSzk" \
        "u7Qs5Lu4LOS7uSzku7os5Lu8LOS7vizkvIAs5LyCLOS8gyzkvIQs5LyFLOS8hizkvIc" \
        "s5LyILOS8iyzkvIws5LySLOS8kyzkvJQs5LyVLOS8lizkvJws5LydLOS8oSzkvKMs5L" \
        "yoLOS8qSzkvKws5LytLOS8rizkvLEs5LyzLOS8tSzkvLcs5Ly5LOS8uyzkvL4s5Ly/L" \
        "OS9gCzkvYEs5L2CLOS9hCzkvYUs5L2HLOS9iCzkvYks5L2KLOS9iyzkvYws5L2SLOS9" \
        "lCzkvZYs5L2hLOS9oizkvaYs5L2oLOS9qizkvass5L2tLOS9rizkvbEs5L2yLOS9tSz" \
        "kvbcs5L24LOS9uSzkvbos5L29LOS+gCzkvoEs5L6CLOS+hSzkvoYs5L6HLOS+iizkvo" \
        "ws5L6OLOS+kCzkvpIs5L6TLOS+lSzkvpYs5L6YLOS+mSzkvpos5L6cLOS+nizkvp8s5" \
        "L6hLOS+oizkvqQs5L6rLOS+rSzkvrAs5L6xLOS+sizkvrMs5L60LOS+tizkvrcs5L64" \
        "LOS+uSzkvros5L67LOS+vCzkvr0s5L6+LOS/gCzkv4Es5L+CLOS/hizkv4cs5L+ILOS" \
        "/iSzkv4ss5L+MLOS/jSzkv5Is5L+TLOS/lCzkv5Us5L+WLOS/mSzkv5ss5L+gLOS/oi" \
        "zkv6Qs5L+lLOS/pyzkv6ss5L+sLOS/sCzkv7Is5L+0LOS/tSzkv7Ys5L+3LOS/uSzkv" \
        "7ss5L+8LOS/vSzkv78s5YCALOWAgSzlgIIs5YCDLOWAhCzlgIUs5YCGLOWAhyzlgIgs" \
        "5YCJLOWAiiws5YCLLOWAjizlgJAs5YCRLOWAkyzlgJUs5YCWLOWAlyzlgJss5YCdLOW" \
        "AnizlgKAs5YCiLOWAoyzlgKQs5YCnLOWAqyzlgK8s5YCwLOWAsSzlgLIs5YCzLOWAtC" \
        "zlgLUs5YC2LOWAtyzlgLgs5YC5LOWAuyzlgL0s5YC/LOWBgCzlgYEs5YGCLOWBhCzlg" \
        "YUs5YGGLOWBiSzlgYos5YGLLOWBjSzlgZAs5YGRLOWBkizlgZMs5YGULOWBlizlgZcs" \
        "5YGYLOWBmSzlgZss5YGdLOWBnizlgZ8s5YGgLOWBoSzlgaIs5YGjLOWBpCzlgaYs5YG" \
        "nLOWBqCzlgaks5YGqLOWBqyzlga0s5YGuLOWBryzlgbAs5YGxLOWBsizlgbMs5YG0LO" \
        "WBtSzlgbgs5YG5LOWBuizlgbws5YG9LOWCgSzlgoIs5YKDLOWChCzlgoYs5YKHLOWCi" \
        "Szlgoos5YKLLOWCjCzlgo4s5YKPLOWCkCzlgpEs5YKSLOWCkyzlgpQs5YKVLOWClizl" \
        "gpcs5YKYLOWCmSzlgpos5YKbLOWCnCzlgp0s5YKeLOWCnyzlgqAs5YKhLOWCoizlgqQ" \
        "s5YKmLOWCqizlgqss5YKtLOWCrizlgq8s5YKwLOWCsSzlgrMs5YK0LOWCtSzlgrYs5Y" \
        "K3LOWCuCzlgrks5YK8LOWCvSzlgr4s5YK/LOWDgCzlg4Es5YOCLOWDgyzlg4Qs5YOFL" \
        "OWDhizlg4cs5YOILOWDiSzlg4os5YOLLOWDjCzlg40s5YOOLOWDkCzlg5Es5YOSLOWD" \
        "kyzlg5Qs5YOVLOWDlyzlg5gs5YOZLOWDmyzlg5ws5YOdLOWDnizlg58s5YOgLOWDoSz" \
        "lg6Is5YOjLOWDpCzlg6Us5YOoLOWDqSzlg6os5YOrLOWDryzlg7As5YOxLOWDsizlg7" \
        "Qs5YO2LOWDtyzlg7gs5YO5LOWDuizlg7ws5YO9LOWDvizlg78s5YSALOWEgSzlhIIs5" \
        "YSDLOWEhCzlhIUs5YSILCzlhIks5YSKLOWEjCzlhI0s5YSOLOWEjyzlhJAs5YSRLOWE" \
        "kyzlhJQs5YSVLOWElizlhJcs5YSYLOWEmSzlhJos5YSbLOWEnCzlhJ0s5YSeLOWEnyz" \
        "lhKAs5YSiLOWEoyzlhKQs5YSlLOWEpizlhKcs5YSoLOWEqSzlhKos5YSrLOWErCzlhK" \
        "0s5YSuLOWEryzlhLAs5YSxLOWEsizlhLMs5YS0LOWEtSzlhLYs5YS3LOWEuCzlhLks5" \
        "YS6LOWEuyzlhLws5YS9LOWEvizlhYIs5YWHLOWFiizlhYws5YWOLOWFjyzlhZAs5YWS" \
        "LOWFkyzlhZcs5YWYLOWFmSzlhZss5YWdLOWFnizlhZ8s5YWgLOWFoSzlhaMs5YWkLOW" \
        "Fpizlhacs5YWpLOWFqizlha8s5YWyLOWFuizlhb4s5YW/LOWGgyzlhoQs5YaGLOWGhy" \
        "zlhoos5YaLLOWGjizlho8s5YaQLOWGkSzlhpMs5YaULOWGmCzlhpos5YadLOWGnizlh" \
        "p8s5YahLOWGoyzlhqYs5YanLOWGqCzlhqks5YaqLOWGrSzlhq4s5Ya0LOWGuCzlhrks" \
        "5Ya6LOWGvizlhr8s5YeBLOWHgizlh4Ms5YeFLOWHiCzlh4os5YeNLOWHjizlh5As5Ye" \
        "SLOWHkyzlh5Qs5YeVLOWHlizlh5cs5YeYLOWHmSzlh5os5YecLOWHnizlh58s5YeiLO" \
        "WHoyzlh6Us5YemLOWHpyzlh6gs5YepLOWHqizlh6ws5YeuLOWHsSzlh7Is5Ye0LOWHt" \
        "yzlh74s5YiELOWIhSzliIks5YiLLOWIjCzliI8s5YiQLOWIkyzliJQs5YiVLOWInCzl" \
        "iJ4s5YifLOWIoSzliKIs5YijLOWIpSzliKYs5YinLOWIqizliKws5YivLOWIsSzliLI" \
        "s5Yi0LOWItSzliLws5Yi+LOWJhCzliYUs5YmGLOWJhyzliYgs5YmJLOWJiyzliY4s5Y" \
        "mPLOWJkizliZMs5YmVLOWJlyzliZgsLOWJmSzliZos5YmbLOWJnSzliZ8s5YmgLOWJo" \
        "izliaMs5YmkLOWJpizliags5YmrLOWJrCzlia0s5YmuLOWJsCzlibEs5YmzLOWJtCzl" \
        "ibUs5Ym2LOWJtyzlibgs5Ym5LOWJuizlibss5Ym8LOWJvizlioAs5YqDLOWKhCzlioU" \
        "s5YqGLOWKhyzlioks5YqKLOWKiyzliows5YqNLOWKjizlio8s5YqRLOWKkizlipQs5Y" \
        "qVLOWKlizlipcs5YqYLOWKmSzlipos5YqcLOWKpCzliqUs5YqmLOWKpyzliq4s5YqvL" \
        "OWKsCzlirQs5Yq1LOWKtizlircs5Yq4LOWKuSzliros5Yq7LOWKvCzlir0s5YuALOWL" \
        "gSzli4Is5YuELOWLhSzli4Ys5YuILOWLiizli4ws5YuNLOWLjizli48s5YuRLOWLkyz" \
        "li5Qs5YuVLOWLlyzli5ks5YuaLOWLmyzli5ws5YudLOWLnizli6As5YuhLOWLoizli6" \
        "Ms5YulLOWLpizli6cs5YuoLOWLqSzli6os5YurLOWLrCzli60s5YuuLOWLryzli7Es5" \
        "YuyLOWLsyzli7Qs5Yu1LOWLtizli7cs5Yu4LOWLuyzli7ws5Yu9LOWMgSzljIIs5YyD" \
        "LOWMhCzljIcs5YyJLOWMiizljIss5YyMLOWMjizljJEs5YySLOWMkyzljJQs5YyYLOW" \
        "MmyzljJws5YyeLOWMnyzljKIs5YykLOWMpSzljKcs5YyoLOWMqSzljKss5YysLOWMrS" \
        "zljK8s5YywLOWMsSzljLIs5YyzLOWMtCzljLUs5Yy2LOWMtyzljLgs5Yy8LOWMvSzlj" \
        "YAs5Y2CLOWNhCzljYYs5Y2LLOWNjCzljY0s5Y2QLOWNlCzljZgs5Y2ZLOWNmyzljZ0s" \
        "5Y2lLOWNqCzljaos5Y2sLOWNrSzljbIs5Y22LOWNuSzljbss5Y28LOWNvSzljb4s5Y6" \
        "ALOWOgSzljoMs5Y6HLOWOiCzljoos5Y6OLOWOjyws5Y6QLOWOkSzljpIs5Y6TLOWOlC" \
        "zljpYs5Y6XLOWOmSzljpss5Y6cLOWOnizljqAs5Y6hLOWOpCzljqcs5Y6qLOWOqyzlj" \
        "qws5Y6tLOWOryzljrAs5Y6xLOWOsizljrMs5Y60LOWOtSzljrcs5Y64LOWOuSzljros" \
        "5Y68LOWOvSzljr4s5Y+ALOWPgyzlj4Qs5Y+FLOWPhizlj4cs5Y+OLOWPjyzlj5As5Y+" \
        "SLOWPkyzlj5Us5Y+aLOWPnCzlj50s5Y+eLOWPoSzlj6Is5Y+nLOWPtCzlj7os5Y++LO" \
        "WPvyzlkIAs5ZCCLOWQhSzlkIcs5ZCLLOWQlCzlkJgs5ZCZLOWQmizlkJws5ZCiLOWQp" \
        "CzlkKUs5ZCqLOWQsCzlkLMs5ZC2LOWQtyzlkLos5ZC9LOWQvyzlkYEs5ZGCLOWRhCzl" \
        "kYUs5ZGHLOWRiSzlkYws5ZGNLOWRjizlkY8s5ZGRLOWRmizlkZ0s5ZGeLOWRnyzlkaA" \
        "s5ZGhLOWRoyzlkaUs5ZGnLOWRqSzlkaos5ZGrLOWRrCzlka0s5ZGuLOWRryzlkbAs5Z" \
        "G0LOWRuSzlkbos5ZG+LOWRvyzlkoEs5ZKDLOWShSzlkocs5ZKILOWSiSzlkoos5ZKNL" \
        "OWSkSzlkpMs5ZKXLOWSmCzlkpws5ZKeLOWSnyzlkqAs5ZKhLOWSoizlkqUs5ZKuLOWS" \
        "sCzlkrIs5ZK1LOWStizlkrcs5ZK5LOWSuizlkrws5ZK+LOWTgyzlk4Us5ZOKLOWTiyz" \
        "lk5Ys5ZOYLOWTmyzlk6As5ZOhLOWToizlk6Ms5ZOkLOWTqyzlk6ws5ZOvLOWTsCzlk7" \
        "Es5ZO0LOWTtSzlk7Ys5ZO3LOWTuCzlk7ks5ZO7LOWTvizllIAs5ZSCLOWUgyzllIQs5" \
        "ZSFLOWUiCzllIos5ZSLLOWUjCzllI0s5ZSOLOWUkizllJMs5ZSVLOWUlizllJcs5ZSY" \
        "LOWUmSzllJos5ZScLOWUnSzllJ4s5ZSfLOWUoSzllKUs5ZSmLCzllKgs5ZSpLOWUqyz" \
        "llK0s5ZSyLOWUtCzllLUs5ZS2LOWUuCzllLks5ZS6LOWUuyzllL0s5ZWALOWVgizllY" \
        "Us5ZWHLOWViCzllYss5ZWMLOWVjSzllY4s5ZWPLOWVkSzllZIs5ZWTLOWVlCzllZcs5" \
        "ZWYLOWVmSzllZos5ZWbLOWVnSzllZ4s5ZWfLOWVoCzllaIs5ZWjLOWVqCzllaks5ZWr" \
        "LOWVryzllbAs5ZWxLOWVsizllbMs5ZW0LOWVuSzllbos5ZW9LOWVvyzlloUs5ZaGLOW" \
        "WjCzllo0s5ZaOLOWWkCzllpIs5ZaTLOWWlSzllpYs5ZaXLOWWmizllpss5ZaeLOWWoC" \
        "zllqEs5ZaiLOWWoyzllqQs5ZalLOWWpizllqgs5ZapLOWWqizllqss5ZasLOWWrSzll" \
        "q4s5ZavLOWWsCzllrIs5Za0LOWWtizllrgs5Za6LOWWvCzllr8s5ZeALOWXgSzll4Is" \
        "5ZeDLOWXhizll4cs5ZeILOWXiizll4ss5ZeOLOWXjyzll5As5ZeVLOWXlyzll5gs5Ze" \
        "ZLOWXmizll5ss5ZeeLOWXoCzll6Is5ZenLOWXqSzll60s5ZeuLOWXsCzll7Es5Ze0LO" \
        "WXtizll7gs5Ze5LOWXuizll7ss5Ze8LOWXvyzlmIIs5ZiDLOWYhCzlmIUs5ZiGLOWYh" \
        "yzlmIos5ZiLLOWYjSzlmJAs5ZiRLOWYkizlmJMs5ZiULOWYlSzlmJYs5ZiXLOWYmSzl" \
        "mJos5ZicLOWYnSzlmKAs5ZihLOWYoizlmKUs5ZimLOWYqCzlmKks5ZiqLOWYqyzlmK4" \
        "s5ZivLOWYsCzlmLMs5Zi1LOWYtyzlmLgs5Zi6LOWYvCzlmL0s5Zi+LOWZgCzlmYEs5Z" \
        "mCLOWZgyzlmYQs5ZmFLOWZhizlmYcs5ZmILOWZiSzlmYos5ZmLLOWZjyzlmZAs5ZmRL" \
        "OWZkizlmZMs5ZmVLOWZlizlmZos5ZmbLOWZnSzlmZ4s5ZmfLOWZoCzlmaEsLOWZoyzl" \
        "maUs5ZmmLOWZpyzlma0s5ZmuLOWZryzlmbAs5ZmyLOWZsyzlmbQs5Zm1LOWZtyzlmbg" \
        "s5Zm5LOWZuizlmb0s5Zm+LOWZvyzlmoAs5ZqBLOWagizlmoMs5ZqELOWahyzlmogs5Z" \
        "qJLOWaiizlmoss5ZqMLOWajSzlmpAs5ZqRLOWakizlmpQs5ZqVLOWalizlmpcs5ZqYL" \
        "OWamSzlmpos5ZqbLOWanCzlmp0s5ZqeLOWanyzlmqAs5ZqhLOWaoizlmqQs5ZqlLOWa" \
        "pizlmqcs5ZqoLOWaqSzlmqos5ZqrLOWarCzlmq0s5ZquLOWasCzlmrEs5ZqyLOWasyz" \
        "lmrQs5Zq1LOWatizlmrgs5Zq5LOWauizlmrss5Zq9LOWavizlmr8s5ZuALOWbgSzlm4" \
        "Is5ZuDLOWbhCzlm4Us5ZuGLOWbhyzlm4gs5ZuJLOWbiyzlm4ws5ZuNLOWbjizlm48s5" \
        "ZuQLOWbkSzlm5Is5ZuTLOWblSzlm5Ys5ZuYLOWbmSzlm5ws5ZujLOWbpSzlm6Ys5Zun" \
        "LOWbqCzlm6ks5ZuqLOWbrCzlm64s5ZuvLOWbsizlm7Ms5Zu2LOWbtyzlm7gs5Zu7LOW" \
        "bvCzlnIAs5ZyBLOWcgizlnIUs5ZyHLOWciyzlnIws5ZyNLOWcjizlnI8s5ZyQLOWckS" \
        "zlnJIs5ZyTLOWclCzlnJUs5ZyWLOWclyzlnJgs5ZyZLOWcmizlnJss5ZydLOWcnizln" \
        "KAs5ZyhLOWcoizlnKQs5ZylLOWcpizlnKcs5ZyrLOWcsSzlnLIs5Zy0LOWctSzlnLYs" \
        "5Zy3LOWcuCzlnLws5Zy9LOWcvyzlnYEs5Z2DLOWdhCzlnYUs5Z2GLOWdiCzlnYks5Z2" \
        "LLOWdkizlnZMs5Z2ULOWdlSzlnZYs5Z2YLOWdmSzlnaIs5Z2jLOWdpSzlnacs5Z2sLO" \
        "WdrizlnbAs5Z2xLOWdsizlnbQs5Z21LOWduCzlnbks5Z26LOWdvSzlnb4s5Z2/LOWeg" \
        "Cws5Z6BLOWehyzlnogs5Z6JLOWeiizlno0s5Z6OLOWejyzlnpAs5Z6RLOWelCzlnpUs" \
        "5Z6WLOWelyzlnpgs5Z6ZLOWemizlnpws5Z6dLOWenizlnp8s5Z6lLOWeqCzlnqos5Z6" \
        "sLOWeryzlnrAs5Z6xLOWesyzlnrUs5Z62LOWetyzlnrks5Z66LOWeuyzlnrws5Z69LO" \
        "Wevizlnr8s5Z+ALOWfgSzln4Qs5Z+FLOWfhizln4cs5Z+ILOWfiSzln4os5Z+MLOWfj" \
        "Szln5As5Z+RLOWfkyzln5Ys5Z+XLOWfmyzln5ws5Z+eLOWfoSzln6Is5Z+jLOWfpSzl" \
        "n6Ys5Z+nLOWfqCzln6ks5Z+qLOWfqyzln6ws5Z+uLOWfsCzln7Es5Z+yLOWfsyzln7U" \
        "s5Z+2LOWftyzln7ss5Z+8LOWfvizln78s5aCBLOWggyzloIQs5aCFLOWgiCzloIks5a" \
        "CKLOWgjCzloI4s5aCPLOWgkCzloJIs5aCTLOWglCzloJYs5aCXLOWgmCzloJos5aCbL" \
        "OWgnCzloJ0s5aCfLOWgoizloKMs5aClLOWgpizloKcs5aCoLOWgqSzloKss5aCsLOWg" \
        "rSzloK4s5aCvLOWgsSzloLIs5aCzLOWgtCzloLYs5aC3LOWguCzloLks5aC6LOWguyz" \
        "loLws5aC9LOWgvizloL8s5aGALOWhgSzloYIs5aGDLOWhhSzloYYs5aGHLOWhiCzloY" \
        "ks5aGKLOWhiyzloY4s5aGPLOWhkCzloZIs5aGTLOWhlSzloZYs5aGXLOWhmSzloZos5" \
        "aGbLOWhnCzloZ0s5aGfLOWhoCzloaEs5aGiLOWhoyzloaQs5aGmLOWhpyzloags5aGp" \
        "LOWhqizloa0s5aGuLOWhryzlobAs5aGxLOWhsizlobMs5aG0LOWhtSzlobYs5aG3LOW" \
        "huCzlobks5aG6LOWhuyzlobws5aG9LOWhvyzlooIs5aKELOWihizloocs5aKILOWiii" \
        "zlooss5aKMLCzloo0s5aKOLOWijyzlopAs5aKRLOWilCzlopUs5aKWLOWilyzlopgs5" \
        "aKbLOWinCzlop0s5aKgLOWioSzloqIs5aKjLOWipCzloqUs5aKmLOWipyzloqos5aKr" \
        "LOWirCzloq0s5aKuLOWiryzlorAs5aKxLOWisizlorMs5aK0LOWitSzlorYs5aK3LOW" \
        "iuCzlorks5aK6LOWiuyzlor0s5aK+LOWivyzlo4As5aOCLOWjgyzlo4Qs5aOGLOWjhy" \
        "zlo4gs5aOJLOWjiizlo4ss5aOMLOWjjSzlo44s5aOPLOWjkCzlo5Is5aOTLOWjlCzlo" \
        "5Ys5aOXLOWjmCzlo5ks5aOaLOWjmyzlo5ws5aOdLOWjnizlo58s5aOgLOWjoSzlo6Is" \
        "5aOjLOWjpSzlo6Ys5aOnLOWjqCzlo6ks5aOqLOWjrSzlo68s5aOxLOWjsizlo7Qs5aO" \
        "1LOWjtyzlo7gs5aO6LOWjuyzlo7ws5aO9LOWjvizlo78s5aSALOWkgSzlpIMs5aSFLO" \
        "WkhizlpIgs5aSJLOWkiizlpIss5aSMLOWkjizlpJAs5aSRLOWkkizlpJMs5aSXLOWkm" \
        "CzlpJss5aSdLOWknizlpKAs5aShLOWkoizlpKMs5aSmLOWkqCzlpKws5aSwLOWksizl" \
        "pLMs5aS1LOWktizlpLss5aS9LOWkvizlpL8s5aWALOWlgyzlpYUs5aWGLOWliizlpYw" \
        "s5aWNLOWlkCzlpZIs5aWTLOWlmSzlpZss5aWcLOWlnSzlpZ4s5aWfLOWloSzlpaMs5a" \
        "WkLOWlpizlpacs5aWoLOWlqSzlpaos5aWrLOWlrCzlpa0s5aWuLOWlryzlpbAs5aWxL" \
        "OWlsizlpbUs5aW3LOWluizlpbss5aW8LOWlvizlpb8s5aaALOWmhSzlpoks5aaLLOWm" \
        "jCzlpo4s5aaPLOWmkCzlppEs5aaULOWmlSzlppgs5aaaLOWmmyzlppws5aadLOWmnyz" \
        "lpqAs5aahLOWmoizlpqYsLOWmpyzlpqws5aatLOWmsCzlprEs5aazLOWmtCzlprUs5a" \
        "a2LOWmtyzlprgs5aa6LOWmvCzlpr0s5aa/LOWngCzlp4Es5aeCLOWngyzlp4Qs5aeFL" \
        "OWnhyzlp4gs5aeJLOWnjCzlp40s5aeOLOWnjyzlp5Us5aeWLOWnmSzlp5ss5aeeLOWn" \
        "nyzlp6As5aehLOWnoizlp6Qs5aemLOWnpyzlp6ks5aeqLOWnqyzlp60s5aeuLOWnryz" \
        "lp7As5aexLOWnsizlp7Ms5ae0LOWntSzlp7Ys5ae3LOWnuCzlp7os5ae8LOWnvSzlp7" \
        "4s5aiALOWogizlqIos5aiLLOWojSzlqI4s5aiPLOWokCzlqJIs5aiULOWolSzlqJYs5" \
        "aiXLOWomSzlqJos5aibLOWonSzlqJ4s5aihLOWooizlqKQs5aimLOWopyzlqKgs5aiq" \
        "LOWoqyzlqKws5aitLOWorizlqK8s5aiwLOWosyzlqLUs5ai3LOWouCzlqLks5ai6LOW" \
        "ouyzlqL0s5ai+LOWovyzlqYEs5amCLOWpgyzlqYQs5amFLOWphyzlqYgs5amLLOWpjC" \
        "zlqY0s5amOLOWpjyzlqZAs5amRLOWpkizlqZMs5amULOWplizlqZcs5amYLOWpmSzlq" \
        "Zss5amcLOWpnSzlqZ4s5amfLOWpoCzlqaEs5amjLOWppCzlqaUs5ammLOWpqCzlqaks" \
        "5amrLOWprCzlqa0s5amuLOWpryzlqbAs5amxLOWpsizlqbMs5am4LOWpuSzlqbss5am" \
        "8LOWpvSzlqb4s5aqALOWqgSzlqoIs5aqDLOWqhCzlqoUs5aqGLOWqhyzlqogs5aqJLO" \
        "Wqiizlqoss5aqMLOWqjSzlqo4s5aqPLOWqkCzlqpEs5aqTLOWqlCzlqpUs5aqWLOWql" \
        "yzlqpgs5aqZLOWqnCzlqp0s5aqeLOWqnyzlqqAs5aqhLOWqoizlqqMs5aqkLOWqpSzl" \
        "qqYs5aqnLOWqqCzlqqks5aqrLOWqrCws5aqtLOWqrizlqq8s5aqwLOWqsSzlqrQs5aq" \
        "2LOWqtyzlqrks5aq6LOWquyzlqrws5aq9LOWqvyzlq4As5auDLOWrhCzlq4Us5auGLO" \
        "Wrhyzlq4gs5auKLOWriyzlq40s5auOLOWrjyzlq5As5auRLOWrkyzlq5Us5auXLOWrm" \
        "Szlq5os5aubLOWrnSzlq54s5aufLOWroizlq6Qs5aulLOWrpyzlq6gs5auqLOWrrCzl" \
        "q60s5auuLOWrryzlq7As5auyLOWrsyzlq7Qs5au1LOWrtizlq7cs5au4LOWruSzlq7o" \
        "s5au7LOWrvCzlq70s5au+LOWrvyzlrIAs5ayBLOWsgizlrIMs5ayELOWshSzlrIYs5a" \
        "yHLOWsiCzlrIos5ayLLOWsjCzlrI0s5ayOLOWsjyzlrJAs5ayRLOWskizlrJMs5ayUL" \
        "OWslSzlrJgs5ayZLOWsmizlrJss5aycLOWsnSzlrJ4s5ayfLOWsoCzlrKEs5ayiLOWs" \
        "oyzlrKQs5aylLOWspizlrKcs5ayoLOWsqSzlrKos5ayrLOWsrCzlrK0s5ayuLOWsryz" \
        "lrLAs5ayxLOWssyzlrLUs5ay2LOWsuCzlrLks5ay6LOWsuyzlrLws5ay9LOWsvizlrL" \
        "8s5a2BLOWtgizlrYMs5a2ELOWthSzlrYYs5a2HLOWtiCzlrYks5a2KLOWtiyzlrYws5" \
        "a2NLOWtjizlrY8s5a2SLOWtlizlrZ4s5a2gLOWtoSzlracs5a2oLOWtqyzlra0s5a2u" \
        "LOWtryzlrbIs5a20LOWttizlrbcs5a24LOWtuSzlrbss5a28LOWtvizlrb8s5a6CLOW" \
        "uhizlroos5a6NLOWujizlrpAs5a6RLOWukizlrpQs5a6WLOWunyzlrqcs5a6oLOWuqS" \
        "zlrqws5a6tLOWurizlrq8s5a6xLOWusizlrrcs5a66LOWuuyzlrrws5a+ALOWvgSzlr" \
        "4Ms5a+ILOWviSzlr4os5a+LLOWvjSzlr44s5a+PLCzlr5Es5a+ULOWvlSzlr5Ys5a+X" \
        "LOWvmCzlr5ks5a+aLOWvmyzlr5ws5a+gLOWvoizlr6Ms5a+mLOWvpyzlr6ks5a+qLOW" \
        "vqyzlr6ws5a+tLOWvryzlr7Es5a+yLOWvsyzlr7Qs5a+1LOWvtizlr7cs5a+9LOWvvi" \
        "zlsIAs5bCCLOWwgyzlsIUs5bCHLOWwiCzlsIss5bCMLOWwjSzlsI4s5bCQLOWwkizls" \
        "JMs5bCXLOWwmSzlsJss5bCeLOWwnyzlsKAs5bChLOWwoyzlsKYs5bCoLOWwqSzlsKos" \
        "5bCrLOWwrSzlsK4s5bCvLOWwsCzlsLIs5bCzLOWwtSzlsLYs5bC3LOWxgyzlsYQs5bG" \
        "GLOWxhyzlsYws5bGNLOWxkizlsZMs5bGULOWxlizlsZcs5bGYLOWxmizlsZss5bGcLO" \
        "WxnSzlsZ8s5bGiLOWxpCzlsacs5bGoLOWxqSzlsaos5bGrLOWxrCzlsa0s5bGwLOWxs" \
        "izlsbMs5bG0LOWxtSzlsbYs5bG3LOWxuCzlsbss5bG8LOWxvSzlsb4s5bKALOWygyzl" \
        "soQs5bKFLOWyhizlsocs5bKJLOWyiizlsoss5bKOLOWyjyzlspIs5bKTLOWylSzlsp0" \
        "s5bKeLOWynyzlsqAs5bKhLOWypCzlsqUs5bKmLOWypyzlsqgs5bKqLOWyrizlsq8s5b" \
        "KwLOWysizlsrQs5bK2LOWyuSzlsros5bK7LOWyvCzlsr4s5bOALOWzgizls4Ms5bOFL" \
        "OWzhizls4cs5bOILOWziSzls4os5bOMLOWzjSzls44s5bOPLOWzkCzls5Es5bOTLOWz" \
        "lCzls5Us5bOWLOWzlyzls5gs5bOaLOWzmyzls5ws5bOdLOWznizls58s5bOgLOWzoiz" \
        "ls6Ms5bOnLOWzqSzls6ss5bOsLOWzrizls68s5bOxLOWzsizls7Ms5bO0LOWztSzls7" \
        "Ys5bO3LOWzuCzls7ks5bO6LOWzvCzls70s5bO+LOWzvyzltIAsLOW0gSzltIQs5bSFL" \
        "OW0iCzltIks5bSKLOW0iyzltIws5bSNLOW0jyzltJAs5bSRLOW0kizltJMs5bSVLOW0" \
        "lyzltJgs5bSZLOW0mizltJws5bSdLOW0nyzltKAs5bShLOW0oizltKMs5bSlLOW0qCz" \
        "ltKos5bSrLOW0rCzltK8s5bSwLOW0sSzltLIs5bSzLOW0tSzltLYs5bS3LOW0uCzltL" \
        "ks5bS6LOW0uyzltLws5bS/LOW1gCzltYEs5bWCLOW1gyzltYQs5bWFLOW1hizltYgs5" \
        "bWJLOW1jSzltY4s5bWPLOW1kCzltZEs5bWSLOW1kyzltZQs5bWVLOW1lizltZcs5bWZ" \
        "LOW1mizltZws5bWeLOW1nyzltaAs5bWhLOW1oizltaMs5bWkLOW1pSzltaYs5bWnLOW" \
        "1qCzltaos5bWtLOW1rizltbAs5bWxLOW1sizltbMs5bW1LOW1tizltbcs5bW4LOW1uS" \
        "zltbos5bW7LOW1vCzltb0s5bW+LOW1vyzltoAs5baBLOW2gyzltoQs5baFLOW2hizlt" \
        "ocs5baILOW2iSzltoos5baLLOW2jCzlto0s5baOLOW2jyzltpAs5baRLOW2kizltpMs" \
        "5baULOW2lSzltpYs5baXLOW2mCzltpos5babLOW2nCzltp4s5bafLOW2oCzltqEs5ba" \
        "iLOW2oyzltqQs5balLOW2pizltqcs5baoLOW2qSzltqos5barLOW2rCzltq0s5bauLO" \
        "W2ryzltrAs5baxLOW2sizltrMs5ba0LOW2tSzltrYs5ba4LOW2uSzltros5ba7LOW2v" \
        "Czltr0s5ba+LOW2vyzlt4As5beBLOW3gizlt4Ms5beELOW3hizlt4cs5beILOW3iSzl" \
        "t4os5beLLOW3jCzlt44s5bePLOW3kCzlt5Es5beSLOW3kyzlt5Qs5beVLOW3lizlt5c" \
        "s5beYLOW3mSzlt5os5becLOW3nyzlt6As5bejLOW3pCzlt6os5besLOW3rSws5bewLO" \
        "W3tSzlt7Ys5be4LOW3uSzlt7os5be7LOW3vCzlt78s5biALOW4hCzluIcs5biJLOW4i" \
        "izluIss5biNLOW4jizluJIs5biTLOW4lyzluJ4s5bifLOW4oCzluKEs5biiLOW4oyzl" \
        "uKQs5bilLOW4qCzluKks5biqLOW4qyzluKws5bivLOW4sCzluLIs5bizLOW4tCzluLU" \
        "s5bi2LOW4uSzluLos5bi+LOW4vyzluYAs5bmBLOW5gyzluYYs5bmHLOW5iCzluYks5b" \
        "mKLOW5iyzluY0s5bmOLOW5jyzluZAs5bmRLOW5kizluZMs5bmWLOW5lyzluZgs5bmZL" \
        "OW5mizluZws5bmdLOW5nyzluaAs5bmjLOW5pCzluaUs5bmmLOW5pyzluags5bmpLOW5" \
        "qizluass5bmsLOW5rSzlua4s5bmvLOW5sCzlubEs5bm1LOW5tyzlubks5bm+LOW6gSz" \
        "luoIs5bqDLOW6hSzluogs5bqJLOW6jCzluo0s5bqOLOW6kizlupgs5bqbLOW6nSzluq" \
        "Es5bqiLOW6oyzluqQs5bqoLOW6qSzluqos5bqrLOW6rCzluq4s5bqvLOW6sCzlurEs5" \
        "bqyLOW6tCzluros5bq7LOW6vCzlur0s5bq/LOW7gCzlu4Es5buCLOW7gyzlu4Qs5buF" \
        "LOW7hizlu4cs5buILOW7iyzlu4ws5buNLOW7jizlu48s5buQLOW7lCzlu5Us5buXLOW" \
        "7mCzlu5ks5buaLOW7nCzlu50s5bueLOW7nyzlu6As5buhLOW7oizlu6Ms5bukLOW7pS" \
        "zlu6Ys5bunLOW7qSzlu6ss5busLOW7rSzlu64s5buvLOW7sCzlu7Es5buyLOW7syzlu" \
        "7Us5bu4LOW7uSzlu7ss5bu8LOW7vSzlvIUs5byGLOW8hyzlvIks5byMLOW8jSzlvI4s" \
        "5byQLOW8kizlvJQs5byWLOW8mSzlvJos5bycLOW8nSzlvJ4s5byhLOW8oizlvKMs5by" \
        "kLCzlvKgs5byrLOW8rCzlvK4s5bywLOW8sizlvLMs5by0LOW8tSzlvLYs5by3LOW8uC" \
        "zlvLss5by9LOW8vizlvL8s5b2BLOW9gizlvYMs5b2ELOW9hSzlvYYs5b2HLOW9iCzlv" \
        "Yks5b2KLOW9iyzlvYws5b2NLOW9jizlvY8s5b2RLOW9lCzlvZks5b2aLOW9myzlvZws" \
        "5b2eLOW9nyzlvaAs5b2jLOW9pSzlvacs5b2oLOW9qyzlva4s5b2vLOW9sizlvbQs5b2" \
        "1LOW9tizlvbgs5b26LOW9vSzlvb4s5b2/LOW+gyzlvoYs5b6NLOW+jizlvo8s5b6RLO" \
        "W+kyzlvpQs5b6WLOW+mizlvpss5b6dLOW+nizlvp8s5b6gLOW+oizlvqMs5b6kLOW+p" \
        "SzlvqYs5b6nLOW+qSzlvqss5b6sLOW+ryzlvrAs5b6xLOW+sizlvrMs5b60LOW+tizl" \
        "vrgs5b65LOW+uizlvrss5b6+LOW+vyzlv4As5b+BLOW/gizlv4cs5b+ILOW/iizlv4s" \
        "s5b+OLOW/kyzlv5Qs5b+VLOW/mizlv5ss5b+cLOW/nizlv58s5b+iLOW/oyzlv6Us5b" \
        "+mLOW/qCzlv6ks5b+sLOW/ryzlv7As5b+yLOW/syzlv7Qs5b+2LOW/tyzlv7ks5b+6L" \
        "OW/vCzmgIcs5oCILOaAiSzmgIss5oCMLOaAkCzmgJEs5oCTLOaAlyzmgJgs5oCaLOaA" \
        "nizmgJ8s5oCiLOaAoyzmgKQs5oCsLOaArSzmgK4s5oCwLOaAsSzmgLIs5oCzLOaAtCz" \
        "mgLYs5oC3LOaAuCzmgLks5oC6LOaAvSzmgL4s5oGALOaBhCzmgYUs5oGGLOaBhyzmgY" \
        "gs5oGJLOaBiizmgYws5oGOLOaBjyzmgZEs5oGTLOaBlCzmgZYs5oGXLOaBmCzmgZss5" \
        "oGcLOaBnizmgZ8s5oGgLOaBoSzmgaUs5oGmLOaBrizmgbEs5oGyLOaBtCzmgbUs5oG3" \
        "LOaBvizmgoAsLOaCgSzmgoIs5oKFLOaChizmgocs5oKILOaCiizmgoss5oKOLOaCjyz" \
        "mgpAs5oKRLOaCkyzmgpUs5oKXLOaCmCzmgpks5oKcLOaCnizmgqEs5oKiLOaCpCzmgq" \
        "Us5oKnLOaCqSzmgqos5oKuLOaCsCzmgrMs5oK1LOaCtizmgrcs5oK5LOaCuizmgr0s5" \
        "oK+LOaCvyzmg4As5oOBLOaDgizmg4Ms5oOELOaDhyzmg4gs5oOJLOaDjCzmg40s5oOO" \
        "LOaDjyzmg5As5oOSLOaDkyzmg5Qs5oOWLOaDlyzmg5ks5oObLOaDnizmg6Es5oOiLOa" \
        "Doyzmg6Qs5oOlLOaDqizmg7Es5oOyLOaDtSzmg7cs5oO4LOaDuyzmg7ws5oO9LOaDvi" \
        "zmg78s5oSCLOaEgyzmhIQs5oSFLOaEhyzmhIos5oSLLOaEjCzmhJAs5oSRLOaEkizmh" \
        "JMs5oSULOaElizmhJcs5oSYLOaEmSzmhJss5oScLOaEnSzmhJ4s5oShLOaEoizmhKUs" \
        "5oSoLOaEqSzmhKos5oSsLOaErSzmhK4s5oSvLOaEsCzmhLEs5oSyLOaEsyzmhLQs5oS" \
        "1LOaEtizmhLcs5oS4LOaEuSzmhLos5oS7LOaEvCzmhL0s5oS+LOaFgCzmhYEs5oWCLO" \
        "aFgyzmhYQs5oWFLOaFhizmhYcs5oWJLOaFiyzmhY0s5oWPLOaFkCzmhZIs5oWTLOaFl" \
        "CzmhZYs5oWXLOaFmCzmhZks5oWaLOaFmyzmhZws5oWeLOaFnyzmhaAs5oWhLOaFoyzm" \
        "haQs5oWlLOaFpizmhaks5oWqLOaFqyzmhaws5oWtLOaFrizmha8s5oWxLOaFsizmhbM" \
        "s5oW0LOaFtizmhbgs5oW5LOaFuizmhbss5oW8LOaFvSzmhb4s5oW/LOaGgCzmhoEs5o" \
        "aCLOaGgyzmhoQs5oaFLOaGhizmhocs5oaILOaGiSzmhoos5oaMLOaGjSzmho8s5oaQL" \
        "OaGkSzmhpIs5oaTLOaGlSws5oaWLOaGlyzmhpgs5oaZLOaGmizmhpss5oacLOaGnizm" \
        "hp8s5oagLOaGoSzmhqIs5oajLOaGpCzmhqUs5oamLOaGqizmhqss5oatLOaGrizmhq8" \
        "s5oawLOaGsSzmhrIs5oazLOaGtCzmhrUs5oa2LOaGuCzmhrks5oa6LOaGuyzmhrws5o" \
        "a9LOaGvyzmh4As5oeBLOaHgyzmh4Qs5oeFLOaHhizmh4cs5oeJLOaHjCzmh40s5oeOL" \
        "OaHjyzmh5As5oeTLOaHlSzmh5Ys5oeXLOaHmCzmh5ks5oeaLOaHmyzmh5ws5oedLOaH" \
        "nizmh58s5oegLOaHoSzmh6Is5oejLOaHpCzmh6Us5oenLOaHqCzmh6ks5oeqLOaHqyz" \
        "mh6ws5oetLOaHrizmh68s5oewLOaHsSzmh7Is5oezLOaHtCzmh7Ys5oe3LOaHuCzmh7" \
        "ks5oe6LOaHuyzmh7ws5oe9LOaHvizmiIAs5oiBLOaIgizmiIMs5oiELOaIhSzmiIcs5" \
        "oiJLOaIkyzmiJQs5oiZLOaInCzmiJ0s5oieLOaIoCzmiKMs5oimLOaIpyzmiKgs5oip" \
        "LOaIqyzmiK0s5oivLOaIsCzmiLEs5oiyLOaItSzmiLYs5oi4LOaIuSzmiLos5oi7LOa" \
        "IvCzmiYIs5omELOaJhSzmiYYs5omKLOaJjyzmiZAs5omVLOaJlizmiZcs5omZLOaJmi" \
        "zmiZws5omdLOaJnizmiZ8s5omgLOaJoSzmiaIs5omkLOaJpSzmiags5omxLOaJsizmi" \
        "bQs5om1LOaJtyzmibgs5om6LOaJuyzmib0s5oqBLOaKgizmioMs5oqFLOaKhizmiocs" \
        "5oqILOaKiyzmiows5oqNLOaKjizmio8s5oqQLOaKlCzmipks5oqcLOaKnSzmip4s5oq" \
        "jLOaKpizmiqcs5oqpLOaKqizmiq0s5oquLOaKryzmirAs5oqyLOaKsyzmirQs5oq2LO" \
        "aKtyzmirgs5oq6LOaKvizmi4As5ouBLCzmi4Ms5ouLLOaLjyzmi5Es5ouVLOaLnSzmi" \
        "54s5ougLOaLoSzmi6Qs5ouqLOaLqyzmi7As5ouyLOaLtSzmi7gs5ou5LOaLuizmi7ss" \
        "5oyALOaMgyzmjIQs5oyFLOaMhizmjIos5oyLLOaMjCzmjI0s5oyPLOaMkCzmjJIs5oy" \
        "TLOaMlCzmjJUs5oyXLOaMmCzmjJks5oycLOaMpizmjKcs5oypLOaMrCzmjK0s5oyuLO" \
        "aMsCzmjLEs5oyzLOaMtCzmjLUs5oy2LOaMtyzmjLgs5oy7LOaMvCzmjL4s5oy/LOaNg" \
        "CzmjYEs5o2ELOaNhyzmjYgs5o2KLOaNkSzmjZIs5o2TLOaNlCzmjZYs5o2XLOaNmCzm" \
        "jZks5o2aLOaNmyzmjZws5o2dLOaNoCzmjaQs5o2lLOaNpizmjags5o2qLOaNqyzmjaw" \
        "s5o2vLOaNsCzmjbIs5o2zLOaNtCzmjbUs5o24LOaNuSzmjbws5o29LOaNvizmjb8s5o" \
        "6BLOaOgyzmjoQs5o6FLOaOhizmjoss5o6NLOaOkSzmjpMs5o6ULOaOlSzmjpcs5o6ZL" \
        "OaOmizmjpss5o6cLOaOnSzmjp4s5o6fLOaOoSzmjqQs5o6mLOaOqyzmjq8s5o6xLOaO" \
        "sizmjrUs5o62LOaOuSzmjrss5o69LOaOvyzmj4As5o+BLOaPgizmj4Ms5o+FLOaPhyz" \
        "mj4gs5o+KLOaPiyzmj4ws5o+RLOaPkyzmj5Qs5o+VLOaPlyzmj5gs5o+ZLOaPmizmj5" \
        "ss5o+cLOaPnSzmj58s5o+iLOaPpCzmj6Us5o+mLOaPpyzmj6gs5o+rLOaPrCzmj64s5" \
        "o+vLOaPsCzmj7Es5o+zLOaPtSzmj7cs5o+5LOaPuizmj7ss5o+8LOaPvizmkIMs5pCE" \
        "LOaQhizmkIcs5pCILOaQiSzmkIos5pCNLOaQjizmkJEs5pCSLOaQlSzmkJYs5pCXLOa" \
        "QmCzmkJks5pCaLOaQnSzmkJ8s5pCiLOaQoyzmkKQsLOaQpSzmkKcs5pCoLOaQqSzmkK" \
        "ss5pCuLOaQryzmkLAs5pCxLOaQsizmkLMs5pC1LOaQtizmkLcs5pC4LOaQuSzmkLss5" \
        "pC8LOaQvizmkYAs5pGCLOaRgyzmkYks5pGLLOaRjCzmkY0s5pGOLOaRjyzmkZAs5pGR" \
        "LOaRkyzmkZUs5pGWLOaRlyzmkZks5pGaLOaRmyzmkZws5pGdLOaRnyzmkaAs5pGhLOa" \
        "RoizmkaMs5pGkLOaRpSzmkaYs5pGoLOaRqizmkass5pGsLOaRrizmka8s5pGwLOaRsS" \
        "zmkbIs5pGzLOaRtCzmkbUs5pG2LOaRtyzmkbss5pG8LOaRvSzmkb4s5pG/LOaSgCzmk" \
        "oEs5pKDLOaShizmkogs5pKJLOaSiizmkoss5pKMLOaSjSzmko4s5pKPLOaSkCzmkpMs" \
        "5pKULOaSlyzmkpgs5pKaLOaSmyzmkpws5pKdLOaSnyzmkqAs5pKhLOaSoizmkqMs5pK" \
        "lLOaSpizmkqcs5pKoLOaSqizmkqss5pKvLOaSsSzmkrIs5pKzLOaStCzmkrYs5pK5LO" \
        "aSuyzmkr0s5pK+LOaSvyzmk4Es5pODLOaThCzmk4Ys5pOHLOaTiCzmk4ks5pOKLOaTi" \
        "yzmk4ws5pOPLOaTkSzmk5Ms5pOULOaTlSzmk5Ys5pOZLOaTmizmk5ss5pOcLOaTnSzm" \
        "k58s5pOgLOaToSzmk6Ms5pOlLOaTpyzmk6gs5pOpLOaTqizmk6ss5pOsLOaTrSzmk64" \
        "s5pOvLOaTsCzmk7Es5pOyLOaTsyzmk7Qs5pO1LOaTtizmk7cs5pO4LOaTuSzmk7os5p" \
        "O7LOaTvCzmk70s5pO+LOaTvyzmlIEs5pSCLOaUgyzmlIQs5pSFLOaUhizmlIcs5pSIL" \
        "OaUiizmlIss5pSMLOaUjSzmlI4s5pSPLOaUkCzmlJEs5pSTLOaUlCzmlJUs5pSWLOaU" \
        "lyzmlJks5pSaLOaUmyzmlJws5pSdLOaUnizmlJ8s5pSgLOaUoSws5pSiLOaUoyzmlKQ" \
        "s5pSmLOaUpyzmlKgs5pSpLOaUqizmlKws5pStLOaUsCzmlLEs5pSyLOaUsyzmlLcs5p" \
        "S6LOaUvCzmlL0s5pWALOaVgSzmlYIs5pWDLOaVhCzmlYYs5pWHLOaViizmlYss5pWNL" \
        "OaVjizmlZAs5pWSLOaVkyzmlZQs5pWXLOaVmCzmlZos5pWcLOaVnyzmlaAs5pWhLOaV" \
        "pCzmlaUs5pWnLOaVqCzmlaks5pWqLOaVrSzmla4s5pWvLOaVsSzmlbMs5pW1LOaVtiz" \
        "mlbgs5pW5LOaVuizmlbss5pW8LOaVvSzmlb4s5pW/LOaWgCzmloEs5paCLOaWgyzmlo" \
        "Qs5paFLOaWhizmlogs5paJLOaWiizmlo0s5paOLOaWjyzmlpIs5paULOaWlSzmlpYs5" \
        "paYLOaWmizmlp0s5paeLOaWoCzmlqIs5pajLOaWpizmlqgs5paqLOaWrCzmlq4s5pax" \
        "LOaWsizmlrMs5pa0LOaWtSzmlrYs5pa3LOaWuCzmlros5pa7LOaWvizmlr8s5peALOa" \
        "Xgizml4cs5peILOaXiSzml4os5peNLOaXkCzml5Es5peTLOaXlCzml5Us5peYLOaXmS" \
        "zml5os5pebLOaXnCzml50s5peeLOaXnyzml6Es5pejLOaXpCzml6os5perLOaXsizml" \
        "7Ms5pe0LOaXtSzml7gs5pe5LOaXuyzml7ws5pe9LOaXvizml78s5piBLOaYhCzmmIUs" \
        "5piHLOaYiCzmmIks5piLLOaYjSzmmJAs5piRLOaYkizmmJYs5piXLOaYmCzmmJos5pi" \
        "bLOaYnCzmmJ4s5pihLOaYoizmmKMs5pikLOaYpizmmKks5piqLOaYqyzmmKws5piuLO" \
        "aYsCzmmLIs5pizLOaYtyzmmLgs5pi5LOaYuizmmLss5pi9LOaYvyzmmYAs5pmCLOaZh" \
        "CzmmYUs5pmGLOaZhyzmmYgs5pmJLOaZiizmmY0s5pmOLOaZkCzmmZEs5pmYLCzmmZks" \
        "5pmbLOaZnCzmmZ0s5pmeLOaZoCzmmaIs5pmjLOaZpSzmmacs5pmpLOaZqizmmass5pm" \
        "sLOaZrSzmmbEs5pmyLOaZsyzmmbUs5pm4LOaZuSzmmbss5pm8LOaZvSzmmb8s5pqALO" \
        "aagSzmmoMs5pqFLOaahizmmogs5pqJLOaaiizmmoss5pqNLOaajizmmo8s5pqQLOaak" \
        "izmmpMs5pqULOaalSzmmpgs5pqZLOaamizmmpss5pqcLOaanizmmp8s5pqgLOaaoSzm" \
        "mqIs5pqjLOaapCzmmqUs5pqmLOaaqSzmmqos5pqrLOaarCzmmq0s5pqvLOaasCzmmrE" \
        "s5pqyLOaasyzmmrUs5pq2LOaatyzmmrgs5pq6LOaauyzmmrws5pq9LOaavyzmm4As5p" \
        "uBLOabgizmm4Ms5puELOabhSzmm4Ys5puHLOabiCzmm4ks5puKLOabiyzmm4ws5puNL" \
        "Oabjizmm48s5puQLOabkSzmm5Is5puTLOablCzmm5Us5puWLOablyzmm5gs5puaLOab" \
        "nizmm58s5pugLOaboSzmm6Is5pujLOabpCzmm6Us5punLOabqCzmm6os5purLOabrCz" \
        "mm60s5puuLOabryzmm7Es5pu1LOabtizmm7gs5pu6LOabuyzmm70s5pyBLOacgizmnI" \
        "Ms5pyELOachSzmnIYs5pyHLOacjCzmnI4s5pyPLOackSzmnJIs5pyTLOaclizmnJgs5" \
        "pyZLOacmizmnJws5pyeLOacoCzmnKEs5pyiLOacoyzmnKQs5pylLOacpyzmnKks5pyu" \
        "LOacsCzmnLIs5pyzLOactizmnLcs5py4LOacuSzmnLss5py8LOacvizmnL8s5p2BLOa" \
        "dhCzmnYUs5p2HLOadiizmnYss5p2NLOadkizmnZQs5p2VLOadlyzmnZgs5p2ZLOadmi" \
        "zmnZss5p2dLOadoizmnaMs5p2kLOadpizmnacs5p2rLOadrCzmna4s5p2xLOadtCzmn" \
        "bYsLOaduCzmnbks5p26LOaduyzmnb0s5p6ALOaegizmnoMs5p6FLOaehizmnogs5p6K" \
        "LOaejCzmno0s5p6OLOaejyzmnpEs5p6SLOaekyzmnpQs5p6WLOaemSzmnpss5p6fLOa" \
        "eoCzmnqEs5p6kLOaepizmnqks5p6sLOaerizmnrEs5p6yLOaetCzmnrks5p66LOaeuy" \
        "zmnrws5p69LOaevizmnr8s5p+ALOafgizmn4Us5p+GLOafhyzmn4gs5p+JLOafiizmn" \
        "4ss5p+MLOafjSzmn44s5p+VLOaflizmn5cs5p+bLOafnyzmn6Es5p+jLOafpCzmn6Ys" \
        "5p+nLOafqCzmn6os5p+rLOafrSzmn64s5p+yLOaftSzmn7Ys5p+3LOafuCzmn7ks5p+" \
        "6LOafuyzmn7ws5p++LOaggSzmoIIs5qCDLOaghCzmoIYs5qCNLOagkCzmoJIs5qCULO" \
        "aglSzmoJgs5qCZLOagmizmoJss5qCcLOagnizmoJ8s5qCgLOagoizmoKMs5qCkLOagp" \
        "SzmoKYs5qCnLOagqCzmoKss5qCsLOagrSzmoK4s5qCvLOagsCzmoLEs5qC0LOagtSzm" \
        "oLYs5qC6LOaguyzmoL8s5qGHLOahiyzmoY0s5qGPLOahkizmoZYs5qGXLOahmCzmoZk" \
        "s5qGaLOahmyzmoZws5qGdLOahnizmoZ8s5qGqLOahrCzmoa0s5qGuLOahryzmobAs5q" \
        "GxLOahsizmobMs5qG1LOahuCzmobks5qG6LOahuyzmobws5qG9LOahvizmob8s5qKAL" \
        "OaigizmooQs5qKHLOaiiCzmooks5qKKLOaiiyzmoows5qKNLOaijizmopAs5qKRLOai" \
        "kizmopQs5qKVLOailizmopgs5qKZLOaimizmopss5qKcLOainSzmop4s5qKfLOaioCz" \
        "moqEs5qKjLOaipCzmoqUs5qKpLOaiqizmoqss5qKsLOairizmorEs5qKyLOaitCzmor" \
        "Ys5qK3LOaiuCws5qK5LOaiuizmorss5qK8LOaivSzmor4s5qK/LOajgSzmo4Ms5qOEL" \
        "OajhSzmo4Ys5qOHLOajiCzmo4os5qOMLOajjizmo48s5qOQLOajkSzmo5Ms5qOULOaj" \
        "lizmo5cs5qOZLOajmyzmo5ws5qOdLOajnizmo58s5qOhLOajoizmo6Qs5qOlLOajpiz" \
        "mo6cs5qOoLOajqSzmo6os5qOrLOajrCzmo60s5qOvLOajsizmo7Ms5qO0LOajtizmo7" \
        "cs5qO4LOajuyzmo70s5qO+LOajvyzmpIAs5qSCLOakgyzmpIQs5qSGLOakhyzmpIgs5" \
        "qSJLOakiizmpIws5qSPLOakkSzmpJMs5qSULOaklSzmpJYs5qSXLOakmCzmpJks5qSa" \
        "LOakmyzmpJws5qSdLOaknizmpKEs5qSiLOakoyzmpKUs5qSmLOakpyzmpKgs5qSpLOa" \
        "kqizmpKss5qSsLOakrizmpK8s5qSxLOaksizmpLMs5qS1LOaktizmpLcs5qS4LOakui" \
        "zmpLss5qS8LOakvizmpYAs5qWBLOalgyzmpYQs5qWFLOalhizmpYcs5qWILOaliSzmp" \
        "Yos5qWLLOaljCzmpY0s5qWOLOaljyzmpZAs5qWRLOalkizmpZMs5qWVLOallizmpZgs" \
        "5qWZLOalmyzmpZws5qWfLOaloSzmpaIs5qWkLOalpSzmpacs5qWoLOalqSzmpaos5qW" \
        "sLOalrSzmpa8s5qWwLOalsizmpbMs5qW0LOaltSzmpbYs5qW6LOaluyzmpb0s5qW+LO" \
        "alvyzmpoEs5qaDLOamhSzmpoos5qaLLOamjCzmpo4s5qaPLOamkCzmppEs5qaSLOamk" \
        "yzmppYs5qaXLOammSzmppos5qadLOamnizmpp8s5qagLOamoSzmpqIs5qajLOampCzm" \
        "pqUs5qamLOamqSzmpqos5qasLOamrizmpq8s5qawLOamsizmprMs5qa1LOamtizmprg" \
        "s5qa5LOamuizmprws5qa9LCzmpr4s5qa/LOangCzmp4Is5qeDLOanhCzmp4Us5qeGLO" \
        "anhyzmp4gs5qeJLOaniyzmp40s5qePLOankSzmp5Is5qeTLOanlSzmp5Ys5qeXLOanm" \
        "Czmp5ks5qeaLOannCzmp50s5qeeLOanoSzmp6Is5qejLOanpCzmp6Us5qemLOanpyzm" \
        "p6gs5qepLOanqizmp6ss5qesLOanrizmp68s5qewLOansSzmp7Ms5qe0LOantSzmp7Y" \
        "s5qe3LOanuCzmp7ks5qe6LOanuyzmp7ws5qe+LOaogCzmqIEs5qiCLOaogyzmqIQs5q" \
        "iFLOaohizmqIcs5qiILOaoiSzmqIss5qiMLOaojSzmqI4s5qiPLOaokCzmqJEs5qiSL" \
        "OaokyzmqJQs5qiVLOaolizmqJks5qiaLOaomyzmqJws5qidLOaonizmqKAs5qiiLOao" \
        "oyzmqKQs5qilLOaopizmqKcs5qipLOaoqyzmqKws5qitLOaorizmqLAs5qiyLOaosyz" \
        "mqLQs5qi2LOaotyzmqLgs5qi5LOaouizmqLss5qi8LOaovyzmqYAs5qmBLOapgizmqY" \
        "Ms5qmFLOaphizmqYgs5qmJLOapiizmqYss5qmMLOapjSzmqY4s5qmPLOapkSzmqZIs5" \
        "qmTLOaplCzmqZUs5qmWLOaplyzmqZos5qmcLOapnSzmqZ4s5qmfLOapoCzmqaIs5qmj" \
        "LOappCzmqaYs5qmnLOapqCzmqaks5qmqLOapqyzmqaws5qmtLOaprizmqa8s5qmwLOa" \
        "psizmqbMs5qm0LOaptSzmqbYs5qm3LOapuCzmqbos5qm7LOapvSzmqb4s5qm/LOaqgS" \
        "zmqoIs5qqDLOaqhSzmqoYs5qqHLOaqiCzmqoks5qqKLOaqiyzmqows5qqNLOaqjyzmq" \
        "pIs5qqTLOaqlCzmqpUs5qqWLOaqmCzmqpks5qqaLOaqmyzmqpws5qqdLOaqnizmqp8s" \
        "5qqhLOaqoizmqqMs5qqkLOaqpSzmqqYsLOaqpyzmqqgs5qqqLOaqrSzmqq4s5qqvLOa" \
        "qsCzmqrEs5qqyLOaqsyzmqrQs5qq1LOaqtizmqrcs5qq4LOaquSzmqros5qq7LOaqvC" \
        "zmqr0s5qq+LOaqvyzmq4As5quBLOargizmq4Ms5quELOarhSzmq4Ys5quHLOariCzmq" \
        "4ks5quKLOariyzmq4ws5quNLOarjizmq48s5quQLOarkSzmq5Is5quTLOarlCzmq5Us" \
        "5quWLOarlyzmq5gs5quZLOarmizmq5ss5qucLOarnSzmq54s5qufLOaroCzmq6Es5qu" \
        "iLOaroyzmq6Qs5qulLOarpizmq6cs5quoLOarqSzmq6os5qurLOarrCzmq60s5quuLO" \
        "arryzmq7As5quxLOarsizmq7Ms5qu0LOartSzmq7Ys5qu3LOaruCzmq7ks5qu6LOaru" \
        "yzmq7ws5qu9LOarvizmq78s5qyALOasgSzmrIIs5qyDLOashCzmrIUs5qyGLOashyzm" \
        "rIgs5qyJLOasiizmrIss5qyMLOasjSzmrI4s5qyPLOaskCzmrJEs5qySLOaskyzmrJQ" \
        "s5qyVLOaslizmrJcs5qyYLOasmSzmrJos5qybLOasnCzmrJ0s5qyeLOasnyzmrKUs5q" \
        "ymLOasqCzmrKks5qyqLOasqyzmrKws5qytLOasrizmrK8s5qywLOassSzmrLMs5qy0L" \
        "OastSzmrLYs5qy4LOasuyzmrLws5qy9LOasvyzmrYAs5q2BLOatgizmrYQs5q2FLOat" \
        "iCzmrYos5q2LLOatjSzmrY4s5q2PLOatkCzmrZEs5q2SLOatkyzmrZQs5q2VLOatliz" \
        "mrZcs5q2YLOatmizmrZss5q2cLOatnSzmrZ4s5q2fLOatoCzmraEs5q2oLOatqSzmra" \
        "ss5q2sLOatrSzmra4s5q2vLOatsCzmrbEs5q2yLOatsyzmrbQs5q21LOattizmrbcs5" \
        "q24LOatuizmrb0s5q2+LOatvyzmroAs5q6FLOauiCws5q6MLOaujizmro8s5q6QLOau" \
        "kSzmrpQs5q6VLOaulyzmrpgs5q6ZLOaunCzmrp0s5q6eLOaunyzmrqAs5q6iLOauoyz" \
        "mrqQs5q6lLOaupizmrqcs5q6oLOauqSzmrqss5q6sLOaurSzmrq4s5q6vLOausCzmrr" \
        "Es5q6yLOautizmrrgs5q65LOauuizmrrss5q68LOauvSzmrr4s5q+ALOavgyzmr4Qs5" \
        "q+GLOavhyzmr4gs5q+JLOaviizmr4ws5q+OLOavkCzmr5Es5q+YLOavmizmr5ws5q+d" \
        "LOavnizmr58s5q+gLOavoizmr6Ms5q+kLOavpSzmr6Ys5q+nLOavqCzmr6ks5q+sLOa" \
        "vrSzmr64s5q+wLOavsSzmr7Is5q+0LOavtizmr7cs5q+4LOavuizmr7ss5q+8LOavvi" \
        "zmr78s5rCALOawgSzmsIIs5rCDLOawhCzmsIgs5rCJLOawiizmsIss5rCMLOawjizms" \
        "JIs5rCXLOawnCzmsJ0s5rCeLOawoCzmsKMs5rClLOawqyzmsKws5rCtLOawsSzmsLMs" \
        "5rC2LOawtyzmsLks5rC6LOawuyzmsLws5rC+LOawvyzmsYMs5rGELOaxhSzmsYgs5rG" \
        "LLOaxjCzmsY0s5rGOLOaxjyzmsZEs5rGSLOaxkyzmsZYs5rGYLOaxmSzmsZos5rGiLO" \
        "axoyzmsaUs5rGmLOaxpyzmsass5rGsLOaxrSzmsa4s5rGvLOaxsSzmsbMs5rG1LOaxt" \
        "yzmsbgs5rG6LOaxuyzmsbws5rG/LOaygCzmsoQs5rKHLOayiizmsoss5rKNLOayjizm" \
        "spEs5rKSLOaylSzmspYs5rKXLOaymCzmspos5rKcLOaynSzmsp4s5rKgLOayoizmsqg" \
        "s5rKsLOayryzmsrAs5rK0LOaytSzmsrYs5rK3LOayuizms4As5rOBLOazgizms4Ms5r" \
        "OGLOazhyzms4gs5rOLLOazjSzms44s5rOPLOazkSzms5Is5rOYLCzms5ks5rOaLOazn" \
        "Czms50s5rOfLOazpCzms6Ys5rOnLOazqSzms6ws5rOtLOazsizms7Qs5rO5LOazvyzm" \
        "tIAs5rSCLOa0gyzmtIUs5rSGLOa0iCzmtIks5rSKLOa0jSzmtI8s5rSQLOa0kSzmtJM" \
        "s5rSULOa0lSzmtJYs5rSYLOa0nCzmtJ0s5rSfLOa0oCzmtKEs5rSiLOa0oyzmtKQs5r" \
        "SmLOa0qCzmtKks5rSsLOa0rSzmtK8s5rSwLOa0tCzmtLYs5rS3LOa0uCzmtLos5rS/L" \
        "Oa1gCzmtYIs5rWELOa1iSzmtYws5rWQLOa1lSzmtZYs5rWXLOa1mCzmtZss5rWdLOa1" \
        "nyzmtaEs5rWiLOa1pCzmtaUs5rWnLOa1qCzmtass5rWsLOa1rSzmtbAs5rWxLOa1siz" \
        "mtbMs5rW1LOa1tizmtbks5rW6LOa1uyzmtb0s5rW+LOa1vyzmtoAs5raBLOa2gyzmto" \
        "Qs5raGLOa2hyzmtoos5raLLOa2jSzmto8s5raQLOa2kizmtpYs5raXLOa2mCzmtpks5" \
        "raaLOa2nCzmtqIs5ralLOa2rCzmtq0s5rawLOa2sSzmtrMs5ra0LOa2tizmtrcs5ra5" \
        "LOa2uizmtrss5ra8LOa2vSzmtr4s5reBLOa3gizmt4Ms5reILOa3iSzmt4os5reNLOa" \
        "3jizmt48s5reQLOa3kizmt5Ms5reULOa3lSzmt5cs5reaLOa3myzmt5ws5refLOa3oi" \
        "zmt6Ms5relLOa3pyzmt6gs5repLOa3qizmt60s5revLOa3sCzmt7Is5re0LOa3tSzmt" \
        "7Ys5re4LOa3uizmt70s5re+LOa3vyzmuIAs5riBLOa4gizmuIMs5riELOa4hizmuIcs" \
        "5riILOa4iSzmuIss5riPLOa4kizmuJMs5riVLOa4mCzmuJks5ribLOa4nCzmuJ4s5ri" \
        "fLOa4oizmuKYs5rinLOa4qCzmuKos5risLOa4rizmuLAs5rixLOa4syzmuLUsLOa4ti" \
        "zmuLcs5ri5LOa4uyzmuLws5ri9LOa4vizmuL8s5rmALOa5gSzmuYIs5rmFLOa5hizmu" \
        "Ycs5rmILOa5iSzmuYos5rmLLOa5jCzmuY8s5rmQLOa5kSzmuZIs5rmVLOa5lyzmuZks" \
        "5rmaLOa5nCzmuZ0s5rmeLOa5oCzmuaEs5rmiLOa5oyzmuaQs5rmlLOa5pizmuacs5rm" \
        "oLOa5qSzmuaos5rmsLOa5rSzmua8s5rmwLOa5sSzmubIs5rmzLOa5tCzmubUs5rm2LO" \
        "a5tyzmubgs5rm5LOa5uizmubss5rm8LOa5vSzmuoAs5rqBLOa6gizmuoQs5rqHLOa6i" \
        "Czmuoos5rqLLOa6jCzmuo0s5rqOLOa6kSzmupIs5rqTLOa6lCzmupUs5rqWLOa6lyzm" \
        "upks5rqaLOa6myzmup0s5rqeLOa6oCzmuqEs5rqjLOa6pCzmuqYs5rqoLOa6qSzmuqs" \
        "s5rqsLOa6rSzmuq4s5rqwLOa6syzmurUs5rq4LOa6uSzmurws5rq+LOa6vyzmu4As5r" \
        "uDLOa7hCzmu4Us5ruGLOa7iCzmu4ks5ruKLOa7jCzmu40s5ruOLOa7kCzmu5Is5ruWL" \
        "Oa7mCzmu5ks5rubLOa7nCzmu50s5rujLOa7pyzmu6os5rurLOa7rCzmu60s5ruuLOa7" \
        "ryzmu7As5ruxLOa7sizmu7Ms5ru1LOa7tizmu7cs5ru4LOa7uizmu7ss5ru8LOa7vSz" \
        "mu74s5ru/LOa8gCzmvIEs5ryDLOa8hCzmvIUs5ryHLOa8iCzmvIos5ryLLOa8jCzmvI" \
        "0s5ryOLOa8kCzmvJEs5rySLOa8lizmvJcs5ryYLOa8mSzmvJos5rybLOa8nCzmvJ0s5" \
        "ryeLOa8nyzmvKEs5ryiLOa8oyzmvKUs5rymLOa8pyzmvKgs5rysLOa8rizmvLAs5ryy" \
        "LOa8tCzmvLUs5ry3LOa8uCzmvLks5ry6LOa8uyzmvLws5ry9LOa8vyzmvYAs5r2BLOa" \
        "9giws5r2DLOa9hCzmvYUs5r2ILOa9iSzmvYos5r2MLOa9jizmvY8s5r2QLOa9kSzmvZ" \
        "Is5r2TLOa9lCzmvZUs5r2WLOa9lyzmvZks5r2aLOa9myzmvZ0s5r2fLOa9oCzmvaEs5" \
        "r2jLOa9pCzmvaUs5r2nLOa9qCzmvaks5r2qLOa9qyzmvaws5r2vLOa9sCzmvbEs5r2z" \
        "LOa9tSzmvbYs5r23LOa9uSzmvbss5r29LOa9vizmvb8s5r6ALOa+gSzmvoIs5r6DLOa" \
        "+hSzmvoYs5r6HLOa+iizmvoss5r6PLOa+kCzmvpEs5r6SLOa+kyzmvpQs5r6VLOa+li" \
        "zmvpcs5r6YLOa+mSzmvpos5r6bLOa+nSzmvp4s5r6fLOa+oCzmvqIs5r6jLOa+pCzmv" \
        "qUs5r6mLOa+qCzmvqks5r6qLOa+qyzmvqws5r6tLOa+rizmvq8s5r6wLOa+sSzmvrIs" \
        "5r60LOa+tSzmvrcs5r64LOa+uizmvrss5r68LOa+vSzmvr4s5r6/LOa/gSzmv4Ms5r+" \
        "ELOa/hSzmv4Ys5r+HLOa/iCzmv4os5r+LLOa/jCzmv40s5r+OLOa/jyzmv5As5r+TLO" \
        "a/lCzmv5Us5r+WLOa/lyzmv5gs5r+ZLOa/mizmv5ss5r+cLOa/nSzmv58s5r+iLOa/o" \
        "yzmv6Qs5r+lLOa/pizmv6cs5r+oLOa/qSzmv6os5r+rLOa/rCzmv60s5r+wLOa/sSzm" \
        "v7Is5r+zLOa/tCzmv7Us5r+2LOa/tyzmv7gs5r+5LOa/uizmv7ss5r+8LOa/vSzmv74" \
        "s5r+/LOeAgCzngIEs54CCLOeAgyzngIQs54CFLOeAhizngIcs54CILOeAiSzngIos54" \
        "CLLOeAjCzngI0s54COLOeAjyzngJAs54CSLOeAkyzngJQs54CVLOeAlizngJcs54CYL" \
        "OeAmSzngJws54CdLOeAnizngJ8s54CgLOeAoSzngKIs54CkLOeApSzngKYs54CnLOeA" \
        "qCzngKks54CqLCzngKss54CsLOeArSzngK4s54CvLOeAsCzngLEs54CyLOeAsyzngLQ" \
        "s54C2LOeAtyzngLgs54C6LOeAuyzngLws54C9LOeAvizngL8s54GALOeBgSzngYIs54" \
        "GDLOeBhCzngYUs54GGLOeBhyzngYgs54GJLOeBiizngYss54GNLOeBjizngZAs54GRL" \
        "OeBkizngZMs54GULOeBlSzngZYs54GXLOeBmCzngZks54GaLOeBmyzngZws54GdLOeB" \
        "nyzngaAs54GhLOeBoizngaMs54GkLOeBpSzngaYs54GnLOeBqCzngaks54GqLOeBriz" \
        "ngbEs54GyLOeBsyzngbQs54G3LOeBuSzngbos54G7LOeBvSzngoEs54KCLOeCgyzngo" \
        "Qs54KGLOeChyzngogs54KLLOeCjCzngo0s54KPLOeCkCzngpEs54KTLOeClyzngpgs5" \
        "4KaLOeCmyzngp4s54KfLOeCoCzngqEs54KiLOeCoyzngqQs54KlLOeCpizngqcs54Ko" \
        "LOeCqSzngqos54KwLOeCsizngrQs54K1LOeCtizngros54K+LOeCvyzng4Qs54OFLOe" \
        "Dhizng4cs54OJLOeDiyzng4ws54ONLOeDjizng48s54OQLOeDkSzng5Is54OTLOeDlC" \
        "zng5Us54OWLOeDlyzng5os54OcLOeDnSzng54s54OgLOeDoSzng6Is54OjLOeDpSzng" \
        "6os54OuLOeDsCzng7Es54OyLOeDsyzng7Qs54O1LOeDtizng7gs54O6LOeDuyzng7ws" \
        "54O+LOeDvyznhIAs54SBLOeEgiznhIMs54SELOeEhSznhIYs54SHLOeEiCznhIss54S" \
        "MLOeEjSznhI4s54SPLOeEkSznhJIs54SULOeElyznhJss54ScLOeEnSznhJ4s54SfLO" \
        "eEoCznhKEs54SiLOeEoyznhKQs54SlLOeEpyznhKgs54SpLOeEqiznhKss54SsLOeEr" \
        "SznhK4s54SyLOeEsyznhLQsLOeEtSznhLcs54S4LOeEuSznhLos54S7LOeEvCznhL0s" \
        "54S+LOeEvyznhYAs54WBLOeFgiznhYMs54WELOeFhiznhYcs54WILOeFiSznhYss54W" \
        "NLOeFjyznhZAs54WRLOeFkiznhZMs54WULOeFlSznhZYs54WXLOeFmCznhZks54WaLO" \
        "eFmyznhZ0s54WfLOeFoCznhaEs54WiLOeFoyznhaUs54WpLOeFqiznhass54WsLOeFr" \
        "Sznha8s54WwLOeFsSznhbQs54W1LOeFtiznhbcs54W5LOeFuyznhbws54W+LOeFvyzn" \
        "hoAs54aBLOeGgiznhoMs54aFLOeGhiznhocs54aILOeGiSznhoss54aMLOeGjSznho4" \
        "s54aQLOeGkSznhpIs54aTLOeGlSznhpYs54aXLOeGmiznhpss54acLOeGnSznhp4s54" \
        "ahLOeGoiznhqMs54akLOeGpSznhqYs54anLOeGqSznhqos54arLOeGrSznhq4s54avL" \
        "OeGsCznhrEs54ayLOeGtCznhrYs54a3LOeGuCznhros54a7LOeGvCznhr0s54a+LOeG" \
        "vyznh4As54eBLOeHgiznh4Qs54eFLOeHhiznh4cs54eILOeHiSznh4os54eLLOeHjCz" \
        "nh40s54ePLOeHkCznh5Es54eSLOeHkyznh5Ys54eXLOeHmCznh5ks54eaLOeHmyznh5" \
        "ws54edLOeHniznh58s54ehLOeHoiznh6Ms54ekLOeHpiznh6gs54epLOeHqiznh6ss5" \
        "4esLOeHrSznh68s54ewLOeHsSznh7Is54ezLOeHtCznh7Us54e2LOeHtyznh7gs54e6" \
        "LOeHuyznh7ws54e9LOeHviznh78s54iALOeIgSzniIIs54iDLOeIhCzniIUs54iHLOe" \
        "IiCzniIks54iKLOeIiyzniIws54iNLOeIjizniI8s54iQLOeIkSzniJIs54iTLOeIlC" \
        "zniJUs54iWLOeIlyzniJgs54iZLOeImiws54ibLOeInCzniJ4s54ifLOeIoCzniKEs5" \
        "4iiLOeIoyzniKQs54ilLOeIpizniKcs54ipLOeIqyzniK0s54iuLOeIryzniLIs54iz" \
        "LOeItCzniLos54i8LOeIvizniYAs54mBLOeJgizniYMs54mELOeJhSzniYYs54mJLOe" \
        "JiizniYss54mOLOeJjyzniZAs54mRLOeJkyzniZQs54mVLOeJlyzniZgs54maLOeJnC" \
        "zniZ4s54mgLOeJoyzniaQs54mlLOeJqCzniaos54mrLOeJrCznia0s54mwLOeJsSzni" \
        "bMs54m0LOeJtiznibcs54m4LOeJuyznibws54m9LOeKgiznioMs54qFLOeKhizniocs" \
        "54qILOeKiSzniows54qOLOeKkCznipEs54qTLOeKlCznipUs54qWLOeKlyznipgs54q" \
        "ZLOeKmiznipss54qcLOeKnSznip4s54qgLOeKoSzniqIs54qjLOeKpCzniqUs54qmLO" \
        "eKpyzniqgs54qpLOeKqizniqss54quLOeKsSznirIs54qzLOeKtSzniros54q7LOeKv" \
        "Cznir0s54q+LOeKvyzni4As54uFLOeLhizni4cs54uJLOeLiizni4ss54uMLOeLjyzn" \
        "i5Es54uTLOeLlCzni5Us54uWLOeLmCzni5os54ubLO6Thizuk4cs7pOILO6TiSzuk4o" \
        "s7pOLLO6TjCzuk40s7pOOLO6Tjyzuk5As7pORLO6Tkizuk5Ms7pOULO6TlSzuk5Ys7p" \
        "OXLO6TmCzuk5ks7pOaLO6Tmyzuk5ws7pOdLO6Tnizuk58s7pOgLO6ToSzuk6Is7pOjL" \
        "O6TpCzuk6Us7pOmLO6Tpyzuk6gs7pOpLO6Tqizuk6ss7pOsLO6TrSzuk64s7pOvLO6T" \
        "sCzuk7Es7pOyLO6Tsyzuk7Qs7pO1LO6Ttizuk7cs7pO4LO6TuSzuk7os7pO7LO6TvCz" \
        "uk70s7pO+LO6TvyzulIAs7pSBLO6UgizulIMs7pSELCzulIUs7pSGLO6UhyzulIgs7p" \
        "SJLO6UiizulIss7pSMLO6UjSzulI4s7pSPLO6UkCzulJEs7pSSLO6UkyzulJQs7pSVL" \
        "O6UlizulJcs7pSYLO6UmSzulJos7pSbLO6UnCzulJ0s7pSeLO6UnyzulKAs7pShLO6U" \
        "oizulKMs7pSkLO6UpSzjgIAs44CBLOOAgizCtyzLiSzLhyzCqCzjgIMs44CFLOKAlCz" \
        "vvZ4s4oCWLOKApizigJgs4oCZLOKAnCzigJ0s44CULOOAlSzjgIgs44CJLOOAiizjgI" \
        "ss44CMLOOAjSzjgI4s44CPLOOAlizjgJcs44CQLOOAkSzCsSzDlyzDtyziiLYs4oinL" \
        "OKIqCziiJEs4oiPLOKIqiziiKks4oiILOKItyziiJos4oqlLOKIpSziiKAs4oySLOKK" \
        "mSziiKss4oiuLOKJoSziiYws4omILOKIvSziiJ0s4omgLOKJriziia8s4omkLOKJpSz" \
        "iiJ4s4oi1LOKItCzimYIs4pmALMKwLOKAsizigLMs4oSDLO+8hCzCpCzvv6As77+hLO" \
        "KAsCzCpyzihJYs4piGLOKYhSzil4ss4pePLOKXjizil4cs4peGLOKWoSzilqAs4pazL" \
        "OKWsizigLss4oaSLOKGkCzihpEs4oaTLOOAkyzulKYs7pSnLO6UqCzulKks7pSqLO6U" \
        "qyzulKws7pStLO6UrizulK8s7pSwLO6UsSzulLIs7pSzLO6UtCzulLUs7pS2LO6Utyz" \
        "ulLgs7pS5LO6UuizulLss7pS8LO6UvSzulL4s7pS/LO6VgCzulYEs7pWCLO6VgyzulY" \
        "Qs7pWFLO6VhizulYcs7pWILO6ViSzulYos7pWLLO6VjCzulY0s7pWOLO6VjyzulZAs7" \
        "pWRLO6VkizulZMs7pWULO6VlSzulZYs7pWXLO6VmCzulZks7pWaLO6VmyzulZws7pWd" \
        "LO6VnizulZ8s7pWgLO6VoSzulaIs7pWjLO6VpCws7pWlLO6Vpizulacs7pWoLO6VqSz" \
        "ulaos7pWrLO6VrCzula0s7pWuLO6VryzulbAs7pWxLO6VsizulbMs7pW0LO6VtSzulb" \
        "Ys7pW3LO6VuCzulbks7pW6LO6Vuyzulbws7pW9LO6Vvizulb8s7paALO6WgSzuloIs7" \
        "paDLO6WhCzuloUs4oWwLOKFsSzihbIs4oWzLOKFtCzihbUs4oW2LOKFtyzihbgs4oW5" \
        "LCwsLCwsLOKSiCzikoks4pKKLOKSiyzikows4pKNLOKSjiziko8s4pKQLOKSkSzikpI" \
        "s4pKTLOKSlCzikpUs4pKWLOKSlyzikpgs4pKZLOKSmizikpss4pG0LOKRtSzikbYs4p" \
        "G3LOKRuCzikbks4pG6LOKRuyzikbws4pG9LOKRvizikb8s4pKALOKSgSzikoIs4pKDL" \
        "OKShCzikoUs4pKGLOKShyzikaAs4pGhLOKRoizikaMs4pGkLOKRpSzikaYs4pGnLOKR" \
        "qCzikaks4oKsLCzjiKAs44ihLOOIoizjiKMs44ikLOOIpSzjiKYs44inLOOIqCzjiKk" \
        "sLCzihaAs4oWhLOKFoizihaMs4oWkLOKFpSzihaYs4oWnLOKFqCzihaks4oWqLOKFqy" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzv" \
        "vIEs77yCLO+8gyzvv6Us77yFLO+8hizvvIcs77yILO+8iSzvvIos77yLLO+8jCzvvI0" \
        "s77yOLO+8jyzvvJAs77yRLO+8kizvvJMs77yULO+8lSzvvJYs77yXLO+8mCzvvJks77" \
        "yaLO+8myzvvJws77ydLO+8nizvvJ8s77ygLO+8oSzvvKIs77yjLO+8pCzvvKUs77ymL" \
        "O+8pyzvvKgs77ypLO+8qizvvKss77ysLO+8rSzvvK4s77yvLO+8sCzvvLEs77yyLO+8" \
        "syzvvLQs77y1LO+8tizvvLcs77y4LO+8uSzvvLos77y7LO+8vCzvvL0s77y+LO+8vyz" \
        "vvYAs772BLO+9gizvvYMs772ELO+9hSzvvYYs772HLO+9iCzvvYks772KLO+9iyzvvY" \
        "ws772NLO+9jizvvY8s772QLO+9kSzvvZIs772TLO+9lCzvvZUs772WLO+9lyzvvZgs7" \
        "72ZLO+9mizvvZss772cLO+9nSzvv6MsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLOOBgSzjgYIs44GDLOOBhCzjgYUs44GGLOOBhyzjgY" \
        "gs44GJLOOBiizjgYss44GMLOOBjSzjgY4s44GPLOOBkCzjgZEs44GSLOOBkyzjgZQs4" \
        "4GVLOOBlizjgZcs44GYLOOBmSzjgZos44GbLOOBnCzjgZ0s44GeLOOBnyzjgaAs44Gh" \
        "LOOBoizjgaMs44GkLOOBpSzjgaYs44GnLOOBqCzjgaks44GqLOOBqyzjgaws44GtLOO" \
        "Brizjga8s44GwLOOBsSzjgbIs44GzLOOBtCzjgbUs44G2LOOBtyzjgbgs44G5LOOBui" \
        "zjgbss44G8LOOBvSzjgb4s44G/LOOCgCzjgoEs44KCLOOCgyzjgoQs44KFLOOChizjg" \
        "ocs44KILOOCiSzjgoos44KLLOOCjCzjgo0s44KOLOOCjyzjgpAs44KRLOOCkizjgpMs" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCws44KhLOOCoizjgqMs44KkLOOCpSzjgqYs44KnLOOCqCzjgqks44KqLOOCq" \
        "yzjgqws44KtLOOCrizjgq8s44KwLOOCsSzjgrIs44KzLOOCtCzjgrUs44K2LOOCtyzj" \
        "grgs44K5LOOCuizjgrss44K8LOOCvSzjgr4s44K/LOODgCzjg4Es44OCLOODgyzjg4Q" \
        "s44OFLOODhizjg4cs44OILOODiSzjg4os44OLLOODjCzjg40s44OOLOODjyzjg5As44" \
        "ORLOODkizjg5Ms44OULOODlSzjg5Ys44OXLOODmCzjg5ks44OaLOODmyzjg5ws44OdL" \
        "OODnizjg58s44OgLOODoSzjg6Is44OjLOODpCzjg6Us44OmLOODpyzjg6gs44OpLOOD" \
        "qizjg6ss44OsLOODrSzjg64s44OvLOODsCzjg7Es44OyLOODsyzjg7Qs44O1LOODtiw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCzOkSzOkizOkyzOlCzOlSzOlizOlyzOmCzOmSzOmizOmyzOnCzOnSzOnizOnyzO" \
        "oCzOoSzOoyzOpCzOpSzOpizOpyzOqCzOqSwsLCwsLCwsLM6xLM6yLM6zLM60LM61LM6" \
        "2LM63LM64LM65LM66LM67LM68LM69LM6+LM6/LM+ALM+BLM+DLM+ELM+FLM+GLM+HLM" \
        "+ILM+JLCwsLCwsLCzvuLUs77i2LO+4uSzvuLos77i/LO+5gCzvuL0s77i+LO+5gSzvu" \
        "YIs77mDLO+5hCwsLO+4uyzvuLws77i3LO+4uCzvuLEsLO+4syzvuLQsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLNCQLN" \
        "CRLNCSLNCTLNCULNCVLNCBLNCWLNCXLNCYLNCZLNCaLNCbLNCcLNCdLNCeLNCfLNCgL" \
        "NChLNCiLNCjLNCkLNClLNCmLNCnLNCoLNCpLNCqLNCrLNCsLNCtLNCuLNCvLCwsLCws" \
        "LCwsLCwsLCwsLNCwLNCxLNCyLNCzLNC0LNC1LNGRLNC2LNC3LNC4LNC5LNC6LNC7LNC" \
        "8LNC9LNC+LNC/LNGALNGBLNGCLNGDLNGELNGFLNGGLNGHLNGILNGJLNGKLNGLLNGMLN" \
        "GNLNGOLNGPLCwsLCwsLCwsLCwsLCzLiizLiyzLmSzigJMs4oCVLOKApSzigLUs4oSFL" \
        "OKEiSzihpYs4oaXLOKGmCzihpks4oiVLOKInyziiKMs4omSLOKJpiziiacs4oq/LOKV" \
        "kCzilZEs4pWSLOKVkyzilZQs4pWVLOKVlizilZcs4pWYLOKVmSzilZos4pWbLOKVnCz" \
        "ilZ0s4pWeLOKVnyzilaAs4pWhLOKVoizilaMs4pWkLOKVpSzilaYs4pWnLOKVqCzila" \
        "ks4pWqLOKVqyzilaws4pWtLOKVrizila8s4pWwLOKVsSzilbIs4pWzLOKWgSziloIs4" \
        "paDLOKWhCziloUs4paGLOKWhyws4paILOKWiSziloos4paLLOKWjCzilo0s4paOLOKW" \
        "jyzilpMs4paULOKWlSzilrws4pa9LOKXoizil6Ms4pekLOKXpSzimIks4oqVLOOAkiz" \
        "jgJ0s44CeLCwsLCwsLCwsLCwsxIEsw6Esx44sw6AsxJMsw6ksxJssw6gsxKssw60sx5" \
        "Asw6wsxY0sw7Msx5Isw7Isxassw7osx5Qsw7ksx5Ysx5gsx5osx5wsw7wsw6osyZEs7" \
        "p+HLMWELMWILMe5LMmhLCwsLCzjhIUs44SGLOOEhyzjhIgs44SJLOOEiizjhIss44SM" \
        "LOOEjSzjhI4s44SPLOOEkCzjhJEs44SSLOOEkyzjhJQs44SVLOOElizjhJcs44SYLOO" \
        "EmSzjhJos44SbLOOEnCzjhJ0s44SeLOOEnyzjhKAs44ShLOOEoizjhKMs44SkLOOEpS" \
        "zjhKYs44SnLOOEqCzjhKksLCwsLCwsLCwsLCwsLCwsLCwsLCws44ChLOOAoizjgKMs4" \
        "4CkLOOApSzjgKYs44CnLOOAqCzjgKks44qjLOOOjizjjo8s446cLOOOnSzjjp4s446h" \
        "LOOPhCzjj44s44+RLOOPkizjj5Us77iwLO+/oizvv6QsLOKEoSzjiLEsLOKAkCwsLCz" \
        "jg7ws44KbLOOCnCzjg70s44O+LOOAhizjgp0s44KeLO+5iSzvuYos77mLLO+5jCzvuY" \
        "0s77mOLO+5jyzvuZAs77mRLO+5kizvuZQs77mVLO+5lizvuZcs77mZLO+5mizvuZss7" \
        "7mcLO+5nSzvuZ4s77mfLO+5oCzvuaEsLO+5oizvuaMs77mkLO+5pSzvuaYs77moLO+5" \
        "qSzvuaos77mrLCwsLCwsLCwsLCwsLCzjgIcsLCwsLCwsLCwsLCwsLOKUgCzilIEs4pS" \
        "CLOKUgyzilIQs4pSFLOKUhizilIcs4pSILOKUiSzilIos4pSLLOKUjCzilI0s4pSOLO" \
        "KUjyzilJAs4pSRLOKUkizilJMs4pSULOKUlSzilJYs4pSXLOKUmCzilJks4pSaLOKUm" \
        "yzilJws4pSdLOKUnizilJ8s4pSgLOKUoSzilKIs4pSjLOKUpCzilKUs4pSmLOKUpyzi" \
        "lKgs4pSpLOKUqizilKss4pSsLOKUrSzilK4s4pSvLOKUsCzilLEs4pSyLOKUsyzilLQ" \
        "s4pS1LOKUtizilLcs4pS4LOKUuSzilLos4pS7LOKUvCzilL0s4pS+LOKUvyzilYAs4p" \
        "WBLOKVgizilYMs4pWELOKVhSzilYYs4pWHLOKViCzilYks4pWKLOKViywsLCwsLCwsL" \
        "CwsLCwsLCzni5ws54udLOeLnyzni6Is54ujLOeLpCzni6Us54umLOeLpyzni6os54ur" \
        "LOeLtSzni7Ys54u5LOeLvSzni74s54u/LOeMgCznjIIs54yELOeMhSznjIYs54yHLOe" \
        "MiCznjIks54yLLOeMjCznjI0s54yPLOeMkCznjJEs54ySLOeMlCznjJgs54yZLOeMmi" \
        "znjJ8s54ygLOeMoyznjKQs54ymLOeMpyznjKgs54ytLOeMryznjLAs54yyLOeMsyznj" \
        "LUs54y2LOeMuiznjLss54y8LOeMvSznjYAs542BLOeNgiznjYMs542ELOeNhSznjYYs" \
        "542HLOeNiCws542JLOeNiiznjYss542MLOeNjiznjY8s542RLOeNkyznjZQs542VLOe" \
        "NliznjZgs542ZLOeNmiznjZss542cLOeNnSznjZ4s542fLOeNoSznjaIs542jLOeNpC" \
        "znjaUs542mLOeNpyznjags542pLOeNqiznjass542uLOeNsCznjbEsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOeNsiznjbMs5420LOeNtSz" \
        "njbYs5423LOeNuCznjbks5426LOeNuyznjbws5429LOeNvyznjoAs546BLOeOgiznjo" \
        "Ms546FLOeOhiznjogs546KLOeOjCznjo0s546PLOeOkCznjpIs546TLOeOlCznjpUs5" \
        "46XLOeOmCznjpks546aLOeOnCznjp0s546eLOeOoCznjqEs546jLOeOpCznjqUs546m" \
        "LOeOpyznjqgs546qLOeOrCznjq0s546xLOeOtCznjrUs5462LOeOuCznjrks5468LOe" \
        "OvSznjr4s546/LOePgSznj4Ms54+ELOePhSznj4Ys54+HLCznj4ss54+MLOePjiznj5" \
        "Is54+TLOePlCznj5Us54+WLOePlyznj5gs54+aLOePmyznj5ws54+dLOePnyznj6Es5" \
        "4+iLOePoyznj6Qs54+mLOePqCznj6os54+rLOePrCznj64s54+vLOePsCznj7Es54+z" \
        "LOePtCznj7Us54+2LOePtywsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCws54+4LOePuSznj7os54+7LOePvCznj70s54++LOePvyznkIAs55CBL" \
        "OeQgiznkIQs55CHLOeQiCznkIss55CMLOeQjSznkI4s55CRLOeQkiznkJMs55CULOeQ" \
        "lSznkJYs55CXLOeQmCznkJks55CcLOeQnSznkJ4s55CfLOeQoCznkKEs55CjLOeQpCz" \
        "nkKcs55CpLOeQqyznkK0s55CvLOeQsSznkLIs55C3LOeQuCznkLks55C6LOeQuyznkL" \
        "0s55C+LOeQvyznkYAs55GCLOeRgyznkYQs55GFLOeRhiznkYcs55GILOeRiSznkYos5" \
        "5GLLOeRjCznkY0sLOeRjiznkY8s55GQLOeRkSznkZIs55GTLOeRlCznkZYs55GYLOeR" \
        "nSznkaAs55GhLOeRoiznkaMs55GkLOeRpSznkaYs55GnLOeRqCznkaks55GqLOeRqyz" \
        "nkaws55GuLOeRryznkbEs55GyLOeRsyznkbQs55G1LOeRuCznkbks55G6LCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCznkbss55G8LOeRvSzn" \
        "kb8s55KCLOeShCznkoUs55KGLOeSiCznkoks55KKLOeSjCznko0s55KPLOeSkSznkpI" \
        "s55KTLOeSlCznkpUs55KWLOeSlyznkpgs55KZLOeSmiznkpss55KdLOeSnyznkqAs55" \
        "KhLOeSoiznkqMs55KkLOeSpSznkqYs55KqLOeSqyznkqws55KtLOeSriznkq8s55KwL" \
        "OeSsSznkrIs55KzLOeStCznkrUs55K2LOeStyznkrgs55K5LOeSuyznkrws55K9LOeS" \
        "viznkr8s55OALOeTgSznk4Is55ODLOeThCznk4Us55OGLOeThyws55OILOeTiSznk4o" \
        "s55OLLOeTjCznk40s55OOLOeTjyznk5As55ORLOeTkyznk5Qs55OVLOeTliznk5cs55" \
        "OYLOeTmSznk5os55ObLOeTnSznk58s55OhLOeTpSznk6cs55OoLOeTqSznk6os55OrL" \
        "OeTrCznk60s55OwLOeTsSznk7IsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLOeTsyznk7Us55O4LOeTuSznk7os55O7LOeTvCznk70s55O+LO" \
        "eUgCznlIEs55SCLOeUgyznlIUs55SGLOeUhyznlIgs55SJLOeUiiznlIss55SMLOeUj" \
        "iznlJAs55SSLOeUlCznlJUs55SWLOeUlyznlJss55SdLOeUniznlKAs55ShLOeUoizn" \
        "lKMs55SkLOeUpiznlKcs55SqLOeUriznlLQs55S2LOeUuSznlLws55S9LOeUvyznlYE" \
        "s55WCLOeVgyznlYQs55WGLOeVhyznlYks55WKLOeVjSznlZAs55WRLOeVkiznlZMs55" \
        "WVLOeVliznlZcs55WYLCznlZ0s55WeLOeVnyznlaAs55WhLOeVoiznlaMs55WkLOeVp" \
        "yznlags55WpLOeVqyznlaws55WtLOeVriznla8s55WwLOeVsSznlbMs55W1LOeVtizn" \
        "lbcs55W6LOeVuyznlbws55W9LOeVviznloAs55aBLOeWgiznloQs55aFLOeWhywsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws55aILOeWiSznl" \
        "oos55aMLOeWjSznlo4s55aQLOeWkyznlpUs55aYLOeWmyznlpws55aeLOeWoiznlqYs" \
        "55anLOeWqCznlqks55aqLOeWrSznlrYs55a3LOeWuiznlrss55a/LOeXgCznl4Es55e" \
        "GLOeXiyznl4ws55eOLOeXjyznl5As55eRLOeXkyznl5cs55eZLOeXmiznl5ws55edLO" \
        "eXnyznl6As55ehLOeXpSznl6ks55esLOeXrSznl64s55evLOeXsiznl7Ms55e1LOeXt" \
        "iznl7cs55e4LOeXuiznl7ss55e9LOeXviznmIIs55iELOeYhiznmIcsLOeYiCznmIks" \
        "55iLLOeYjSznmI4s55iPLOeYkSznmJIs55iTLOeYlCznmJYs55iaLOeYnCznmJ0s55i" \
        "eLOeYoSznmKMs55inLOeYqCznmKws55iuLOeYryznmLEs55iyLOeYtiznmLcs55i5LO" \
        "eYuiznmLss55i9LOeZgSznmYIs55mELCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCznmYUs55mGLOeZhyznmYgs55mJLOeZiiznmYss55mOLOe" \
        "ZjyznmZAs55mRLOeZkiznmZMs55mVLOeZlyznmZgs55mZLOeZmiznmZss55mdLOeZny" \
        "znmaAs55mhLOeZoiznmaQs55mlLOeZpiznmacs55moLOeZqSznmaos55msLOeZrSznm" \
        "a4s55mwLOeZsSznmbIs55mzLOeZtCznmbUs55m2LOeZtyznmbks55m6LOeZvCznmb8s" \
        "55qALOeagSznmoMs55qFLOeaiSznmoos55qMLOeajSznmo8s55qQLOeakiznmpQs55q" \
        "VLOealyznmpgs55qaLOeamyws55qcLOeanSznmp4s55qfLOeaoCznmqEs55qiLOeaoy" \
        "znmqUs55qmLOeapyznmqgs55qpLOeaqiznmqss55qsLOearSznmq8s55qwLOeasyznm" \
        "rUs55q2LOeatyznmrgs55q5LOeauiznmrss55q8LOeavSznmr4s55uALOebgSznm4Ms" \
        "5ZWKLOmYvyzln4Ms5oyoLOWTjizllIks5ZOALOeakSznmYws6JS8LOefrizoib4s56K" \
        "NLOeIsSzpmpgs6Z6NLOawqCzlroks5L+6LOaMiSzmmpcs5bK4LOiDuizmoYgs6IKuLO" \
        "aYgiznm44s5Ye5LOaVliznhqws57+xLOiihCzlgrIs5aWlLOaHiizmvrMs6IqtLOaNj" \
        "CzmiZIs5Y+tLOWQpyznrIYs5YWrLOeWpCzlt7Qs5ouULOi3iyzpnbYs5oqKLOiAmSzl" \
        "nZ0s6Zy4LOe9oizniLgs55m9LOafjyznmb4s5pGGLOS9sCzotKUs5oucLOeolyzmlpE" \
        "s54+tLOaQrCzmibMs6IisLOmigSzmnb8s54mILOaJrizmi4ws5Ly0LOeToyzljYos5Y" \
        "qeLOe7iizpgqYs5biuLOaihizmppws6IaALOe7kSzmo5Is56OFLOiajCzplZEs5YKNL" \
        "OiwpCzoi54s6IOeLOWMhSzopJIs5YmlLOebhCznm4cs55uJLOebiyznm4ws55uTLOeb" \
        "lSznm5ks55uaLOebnCznm50s55ueLOeboCznm6Es55uiLOeboyznm6Qs55umLOebpyz" \
        "nm6gs55upLOebqiznm6ss55usLOebrSznm7As55uzLOebtSznm7Ys55u3LOebuiznm7" \
        "ss55u9LOebvyznnIAs55yCLOecgyznnIUs55yGLOeciiznnIws55yOLOecjyznnJAs5" \
        "5yRLOeckiznnJMs55yULOeclSznnJYs55yXLOecmCznnJss55ycLOecnSznnJ4s55yh" \
        "LOecoyznnKQs55ylLOecpyznnKos55yrLCznnKws55yuLOecsCznnLEs55yyLOecsyz" \
        "nnLQs55y5LOecuyznnL0s55y+LOecvyznnYIs552ELOedhSznnYYs552ILOediSznnY" \
        "os552LLOedjCznnY0s552OLOedjyznnZIs552TLOedlCznnZUs552WLOedlyznnZgs5" \
        "52ZLOednCzoloQs6Zu5LOS/nSzloKEs6aWxLOWunSzmirEs5oqlLOaatCzosbks6bKN" \
        "LOeIhizmna8s56KRLOaCsizljZEs5YyXLOi+iCzog4ws6LSdLOmSoSzlgI0s54uILOW" \
        "khyzmg6ss54SZLOiiqyzlpZQs6IuvLOacrCznrKgs5bSpLOe7tyznlK0s5rO1LOi5pi" \
        "zov7gs6YC8LOm8uyzmr5Qs6YSZLOeslCzlvbws56KnLOiTlizolL0s5q+VLOavmSzmr" \
        "5Ys5biBLOW6hyznl7ks6ZetLOaVnSzlvIos5b+FLOi+nyzlo4Es6IeCLOmBvyzpmZss" \
        "6Z6tLOi+uSznvJYs6LSsLOaJgSzkvr8s5Y+YLOWNnizovqgs6L6pLOi+qyzpgY0s5qC" \
        "HLOW9qizohpgs6KGoLOmzlizmhoss5YirLOeYqizlvaws5paMLOa/kizmu6gs5a6+LO" \
        "aRiCzlhbUs5YawLOafhCzkuJks56eJLOmlvCzngrMs552dLOedniznnZ8s552gLOedp" \
        "Cznnacs552pLOedqiznna0s552uLOedryznnbAs552xLOedsiznnbMs5520LOedtSzn" \
        "nbYs5523LOeduCznnbos5527LOedvCznnoEs556CLOeegyznnoYs556HLOeeiCznnok" \
        "s556KLOeeiyznno8s556QLOeekyznnpQs556VLOeeliznnpcs556YLOeemSznnpos55" \
        "6bLOeenCznnp0s556eLOeeoSznnqMs556kLOeepiznnqgs556rLOeerSznnq4s556vL" \
        "OeesSznnrIs5560LOeetiznnrcs5564LOeeuSznnrosLOeevCznnr4s55+ALOefgSzn" \
        "n4Is55+DLOefhCznn4Us55+GLOefhyznn4gs55+JLOefiiznn4ss55+MLOefjiznn48" \
        "s55+QLOefkSznn5Is55+TLOeflCznn5Us55+WLOefmCznn5ks55+aLOefnSznn54s55" \
        "+fLOefoCznn6Es55+kLOeXhSzlubYs5467LOiPoCzmkq0s5ouoLOmStSzms6Is5Y2aL" \
        "OWLgyzmkI8s6ZOCLOeulCzkvK8s5bibLOiItizohJYs6IaKLOa4pCzms4os6amzLOaN" \
        "lSzljZws5ZO6LOihpSzln6As5LiNLOW4gyzmraUs57C/LOmDqCzmgJYs5pOmLOeMnCz" \
        "oo4Es5p2QLOaJjSzotKIs552sLOi4qSzph4cs5b2pLOiPnCzolKEs6aSQLOWPgizomp" \
        "Us5q6LLOaDrSzmg6gs54G/LOiLjSzoiLEs5LuTLOaypyzol48s5pONLOezmSzmp70s5" \
        "pu5LOiNiSzljpUs562WLOS+pyzlhows5rWLLOWxgizoua0s5o+SLOWPiSzojKws6Iy2" \
        "LOafpSznorQs5pC9LOWvnyzlspQs5beuLOivpyzmi4Ys5p+0LOixuizmkIAs5o66LOi" \
        "diSzpposs6LCXLOe8oCzpk7Is5LqnLOmYkCzpoqQs5piMLOeMliznn6Ys55+oLOefqi" \
        "znn68s55+wLOefsSznn7Is55+0LOeftSznn7cs55+5LOefuiznn7ss55+8LOeggyzno" \
        "IQs56CFLOeghiznoIcs56CILOegiiznoIss56COLOegjyznoJAs56CTLOeglSznoJks" \
        "56CbLOegniznoKAs56ChLOegoiznoKQs56CoLOegqiznoKss56CuLOegryznoLEs56C" \
        "yLOegsyznoLUs56C2LOegvSznoL8s56GBLOehgiznoYMs56GELOehhiznoYgs56GJLO" \
        "ehiiznoYss56GNLOehjyznoZEs56GTLOehlCznoZgs56GZLOehmiws56GbLOehnCzno" \
        "Z4s56GfLOehoCznoaEs56GiLOehoyznoaQs56GlLOehpiznoacs56GoLOehqSznoa8s" \
        "56GwLOehsSznobIs56GzLOehtCznobUs56G2LOehuCznobks56G6LOehuyznob0s56G" \
        "+LOehvyznooAs56KBLOeigiznooMs5Zy6LOWwnSzluLgs6ZW/LOWBvyzogqAs5Y6CLO" \
        "aVniznlYUs5ZSxLOWAoSzotoUs5oqELOmSnizmnJ0s5ZiyLOa9rizlt6Is5ZC1LOeCk" \
        "izovaYs5omvLOaSpCzmjqMs5b27LOa+iCzpg7Qs6IejLOi+sCzlsJgs5pmoLOW/sSzm" \
        "soks6ZmILOi2gSzooaws5pKRLOensCzln44s5qmZLOaIkCzlkYgs5LmYLOeoiyzmg6k" \
        "s5r6ELOivmizmib8s6YCeLOmqiyznp6Qs5ZCDLOeXtCzmjIEs5YyZLOaxoCzov58s5b" \
        "ybLOmpsCzogLss6b2/LOS+iCzlsLos6LWkLOe/hSzmlqUs54K9LOWFhSzlhrIs6JmrL" \
        "OW0hyzlrqAs5oq9LOmFrCznlbQs6LiMLOeooCzmhIEs5625LOS7hyznu7gs556FLOS4" \
        "kSzoh60s5YidLOWHuizmqbEs5Y6oLOi6hyzplIQs6ZuPLOa7gSzpmaQs5qWaLOeihCz" \
        "nooUs56KGLOeiiCznooos56KLLOeijyznopAs56KSLOeilCznopUs56KWLOeimSznop" \
        "0s56KeLOeioCznoqIs56KkLOeipiznoqgs56KpLOeiqiznoqss56KsLOeirSznoq4s5" \
        "6KvLOeitSznorYs56K3LOeiuCznoros56K7LOeivCznor0s56K/LOejgCzno4Is56OD" \
        "LOejhCzno4Ys56OHLOejiCzno4ws56ONLOejjizno48s56ORLOejkizno5Ms56OWLOe" \
        "jlyzno5gs56OaLOejmyzno5ws56OdLOejnizno58s56OgLOejoSzno6Is56OjLCzno6" \
        "Qs56OlLOejpizno6cs56OpLOejqizno6ss56OtLOejrizno68s56OwLOejsSzno7Ms5" \
        "6O1LOejtizno7gs56O5LOejuyzno7ws56O9LOejvizno78s56SALOekgiznpIMs56SE" \
        "LOekhiznpIcs56SILOekiSznpIos56SLLOekjCznoYAs5YKoLOeflyzmkJAs6KemLOW" \
        "khCzmj6Ms5bedLOepvyzmpL0s5LygLOiIuSzllpgs5LiyLOeWriznqpcs5bmiLOW6ii" \
        "zpl68s5YibLOWQuSzngoos5o22LOmUpCzlnoIs5pilLOakvyzphocs5ZSHLOa3syznu" \
        "q8s6KCiLOaIsyznu7As55a1LOiMqCzno4Es6ZuMLOi+nizmhYgs55O3LOivjSzmraQs" \
        "5Yi6LOi1kCzmrKEs6IGqLOiRsSzlm7Es5YyGLOS7jizkuJss5YeRLOeylyzphoss57C" \
        "HLOS/gyzoub8s56+hLOeqnCzmkacs5bSULOWCrCzohIYs55iBLOeyuSzmt6ws57+gLO" \
        "adkSzlrZgs5a+4LOejiyzmkq4s5pCTLOaOqizmjKss6ZSZLOaQrSzovr4s562ULOeYq" \
        "SzmiZMs5aSnLOWRhizmrbks5YKjLOaItCzluKYs5q6GLOS7oyzotLcs6KKLLOW+hSzp" \
        "gK4s56SNLOekjiznpI8s56SQLOekkSznpJIs56SULOeklSznpJYs56SXLOekmCznpJk" \
        "s56SaLOekmyznpJws56SdLOeknyznpKAs56ShLOekoiznpKMs56SlLOekpiznpKcs56" \
        "SoLOekqSznpKos56SrLOekrCznpK0s56SuLOekryznpLAs56SxLOeksiznpLMs56S1L" \
        "OektiznpLcs56S4LOekuSznpL0s56S/LOelgiznpYMs56WELOelhSznpYcs56WKLOel" \
        "iyznpYws56WNLOeljiznpY8s56WQLOelkSznpZIs56WULOellSznpZgs56WZLOeloSz" \
        "npaMsLOelpCznpaYs56WpLOelqiznpass56WsLOelriznpbAs56WxLOelsiznpbMs56" \
        "W0LOeltSznpbYs56W5LOeluyznpbws56W9LOelviznpb8s56aCLOemgyznpoYs56aHL" \
        "OemiCznpoks56aLLOemjCznpo0s56aOLOemkCznppEs56aSLOaAoCzogL0s5ouFLOS4" \
        "uSzljZUs6YO4LOaOuCzog4Ys5pemLOawrizkvYYs5oOuLOa3oSzor54s5by5LOibiyz" \
        "lvZMs5oyhLOWFmizojaEs5qGjLOWIgCzmjaMs6LmILOWAkizlspss56W3LOWvvCzliL" \
        "As56i7LOaCvCzpgZMs55uXLOW+tyzlvpcs55qELOi5rCznga8s55m7LOetiSznnqos5" \
        "YezLOmCkyzloKQs5L2OLOa7tCzov6os5pWMLOesmyzni4Qs5rakLOe/nyzlq6Es5oq1" \
        "LOW6lSzlnLAs6JKCLOesrCzluJ0s5byfLOmAkiznvJQs6aKgLOaOgizmu4cs56KYLOe" \
        "CuSzlhbgs6Z2bLOWeqyznlLUs5L2DLOeUuCzlupcs5oOmLOWloCzmt4As5q6/LOeiiS" \
        "zlj7ws6ZuVLOWHiyzliIEs5o6JLOWQiizpkpMs6LCDLOi3jCzniLks56KfLOidtizov" \
        "60s6LCNLOWPoCznppMs56aULOemlSznppYs56aXLOemmCznppks56abLOemnCznpp0s" \
        "56aeLOemnyznpqAs56ahLOemoiznpqMs56akLOempSznpqYs56aoLOemqSznpqos56a" \
        "rLOemrCznpq0s56auLOemryznprAs56axLOemsiznprQs56a1LOemtiznprcs56a4LO" \
        "emvCznpr8s56eCLOenhCznp4Us56eHLOeniCznp4os56eMLOenjiznp48s56eQLOenk" \
        "yznp5Qs56eWLOenlyznp5ks56eaLOenmyznp5ws56edLOenniznp6As56ehLOenoizn" \
        "p6Us56eoLOenqiws56esLOenriznp7Es56eyLOensyznp7Qs56e1LOentiznp7cs56e" \
        "5LOenuiznp7ws56e+LOenvyznqIEs56iELOeohSznqIcs56iILOeoiSznqIos56iMLO" \
        "eojyznqJAs56iRLOeokiznqJMs56iVLOeoliznqJgs56iZLOeomyznqJws5LiBLOebr" \
        "yzlj64s6ZKJLOmhtizpvI4s6ZStLOWumizorqIs5LiiLOS4nCzlhqws6JGjLOaHgizl" \
        "iqgs5qCLLOS+lyzmgass5Ya7LOa0nizlhZws5oqWLOaWlyzpmaEs6LGGLOmAlyznl5g" \
        "s6YO9LOedoyzmr5Is54qKLOeLrCzor7ss5aC1LOeduSzotYws5p2cLOmVgCzogpos5b" \
        "qmLOa4oSzlppIs56uvLOefrSzplLss5q61LOaWrSznvI4s5aCGLOWFkSzpmJ8s5a+5L" \
        "OWiqSzlkKgs6LmyLOaVpizpob8s5ZukLOmSnSznm74s6YGBLOaOhyzlk4Ys5aSaLOWk" \
        "uizlnpss6LqyLOactSzot7os6Ii1LOWJgSzmg7As5aCVLOibvizls6gs6bmFLOS/hCz" \
        "pop0s6K65LOWopSzmgbYs5Y6ELOaJvCzpgY8s6YSCLOmlvyzmgaks6ICMLOWEvyzogL" \
        "Ms5bCULOmltSzmtLEs5LqMLOeonSznqJ8s56ihLOeooiznqKQs56ilLOeopiznqKcs5" \
        "6ioLOeoqSznqKos56irLOeorCznqK0s56iuLOeoryznqLAs56ixLOeosiznqLQs56i1" \
        "LOeotiznqLgs56i6LOeoviznqYAs56mBLOepgiznqYMs56mELOephSznqYcs56mILOe" \
        "piSznqYos56mLLOepjCznqY0s56mOLOepjyznqZAs56mSLOepkyznqZQs56mVLOepli" \
        "znqZgs56mZLOepmiznqZss56mcLOepnSznqZ4s56mfLOepoCznqaEs56miLOepoyznq" \
        "aQs56mlLOeppiznqacs56moLCznqaks56mqLOepqyznqaws56mtLOepriznqa8s56mx" \
        "LOepsiznqbMs56m1LOepuyznqbws56m9LOepviznqoIs56qFLOeqhyznqoks56qKLOe" \
        "qiyznqows56qOLOeqjyznqpAs56qTLOeqlCznqpks56qaLOeqmyznqp4s56qhLOeqoi" \
        "zotLAs5Y+RLOe9miznrY8s5LyQLOS5jyzpmIAs5rOVLOePkCzol6ks5biGLOeVqiznv" \
        "7ss5qiKLOefvizpkpIs57mBLOWHoSzng6Ys5Y+NLOi/lCzojIMs6LSpLOeKryzppa0s" \
        "5rObLOWdiizoirMs5pa5LOiCqizmiL8s6ZiyLOWmqCzku78s6K6/LOe6uizmlL4s6I+" \
        "yLOmdnizllaEs6aOeLOiCpSzljKos6K+9LOWQoCzogros5bqfLOayuCzotLks6IqsLO" \
        "mFmizlkKks5rCbLOWIhiznurcs5Z2fLOeEmizmsb4s57KJLOWliyzku70s5b+/LOaEp" \
        "Cznsqos5LiwLOWwgSzmnqss6JyCLOWzsCzplIss6aOOLOeWryzng70s6YCiLOWGryzn" \
        "vJ0s6K69LOWliSzlh6Qs5L2bLOWQpizlpKss5pW3LOiCpCzlrbUs5om2LOaLgizovpA" \
        "s5bmFLOawnyznrKYs5LyPLOS/mCzmnI0s56qjLOeqpCznqqcs56qpLOeqqiznqqss56" \
        "quLOeqryznqrAs56qxLOeqsiznqrQs56q1LOeqtiznqrcs56q4LOequSznqros56q7L" \
        "OeqvCznqr0s56q+LOergCznq4Es56uCLOergyznq4Qs56uFLOerhiznq4cs56uILOer" \
        "iSznq4os56uMLOerjSznq44s56uPLOerkCznq5Es56uSLOerkyznq5Qs56uVLOerlyz" \
        "nq5gs56uaLOermyznq5ws56udLOeroSznq6Is56ukLOerpyznq6gs56upLOerqiznq6" \
        "ss56usLOerriznq7As56uxLOersiznq7MsLOertCznq7Us56u2LOertyznq7gs56u7L" \
        "OervCznq74s56yALOesgSznrIIs56yFLOeshyznrIks56yMLOesjSznrI4s56yQLOes" \
        "kiznrJMs56yWLOeslyznrJgs56yaLOesnCznrJ0s56yfLOesoSznrKIs56yjLOespyz" \
        "nrKks56ytLOa1rizmtqos56aPLOiisSzlvJcs55SrLOaKmizovoUs5L+vLOmHnCzmlq" \
        "cs6ISvLOiFkSzlupws6IWQLOi1tCzlia8s6KaGLOi1iyzlpI0s5YKFLOS7mCzpmJws5" \
        "4i2LOiFuSzotJ8s5a+MLOiuoyzpmYQs5aaHLOe8mizlkpAs5Zm2LOWYjizor6Us5pS5" \
        "LOamgizpkpks55uWLOa6iSzlubIs55SYLOadhizmn5Es56u/LOiCnSzotbYs5oSfLOe" \
        "nhizmlaIs6LWjLOWGiCzliJos6ZKiLOe8uCzogpss57qyLOWylyzmuK8s5p2gLOevmS" \
        "znmoss6auYLOiGjyznvpQs57OVLOaQnizplZAs56i/LOWRiizlk6Us5q2MLOaQgSzmi" \
        "Igs6bi9LOiDsyznlpks5YmyLOmdqSzokZss5qC8LOibpCzpmIEs6ZqULOmTrCzkuKos" \
        "5ZCELOe7mSzmoLks6LefLOiAlSzmm7Qs5bqaLOe+uSznrK8s56ywLOessiznrLQs56y" \
        "1LOestiznrLcs56y5LOesuyznrL0s56y/LOetgCznrYEs562CLOetgyznrYQs562GLO" \
        "etiCznrYos562NLOetjiznrZMs562VLOetlyznrZks562cLOetniznrZ8s562hLOeto" \
        "yznraQs562lLOetpiznracs562oLOetqSznraos562rLOetrCznra0s562vLOetsCzn" \
        "rbMs5620LOettiznrbgs5626LOetvCznrb0s562/LOeugSznroIs566DLOeuhCznroY" \
        "s566HLOeuiCznroks566KLOeuiyznrows566OLOeujyws566RLOeukiznrpMs566WLO" \
        "eumCznrpks566aLOeumyznrp4s566fLOeuoCznrqMs566kLOeupSznrq4s566vLOeus" \
        "CznrrIs566zLOeutSznrrYs5663LOeuuSznrros5667LOeuvCznrr0s566+LOeuvyzn" \
        "r4As56+CLOevgyznr4Qs5Z+CLOiAvyzmopcs5belLOaUuyzlip8s5oGtLOm+mizkvps" \
        "s6LqsLOWFrCzlrqss5byTLOW3qSzmsZ4s5ouxLOi0oSzlhbEs6ZKpLOWLvizmsp8s6I" \
        "ufLOeLlyzlnqIs5p6ELOi0rSzlpJ8s6L6cLOiPhyzlkpUs566NLOS8sCzmsr0s5a2kL" \
        "OWnkSzpvJMs5Y+kLOibiizpqqgs6LC3LOiCoSzmlYUs6aG+LOWbuizpm4cs5YiuLOeT" \
        "nCzliZAs5a+hLOaMgizopIIs5LmWLOaLkCzmgKos5qO6LOWFsyzlrpgs5YagLOingiz" \
        "nrqEs6aaGLOe9kCzmg68s54GMLOi0ryzlhYks5bm/LOmAmyznkbAs6KeELOWcrSznoY" \
        "Us5b2SLOm+nyzpl7os6L2oLOmsvCzor6Es55m4LOahgizmn5ws6LeqLOi0tSzliL0s6" \
        "L6KLOa7mizmo40s6ZSFLOmDrSzlm70s5p6cLOijuSzov4cs5ZOILOevhSznr4gs56+J" \
        "LOeviiznr4ss56+NLOevjiznr48s56+QLOevkiznr5Qs56+VLOevliznr5cs56+YLOe" \
        "vmyznr5ws56+eLOevnyznr6As56+iLOevoyznr6Qs56+nLOevqCznr6ks56+rLOevrC" \
        "znr60s56+vLOevsCznr7Is56+zLOevtCznr7Us56+2LOevuCznr7ks56+6LOevuyznr" \
        "70s56+/LOewgCznsIEs57CCLOewgyznsIQs57CFLOewhiznsIgs57CJLOewiiznsI0s" \
        "57COLOewkCznsJEs57CSLOewkyznsJQs57CVLOewlyznsJgs57CZLCznsJos57CbLOe" \
        "wnCznsJ0s57CeLOewoCznsKEs57CiLOewoyznsKQs57ClLOewqCznsKks57CrLOewrC" \
        "znsK0s57CuLOewryznsLAs57CxLOewsiznsLMs57C0LOewtSznsLYs57C3LOewuSzns" \
        "Los57C7LOewvCznsL0s57C+LOexgizpqrgs5a2pLOa1tyzmsKYs5LqlLOWusyzpqocs" \
        "6YWjLOaGqCzpgq8s6Z+pLOWQqyzmtrUs5a+SLOWHvSzlloos572VLOe/sCzmkrws5o2" \
        "NLOaXsSzmhr4s5oKNLOeEiizmsZcs5rGJLOWkryzmna0s6IiqLOWjlSzlmo4s6LGqLO" \
        "avqyzpg50s5aW9LOiAlyzlj7cs5rWpLOWRtSzllp0s6I23LOiPjyzmoLgs56a+LOWSj" \
        "CzkvZUs5ZCILOebkizosoks6ZiCLOaysyzmtrgs6LWrLOikkCzpuaQs6LS6LOWYvyzp" \
        "u5Es55eVLOW+iCzni6As5oGoLOWTvCzkuqgs5qiqLOihoSzmgZIs6L2wLOWThCzng5g" \
        "s6Jm5LOm4vyzmtKos5a6PLOW8mCznuqIs5ZaJLOS+ryznjLQs5ZC8LOWOmizlgJks5Z" \
        "COLOWRvCzkuY4s5b+9LOeRmizlo7Ys6JGrLOiDoSzonbQs54uQLOeziizmuZYs57GDL" \
        "OexhCznsYUs57GGLOexhyznsYgs57GJLOexiiznsYss57GMLOexjiznsY8s57GQLOex" \
        "kSznsZIs57GTLOexlCznsZUs57GWLOexlyznsZgs57GZLOexmiznsZss57GcLOexnSz" \
        "nsZ4s57GfLOexoCznsaEs57GiLOexoyznsaQs57GlLOexpiznsacs57GoLOexqSznsa" \
        "os57GrLOexrCznsa0s57GuLOexryznsbAs57GxLOexsiznsbUs57G2LOextyznsbgs5" \
        "7G5LOexuiznsb4s57G/LOeygCznsoEs57KCLOeygyznsoQs57KFLOeyhiznsocsLOey" \
        "iCznsoos57KLLOeyjCznso0s57KOLOeyjyznspAs57KTLOeylCznspYs57KZLOeymiz" \
        "nspss57KgLOeyoSznsqMs57KmLOeypyznsqgs57KpLOeyqyznsqws57KtLOeyryznsr" \
        "As57K0LOeytSznsrYs57K3LOeyuCznsros57K7LOW8pyzomY4s5ZSsLOaKpCzkupIs5" \
        "rKqLOaItyzoirEs5ZOXLOWNjiznjL4s5ruRLOeUuyzliJIs5YyWLOivnSzmp5As5b6K" \
        "LOaAgCzmt64s5Z2PLOasoiznjq8s5qGTLOi/mCznvJMs5o2iLOaCoyzllKQs55eqLOi" \
        "xoiznhJUs5rajLOWupizlubss6I2SLOaFjCzpu4Qs56O6LOidlyznsKcs55qHLOWHsC" \
        "zmg7Ys54WMLOaZgyzluYws5oGNLOiwjizngbAs5oylLOi+iSzlvr0s5oGiLOiblCzlm" \
        "54s5q+BLOaClCzmhacs5Y2JLOaDoCzmmaYs6LS/LOenvSzkvJos54OpLOaxhyzorrMs" \
        "6K+yLOe7mCzojaQs5piPLOWpmizprYIs5rWRLOa3tyzosYEs5rS7LOS8mSzngass6I6" \
        "3LOaIlizmg5Es6ZyNLOi0pyznpbgs5Ye7LOWcvizln7os5py6LOeVuCznqL0s56evLO" \
        "eulSznsr8s57OALOezgizns4Ms57OELOezhizns4ks57OLLOezjizns48s57OQLOezk" \
        "Szns5Is57OTLOezlCzns5gs57OaLOezmyzns50s57OeLOezoSzns6Is57OjLOezpCzn" \
        "s6Us57OmLOezpyzns6ks57OqLOezqyzns6ws57OtLOezrizns7As57OxLOezsizns7M" \
        "s57O0LOeztSzns7Ys57O3LOezuSzns7os57O8LOezvSzns74s57O/LOe0gCzntIEs57" \
        "SCLOe0gyzntIQs57SFLOe0hizntIcs57SILOe0iSzntIss57SMLOe0jSzntI4s57SPL" \
        "Oe0kCws57SRLOe0kizntJMs57SULOe0lSzntJYs57SXLOe0mCzntJks57SaLOe0myzn" \
        "tJws57SdLOe0nizntJ8s57ShLOe0oyzntKQs57SlLOe0pizntKgs57SpLOe0qizntKw" \
        "s57StLOe0rizntLAs57SxLOe0sizntLMs57S0LOe0tSzntLYs6IKMLOmlpSzov7ks5r" \
        "+ALOiupSzpuKEs5aesLOe7qSznvIks5ZCJLOaegSzmo5gs6L6RLOexjSzpm4Ys5Y+KL" \
        "OaApSznlr4s5rGyLOWNsyzlq4ks57qnLOaMpCzlh6As6ISKLOW3sSzok58s5oqALOWG" \
        "gCzlraMs5LyOLOelrSzliYIs5oK4LOa1jizlr4Qs5a+CLOiuoSzorrAs5peiLOW/jCz" \
        "pmYUs5aaTLOe7pyznuqos5ZiJLOaetyzlpLks5L2zLOWutizliqAs6I2aLOmiiizotL" \
        "4s55SyLOmSvizlgYcs56i8LOS7tyzmnrYs6am+LOWrgSzmrbws55uRLOWdmizlsJYs5" \
        "6y6LOmXtCznhY4s5YW8LOiCqSzoibAs5aW4LOe8hCzojKcs5qOALOafrCznorEs56G3" \
        "LOaLoyzmjaEs566ALOS/rSzliaos5YePLOiNkCzmp5ss6Ym0LOi3tSzotLEs6KeBLOm" \
        "Uriznrq0s5Lu2LOe0tyzntLgs57S5LOe0uizntLss57S8LOe0vSzntL4s57S/LOe1gC" \
        "zntYEs57WCLOe1gyzntYQs57WFLOe1hizntYcs57WILOe1iSzntYos57WLLOe1jCznt" \
        "Y0s57WOLOe1jyzntZAs57WRLOe1kizntZMs57WULOe1lSzntZYs57WXLOe1mCzntZks" \
        "57WaLOe1myzntZws57WdLOe1nizntZ8s57WgLOe1oSzntaIs57WjLOe1pCzntaUs57W" \
        "mLOe1pyzntags57WpLOe1qizntass57WsLOe1rSznta8s57WwLOe1sSzntbIs57WzLO" \
        "e1tCzntbUs57W2LCzntbgs57W5LOe1uizntbss57W8LOe1vSzntb4s57W/LOe2gCznt" \
        "oEs57aCLOe2gyzntoQs57aFLOe2hizntocs57aILOe2iSzntoos57aLLOe2jCznto0s" \
        "57aOLOe2jyzntpAs57aRLOe2kizntpMs57aULOe2lSzntpYs57aXLOe2mCzlgaUs6Ii" \
        "wLOWJkSzppa8s5riQLOa6hSzmtqcs5bu6LOWDtSzlp5ws5bCGLOa1hizmsZ8s55aGLO" \
        "iSiyzmoags5aWWLOiusizljKAs6YWxLOmZjSzolYks5qSSLOekgSznhKYs6IO2LOS6p" \
        "Czpg4os5rWHLOmqhCzlqIcs5Zq8LOaQhSzpk7As55+rLOS+pSzohJos54uhLOinkizp" \
        "pbos57y0LOe7nizlib8s5pWZLOmFtSzovb8s6L6DLOWPqyznqpYs5o+tLOaOpSznmoY" \
        "s56e4LOihlyzpmLYs5oiqLOWKqyzoioIs5qGULOadsCzmjbcs552rLOerrSzmtIEs57" \
        "uTLOinoyzlp5As5oiSLOiXiSzoiqUs55WMLOWAnyzku4ss55alLOivqyzlsYos5be+L" \
        "OetiyzmlqQs6YeRLOS7iizmtKUs6KWfLOe0pyzplKYs5LuFLOiwqCzov5ss6Z2zLOaZ" \
        "iyznpoEs6L+RLOeDrCzmtbgs57aZLOe2mizntpss57acLOe2nSzntp4s57afLOe2oCz" \
        "ntqEs57aiLOe2oyzntqQs57alLOe2pyzntqgs57apLOe2qizntqss57asLOe2rSzntq" \
        "8s57awLOe2sSzntrIs57azLOe2tCzntrUs57a2LOe2tyzntrgs57a5LOe2uizntrss5" \
        "7a8LOe2vSzntr4s57a/LOe3gCznt4Es57eCLOe3gyznt4Qs57eFLOe3hiznt4cs57eI" \
        "LOe3iSznt4os57eLLOe3jCznt40s57eOLOe3jyznt5As57eRLOe3kiznt5Ms57eULOe" \
        "3lSznt5Ys57eXLOe3mCznt5ksLOe3miznt5ss57ecLOe3nSznt54s57efLOe3oCznt6" \
        "Es57eiLOe3oyznt6Qs57elLOe3piznt6cs57eoLOe3qSznt6os57erLOe3rCznt60s5" \
        "7euLOe3ryznt7As57exLOe3siznt7Ms57e0LOe3tSznt7Ys57e3LOe3uCznt7ks57e6" \
        "LOWwvSzlirIs6I2GLOWFoizojI4s552bLOaZtizpsrgs5LqsLOaDiiznsr4s57KzLOe" \
        "7jyzkupUs6K2mLOaZryzpoogs6Z2ZLOWigyzmlaws6ZWcLOW+hCznl4ks6Z2WLOerny" \
        "znq54s5YeALOeCryznqpgs5o+qLOeptiznuqAs546WLOmfrSzkuYUs54G4LOS5nSzph" \
        "ZIs5Y6pLOaVkSzml6cs6Ie8LOiIhSzlko4s5bCxLOeWmizpnqAs5ouYLOeLmSznlr0s" \
        "5bGFLOmpuSzoj4os5bGALOWSgCznn6ks5Li+LOayrizogZos5ouSLOaNrizlt6gs5YW" \
        "3LOi3nSzouJ4s6ZSvLOS/sSzlj6Us5oOnLOeCrCzliacs5o2QLOm5gyzlqJ8s5YCmLO" \
        "ectyzljbcs57uiLOaShSzmlKss5oqJLOaOmCzlgJQs54i1LOiniSzlhrMs6K+ALOe7n" \
        "SzlnYcs6I+MLOmSpyzlhpss5ZCbLOWzuyznt7ss57e8LOe3vSznt74s57e/LOe4gCzn" \
        "uIEs57iCLOe4gyznuIQs57iFLOe4hiznuIcs57iILOe4iSznuIos57iLLOe4jCznuI0" \
        "s57iOLOe4jyznuJAs57iRLOe4kiznuJMs57iULOe4lSznuJYs57iXLOe4mCznuJks57" \
        "iaLOe4myznuJws57idLOe4niznuJ8s57igLOe4oSznuKIs57ijLOe4pCznuKUs57imL" \
        "Oe4pyznuKgs57ipLOe4qiznuKss57isLOe4rSznuK4s57ivLOe4sCznuLEs57iyLOe4" \
        "syznuLQs57i1LOe4tiznuLcs57i4LOe4uSws57i6LOe4vCznuL0s57i+LOe4vyznuYA" \
        "s57mCLOe5gyznuYQs57mFLOe5hiznuYgs57mJLOe5iiznuYss57mMLOe5jSznuY4s57" \
        "mPLOe5kCznuZEs57mSLOe5kyznuZQs57mVLOe5liznuZcs57mYLOe5mSznuZos57mbL" \
        "Oe5nCznuZ0s5L+KLOeroyzmtZos6YOhLOmqjyzlloAs5ZKWLOWNoSzlkq8s5byALOaP" \
        "qSzmpbcs5YevLOaFqCzliIos5aCqLOWLmCzlnY4s56CNLOeciyzlurcs5oW3LOezoCz" \
        "miZss5oqXLOS6oizngpUs6ICDLOaLtyzng6Qs6Z2gLOWdtyzoi5ss5p+vLOajtSzno5" \
        "Us6aKXLOenkSzlo7Ms5ZKzLOWPryzmuLQs5YWLLOWIuyzlrqIs6K++LOiCryzllYMs5" \
        "Z6mLOaBsyzlnZEs5ZCtLOepuizmgZAs5a2ULOaOpyzmiqAs5Y+jLOaJoyzlr4cs5p6v" \
        "LOWTrSznqp8s6IumLOmFtyzlupMs6KOkLOWkuCzlnq4s5oyOLOi3qCzog68s5Z2XLOe" \
        "ttyzkvqks5b+rLOWuvSzmrL4s5YyhLOetkCzni4Is5qGGLOefvyznnLYs5pe3LOWGtS" \
        "zkuo8s55uULOWyvyznqqUs6JG1LOWljizprYEs5YKALOe5niznuZ8s57mgLOe5oSznu" \
        "aIs57mjLOe5pCznuaUs57mmLOe5pyznuags57mpLOe5qiznuass57msLOe5rSznua4s" \
        "57mvLOe5sCznubEs57myLOe5syznubQs57m1LOe5tiznubcs57m4LOe5uSznubos57m" \
        "7LOe5vCznub0s57m+LOe5vyznuoAs57qBLOe6gyznuoQs57qFLOe6hiznuocs57qILO" \
        "e6iSznuoos57qLLOe6jCznuo0s57qOLOe6jyznupAs57qRLOe6kiznupMs57qULOe6l" \
        "SznupYs57qXLOe6mCznupks57qaLOe6nCznup0s57qeLCznuq4s57q0LOe6uyznurws" \
        "57uWLOe7pCznu6ws57u5LOe8iiznvJAs57yeLOe8tyznvLks57y7LOe8vCznvL0s57y" \
        "+LOe8vyznvYAs572BLOe9gyznvYYs572HLOe9iCznvYks572KLOe9iyznvYws572NLO" \
        "e9jiznvY8s572SLOe9kyzppogs5oSnLOa6gyzlnaQs5piGLOaNhizlm7As5ousLOaJq" \
        "Szlu5Ms6ZiULOWegyzmi4ks5ZaHLOicoSzohYos6L6jLOWVpizojrEs5p2lLOi1lizo" \
        "k50s5amqLOagjyzmi6Ys56+uLOmYkSzlhbAs5r6cLOiwsCzmj70s6KeILOaHkiznvIY" \
        "s54OCLOa7pSznkIUs5qaULOeLvCzlu4os6YOOLOaclyzmtaos5o2eLOWKsyzniaIs6I" \
        "CBLOS9rCzlp6Us6YWqLOeDmSzmtp0s5YuSLOS5kCzpm7cs6ZWtLOiVvizno4os57SvL" \
        "OWEoSzlnpIs5pOCLOiCiyznsbss5rOqLOajsSzmpZ4s5Ya3LOWOmCzmoqgs54qBLOm7" \
        "jiznr7Es54u4LOemuyzmvJMs55CGLOadjizph4ws6bKkLOekvCzojoks6I2ULOWQjyz" \
        "moJcs5Li9LOWOiSzlirEs56C+LOWOhizliKks5YKILOS+iyzkv5As572WLOe9mSznvZ" \
        "ss572cLOe9nSznvZ4s572gLOe9oyznvaQs572lLOe9piznvacs572rLOe9rCznva0s5" \
        "72vLOe9sCznvbMs5721LOe9tiznvbcs5724LOe9uiznvbss5728LOe9vSznvb8s576A" \
        "LOe+giznvoMs576ELOe+hSznvoYs576HLOe+iCznvoks576LLOe+jSznvo8s576QLOe" \
        "+kSznvpIs576TLOe+lSznvpYs576XLOe+mCznvpks576bLOe+nCznvqAs576iLOe+oy" \
        "znvqUs576mLOe+qCznvqks576qLOe+qyznvqws576tLOe+riznvrEsLOe+syznvrQs5" \
        "761LOe+tiznvrcs5766LOe+uyznvr4s57+ALOe/giznv4Ms57+ELOe/hiznv4cs57+I" \
        "LOe/iSznv4ss57+NLOe/jyznv5As57+RLOe/kiznv5Ms57+WLOe/lyznv5ks57+aLOe" \
        "/myznv5ws57+dLOe/niznv6Is57+jLOeXoiznq4ss57KSLOaypSzpmrYs5YqbLOeSgy" \
        "zlk6ks5L+pLOiBlCzojrIs6L+eLOmVsCzlu4ks5oCcLOa2nyzluJgs5pWbLOiEuCzpk" \
        "74s5oGLLOeCvCznu4Ms57KuLOWHiSzmooEs57KxLOiJryzkuKQs6L6GLOmHjyzmmb4s" \
        "5LquLOiwhSzmkqks6IGKLOWDmiznlpcs54eOLOWvpSzovr0s5r2mLOS6hizmkoIs6ZW" \
        "jLOW7lizmlpks5YiXLOijgizng4gs5YqjLOeMjiznkLMs5p6XLOejtyzpnJYs5Li0LO" \
        "mCuyzps54s5reLLOWHmyzotYEs5ZCdLOaLjiznjrIs6I+xLOmbtizpvoQs6ZODLOS8t" \
        "iznvpos5YeMLOeBtSzpmbUs5bKtLOmihizlj6Ys5LukLOa6nCznkIks5qa0LOehqyzp" \
        "po8s55WZLOWImCznmKQs5rWBLOafsyzlha0s6b6ZLOiBiyzlkpks56y8LOeqvyznv6Q" \
        "s57+nLOe/qCznv6os57+rLOe/rCznv60s57+vLOe/siznv7Qs57+1LOe/tiznv7cs57" \
        "+4LOe/uSznv7os57+9LOe/viznv78s6ICCLOiAhyzogIgs6ICJLOiAiizogI4s6ICPL" \
        "OiAkSzogJMs6ICaLOiAmyzogJ0s6ICeLOiAnyzogKEs6ICjLOiApCzogKss6ICsLOiA" \
        "rSzogK4s6ICvLOiAsCzogLIs6IC0LOiAuSzogLos6IC8LOiAvizogYAs6IGBLOiBhCz" \
        "ogYUs6IGHLOiBiCzogYks6IGOLOiBjyzogZAs6IGRLOiBkyzogZUs6IGWLOiBlyws6I" \
        "GZLOiBmyzogZws6IGdLOiBnizogZ8s6IGgLOiBoSzogaIs6IGjLOiBpCzogaUs6IGmL" \
        "OiBpyzogags6IGrLOiBrCzoga0s6IGuLOiBryzogbAs6IGyLOiBsyzogbQs6IG1LOiB" \
        "tizogbcs6IG4LOiBuSzogbos6IG7LOiBvCzogb0s6ZqGLOWehCzmi6Is6ZmHLOalvCz" \
        "lqIQs5pCCLOevkyzmvI8s6ZmLLOiKpizljaIs6aKFLOW6kCzngoks5o6zLOWNpCzomY" \
        "8s6bKBLOm6kyznoows6ZyyLOi3ryzotYIs6bm/LOa9niznpoQs5b2VLOmZhizmiK4s6" \
        "am0LOWQlSzpk50s5L6jLOaXhSzlsaUs5bGhLOe8lSzomZEs5rCvLOW+iyznjocs5ruk" \
        "LOe7vyzls6Ys5oybLOWtqizmu6Ys5Y21LOS5sSzmjqAs55WlLOaKoSzova4s5LymLOS" \
        "7kSzmsqYs57q2LOiuuizokJ0s6J66LOe9lyzpgLss6ZSjLOeuqSzpqqEs6KO4LOiQvS" \
        "zmtJss6aqGLOe7nCzlpogs6bq7LOeOmyznoIEs6JqCLOmprCzpqoIs5ZibLOWQlyzln" \
        "4ss5LmwLOm6pizljZYs6L+ILOiEiSznnpIs6aaSLOibrizmu6Es6JSTLOabvCzmhaIs" \
        "5ryrLOiBvizogoEs6IKCLOiChSzogogs6IKKLOiCjSzogo4s6IKPLOiCkCzogpEs6IK" \
        "SLOiClCzogpUs6IKXLOiCmSzogp4s6IKjLOiCpizogqcs6IKoLOiCrCzogrAs6IKzLO" \
        "iCtSzogrYs6IK4LOiCuSzogrss6IOFLOiDhyzog4gs6IOJLOiDiizog4ss6IOPLOiDk" \
        "Czog5Es6IOSLOiDkyzog5Qs6IOVLOiDmCzog58s6IOgLOiDoizog6Ms6IOmLOiDrizo" \
        "g7Us6IO3LOiDuSzog7ss6IO+LOiDvyzohIAs6ISBLOiEgyzohIQs6ISFLOiEhyzohIg" \
        "s6ISLLCzohIws6ISVLOiElyzohJks6ISbLOiEnCzohJ0s6ISfLOiEoCzohKEs6ISiLO" \
        "iEoyzohKQs6ISlLOiEpizohKcs6ISoLOiEqSzohKos6ISrLOiErSzohK4s6ISwLOiEs" \
        "yzohLQs6IS1LOiEtyzohLks6IS6LOiEuyzohLws6IS9LOiEvyzosKks6IqSLOiMqyzn" \
        "m7Is5rCTLOW/mSzojr0s54yrLOiMhSzplJos5q+bLOefmyzpk4Ys5Y2vLOiMgizlhpI" \
        "s5bi9LOiyjCzotLgs5LmILOeOqyzmnpos5qKFLOmFtizpnIks54WkLOayoSznnIks5a" \
        "qSLOmVgSzmr48s576OLOaYpyzlr5As5aa5LOWqmizpl6gs6Ze3LOS7rCzokIws6JKZL" \
        "OaqrCznm58s6ZSwLOeMmyzmoqYs5a2fLOecryzphpos6Z2hLOeznCzov7cs6LCcLOW8" \
        "pSznsbMs56eYLOinhSzms4ws6JycLOWvhizluYIs5qOJLOecoCznu7Us5YaVLOWFjSz" \
        "li4ks5aipLOe8hSzpnaIs6IuXLOaPjyznnoQs6JeQLOenkizmuLos5bqZLOWmmSzolJ" \
        "Es54GtLOawkSzmir8s55q/LOaVjyzmgq8s6Ze9LOaYjizonp8s6bijLOmTrSzlkI0s5" \
        "ZG9LOiwrCzmkbgs6IWALOiFgSzohYIs6IWDLOiFhCzohYUs6IWHLOiFiSzohY0s6IWO" \
        "LOiFjyzohZIs6IWWLOiFlyzohZgs6IWbLOiFnCzohZ0s6IWeLOiFnyzohaEs6IWiLOi" \
        "FoyzohaQs6IWmLOiFqCzohaos6IWrLOiFrCzoha8s6IWyLOiFsyzohbUs6IW2LOiFty" \
        "zohbgs6IaBLOiGgyzohoQs6IaFLOiGhizohocs6IaJLOiGiyzohows6IaNLOiGjizoh" \
        "pAs6IaSLOiGkyzohpQs6IaVLOiGlizohpcs6IaZLOiGmizohp4s6IafLOiGoCzohqEs" \
        "6IaiLOiGpCzohqUsLOiGpyzohqks6IarLOiGrCzohq0s6IauLOiGryzohrAs6IaxLOi" \
        "GsizohrQs6Ia1LOiGtizohrcs6Ia4LOiGuSzohrws6Ia9LOiGvizohr8s6IeELOiHhS" \
        "zoh4cs6IeILOiHiSzoh4ss6IeNLOiHjizoh48s6IeQLOiHkSzoh5Is6IeTLOaRuSzom" \
        "JEs5qihLOiGnCzno6gs5pGpLOmtlCzmirks5pyrLOiOqyzloqgs6buYLOayqyzmvKAs" \
        "5a+eLOmZjCzosIss54mfLOafkCzmi4cs54mhLOS6qSzlp4Ys5q+NLOWikyzmmq4s5bm" \
        "VLOWLnyzmhZUs5pyoLOebriznnaYs54mnLOephizmi78s5ZOqLOWRkCzpkqAs6YKjLO" \
        "WonCznurMs5rCWLOS5gyzlpbYs6ICQLOWliCzljZcs55S3LOmavizlm4os5oygLOiEk" \
        "Szmgbws6Ze5LOa3lizlkaIs6aaBLOWGhSzlq6ks6IO9LOWmrizpnJMs5YCqLOazpSzl" \
        "sLws5oufLOS9oCzljL8s6IW7LOmAhizmuros6JSrLOaLiCzlubQs56K+LOaStSzmjbs" \
        "s5b+1LOWomCzphb8s6bifLOWwvyzmjY8s6IGCLOWtvSzlla4s6ZWKLOmVjSzmtoUs5o" \
        "KoLOafoCzni54s5YedLOWugSzoh5Qs6IeVLOiHlizoh5cs6IeYLOiHmSzoh5os6IebL" \
        "OiHnCzoh50s6IeeLOiHnyzoh6As6IehLOiHoizoh6Qs6IelLOiHpizoh6gs6IepLOiH" \
        "qyzoh64s6IevLOiHsCzoh7Es6IeyLOiHtSzoh7Ys6Ie3LOiHuCzoh7ks6Ie6LOiHvSz" \
        "oh78s6IiDLOiIhyzoiIgs6IiJLOiIiizoiIss6IiOLOiIjyzoiJEs6IiTLOiIlSzoiJ" \
        "Ys6IiXLOiImCzoiJks6IiaLOiInSzoiKAs6IikLOiIpSzoiKYs6IinLOiIqSzoiK4s6" \
        "IiyLOiIuizoiLws6Ii9LOiIvyws6ImALOiJgSzoiYIs6ImDLOiJhSzoiYYs6ImILOiJ" \
        "iizoiYws6ImNLOiJjizoiZAs6ImRLOiJkizoiZMs6ImULOiJlSzoiZYs6ImXLOiJmSz" \
        "oiZss6ImcLOiJnSzoiZ4s6ImgLOiJoSzoiaIs6ImjLOiJpCzoiaUs6ImmLOiJpyzoia" \
        "ks5ounLOaznizniZss5omtLOmSriznur0s6ISTLOa1kyzlhpws5byELOWltCzliqos5" \
        "oCSLOWlsyzmmpYs6JmQLOeWnyzmjKos5oemLOezryzor7os5ZOmLOaspyzpuKUs5q60" \
        "LOiXlSzlkZUs5YG2LOaypCzllaos6La0LOeIrCzluJUs5oCVLOeQtizmi40s5o6SLOe" \
        "JjCzlvpgs5rmDLOa0vizmlIAs5r2YLOebmCzno5As55u8LOeVlCzliKQs5Y+bLOS5ky" \
        "zlup4s5peBLOiAqizog5Ys5oqbLOWShizliKgs54KuLOiijSzot5Es5rOhLOWRuCzog" \
        "5os5Z+5LOijtCzotZQs6ZmqLOmFjSzkvaks5rKbLOWWtyznm4Ys56CwLOaKqCzng7ks" \
        "5r6OLOW9rSzok6ws5qOaLOehvCznr7cs6IaoLOaciyzpuY8s5o2nLOeisCzlna8s56C" \
        "SLOmcuSzmibks5oqrLOWKiCznkLUs5q+XLOiJqizoiass6ImsLOiJrSzoibEs6Im1LO" \
        "iJtizoibcs6Im4LOiJuyzoibws6IqALOiKgSzoioMs6IqFLOiKhizoiocs6IqJLOiKj" \
        "CzoipAs6IqTLOiKlCzoipUs6IqWLOiKmizoipss6IqeLOiKoCzoiqIs6IqjLOiKpyzo" \
        "irIs6Iq1LOiKtizoiros6Iq7LOiKvCzoir8s6IuALOiLgizoi4Ms6IuFLOiLhizoi4k" \
        "s6IuQLOiLlizoi5ks6IuaLOiLnSzoi6Is6IunLOiLqCzoi6ks6IuqLOiLrCzoi60s6I" \
        "uuLOiLsCzoi7Is6IuzLOiLtSzoi7Ys6Iu4LCzoi7os6Iu8LOiLvSzoi74s6Iu/LOiMg" \
        "CzojIos6IyLLOiMjSzojJAs6IySLOiMkyzojJYs6IyYLOiMmSzojJ0s6IyeLOiMnyzo" \
        "jKAs6IyhLOiMoizojKMs6IykLOiMpSzojKYs6IypLOiMqizojK4s6IywLOiMsizojLc" \
        "s6Iy7LOiMvSzllaQs6IS+LOeWsiznmq4s5Yy5LOeXnizlg7ss5bGBLOitrCznr4cs5Y" \
        "GPLOeJhyzpqpcs6aOYLOa8giznk6Is56WoLOaShyznnqUs5ou8LOmikSzotKss5ZOBL" \
        "OiBmCzkuZIs5Z2qLOiLuSzokI0s5bmzLOWHrSznk7Ys6K+ELOWxjyzlnaEs5rO8LOmi" \
        "hyzlqYYs56C0LOmthCzov6ss57KVLOWJlizmiZEs6ZO6LOS7hizojoYs6JGhLOiPqSz" \
        "okrIs5Z+ULOactCzlnIMs5pmuLOa1pizosLEs5pudLOeAkSzmnJ8s5qy6LOaglizmiJ" \
        "os5aa7LOS4gyzlh4Qs5ryGLOafkizmso8s5YW2LOajiyzlpYcs5q2nLOeVpizltI4s6" \
        "ISQLOm9kCzml5cs56WILOelgSzpqpEs6LW3LOWygizkuZ4s5LyBLOWQryzlpZEs56CM" \
        "LOWZqCzmsJQs6L+ELOW8gyzmsb0s5rOjLOiuqyzmjpAs6Iy+LOiMvyzojYEs6I2CLOi" \
        "NhCzojYUs6I2ILOiNiizojYss6I2MLOiNjSzojY4s6I2TLOiNlSzojZYs6I2XLOiNmC" \
        "zojZks6I2dLOiNoizojbAs6I2xLOiNsizojbMs6I20LOiNtSzojbYs6I25LOiNuizoj" \
        "b4s6I2/LOiOgCzojoEs6I6CLOiOgyzojoQs6I6HLOiOiCzojoos6I6LLOiOjCzojo0s" \
        "6I6PLOiOkCzojpEs6I6ULOiOlSzojpYs6I6XLOiOmSzojpos6I6dLOiOnyzojqEs6I6" \
        "iLOiOoyzojqQs6I6lLOiOpizojqcs6I6sLOiOrSzojq4sLOiOryzojrUs6I67LOiOvi" \
        "zojr8s6I+CLOiPgyzoj4Qs6I+GLOiPiCzoj4ks6I+LLOiPjSzoj44s6I+QLOiPkSzoj" \
        "5Is6I+TLOiPlSzoj5cs6I+ZLOiPmizoj5ss6I+eLOiPoizoj6Ms6I+kLOiPpizoj6cs" \
        "6I+oLOiPqyzoj6ws6I+tLOaBsCzmtL0s54m1LOaJpizpko4s6ZOFLOWNgyzov4Es562" \
        "+LOS7nyzosKYs5Lm+LOm7lCzpkrEs6ZKzLOWJjSzmvZws6YGjLOa1hSzosLQs5aCRLO" \
        "W1jCzmrKAs5q2JLOaeqizlkZss6IWULOe+jCzlopks6JS3LOW8uizmiqIs5qmHLOmUu" \
        "SzmlbIs5oKELOahpSznnqcs5LmULOS+qCzlt6cs6Z6YLOaSrCznv5gs5bOtLOS/jyzn" \
        "qo0s5YiHLOiMhCzkuJQs5oCvLOeqgyzpkqYs5L61LOS6siznp6Ys55C0LOWLpCzoirk" \
        "s5pOSLOemvSzlr50s5rKBLOmdkizovbss5rCiLOWAvizljb8s5riFLOaTjizmmbQs5r" \
        "CwLOaDhSzpobcs6K+3LOW6hiznkLws56m3LOeniyzkuJgs6YKxLOeQgyzmsYIs5ZuaL" \
        "OmFiyzms4Us6LaLLOWMuizom4Ys5puyLOi6ryzlsYgs6amxLOa4oCzoj64s6I+vLOiP" \
        "syzoj7Qs6I+1LOiPtizoj7cs6I+6LOiPuyzoj7ws6I++LOiPvyzokIAs6JCCLOiQhSz" \
        "okIcs6JCILOiQiSzokIos6JCQLOiQkizokJMs6JCULOiQlSzokJYs6JCXLOiQmSzokJ" \
        "os6JCbLOiQnizokJ8s6JCgLOiQoSzokKIs6JCjLOiQqSzokKos6JCrLOiQrCzokK0s6" \
        "JCuLOiQryzokLAs6JCyLOiQsyzokLQs6JC1LOiQtizokLcs6JC5LOiQuizokLss6JC+" \
        "LOiQvyzokYAs6JGBLOiRgizokYMs6JGELOiRhSzokYcs6JGILOiRiSws6JGKLOiRiyz" \
        "okYws6JGNLOiRjizokY8s6JGQLOiRkizokZMs6JGULOiRlSzokZYs6JGYLOiRnSzokZ" \
        "4s6JGfLOiRoCzokaIs6JGkLOiRpSzokaYs6JGnLOiRqCzokaos6JGuLOiRryzokbAs6" \
        "JGyLOiRtCzokbcs6JG5LOiRuyzokbws5Y+WLOWotizpvoss6LajLOWOuyzlnIgs6aKn" \
        "LOadgyzphpss5rOJLOWFqCznl4os5ouzLOeKrCzliLgs5YqdLOe8uizngpQs55i4LOW" \
        "NtCzpuYos5qa3LOehrizpm4As6KOZLOe+pCznhLYs54eDLOWGiSzmn5Ms55OkLOWjpC" \
        "zmlJgs5Zq3LOiuqSzppbYs5omwLOe7lSzmg7ks54OtLOWjrCzku4Es5Lq6LOW/jSzpn" \
        "6cs5Lu7LOiupCzliIMs5aaKLOe6qyzmiZQs5LuNLOaXpSzmiI4s6Iy4LOiTiSzojaMs" \
        "6J6NLOeGlCzmurYs5a65LOe7kizlhpcs5o+JLOaflCzogoks6Iy5LOiglSzlhJIs5a2" \
        "6LOWmgizovrEs5LmzLOaxnSzlhaUs6KSlLOi9ryzpmK4s6JWKLOeRnizplJAs6ZewLO" \
        "a2pizoi6Us5byxLOaSkizmtJIs6JCoLOiFrizps4Ms5aGeLOi1myzkuIks5Y+BLOiRv" \
        "Szokb4s6JG/LOiSgCzokoEs6JKDLOiShCzokoUs6JKGLOiSiizoko0s6JKPLOiSkCzo" \
        "kpEs6JKSLOiSkyzokpQs6JKVLOiSlizokpgs6JKaLOiSmyzokp0s6JKeLOiSnyzokqA" \
        "s6JKiLOiSoyzokqQs6JKlLOiSpizokqcs6JKoLOiSqSzokqos6JKrLOiSrCzokq0s6J" \
        "KuLOiSsCzokrEs6JKzLOiStSzokrYs6JK3LOiSuyzokrws6JK+LOiTgCzok4Is6JODL" \
        "OiThSzok4Ys6JOHLOiTiCzok4ss6JOMLOiTjizok48s6JOSLOiTlCzok5Us6JOXLCzo" \
        "k5gs6JOZLOiTmizok5ss6JOcLOiTnizok6Es6JOiLOiTpCzok6cs6JOoLOiTqSzok6o" \
        "s6JOrLOiTrSzok64s6JOvLOiTsSzok7Is6JOzLOiTtCzok7Us6JO2LOiTtyzok7gs6J" \
        "O5LOiTuizok7ss6JO9LOiTvizolIAs6JSBLOiUgizkvJ4s5pWjLOahkSzll5Ms5LinL" \
        "OaQlCzpqpos5omrLOWrgiznkZ8s6ImyLOa2qSzmo64s5YOnLOiOjiznoIIs5p2ALOWI" \
        "uSzmspks57qxLOWCuyzllaUs54WeLOetmyzmmZIs54+KLOiLqyzmnYks5bGxLOWIoCz" \
        "nhb0s6KGrLOmXqizpmZUs5pOFLOi1oSzohrMs5ZaELOaxlSzmiYcs57yuLOWikizkvK" \
        "Qs5ZWGLOi1jyzmmYws5LiKLOWwmizoo7Ms5qKiLOaNjiznqI0s54OnLOiKjSzli7os6" \
        "Z+2LOWwkSzlk6gs6YK1LOe7jSzlpaIs6LWKLOibhyzoiIws6IiNLOi1pizmkYQs5bCE" \
        "LOaFkSzmtoks56S+LOiuviznoLcs55SzLOWRuyzkvLgs6LqrLOa3sSzlqKAs57uFLOe" \
        "lnizmsogs5a6hLOWptiznlJos6IK+LOaFjizmuJcs5aOwLOeUnyznlKUs54myLOWNhy" \
        "znu7Ms6JSDLOiUhCzolIUs6JSGLOiUhyzolIgs6JSJLOiUiizolIss6JSNLOiUjizol" \
        "I8s6JSQLOiUkizolJQs6JSVLOiUlizolJgs6JSZLOiUmyzolJws6JSdLOiUnizolKAs" \
        "6JSiLOiUoyzolKQs6JSlLOiUpizolKcs6JSoLOiUqSzolKos6JStLOiUrizolK8s6JS" \
        "wLOiUsSzolLIs6JSzLOiUtCzolLUs6JS2LOiUvizolL8s6JWALOiVgSzolYIs6JWELO" \
        "iVhSzolYYs6JWHLOiViyzolYws6JWNLOiVjizolY8s6JWQLOiVkSzolZIs6JWTLOiVl" \
        "CzolZUsLOiVlyzolZgs6JWaLOiVmyzolZws6JWdLOiVnyzolaAs6JWhLOiVoizolaMs" \
        "6JWlLOiVpizolacs6JWpLOiVqizolass6JWsLOiVrSzola4s6JWvLOiVsCzolbEs6JW" \
        "zLOiVtSzolbYs6JW3LOiVuCzolbws6JW9LOiVvyzoloAs6JaBLOecgSznm5ss5YmpLO" \
        "iDnCzlnKMs5biILOWksSzni64s5pa9LOa5vyzor5cs5bC4LOiZsSzljYEs55+zLOaLv" \
        "izml7Ys5LuALOmjnyzomoAs5a6eLOivhizlj7Is55+iLOS9vyzlsY4s6am2LOWniyzl" \
        "vI8s56S6LOWjqyzkuJYs5p+/LOS6iyzmi60s6KqTLOmAnSzlir8s5pivLOWXnCzlmaw" \
        "s6YCCLOS7lSzkvo0s6YeKLOmlsCzmsI8s5biCLOaBgyzlrqQs6KeGLOivlSzmlLYs5o" \
        "mLLOmmlizlrogs5a+/LOaOiCzllK4s5Y+XLOeYpizlhb0s6JSsLOaeoizmorMs5q6KL" \
        "OaKkizovpMs5Y+ULOiIkizmt5Es55aPLOS5pizotY4s5a2wLOeGnyzolq8s5pqRLOab" \
        "mSznvbIs6JyALOm7jSzpvKAs5bGeLOacryzov7As5qCRLOadnyzmiI0s56uWLOWihSz" \
        "lurYs5pWwLOa8sSzoloIs6JaDLOiWhizologs6JaJLOiWiizoloss6JaMLOiWjSzolo" \
        "4s6JaQLOiWkSzolpIs6JaTLOiWlCzolpUs6JaWLOiWlyzolpgs6JaZLOiWmizolp0s6" \
        "JaeLOiWnyzolqAs6JahLOiWoizolqMs6JalLOiWpizolqcs6JapLOiWqyzolqws6Jat" \
        "LOiWsSzolrIs6JazLOiWtCzolrUs6Ja2LOiWuCzolros6Ja7LOiWvCzolr0s6Ja+LOi" \
        "Wvyzol4As6JeCLOiXgyzol4Qs6JeFLOiXhizol4cs6JeILOiXiizol4ss6JeMLOiXjS" \
        "zol44s6JeRLOiXkiws6JeULOiXlizol5cs6JeYLOiXmSzol5os6JebLOiXnSzol54s6" \
        "JefLOiXoCzol6Es6JeiLOiXoyzol6Us6JemLOiXpyzol6gs6JeqLOiXqyzol6ws6Jet" \
        "LOiXrizol68s6JewLOiXsSzol7Is6JezLOiXtCzol7Us6Je2LOiXtyzol7gs5oGVLOW" \
        "ItyzogI0s5pGULOihsCznlKks5biFLOagkyzmi7Qs6ZycLOWPjCzniL0s6LCBLOawtC" \
        "znnaEs56iOLOWQriznnqws6aG6LOiInCzor7Qs56GVLOaclCzng4Es5pavLOaSlSzlm" \
        "LYs5oCdLOengSzlj7gs5LidLOatuyzogoYs5a+6LOWXoyzlm5ss5Ly6LOS8vCzppbIs" \
        "5bezLOadvizogLgs5oCCLOmigizpgIEs5a6LLOiuvCzor7Us5pCcLOiJmCzmk54s5Ze" \
        "9LOiLjyzphaUs5L+XLOe0oCzpgJ8s57KfLOWDsyzloZEs5rqvLOWuvyzor4ks6IKDLO" \
        "mFuCzokpws566XLOiZvSzpmoss6ZqPLOe7pSzpq5Ms56KOLOWygSznqZcs6YGCLOmap" \
        "yznpZ8s5a2ZLOaNnyznrIss6JORLOairSzllIYs57ypLOeQkCzntKIs6ZSBLOaJgCzl" \
        "oYws5LuWLOWugyzlpbks5aGULOiXuSzol7os6Je8LOiXvSzol74s6JiALOiYgSzomII" \
        "s6JiDLOiYhCzomIYs6JiHLOiYiCzomIks6JiKLOiYiyzomIws6JiNLOiYjizomI8s6J" \
        "iQLOiYkizomJMs6JiULOiYlSzomJcs6JiYLOiYmSzomJos6JibLOiYnCzomJ0s6JieL" \
        "OiYnyzomKAs6JihLOiYoizomKMs6JikLOiYpSzomKYs6JioLOiYqizomKss6JisLOiY" \
        "rSzomK4s6JivLOiYsCzomLEs6JiyLOiYsyzomLQs6Ji1LOiYtizomLcs6Ji5LOiYuiz" \
        "omLss6Ji9LOiYvizomL8s6JmALCzomYEs6JmCLOiZgyzomYQs6JmFLOiZhizomYcs6J" \
        "mILOiZiSzomYos6JmLLOiZjCzomZIs6JmTLOiZlSzomZYs6JmXLOiZmCzomZks6JmbL" \
        "OiZnCzomZ0s6JmfLOiZoCzomaEs6JmjLOiZpCzomaUs6JmmLOiZpyzomags6JmpLOiZ" \
        "qiznja0s5oyeLOi5iyzouI8s6IOOLOiLlCzmiqws5Y+wLOazsCzphZ4s5aSqLOaAgSz" \
        "msbAs5Z2NLOaRiizotKos55irLOa7qSzlnZss5qqALOeXsCzmva0s6LCtLOiwiCzlna" \
        "Ys5q+vLOiikiznorMs5o6iLOWPuSzngq0s5rGkLOWhmCzmkKos5aCCLOajoCzohpss5" \
        "ZSQLOezlizlgJgs6Lq6LOa3jCzotp8s54OrLOaOjyzmtpss5ruULOe7pizokIQs5qGD" \
        "LOmAgyzmt5gs6Zm2LOiuqCzlpZcs54m5LOiXpCzohb4s55a8LOiqiizmoq8s5YmULOi" \
        "4oizplJEs5o+QLOmimCzouYQs5ZW8LOS9kyzmm78s5ZqPLOaDlSzmtpUs5YmDLOWxiS" \
        "zlpKks5re7LOWhqyznlLAs55ScLOaBrCzoiJQs6IWGLOaMkSzmnaEs6L+iLOecuizot" \
        "7Ms6LS0LOmTgSzluJYs5Y6FLOWQrCzng4Ms6JmtLOiZryzombAs6JmyLOiZsyzombQs" \
        "6Jm1LOiZtizombcs6Jm4LOiagyzomoQs6JqFLOiahizomocs6JqILOiaiSzomo4s6Jq" \
        "PLOiakCzompEs6JqSLOialCzompYs6JqXLOiamCzompks6JqaLOiamyzomp4s6JqfLO" \
        "iaoCzomqEs6JqiLOiapSzomqYs6JqrLOiarSzomq4s6JqyLOiasyzomrcs6Jq4LOiau" \
        "Szomrss6Jq8LOiavSzomr4s6Jq/LOibgSzom4Is6JuDLOibhSzom4gs6JuMLOibjSzo" \
        "m5Is6JuTLOiblSzom5Ys6JuXLOibmizom5wsLOibnSzom6As6JuhLOiboizom6Ms6Ju" \
        "lLOibpizom6cs6JuoLOibqizom6ss6JusLOibryzom7Us6Ju2LOibtyzom7os6Ju7LO" \
        "ibvCzom70s6Ju/LOicgSzonIQs6JyFLOichizonIss6JyMLOicjizonI8s6JyQLOick" \
        "SzonJQs6JyWLOaxgCzlu7cs5YGcLOS6rSzluq0s5oy6LOiJhyzpgJos5qGQLOmFrizn" \
        "nrMs5ZCMLOmTnCzlvaQs56ulLOahtizmjYUs562SLOe7nyznl5ss5YG3LOaKlSzlpLQ" \
        "s6YCPLOWHuCznp4Ms56qBLOWbvizlvpIs6YCULOa2gizlsaAs5ZyfLOWQkCzlhZQs5r" \
        "mNLOWboizmjqgs6aKTLOiFvyzonJUs6KSqLOmAgCzlkJ4s5bGvLOiHgCzmi5Ys5omYL" \
        "OiEsSzpuLUs6ZmALOmprizpqbws5qStLOWmpSzmi5Ms5ZS+LOaMlizlk4cs6JuZLOa0" \
        "vCzlqIMs55OmLOiinCzmraos5aSWLOixjCzlvK8s5rm+LOeOqSzpob0s5Li4LOeDtyz" \
        "lrows56KXLOaMvSzmmZos55qWLOaDiyzlrpss5amJLOS4hyzohZUs5rGqLOeOiyzkuq" \
        "Es5p6JLOe9kSzlvoAs5pe6LOacmyzlv5gs5aaELOWogSzonJks6JybLOicnSzonJ8s6" \
        "JygLOicpCzonKYs6JynLOicqCzonKos6JyrLOicrCzonK0s6JyvLOicsCzonLIs6Jyz" \
        "LOictSzonLYs6Jy4LOicuSzonLos6Jy8LOicvSzonYAs6J2BLOidgizonYMs6J2ELOi" \
        "dhSzonYYs6J2KLOidiyzonY0s6J2PLOidkCzonZEs6J2SLOidlCzonZUs6J2WLOidmC" \
        "zonZos6J2bLOidnCzonZ0s6J2eLOidnyzonaEs6J2iLOidpizonacs6J2oLOidqSzon" \
        "aos6J2rLOidrCzona0s6J2vLOidsSzonbIs6J2zLOidtSws6J23LOiduCzonbks6J26" \
        "LOidvyzonoAs6J6BLOiehCzonoYs6J6HLOieiSzonoos6J6MLOiejizono8s6J6QLOi" \
        "ekSzonpIs6J6ULOielSzonpYs6J6YLOiemSzonpos6J6bLOienCzonp0s6J6eLOieoC" \
        "zonqEs6J6iLOieoyzonqQs5beNLOW+rizljbEs6Z+mLOi/nSzmoYUs5Zu0LOWUryzmg" \
        "58s5Li6LOa9jSznu7Qs6IuHLOiQjizlp5Qs5LyfLOS8qizlsL4s57qsLOacqizolJos" \
        "5ZGzLOeVjyzog4Ms5ZaCLOmtjyzkvY0s5ritLOiwkyzlsIks5oWwLOWNqyznmJ8s5ri" \
        "pLOiaiizmlocs6Ze7LOe6uSzlkLss56izLOe0iizpl64s5ZehLOe/gSznk64s5oydLO" \
        "iclyzmtqEs56qdLOaIkSzmlqEs5Y2nLOaPoSzmsoMs5berLOWRnCzpkqgs5LmMLOaxo" \
        "Szor6ws5bGLLOaXoCzoipws5qKnLOWQvizlkLQs5q+LLOatpizkupQs5o2CLOWNiCzo" \
        "iJ4s5LyNLOS+rizlnZ4s5oiKLOmbvizmmaQs54mpLOWLvyzliqEs5oKfLOivryzmmJQ" \
        "s54aZLOaekCzopb8s56GSLOefvSzmmbAs5Zi7LOWQuCzplKEs54m6LOiepSzonqYs6J" \
        "6nLOieqSzonqos6J6uLOiesCzonrEs6J6yLOietCzonrYs6J63LOieuCzonrks6J67L" \
        "OievCzonr4s6J6/LOifgSzon4Is6J+DLOifhCzon4Us6J+HLOifiCzon4ks6J+MLOif" \
        "jSzon44s6J+PLOifkCzon5Qs6J+VLOiflizon5cs6J+YLOifmSzon5os6J+cLOifnSz" \
        "on54s6J+fLOifoSzon6Is6J+jLOifpCzon6Ys6J+nLOifqCzon6ks6J+rLOifrCzon6" \
        "0s6J+vLOifsCzon7Es6J+yLOifsyzon7Qs6J+1LOiftizon7cs6J+4LCzon7os6J+7L" \
        "OifvCzon70s6J+/LOiggCzooIEs6KCCLOighCzooIUs6KCGLOighyzooIgs6KCJLOig" \
        "iyzooIws6KCNLOigjizooI8s6KCQLOigkSzooJIs6KCULOiglyzooJgs6KCZLOigmiz" \
        "ooJws6KCdLOignizooJ8s6KCgLOigoyznqIAs5oGvLOW4jCzmgoks6IadLOWklSzmg5" \
        "ws54aELOeDryzmuqos5rGQLOeKgCzmqoQs6KKtLOW4rSzkuaAs5aqzLOWWnCzpk6Ms5" \
        "rSXLOezuyzpmpks5oiPLOe7hiznno4s6Jm+LOWMoyzpnJ4s6L6WLOaahyzls6Es5L6g" \
        "LOeLrSzkuIss5Y6mLOWkjyzlkJMs5o6ALOmUqCzlhYgs5LuZLOmynCznuqQs5ZK4LOi" \
        "0pCzooZQs6Ii3LOmXsizmto4s5bymLOWrjCzmmL4s6ZmpLOeOsCznjK4s5Y6/LOiFui" \
        "zppoUs576hLOWuqizpmbcs6ZmQLOe6vyznm7gs5Y6iLOmVtizpppks566xLOilhCzmu" \
        "Zgs5LmhLOe/lCznpaUs6K+mLOaDsyzlk40s5LqrLOmhuSzlt7cs5qmhLOWDjyzlkJEs" \
        "6LGhLOiQpyznoZ0s6ZyELOWJiizlk64s5ZqjLOmUgCzmtogs5a61LOa3hizmmZMs6KC" \
        "kLOigpSzooKYs6KCnLOigqCzooKks6KCqLOigqyzooKws6KCtLOigrizooK8s6KCwLO" \
        "igsSzooLMs6KC0LOigtSzooLYs6KC3LOiguCzooLos6KC7LOigvSzooL4s6KC/LOihg" \
        "SzooYIs6KGDLOihhizooYcs6KGILOihiSzooYos6KGLLOihjizooY8s6KGQLOihkSzo" \
        "oZIs6KGTLOihlSzooZYs6KGYLOihmizooZss6KGcLOihnSzooZ4s6KGfLOihoCzooaY" \
        "s6KGnLOihqizooa0s6KGvLOihsSzoobMs6KG0LOihtSzoobYs6KG4LOihuSzoobosLO" \
        "ihuyzoobws6KKALOiigyzoooYs6KKHLOiiiSzoooos6KKMLOiijizooo8s6KKQLOiik" \
        "SzoopMs6KKULOiilSzoopcs6KKYLOiimSzoopos6KKbLOiinSzoop4s6KKfLOiioCzo" \
        "oqEs6KKjLOiipSzooqYs6KKnLOiiqCzooqks6KKqLOWwjyzlrZ0s5qChLOiClizllbg" \
        "s56yRLOaViCzmpZQs5LqbLOathyzonY4s6Z6LLOWNjyzmjJ8s5pC6LOmCqizmlpws6I" \
        "OBLOiwkCzlhpks5qKwLOWNuCzon7ks5oeILOazhCzms7ss6LCiLOWxkSzolqos6IqvL" \
        "OmUjCzmrKMs6L6bLOaWsCzlv7ss5b+DLOS/oSzooYUs5pifLOiFpSznjKks5oO6LOWF" \
        "tCzliJEs5Z6LLOW9oizpgqIs6KGMLOmGkizlubgs5p2PLOaApyzlp5Ms5YWELOWHtiz" \
        "og7gs5YyILOaxuSzpm4Qs54aKLOS8kSzkv64s576eLOacvSzll4Us6ZSILOengCzoop" \
        "Ys57ujLOWinyzmiIws6ZyALOiZmizlmJgs6aG7LOW+kCzorrgs6JOELOmFlyzlj5ks5" \
        "petLOW6jyznlZws5oGkLOe1rizlqb8s57uqLOe7rSzovaks5ZanLOWuoyzmgqws5peL" \
        "LOeOhCzooqws6KKuLOiiryzoorAs6KKyLOiisyzoorQs6KK1LOiitizoorgs6KK5LOi" \
        "iuizoorss6KK9LOiivizoor8s6KOALOijgyzoo4Qs6KOHLOijiCzoo4os6KOLLOijjC" \
        "zoo40s6KOPLOijkCzoo5Es6KOTLOijlizoo5cs6KOaLOijmyzoo5ws6KOdLOijnizoo" \
        "6As6KOhLOijpizoo6cs6KOpLOijqizoo6ss6KOsLOijrSzoo64s6KOvLOijsizoo7Us" \
        "6KO2LOijtyzoo7os6KO7LOijvSzoo78s6KSALOikgSzopIMs6KSELOikhSzopIYs6KS" \
        "HLOikiCws6KSJLOikiyzopIws6KSNLOikjizopI8s6KSRLOiklCzopJUs6KSWLOikly" \
        "zopJgs6KScLOiknSzopJ4s6KSfLOikoCzopKIs6KSjLOikpCzopKYs6KSnLOikqCzop" \
        "Kks6KSsLOikrSzopK4s6KSvLOiksSzopLIs6KSzLOiktSzopLcs6YCJLOeZoyznnKks" \
        "57uaLOmdtCzolpss5a2mLOeptCzpm6os6KGALOWLiyznho8s5b6qLOaXrCzor6Is5a+" \
        "7LOmpryzlt6Es5q6JLOaxmyzorq0s6K6vLOmAiizov4Us5Y6LLOaKvCzpuKYs6bitLO" \
        "WRgCzkuKss6Iq9LOeJmSzompws5bSWLOihmSzmtq8s6ZuFLOWTkSzkupos6K62LOeEi" \
        "Szlkr0s6ZiJLOeDnyzmt7ks55uQLOS4pSznoJQs6JySLOWyqSzlu7Ys6KiALOminCzp" \
        "mI4s54KOLOayvyzlpYQs5o6pLOecvCzooY0s5ryULOiJsyzloLAs54eVLOWOjCznoJo" \
        "s6ZuBLOWUgSzlvaYs54SwLOWutCzosJos6aqMLOaugyzlpK4s6bivLOenpyzmnags5o" \
        "msLOS9ryznlqEs576KLOa0iyzpmLMs5rCnLOS7sCznl5Is5YW7LOagtyzmvL4s6YKAL" \
        "OiFsCzlppYs55G2LOikuCzopLks6KS6LOikuyzopLws6KS9LOikvizopL8s6KWALOil" \
        "gizopYMs6KWFLOilhizopYcs6KWILOiliSzopYos6KWLLOiljCzopY0s6KWOLOiljyz" \
        "opZAs6KWRLOilkizopZMs6KWULOillSzopZYs6KWXLOilmCzopZks6KWaLOilmyzopZ" \
        "ws6KWdLOiloCzopaEs6KWiLOiloyzopaQs6KWlLOilpyzopags6KWpLOilqizopass6" \
        "KWsLOilrSzopa4s6KWvLOilsCzopbEs6KWyLOilsyzopbQs6KW1LOiltizopbcs6KW4" \
        "LOiluSzopbos6KW8LCzopb0s6KW+LOimgCzopoIs6KaELOimhSzopocs6KaILOimiSz" \
        "opoos6KaLLOimjCzopo0s6KaOLOimjyzoppAs6KaRLOimkizoppMs6KaULOimlSzopp" \
        "Ys6KaXLOimmCzoppks6KaaLOimmyzoppws6KadLOimnizopp8s6KagLOimoSzmkYcs5" \
        "bCnLOmBpSznqpEs6LCjLOWnmizlkqws6IiALOiNryzopoEs6ICALOaksCzlmY4s6IC2" \
        "LOeItyzph44s5Ya2LOS5nyzpobUs5o6WLOS4mizlj7Ys5puzLOiFiyzlpJws5rayLOS" \
        "4gCzlo7ks5Yy7LOaPlizpk7Es5L6dLOS8iizooaMs6aKQLOWktyzpgZcs56e7LOS7qi" \
        "zog7As55aRLOaygizlrpws5aeoLOW9nSzmpIUs6JqBLOWAmizlt7Is5LmZLOefoyzku" \
        "6Us6Im6LOaKkSzmmJMs6YKRLOWxuSzkur8s5b25LOiHhizpgLgs6IKELOeWqyzkuqYs" \
        "6KOULOaEjyzmr4Us5b+GLOS5iSznm4os5rqiLOivoyzorq4s6LCKLOivkSzlvIIs57+" \
        "8LOe/jCznu44s6Iy1LOiNqyzlm6As5q63LOmfsyzpmLQs5ae7LOWQnyzpk7Ys5rerLO" \
        "WvhSzppa4s5bC5LOW8lSzpmpAs6KaiLOimoyzopqQs6KalLOimpizopqcs6KaoLOimq" \
        "Szopqos6KarLOimrCzopq0s6KauLOimryzoprAs6KaxLOimsizoprMs6Ka0LOimtSzo" \
        "prYs6Ka3LOimuCzoprks6Ka6LOimuyzoprws6Ka9LOimvizopr8s6KeALOingyzop40" \
        "s6KeTLOinlCzop5Us6KeXLOinmCzop5ks6KebLOinnSzop58s6KegLOinoSzop6Is6K" \
        "ekLOinpyzop6gs6KepLOinqizop6ws6KetLOinrizop7As6KexLOinsizop7Qs6Ke1L" \
        "Ointizop7cs6Ke4LOinuSzop7osLOinuyzop7ws6Ke9LOinvizop78s6KiBLOiogizo" \
        "qIMs6KiELOiohSzoqIYs6KiILOioiSzoqIos6KiLLOiojCzoqI0s6KiOLOiojyzoqJA" \
        "s6KiRLOiokizoqJMs6KiULOiolSzoqJYs6KiXLOiomCzoqJks6KiaLOiomyzoqJws6K" \
        "idLOWNsCzoi7Es5qixLOWptCzpubAs5bqULOe8qCzojrks6JCkLOiQpSzojacs6J2HL" \
        "Oi/jizotaIs55uILOW9sSzpopYs56GsLOaYoCzlk58s5oulLOS9oyzoh4Ms55eILOW6" \
        "uCzpm40s6LiKLOibuSzlko8s5rOzLOa2jCzmsLgs5oG/LOWLhyznlKgs5bm9LOS8mCz" \
        "mgqAs5b+nLOWwpCznlLEs6YKuLOmTgCznirks5rK5LOa4uCzphYks5pyJLOWPiyzlj7" \
        "Ms5L2RLOmHiSzor7Es5Y+ILOW5vCzov4Is5rekLOS6jiznm4Is5qaGLOiZnizmhJos6" \
        "IiGLOS9mSzkv54s6YC+LOmxvCzmhIks5ridLOa4lCzpmoUs5LqILOWosSzpm6gs5LiO" \
        "LOWxvyznprks5a6HLOivrSznvr0s546JLOWfnyzoioss6YOBLOWQgSzpgYcs5Za7LOW" \
        "zqizlvqEs5oSILOassizni7Es6IKyLOiqiSzoqJ4s6KifLOiooCzoqKEs6KiiLOiooy" \
        "zoqKQs6KilLOiopizoqKcs6KioLOioqSzoqKos6KirLOiorCzoqK0s6KiuLOioryzoq" \
        "LAs6KixLOiosizoqLMs6Ki0LOiotSzoqLYs6Ki3LOiouCzoqLks6Ki6LOiouyzoqLws" \
        "6Ki9LOiovyzoqYAs6KmBLOipgizoqYMs6KmELOiphSzoqYYs6KmHLOipiSzoqYos6Km" \
        "LLOipjCzoqY0s6KmOLOipjyzoqZAs6KmRLOipkizoqZMs6KmULOiplSzoqZYs6KmXLO" \
        "ipmCzoqZks6KmaLOipmyzoqZws6KmdLOipniws6KmfLOipoCzoqaEs6KmiLOipoyzoq" \
        "aQs6KmlLOippizoqacs6KmoLOipqSzoqaos6KmrLOiprCzoqa0s6KmuLOipryzoqbAs" \
        "6KmxLOipsizoqbMs6Km0LOiptSzoqbYs6Km3LOipuCzoqbos6Km7LOipvCzoqb0s6Km" \
        "+LOipvyzoqoAs5rW0LOWvkyzoo5Us6aKELOixqyzpqa0s6bizLOa4iizlhqQs5YWDLO" \
        "WeoyzoooEs5Y6fLOaPtCzovpUs5ZutLOWRmCzlnIYs54y/LOa6kCznvJgs6L+cLOiLk" \
        "SzmhL8s5oCoLOmZoizmm7As57qmLOi2iizot4Ms6ZKlLOWysyznsqQs5pyILOaCpizp" \
        "mIUs6ICYLOS6kSzpg6cs5YyALOmZqCzlhYEs6L+QLOiVtCzphZ0s5pmVLOmftSzlrZU" \
        "s5YydLOeguCzmnYIs5qC9LOWTiSzngb4s5a6wLOi9vSzlho0s5ZyoLOWSsSzmlJIs5p" \
        "qCLOi1nizotYMs6ISPLOiRrCzpga0s57OfLOWHvyzol7ss5p6jLOaXqSzmvqEs6JqkL" \
        "Oi6gSzlmaos6YCgLOeagizngbYs54elLOi0oyzmi6ks5YiZLOazvSzotLws5oCOLOWi" \
        "nizmho4s5pu+LOi1oCzmiY4s5ZazLOa4oyzmnK0s6L2nLOiqgSzoqoIs6KqDLOiqhCz" \
        "oqoUs6KqGLOiqhyzoqogs6KqLLOiqjCzoqo0s6KqOLOiqjyzoqpAs6KqRLOiqkizoqp" \
        "Qs6KqVLOiqlizoqpcs6KqYLOiqmSzoqpos6KqbLOiqnCzoqp0s6KqeLOiqnyzoqqAs6" \
        "KqhLOiqoizoqqMs6KqkLOiqpSzoqqYs6KqnLOiqqCzoqqks6KqqLOiqqyzoqqws6Kqt" \
        "LOiqrizoqq8s6KqwLOiqsSzoqrIs6KqzLOiqtCzoqrUs6Kq2LOiqtyzoqrgs6Kq5LOi" \
        "quizoqrss6Kq8LOiqvSzoqr4s6Kq/LOirgCzoq4Es6KuCLCzoq4Ms6KuELOirhSzoq4" \
        "Ys6KuHLOiriCzoq4ks6KuKLOiriyzoq4ws6KuNLOirjizoq48s6KuQLOirkSzoq5Is6" \
        "KuTLOirlCzoq5Us6KuWLOirlyzoq5gs6KuZLOirmizoq5ss6KucLOirnSzoq54s6Kuf" \
        "LOiroCzoq6Es6KuiLOiroyzpk6Es6Ze4LOecqCzmoIUs5qaoLOWSiyzkuY0s54K4LOi" \
        "viCzmkZgs5paLLOWuhSznqoQs5YC6LOWvqCznnrss5q+hLOipuSznspgs5rK+LOebjy" \
        "zmlqks6L6XLOW0rSzlsZUs6Ji4LOagiCzljaAs5oiYLOermSzmuZss57u9LOaonyznq" \
        "6As5b2wLOa8syzlvKAs5o6MLOa2qCzmnZYs5LiILOW4kCzotKYs5LuXLOiDgCznmLQs" \
        "6ZqcLOaLmyzmmK0s5om+LOayvCzotbUs54WnLOe9qSzlhYYs6IKHLOWPrCzpga4s5oq" \
        "YLOWTsizom7As6L6ZLOiAhSzplJcs6JSXLOi/mSzmtZks54+NLOaWnyznnJ8s55SELO" \
        "egpyzoh7ss6LSeLOmSiCzkvqYs5p6VLOeWuSzor4os6ZyHLOaMryzplYcs6Zi1LOiSu" \
        "CzmjKMs552BLOW+gSzni7As5LqJLOaAlCzmlbQs5ouvLOatoyzmlL8s6KukLOirpSzo" \
        "q6Ys6KunLOirqCzoq6ks6KuqLOirqyzoq6ws6KutLOirrizoq68s6KuwLOirsSzoq7I" \
        "s6KuzLOirtCzoq7Us6Ku2LOirtyzoq7gs6Ku5LOiruizoq7ss6Ku8LOirvSzoq74s6K" \
        "u/LOisgCzorIEs6KyCLOisgyzorIQs6KyFLOishizorIgs6KyJLOisiizorIss6KyML" \
        "OisjSzorI4s6KyPLOiskCzorJEs6KySLOiskyzorJQs6KyVLOislizorJcs6KyYLOis" \
        "mSzorJos6KybLOisnCzorJ0s6KyeLOisnyzorKAs6KyhLOisoizorKMsLOispCzorKU" \
        "s6KynLOisqCzorKks6KyqLOisqyzorKws6KytLOisrizorK8s6KywLOissSzorLIs6K" \
        "yzLOistCzorLUs6Ky2LOistyzorLgs6Ky5LOisuizorLss6Ky8LOisvSzorL4s6Ky/L" \
        "OitgCzorYEs6K2CLOitgyzorYQs6K2FLOW4pyznl4cs6YORLOivgSzoip0s5p6dLOaU" \
        "ryzlkLEs6JyYLOefpSzogqIs6ISCLOaxgSzkuYss57uHLOiBjCznm7Qs5qSNLOauliz" \
        "miacs5YC8LOS+hCzlnYAs5oyHLOatoizotr4s5Y+qLOaXqCznurgs5b+XLOaMmizmjr" \
        "cs6IezLOiHtCznva4s5bicLOWzmSzliLYs5pm6LOenqSznqJos6LSoLOeCmSznl5Qs5" \
        "rueLOayuyznqpIs5LitLOebhSzlv6As6ZKfLOihtyznu4gs56eNLOiCvyzph40s5Luy" \
        "LOS8lyzoiJ8s5ZGoLOW3nizmtLIs6K+MLOeypSzovbQs6IKYLOW4mizlkpIs55qxLOW" \
        "umSzmmLws6aqkLOePoCzmoKos6JubLOacsSznjKos6K+4LOivmyzpgJAs56u5LOeDmy" \
        "znha4s5ouELOeeqSzlmLEs5Li7LOiRlyzmn7Es5YqpLOibgCzotK4s6ZO4LOetkSzor" \
        "YYs6K2HLOitiCzorYks6K2KLOitiyzorYws6K2NLOitjizorY8s6K2QLOitkSzorZIs" \
        "6K2TLOitlCzorZUs6K2WLOitlyzorZgs6K2ZLOitmizorZss6K2cLOitnSzorZ4s6K2" \
        "fLOitoCzoraEs6K2iLOitoyzoraQs6K2lLOitpyzorags6K2pLOitqizorass6K2tLO" \
        "itrizora8s6K2wLOitsSzorbIs6K2zLOittCzorbUs6K22LOittyzorbgs6K25LOitu" \
        "izorbss6K28LOitvSzorb4s6K2/LOiugCzoroEs6K6CLOiugyzoroQs6K6FLOiuhiws" \
        "6K6HLOiuiCzoroks6K6KLOiuiyzorows6K6NLOiujizoro8s6K6QLOiukSzorpIs6K6" \
        "TLOiulCzorpUs6K6WLOiulyzorpgs6K6ZLOiumizorpss6K6cLOiunSzorp4s6K6fLO" \
        "iurCzorrEs6K67LOivhyzor5As6K+qLOiwiSzosJ4s5L2PLOazqCznpZ0s6am7LOaKk" \
        "yzniKos5ou9LOS4kyznoJYs6L2sLOaSsCzotZos56+GLOahqSzluoQs6KOFLOWmhizm" \
        "kp4s5aOuLOeKtizmpI4s6ZSlLOi/vSzotZgs5Z2gLOe8gCzosIYs5YeGLOaNiSzmi5k" \
        "s5Y2TLOahjCznkKIs6IyBLOmFjCzllYQs552ALOeBvCzmtYos5YW5LOWSqCzotYQs5a" \
        "e/LOa7iyzmt4Qs5a2cLOe0qyzku5Qs57G9LOa7kyzlrZAs6IeqLOa4jSzlrZcs6ayDL" \
        "OajlSzouKos5a6XLOe7vCzmgLss57q1LOmCuSzotbAs5aWPLOaPjSznp58s6LazLOWN" \
        "kizml48s56WWLOivhSzpmLss57uELOmSuyznuoIs5Zi0LOmGiSzmnIAs572qLOWwiiz" \
        "pgbUs5pioLOW3pizkvZAs5p+eLOWBmizkvZws5Z2QLOW6pywsLCwsLOiwuCzosLks6L" \
        "C6LOiwuyzosLws6LC9LOiwvizosL8s6LGALOixgizosYMs6LGELOixhSzosYgs6LGKL" \
        "OixiyzosY0s6LGOLOixjyzosZAs6LGRLOixkizosZMs6LGULOixlizosZcs6LGYLOix" \
        "mSzosZss6LGcLOixnSzosZ4s6LGfLOixoCzosaMs6LGkLOixpSzosaYs6LGnLOixqCz" \
        "osaks6LGsLOixrSzosa4s6LGvLOixsCzosbEs6LGyLOixtCzosbUs6LG2LOixtyzosb" \
        "ss6LG8LOixvSzosb4s6LG/LOiygCzosoEs6LKDLOiyhCzosoYs6LKHLCzosogs6LKLL" \
        "OiyjSzoso4s6LKPLOiykCzospEs6LKSLOiykyzospUs6LKWLOiylyzospks6LKaLOiy" \
        "myzospws6LKdLOiynizosp8s6LKgLOiyoSzosqIs6LKjLOiypCzosqUs6LKmLOiypyz" \
        "osqgs6LKpLOiyqizosqss6LKsLOiyrSzkuo0s5LiMLOWFgCzkuJAs5bu/LOWNhSzkuJ" \
        "Us5LqYLOS4nizprLIs5a2sLOWZqSzkuKgs56a6LOS4vyzljJUs5LmHLOWkrSzniLss5" \
        "Y2uLOawkCzlm58s6IOkLOmmlyzmr5Ms552+LOm8lyzkuLYs5LqfLOm8kCzkuZws5Lmp" \
        "LOS6kyzoiogs5a2bLOWVrCzlmI8s5LuELOWOjSzljp0s5Y6jLOWOpSzljq4s6Z2lLOi" \
        "1nSzljJos5Y+1LOWMpizljK4s5Yy+LOi1nCzljaYs5Y2jLOWIgizliIgs5YiOLOWIrS" \
        "zliLMs5Yi/LOWJgCzliYws5YmeLOWJoSzliZws6JKvLOWJvSzlioIs5YqBLOWKkCzli" \
        "pMs5YaCLOe9lCzkurss5LuDLOS7iSzku4Is5LuoLOS7oSzku6ss5LueLOS8myzku7Ms" \
        "5LyiLOS9pCzku7Us5LylLOS8pyzkvIks5LyrLOS9nizkvacs5pS4LOS9mizkvZ0s6LK" \
        "uLOiyryzosrAs6LKxLOiysizosrMs6LK0LOiytSzosrYs6LK3LOiyuCzosrks6LK6LO" \
        "iyuyzosrws6LK9LOiyvizosr8s6LOALOizgSzos4Is6LODLOizhCzos4Us6LOGLOizh" \
        "yzos4gs6LOJLOiziizos4ss6LOMLOizjSzos44s6LOPLOizkCzos5Es6LOSLOizkyzo" \
        "s5Qs6LOVLOizlizos5cs6LOYLOizmSzos5os6LObLOiznCzos50s6LOeLOiznyzos6A" \
        "s6LOhLOizoizos6Ms6LOkLOizpSzos6Ys6LOnLOizqCzos6ks6LOqLOizqyzos6wsLO" \
        "izrSzos64s6LOvLOizsCzos7Es6LOyLOizsyzos7Qs6LO1LOiztizos7cs6LO4LOizu" \
        "Szos7os6LO7LOizvCzos70s6LO+LOizvyzotIAs6LSBLOi0gizotIMs6LSELOi0hSzo" \
        "tIYs6LSHLOi0iCzotIks6LSKLOi0iyzotIws6LSNLOS9nyzkvZcs5LyyLOS8vSzkvbY" \
        "s5L20LOS+kSzkvoks5L6DLOS+jyzkvb4s5L27LOS+qizkvbws5L6sLOS+lCzkv6Ys5L" \
        "+oLOS/qizkv4Us5L+aLOS/oyzkv5ws5L+RLOS/nyzkv7gs5YCpLOWBjCzkv7Ms5YCsL" \
        "OWAjyzlgK4s5YCtLOS/vizlgJws5YCMLOWApSzlgKgs5YG+LOWBgyzlgZUs5YGILOWB" \
        "jizlgaws5YG7LOWCpSzlgqcs5YKpLOWCuizlg5Ys5YSGLOWDrSzlg6ws5YOmLOWDriz" \
        "lhIcs5YSLLOS7nSzmsL0s5L2YLOS9pSzkv44s6b6gLOaxhiznsbQs5YWuLOW3vSzpu4" \
        "ks6aaYLOWGgSzlpJQs5Yu5LOWMjSzoqIcs5YyQLOWHqyzlpJks5YWVLOS6oCzlhZYs5" \
        "LqzLOihrizooqQs5Lq1LOiElCzoo5Is56aALOWstCzooIMs5764LOWGqyzlhrEs5Ya9" \
        "LOWGvCzotI4s6LSPLOi0kCzotJEs6LSSLOi0kyzotJQs6LSVLOi0lizotJcs6LSYLOi" \
        "0mSzotJos6LSbLOi0nCzotKAs6LWRLOi1kizotZcs6LWfLOi1pSzotags6LWpLOi1qi" \
        "zotaws6LWuLOi1ryzotbEs6LWyLOi1uCzotbks6LW6LOi1uyzotbws6LW9LOi1vizot" \
        "b8s6LaALOi2gizotoMs6LaGLOi2hyzotogs6LaJLOi2jCzoto0s6LaOLOi2jyzotpAs" \
        "6LaSLOi2kyzotpUs6LaWLOi2lyzotpgs6LaZLOi2mizotpss6LacLOi2nSzotp4s6La" \
        "gLOi2oSws6LaiLOi2pCzotqUs6LamLOi2pyzotqgs6LapLOi2qizotqss6LasLOi2rS" \
        "zotq4s6LavLOi2sCzotrIs6La2LOi2tyzotrks6La7LOi2vSzot4As6LeBLOi3gizot" \
        "4Us6LeHLOi3iCzot4ks6LeKLOi3jSzot5As6LeSLOi3kyzot5Qs5YeHLOWGlizlhqIs" \
        "5YalLOiuoCzorqYs6K6nLOiuqizorrQs6K61LOiutyzor4Is6K+DLOiviyzor48s6K+" \
        "OLOivkizor5Ms6K+ULOivlizor5gs6K+ZLOivnCzor58s6K+gLOivpCzor6gs6K+pLO" \
        "ivrizor7As6K+zLOivtizor7ks6K+8LOivvyzosIAs6LCCLOiwhCzosIcs6LCMLOiwj" \
        "yzosJEs6LCSLOiwlCzosJUs6LCWLOiwmSzosJss6LCYLOiwnSzosJ8s6LCgLOiwoSzo" \
        "sKUs6LCnLOiwqizosKss6LCuLOiwryzosLIs6LCzLOiwtSzosLYs5Y2pLOWNuizpmJ0" \
        "s6ZiiLOmYoSzpmLEs6ZiqLOmYvSzpmLws6ZmCLOmZiSzpmZQs6ZmfLOmZpyzpmaws6Z" \
        "myLOmZtCzpmogs6ZqNLOmalyzpmrAs6YKXLOmCmyzpgp0s6YKZLOmCrCzpgqEs6YK0L" \
        "OmCsyzpgrYs6YK6LOi3lSzot5gs6LeZLOi3nCzot6As6LehLOi3oizot6Us6LemLOi3" \
        "pyzot6ks6LetLOi3rizot7As6LexLOi3sizot7Qs6Le2LOi3vCzot74s6Le/LOi4gCz" \
        "ouIEs6LiCLOi4gyzouIQs6LiGLOi4hyzouIgs6LiLLOi4jSzouI4s6LiQLOi4kSzouJ" \
        "Is6LiTLOi4lSzouJYs6LiXLOi4mCzouJks6LiaLOi4myzouJws6LigLOi4oSzouKQs6" \
        "LilLOi4pizouKcs6LioLOi4qyzouK0s6LiwLOi4sizouLMs6Li0LOi4tizouLcs6Li4" \
        "LOi4uyzouLws6Li+LCzouL8s6LmDLOi5hSzouYYs6LmMLOi5jSzouY4s6LmPLOi5kCz" \
        "ouZMs6LmULOi5lSzouZYs6LmXLOi5mCzouZos6LmbLOi5nCzouZ0s6LmeLOi5nyzoua" \
        "As6LmhLOi5oizouaMs6LmkLOi5pSzouacs6LmoLOi5qizouass6LmuLOi5sSzpgrgs6" \
        "YKwLOmDjyzpg4Us6YK+LOmDkCzpg4Qs6YOHLOmDkyzpg6Ys6YOiLOmDnCzpg5cs6YOb" \
        "LOmDqyzpg68s6YO+LOmEhCzphKIs6YSeLOmEoyzphLEs6YSvLOmEuSzphYMs6YWGLOW" \
        "IjSzlpYIs5YqiLOWKrCzliq0s5Yq+LOWTvyzli5As5YuWLOWLsCzlj58s54euLOefjS" \
        "zlu7Qs5Ye1LOWHvCzprK8s5Y62LOW8gSznlZos5bevLOWdjCzlnqks5Z6hLOWhvizlo" \
        "rws5aOFLOWjkSzlnKks5ZysLOWcqizlnLMs5Zy5LOWcrizlnK8s5Z2cLOWcuyzlnYIs" \
        "5Z2pLOWehSzlnass5Z6GLOWdvCzlnbss5Z2oLOWdrSzlnbYs5Z2zLOWerSzlnqQs5Z6" \
        "MLOWesizln48s5Z6nLOWetCzlnpMs5Z6gLOWflSzln5gs5Z+aLOWfmSzln5Is5Z64LO" \
        "WftCzln68s5Z+4LOWfpCzln50s6LmzLOi5tSzoubcs6Lm4LOi5uSzoubos6Lm7LOi5v" \
        "Szoub4s6LqALOi6gizouoMs6LqELOi6hizouogs6LqJLOi6iizouoss6LqMLOi6jSzo" \
        "uo4s6LqRLOi6kizoupMs6LqVLOi6lizoupcs6LqYLOi6mSzoupos6LqbLOi6nSzoup8" \
        "s6LqgLOi6oSzouqIs6LqjLOi6pCzouqUs6LqmLOi6pyzouqgs6LqpLOi6qizouq0s6L" \
        "quLOi6sCzourEs6LqzLOi6tCzourUs6Lq2LOi6tyzourgs6Lq5LOi6uyzourws6Lq9L" \
        "Oi6vizour8s6LuALOi7gSzou4IsLOi7gyzou4Qs6LuFLOi7hizou4cs6LuILOi7iSzo" \
        "u4os6LuLLOi7jCzou40s6LuPLOi7kCzou5Es6LuSLOi7kyzou5Qs6LuVLOi7lizou5c" \
        "s6LuYLOi7mSzou5os6LubLOi7nCzou50s6LueLOi7nyzou6As6LuhLOi7oizou6Ms6L" \
        "ukLOWgiyzloI0s5Z+9LOWfrSzloIAs5aCeLOWgmSzloYQs5aCgLOWhpSzloaws5aKBL" \
        "OWiiSzlopos5aKALOmmqCzpvJks5oe/LOiJuSzoib0s6Im/LOiKjyzoioos6IqoLOiK" \
        "hCzoio4s6IqRLOiKlyzoipks6IqrLOiKuCzoir4s6IqwLOiLiCzoi4os6IujLOiKmCz" \
        "oircs6IquLOiLiyzoi4ws6IuBLOiKqSzoirQs6IqhLOiKqizoip8s6IuELOiLjizoiq" \
        "Qs6IuhLOiMiSzoi7cs6IukLOiMjyzojIcs6IucLOiLtCzoi5Is6IuYLOiMjCzoi7ss6" \
        "IuTLOiMkSzojJos6IyGLOiMlCzojJUs6IugLOiLlSzojJws6I2RLOiNmyzojZws6IyI" \
        "LOiOkizojLws6Iy0LOiMsSzojpss6I2eLOiMryzojY8s6I2HLOiNgyzojZ8s6I2ALOi" \
        "MlyzojaAs6IytLOiMuizojLMs6I2mLOiNpSzou6Us6LumLOi7pyzou6gs6LupLOi7qi" \
        "zou6ss6LusLOi7rSzou64s6LuvLOi7sCzou7Es6LuyLOi7syzou7Qs6Lu1LOi7tizou" \
        "7cs6Lu4LOi7uSzou7os6Lu7LOi7vCzou70s6Lu+LOi7vyzovIAs6LyBLOi8gizovIMs" \
        "6LyELOi8hSzovIYs6LyHLOi8iCzovIks6LyKLOi8iyzovIws6LyNLOi8jizovI8s6Ly" \
        "QLOi8kSzovJIs6LyTLOi8lCzovJUs6LyWLOi8lyzovJgs6LyZLOi8mizovJss6LycLO" \
        "i8nSzovJ4s6LyfLOi8oCzovKEs6LyiLOi8oyws6LykLOi8pSzovKYs6LynLOi8qCzov" \
        "Kks6LyqLOi8qyzovKws6LytLOi8rizovK8s6LywLOi8sSzovLIs6LyzLOi8tCzovLUs" \
        "6Ly2LOi8tyzovLgs6Ly5LOi8uizovLss6Ly8LOi8vSzovL4s6Ly/LOi9gCzovYEs6L2" \
        "CLOi9gyzovYQs6I2oLOiMmyzojaks6I2sLOiNqizoja0s6I2uLOiOsCzojbgs6I6zLO" \
        "iOtCzojqAs6I6qLOiOkyzojpws6I6FLOiNvCzojrYs6I6pLOiNvSzojrgs6I27LOiOm" \
        "Czojp4s6I6oLOiOuizojrws6I+BLOiQgSzoj6Us6I+YLOWghyzokJgs6JCLLOiPnSzo" \
        "j70s6I+WLOiQnCzokLgs6JCRLOiQhizoj5Qs6I+fLOiQjyzokIMs6I+4LOiPuSzoj6o" \
        "s6I+FLOiPgCzokKYs6I+wLOiPoSzokZws6JGRLOiRmizokZks6JGzLOiShyzokogs6J" \
        "G6LOiSiSzokbgs6JC8LOiRhizokaks6JG2LOiSjCzoko4s6JCxLOiRrSzok4Es6JONL" \
        "OiTkCzok6Ys6JK9LOiTkyzok4os6JK/LOiSuizok6As6JKhLOiSuSzokrQs6JKXLOiT" \
        "pSzok6Ms6JSMLOeUjSzolLgs6JOwLOiUuSzolJ8s6JS6LOi9hSzovYYs6L2HLOi9iCz" \
        "ovYks6L2KLOi9iyzovYws6L2NLOi9jizovY8s6L2QLOi9kSzovZIs6L2TLOi9lCzovZ" \
        "Us6L2WLOi9lyzovZgs6L2ZLOi9mizovZss6L2cLOi9nSzovZ4s6L2fLOi9oCzovaEs6" \
        "L2iLOi9oyzovaQs6L2lLOi9qizovoAs6L6MLOi+kizovp0s6L6gLOi+oSzovqIs6L6k" \
        "LOi+pSzovqYs6L6nLOi+qizovqws6L6tLOi+rizovq8s6L6yLOi+syzovrQs6L61LOi" \
        "+tyzovrgs6L66LOi+uyzovrws6L6/LOi/gCzov4Ms6L+GLCzov4ks6L+KLOi/iyzov4" \
        "ws6L+NLOi/jyzov5Is6L+WLOi/lyzov5os6L+gLOi/oSzov6Ms6L+nLOi/rCzov68s6" \
        "L+xLOi/sizov7Qs6L+1LOi/tizov7os6L+7LOi/vCzov74s6L+/LOmAhyzpgIgs6YCM" \
        "LOmAjizpgJMs6YCVLOmAmCzolZYs6JS7LOiTvyzok7ws6JWZLOiViCzolags6JWkLOi" \
        "Vnizolbos556iLOiVgyzolbIs6JW7LOiWpCzolqgs6JaHLOiWjyzolbks6JauLOiWnC" \
        "zoloUs6Ja5LOiWtyzolrAs6JeTLOiXgSzol5ws6Je/LOiYpyzomIUs6JipLOiYlizom" \
        "Lws5bu+LOW8iCzlpLws5aWBLOiAtyzlpZUs5aWaLOWlmCzljI8s5bCiLOWwpSzlsKws" \
        "5bC0LOaJjCzmiaos5oqfLOaKuyzmi4os5ouaLOaLlyzmi64s5oyiLOaLtizmjLks5o2" \
        "LLOaNgyzmjq0s5o+2LOaNsSzmjbos5o6OLOaOtCzmja0s5o6sLOaOiizmjaks5o6uLO" \
        "aOvCzmj7Is5o+4LOaPoCzmj78s5o+ELOaPnizmj44s5pGSLOaPhizmjr4s5pGFLOaRg" \
        "SzmkIss5pCbLOaQoCzmkIws5pCmLOaQoSzmkZ4s5pKELOaRrSzmkpYs6YCZLOmAnCzp" \
        "gKMs6YCkLOmApSzpgKcs6YCoLOmAqSzpgKos6YCrLOmArCzpgLAs6YCxLOmAsizpgLM" \
        "s6YC0LOmAtyzpgLks6YC6LOmAvSzpgL8s6YGALOmBgyzpgYUs6YGGLOmBiCzpgYks6Y" \
        "GKLOmBiyzpgYws6YGOLOmBlCzpgZUs6YGWLOmBmSzpgZos6YGcLOmBnSzpgZ4s6YGfL" \
        "OmBoCzpgaEs6YGkLOmBpizpgacs6YGpLOmBqizpgass6YGsLOmBryzpgbAs6YGxLOmB" \
        "sizpgbMs6YG2LOmBtyzpgbgs6YG5LOmBuizpgbss6YG8LOmBvizpgoEsLOmChCzpgoU" \
        "s6YKGLOmChyzpgoks6YKKLOmCjCzpgo0s6YKOLOmCjyzpgpAs6YKSLOmClCzpgpYs6Y" \
        "KYLOmCmizpgpws6YKeLOmCnyzpgqAs6YKkLOmCpSzpgqcs6YKoLOmCqSzpgqss6YKtL" \
        "OmCsizpgrcs6YK8LOmCvSzpgr8s6YOALOaRuizmkrcs5pK4LOaSmSzmkros5pOALOaT" \
        "kCzmk5cs5pOkLOaToizmlIks5pSlLOaUrizlvIss5b+SLOeUmSzlvJEs5Y2fLOWPsSz" \
        "lj70s5Y+pLOWPqCzlj7ss5ZCSLOWQlizlkIYs5ZGLLOWRkizlkZMs5ZGULOWRlizlkY" \
        "Ms5ZChLOWRlyzlkZks5ZCjLOWQsizlkoIs5ZKULOWRtyzlkbEs5ZGkLOWSmizlkpss5" \
        "ZKELOWRtizlkaYs5ZKdLOWTkCzlkq0s5ZOCLOWStCzlk5Is5ZKnLOWSpizlk5Ms5ZOU" \
        "LOWRsizlkqMs5ZOVLOWSuyzlkr8s5ZOMLOWTmSzlk5os5ZOcLOWSqSzlkqos5ZKkLOW" \
        "TnSzlk48s5ZOeLOWUmyzlk6cs5ZSgLOWTvSzllJQs5ZOzLOWUoizllKMs5ZSPLOWUkS" \
        "zllKcs5ZSqLOWVpyzllo8s5Za1LOWViSzlla0s5ZWBLOWVlSzllL8s5ZWQLOWUvCzpg" \
        "4Is6YODLOmDhizpg4gs6YOJLOmDiyzpg4ws6YONLOmDkizpg5Qs6YOVLOmDlizpg5gs" \
        "6YOZLOmDmizpg54s6YOfLOmDoCzpg6Ms6YOkLOmDpSzpg6ks6YOqLOmDrCzpg64s6YO" \
        "wLOmDsSzpg7Is6YOzLOmDtSzpg7Ys6YO3LOmDuSzpg7os6YO7LOmDvCzpg78s6YSALO" \
        "mEgSzphIMs6YSFLOmEhizphIcs6YSILOmEiSzphIos6YSLLOmEjCzphI0s6YSOLOmEj" \
        "yzphJAs6YSRLOmEkizphJMs6YSULOmElSzphJYs6YSXLOmEmCzphJos6YSbLOmEnCws" \
        "6YSdLOmEnyzphKAs6YShLOmEpCzphKUs6YSmLOmEpyzphKgs6YSpLOmEqizphKss6YS" \
        "sLOmErSzphK4s6YSwLOmEsizphLMs6YS0LOmEtSzphLYs6YS3LOmEuCzphLos6YS7LO" \
        "mEvCzphL0s6YS+LOmEvyzphYAs6YWBLOmFgizphYQs5ZS3LOWVlizllbUs5ZW2LOWVt" \
        "yzllLMs5ZSwLOWVnCzlloss5ZeSLOWWgyzllrEs5Za5LOWWiCzlloEs5ZafLOWVvizl" \
        "l5Ys5ZaRLOWVuyzll58s5Za9LOWWvizllpQs5ZaZLOWXqizll7cs5ZeJLOWYnyzll5E" \
        "s5ZerLOWXrCzll5Qs5ZemLOWXnSzll4Qs5ZevLOWXpSzll7Is5ZezLOWXjCzll40s5Z" \
        "eoLOWXtSzll6Qs6L6ULOWYnizlmIgs5ZiMLOWYgSzlmKQs5ZijLOWXvizlmIAs5ZinL" \
        "OWYrSzlmZgs5Zi5LOWZlyzlmKws5ZmNLOWZoizlmZks5ZmcLOWZjCzlmZQs5ZqGLOWZ" \
        "pCzlmbEs5ZmrLOWZuyzlmbws5ZqFLOWakyzlmq8s5ZuULOWblyzlm50s5ZuhLOWbtSz" \
        "lm6ss5Zu5LOWbvyzlnIQs5ZyKLOWciSzlnJws5biPLOW4mSzluJQs5biRLOW4sSzluL" \
        "ss5bi8LOmFhSzphYcs6YWILOmFkSzphZMs6YWULOmFlSzphZYs6YWYLOmFmSzphZss6" \
        "YWcLOmFnyzphaAs6YWmLOmFpyzphags6YWrLOmFrSzphbMs6YW6LOmFuyzphbws6YaA" \
        "LOmGgSzphoIs6YaDLOmGhCzphoYs6YaILOmGiizpho4s6YaPLOmGkyzphpQs6YaVLOm" \
        "Glizphpcs6YaYLOmGmSzphpws6YadLOmGnizphp8s6YagLOmGoSzphqQs6YalLOmGpi" \
        "zphqcs6YaoLOmGqSzphqss6YasLOmGsCzphrEs6YayLOmGsyzphrYs6Ya3LOmGuCzph" \
        "rks6Ya7LCzphrws6Ya9LOmGvizphr8s6YeALOmHgSzph4Is6YeDLOmHhCzph4Us6YeG" \
        "LOmHiCzph4ss6YeQLOmHkizph5Ms6YeULOmHlSzph5Ys6YeXLOmHmCzph5ks6YeaLOm" \
        "Hmyzph50s6YeeLOmHnyzph6As6YehLOmHoizph6Ms6YekLOmHpSzluLcs5bmELOW5lC" \
        "zluZss5bmeLOW5oSzlsows5bG6LOWyjSzlspAs5bKWLOWyiCzlspgs5bKZLOWykSzls" \
        "pos5bKcLOWytSzlsqIs5bK9LOWyrCzlsqss5bKxLOWyoyzls4Es5bK3LOWzhCzls5Is" \
        "5bOkLOWziyzls6Us5bSCLOW0gyzltKcs5bSmLOW0rizltKQs5bSeLOW0hizltJss5bW" \
        "YLOW0vizltLQs5bS9LOW1rCzltZss5bWvLOW1nSzltass5bWLLOW1iizltaks5bW0LO" \
        "W2gizltpks5badLOixsyzltrcs5beFLOW9syzlvbcs5b6CLOW+hyzlvoks5b6MLOW+l" \
        "Szlvpks5b6cLOW+qCzlvq0s5b61LOW+vCzooaIs5b2hLOeKrSznirAs54q0LOeKtyzn" \
        "irgs54uDLOeLgSzni44s54uNLOeLkizni6gs54uvLOeLqSzni7Is54u0LOeLtyznjIE" \
        "s54uzLOeMgyzni7os6YemLOmHpyzph6gs6YepLOmHqizph6ss6YesLOmHrSzph64s6Y" \
        "evLOmHsCzph7Es6YeyLOmHsyzph7Qs6Ye1LOmHtizph7cs6Ye4LOmHuSzph7os6Ye7L" \
        "OmHvCzph70s6Ye+LOmHvyzpiIAs6YiBLOmIgizpiIMs6YiELOmIhSzpiIYs6YiHLOmI" \
        "iCzpiIks6YiKLOmIiyzpiIws6YiNLOmIjizpiI8s6YiQLOmIkSzpiJIs6YiTLOmIlCz" \
        "piJUs6YiWLOmIlyzpiJgs6YiZLOmImizpiJss6YicLOmInSzpiJ4s6YifLOmIoCzpiK" \
        "Es6YiiLOmIoyzpiKQsLOmIpSzpiKYs6YinLOmIqCzpiKks6YiqLOmIqyzpiKws6YitL" \
        "OmIrizpiK8s6YiwLOmIsSzpiLIs6YizLOmItCzpiLUs6Yi2LOmItyzpiLgs6Yi5LOmI" \
        "uizpiLss6Yi8LOmIvSzpiL4s6Yi/LOmJgCzpiYEs6YmCLOmJgyzpiYQs6YmFLOeLuyz" \
        "njJcs54yTLOeMoSznjIos54yeLOeMnSznjJUs54yiLOeMuSznjKUs54ysLOeMuCznjL" \
        "Es542QLOeNjSznjZcs542gLOeNrCznja8s542+LOiImyzlpKUs6aOnLOWkpCzlpIIs6" \
        "aWjLOmlpyzppags6aWpLOmlqizppass6aWsLOmltCzppbcs6aW9LOmmgCzppoQs6aaH" \
        "LOmmiizppo0s6aaQLOmmkSzpppMs6aaULOmmlSzluoAs5bqRLOW6iyzlupYs5bqlLOW" \
        "6oCzlurks5bq1LOW6vizlurMs6LWTLOW7kizlu5Es5bubLOW7qCzlu6os6Ia6LOW/hC" \
        "zlv4ks5b+WLOW/jyzmgIMs5b+uLOaAhCzlv6Es5b+kLOW/vizmgIUs5oCGLOW/qizlv" \
        "60s5b+4LOaAmSzmgLUs5oCmLOaAmyzmgI8s5oCNLOaAqSzmgKss5oCKLOaAvyzmgKEs" \
        "5oG4LOaBuSzmgbss5oG6LOaBgizpiYYs6YmHLOmJiCzpiYks6YmKLOmJiyzpiYws6Ym" \
        "NLOmJjizpiY8s6YmQLOmJkSzpiZIs6YmTLOmJlCzpiZUs6YmWLOmJlyzpiZgs6YmZLO" \
        "mJmizpiZss6YmcLOmJnSzpiZ4s6YmfLOmJoCzpiaEs6YmiLOmJoyzpiaQs6YmlLOmJp" \
        "izpiacs6YmoLOmJqSzpiaos6YmrLOmJrCzpia0s6YmuLOmJryzpibAs6YmxLOmJsizp" \
        "ibMs6Ym1LOmJtizpibcs6Ym4LOmJuSzpibos6Ym7LOmJvCzpib0s6Ym+LOmJvyzpioA" \
        "s6YqBLOmKgizpioMs6YqELOmKhSws6YqGLOmKhyzpiogs6YqJLOmKiizpioss6YqMLO" \
        "mKjSzpio8s6YqQLOmKkSzpipIs6YqTLOmKlCzpipUs6YqWLOmKlyzpipgs6YqZLOmKm" \
        "izpipss6YqcLOmKnSzpip4s6YqfLOmKoCzpiqEs6YqiLOmKoyzpiqQs6YqlLOmKpizp" \
        "iqcs5oGqLOaBvSzmgpYs5oKaLOaCrSzmgp0s5oKDLOaCkizmgows5oKbLOaDrCzmgrs" \
        "s5oKxLOaDnSzmg5gs5oOGLOaDmizmgrQs5oSgLOaEpizmhJUs5oSjLOaDtCzmhIAs5o" \
        "SOLOaEqyzmhYos5oW1LOaGrCzmhpQs5oanLOaGtyzmh5Qs5oe1LOW/nSzpmrMs6ZepL" \
        "OmXqyzpl7Es6ZezLOmXtSzpl7Ys6Ze8LOmXvizpmIMs6ZiELOmYhizpmIgs6ZiKLOmY" \
        "iyzpmIws6ZiNLOmYjyzpmJIs6ZiVLOmYlizpmJcs6ZiZLOmYmizkuKws54i/LOaIlSz" \
        "msLUs5rGULOaxnCzmsYos5rKjLOayhSzmspAs5rKULOayjCzmsags5rGpLOaxtCzmsb" \
        "Ys5rKGLOayqSzms5As5rOULOayrSzms7cs5rO4LOazsSzms5cs5rKyLOazoCzms5Ys5" \
        "rO6LOazqyzms64s5rKxLOazkyzms68s5rO+LOmKqCzpiqks6YqqLOmKqyzpiqws6Yqt" \
        "LOmKryzpirAs6YqxLOmKsizpirMs6Yq0LOmKtSzpirYs6Yq3LOmKuCzpirks6Yq6LOm" \
        "Kuyzpirws6Yq9LOmKvizpir8s6YuALOmLgSzpi4Is6YuDLOmLhCzpi4Us6YuGLOmLhy" \
        "zpi4ks6YuKLOmLiyzpi4ws6YuNLOmLjizpi48s6YuQLOmLkSzpi5Is6YuTLOmLlCzpi" \
        "5Us6YuWLOmLlyzpi5gs6YuZLOmLmizpi5ss6YucLOmLnSzpi54s6YufLOmLoCzpi6Es" \
        "6YuiLOmLoyzpi6Qs6YulLOmLpizpi6cs6YuoLCzpi6ks6YuqLOmLqyzpi6ws6YutLOm" \
        "Lrizpi68s6YuwLOmLsSzpi7Is6YuzLOmLtCzpi7Us6Yu2LOmLtyzpi7gs6Yu5LOmLui" \
        "zpi7ss6Yu8LOmLvSzpi74s6Yu/LOmMgCzpjIEs6YyCLOmMgyzpjIQs6YyFLOmMhizpj" \
        "Ics6YyILOmMiSzmtLks5rSnLOa0jCzmtYMs5rWILOa0hyzmtIQs5rSZLOa0jizmtKss" \
        "5rWNLOa0rizmtLUs5rSaLOa1jyzmtZIs5rWULOa0syzmtpEs5rWvLOa2nizmtqAs5rW" \
        "eLOa2kyzmtpQs5rWcLOa1oCzmtbws5rWjLOa4mizmt4cs5reFLOa3nizmuI4s5ra/LO" \
        "a3oCzmuJEs5remLOa3nSzmt5ks5riWLOa2qyzmuIws5rauLOa4qyzmua4s5rmOLOa5q" \
        "yzmurIs5rmfLOa6hizmuZMs5rmULOa4sizmuKUs5rmELOa7nyzmurEs5rqYLOa7oCzm" \
        "vK0s5ruiLOa6pSzmuqcs5rq9LOa6uyzmurcs5ruXLOa6tCzmu48s5rqPLOa7gizmup8" \
        "s5r2iLOa9hizmvYcs5rykLOa8lSzmu7ks5ryvLOa8tizmvYss5r20LOa8qizmvIks5r" \
        "ypLOa+iSzmvo0s5r6MLOa9uCzmvbIs5r28LOa9uizmv5Es6YyKLOmMiyzpjIws6YyNL" \
        "OmMjizpjI8s6YyQLOmMkSzpjJIs6YyTLOmMlCzpjJUs6YyWLOmMlyzpjJgs6YyZLOmM" \
        "mizpjJss6YycLOmMnSzpjJ4s6YyfLOmMoCzpjKEs6YyiLOmMoyzpjKQs6YylLOmMpiz" \
        "pjKcs6YyoLOmMqSzpjKos6YyrLOmMrCzpjK0s6YyuLOmMryzpjLAs6YyxLOmMsizpjL" \
        "Ms6Yy0LOmMtSzpjLYs6Yy3LOmMuCzpjLks6Yy6LOmMuyzpjLws6Yy9LOmMvyzpjYAs6" \
        "Y2BLOmNgizpjYMs6Y2ELOmNhSzpjYYs6Y2HLOmNiCzpjYksLOmNiizpjYss6Y2MLOmN" \
        "jSzpjY4s6Y2PLOmNkCzpjZEs6Y2SLOmNkyzpjZQs6Y2VLOmNlizpjZcs6Y2YLOmNmSz" \
        "pjZos6Y2bLOmNnCzpjZ0s6Y2eLOmNnyzpjaAs6Y2hLOmNoizpjaMs6Y2kLOmNpSzpja" \
        "Ys6Y2nLOmNqCzpjaks6Y2rLOa/iSzmvqcs5r65LOa+tizmv4Is5r+hLOa/rizmv54s5" \
        "r+gLOa/ryzngJos54CjLOeAmyzngLks54C1LOeBjyzngZ4s5a6ALOWuhCzlrpUs5a6T" \
        "LOWupSzlrrgs55SvLOmqnizmkLQs5a+kLOWvrizopLAs5a+wLOi5hyzorIcs6L62LOi" \
        "/kyzov5Us6L+lLOi/rizov6Qs6L+pLOi/pizov7Ms6L+oLOmAhSzpgIQs6YCLLOmApi" \
        "zpgJEs6YCNLOmAlizpgKEs6YC1LOmAtizpgK0s6YCvLOmBhCzpgZEs6YGSLOmBkCzpg" \
        "ags6YGYLOmBoizpgZss5pq5LOmBtCzpgb0s6YKCLOmCiCzpgoMs6YKLLOW9kCzlvZcs" \
        "5b2WLOW9mCzlsLss5ZKrLOWxkCzlsZks5a2xLOWxoyzlsaYs5768LOW8qizlvKks5by" \
        "tLOiJtCzlvLws6ay7LOWxrizlpoEs5aaDLOWmjSzlpqks5aaqLOWmoyzpjaws6Y2tLO" \
        "mNrizpja8s6Y2wLOmNsSzpjbIs6Y2zLOmNtCzpjbUs6Y22LOmNtyzpjbgs6Y25LOmNu" \
        "izpjbss6Y28LOmNvSzpjb4s6Y2/LOmOgCzpjoEs6Y6CLOmOgyzpjoQs6Y6FLOmOhizp" \
        "jocs6Y6ILOmOiSzpjoos6Y6LLOmOjCzpjo0s6Y6OLOmOkCzpjpEs6Y6SLOmOkyzpjpQ" \
        "s6Y6VLOmOlizpjpcs6Y6YLOmOmSzpjpos6Y6bLOmOnCzpjp0s6Y6eLOmOnyzpjqAs6Y" \
        "6hLOmOoizpjqMs6Y6kLOmOpSzpjqYs6Y6nLOmOqCzpjqks6Y6qLOmOqyws6Y6sLOmOr" \
        "Szpjq4s6Y6vLOmOsCzpjrEs6Y6yLOmOsyzpjrQs6Y61LOmOtizpjrcs6Y64LOmOuSzp" \
        "jros6Y67LOmOvCzpjr0s6Y6+LOmOvyzpj4As6Y+BLOmPgizpj4Ms6Y+ELOmPhSzpj4Y" \
        "s6Y+HLOmPiCzpj4ks6Y+LLOmPjCzpj40s5aaXLOWniizlpqss5aaeLOWmpCzlp5Is5a" \
        "ayLOWmryzlp5cs5aa+LOWohSzlqIYs5aedLOWoiCzlp6Ms5aeYLOWnuSzlqIws5aiJL" \
        "OWosizlqLQs5aiRLOWooyzlqJMs5amALOWppyzlqYos5amVLOWovCzlqaIs5am1LOiD" \
        "rCzlqqos5aqbLOWptyzlqbos5aq+LOWrqyzlqrIs5auSLOWrlCzlqrgs5augLOWroyz" \
        "lq7Es5auWLOWrpizlq5gs5aucLOWsiSzlrJcs5ayWLOWssizlrLcs5a2ALOWwlSzlsJ" \
        "ws5a2aLOWtpSzlrbMs5a2RLOWtkyzlraIs6am1LOmptyzpqbgs6am6LOmpvyzpqb0s6" \
        "aqALOmqgSzpqoUs6aqILOmqiizpqpAs6aqSLOmqkyzpqpYs6aqYLOmqmyzpqpws6aqd" \
        "LOmqnyzpqqAs6aqiLOmqoyzpqqUs6aqnLOe6nyznuqEs57qjLOe6pSznuqgs57qpLOm" \
        "Pjizpj48s6Y+QLOmPkSzpj5Is6Y+TLOmPlCzpj5Us6Y+XLOmPmCzpj5ks6Y+aLOmPmy" \
        "zpj5ws6Y+dLOmPnizpj58s6Y+gLOmPoSzpj6Is6Y+jLOmPpCzpj6Us6Y+mLOmPpyzpj" \
        "6gs6Y+pLOmPqizpj6ss6Y+sLOmPrSzpj64s6Y+vLOmPsCzpj7Es6Y+yLOmPsyzpj7Qs" \
        "6Y+1LOmPtizpj7cs6Y+4LOmPuSzpj7os6Y+7LOmPvCzpj70s6Y++LOmPvyzpkIAs6ZC" \
        "BLOmQgizpkIMs6ZCELOmQhSzpkIYs6ZCHLOmQiCzpkIks6ZCKLOmQiyzpkIws6ZCNLC" \
        "zpkI4s6ZCPLOmQkCzpkJEs6ZCSLOmQkyzpkJQs6ZCVLOmQlizpkJcs6ZCYLOmQmSzpk" \
        "Jos6ZCbLOmQnCzpkJ0s6ZCeLOmQnyzpkKAs6ZChLOmQoizpkKMs6ZCkLOmQpSzpkKYs" \
        "6ZCnLOmQqCzpkKks6ZCqLOmQqyzpkKws6ZCtLOmQriznuq0s57qwLOe6viznu4As57u" \
        "BLOe7giznu4ks57uLLOe7jCznu5As57uULOe7lyznu5ss57ugLOe7oSznu6gs57urLO" \
        "e7riznu68s57uxLOe7siznvI0s57u2LOe7uiznu7ss57u+LOe8gSznvIIs57yDLOe8h" \
        "yznvIgs57yLLOe8jCznvI8s57yRLOe8kiznvJcs57yZLOe8nCznvJss57yfLOe8oSzn" \
        "vKIs57yjLOe8pCznvKUs57ymLOe8pyznvKos57yrLOe8rCznvK0s57yvLOe8sCznvLE" \
        "s57yyLOe8syznvLUs5bm6LOeVvyzlt5ss55S+LOmClSznjo4s546RLOeOriznjqIs54" \
        "6fLOePjyznj4Is54+RLOeOtyznjrMs54+ALOePiSznj4gs54+lLOePmSzpobws55CKL" \
        "OePqSznj6cs54+eLOeOuiznj7Is55CPLOeQqiznkZss55CmLOeQpSznkKgs55CwLOeQ" \
        "riznkKws6ZCvLOmQsCzpkLEs6ZCyLOmQsyzpkLQs6ZC1LOmQtizpkLcs6ZC4LOmQuSz" \
        "pkLos6ZC7LOmQvCzpkL0s6ZC/LOmRgCzpkYEs6ZGCLOmRgyzpkYQs6ZGFLOmRhizpkY" \
        "cs6ZGILOmRiSzpkYos6ZGLLOmRjCzpkY0s6ZGOLOmRjyzpkZAs6ZGRLOmRkizpkZMs6" \
        "ZGULOmRlSzpkZYs6ZGXLOmRmCzpkZks6ZGaLOmRmyzpkZws6ZGdLOmRnizpkZ8s6ZGg" \
        "LOmRoSzpkaIs6ZGjLOmRpCzpkaUs6ZGmLOmRpyzpkags6ZGpLOmRqizpkaws6ZGtLOm" \
        "Rrizpka8sLOmRsCzpkbEs6ZGyLOmRsyzpkbQs6ZG1LOmRtizpkbcs6ZG4LOmRuSzpkb" \
        "os6ZG7LOmRvCzpkb0s6ZG+LOmRvyzpkoAs6ZKBLOmSgizpkoMs6ZKELOmSkSzpkpYs6" \
        "ZKYLOmThyzpk48s6ZOTLOmTlCzpk5os6ZOmLOmTuyzplJws6ZSgLOeQmyznkJos55GB" \
        "LOeRnCznkZcs55GVLOeRmSznkbcs55GtLOeRviznkpws55KOLOeSgCznkoEs55KHLOe" \
        "Siyznkp4s55KoLOeSqSznkpAs55KnLOeTkiznkros6Z+qLOmfqyzpn6ws5p2MLOadky" \
        "zmnZ4s5p2ILOadqSzmnqUs5p6HLOadqizmnbMs5p6YLOaepyzmnbUs5p6oLOaenizmn" \
        "q0s5p6LLOadtyzmnbws5p+wLOagiSzmn5gs5qCKLOafqSzmnrAs5qCMLOafmSzmnrUs" \
        "5p+aLOaesyzmn50s5qCALOafgyzmnrgs5p+iLOagjizmn4Es5p+9LOagsizmoLMs5qG" \
        "gLOahoSzmoY4s5qGiLOahhCzmoaQs5qKDLOagnSzmoZUs5qGmLOahgSzmoacs5qGALO" \
        "agvizmoYos5qGJLOagqSzmorUs5qKPLOahtCzmobcs5qKTLOahqyzmo4Is5qWuLOajv" \
        "CzmpJ8s5qSgLOajuSzplKcs6ZSzLOmUvSzplYMs6ZWILOmViyzplZUs6ZWaLOmVoCzp" \
        "la4s6ZW0LOmVtSzplbcs6ZW4LOmVuSzplbos6ZW7LOmVvCzplb0s6ZW+LOmWgCzploE" \
        "s6ZaCLOmWgyzploQs6ZaFLOmWhizplocs6ZaILOmWiSzploos6ZaLLOmWjCzplo0s6Z" \
        "aOLOmWjyzplpAs6ZaRLOmWkizplpMs6ZaULOmWlSzplpYs6ZaXLOmWmCzplpks6ZaaL" \
        "OmWmyzplpws6ZadLOmWnizplp8s6ZagLOmWoSzplqIs6ZajLOmWpCzplqUs6ZamLOmW" \
        "pyzplqgs6ZapLOmWqiws6ZarLOmWrCzplq0s6ZauLOmWryzplrAs6ZaxLOmWsizplrM" \
        "s6Za0LOmWtSzplrYs6Za3LOmWuCzplrks6Za6LOmWuyzplrws6Za9LOmWvizplr8s6Z" \
        "eALOmXgSzpl4Is6ZeDLOmXhCzpl4Us6ZeGLOmXhyzpl4gs6ZeJLOmXiizpl4ss5qSkL" \
        "OajsCzmpIss5qSBLOallyzmo6Ms5qSQLOalsSzmpLks5qWgLOalgizmpZ0s5qaELOal" \
        "qyzmpoAs5qaYLOaluCzmpLQs5qeMLOamhyzmpogs5qeOLOamiSzmpaYs5qWjLOaluSz" \
        "mppss5qanLOamuyzmpqss5qatLOanlCzmprEs5qeBLOaniizmp58s5qaVLOanoCzmpo" \
        "0s5qe/LOaoryzmp60s5qiXLOaomCzmqaUs5qeyLOaphCzmqL4s5qqgLOapkCzmqZss5" \
        "qi1LOaqjizmqbks5qi9LOaoqCzmqZgs5qm8LOaqkSzmqpAs5qqpLOaqlyzmqqss54y3" \
        "LOeNkizmroEs5q6CLOauhyzmroQs5q6SLOaukyzmro0s5q6aLOaumyzmrqEs5q6qLOi" \
        "9qyzova0s6L2xLOi9sizovbMs6L21LOi9tizovbgs6L23LOi9uSzovbos6L28LOi9vi" \
        "zovoEs6L6CLOi+hCzovocs6L6LLOmXjCzpl40s6ZeOLOmXjyzpl5As6ZeRLOmXkizpl" \
        "5Ms6ZeULOmXlSzpl5Ys6ZeXLOmXmCzpl5ks6ZeaLOmXmyzpl5ws6ZedLOmXnizpl58s" \
        "6ZegLOmXoSzpl6Is6ZejLOmXpCzpl6Us6ZemLOmXpyzpl6ws6Ze/LOmYhyzpmJMs6Zi" \
        "YLOmYmyzpmJ4s6ZigLOmYoyzpmKQs6ZilLOmYpizpmKcs6ZioLOmYqSzpmKss6ZisLO" \
        "mYrSzpmK8s6ZiwLOmYtyzpmLgs6Zi5LOmYuizpmL4s6ZmBLOmZgyzpmYos6ZmOLOmZj" \
        "yzpmZEs6ZmSLOmZkyzpmZYs6ZmXLCzpmZgs6ZmZLOmZmizpmZws6ZmdLOmZnizpmaAs" \
        "6ZmjLOmZpSzpmaYs6ZmrLOmZrSzpma4s6ZmvLOmZsCzpmbEs6ZmzLOmZuCzpmbks6Zm" \
        "6LOmZuyzpmbws6Zm9LOmZvizpmb8s6ZqALOmagSzpmoIs6ZqDLOmahCzpmocs6ZqJLO" \
        "maiizovo0s6L6OLOi+jyzovpgs6L6aLOi7jizmiIss5oiXLOaImyzmiJ8s5oiiLOaIo" \
        "SzmiKUs5oikLOaIrCzoh6cs55OvLOeTtCznk78s55SPLOeUkSznlJMs5pS0LOaXrizm" \
        "l68s5pewLOaYiizmmJks5p2yLOaYgyzmmJUs5piALOeChSzmm7cs5pidLOaYtCzmmLE" \
        "s5pi2LOaYtSzogIYs5pmfLOaZlCzmmYEs5pmPLOaZlizmmaEs5pmXLOaZtyzmmoQs5p" \
        "qMLOaapyzmmp0s5pq+LOabmyzmm5ws5pumLOabqSzotLIs6LSzLOi0tizotLss6LS9L" \
        "Oi1gCzotYUs6LWGLOi1iCzotYks6LWHLOi1jSzotZUs6LWZLOinhyzop4os6KeLLOin" \
        "jCzop44s6KePLOinkCzop5Es54muLOeKnyzniZ0s54mmLOeJryznib4s54m/LOeKhCz" \
        "nioss54qNLOeKjyznipIs5oyILOaMsizmjrAs6ZqMLOmajizpmpEs6ZqSLOmakyzpmp" \
        "Us6ZqWLOmamizpmpss6ZqdLOmanizpmp8s6ZqgLOmaoSzpmqIs6ZqjLOmapCzpmqUs6" \
        "ZqmLOmaqCzpmqks6ZqqLOmaqyzpmqws6ZqtLOmarizpmq8s6ZqxLOmasizpmrQs6Zq1" \
        "LOmatyzpmrgs6Zq6LOmauyzpmr8s6ZuCLOmbgyzpm4gs6ZuKLOmbiyzpm5As6ZuRLOm" \
        "bkyzpm5Qs6ZuWLOmblyzpm5gs6ZuZLOmbmizpm5ss6ZucLOmbnSzpm54s6ZufLOmboS" \
        "zpm6Is6ZujLOmbpCzpm6Us6ZumLOmbpyzpm6ssLOmbrCzpm60s6ZuuLOmbsCzpm7Es6" \
        "ZuyLOmbtCzpm7Us6Zu4LOmbuizpm7ss6Zu8LOmbvSzpm78s6ZyCLOmcgyzpnIUs6ZyK" \
        "LOmciyzpnIws6ZyQLOmckSzpnJIs6ZyULOmclSzpnJcs6ZyYLOmcmSzpnJos6ZybLOm" \
        "cnSzpnJ8s6ZygLOaQvyzmk5gs6ICELOavqizmr7Ms5q+9LOavtSzmr7ks5rCFLOawhy" \
        "zmsIYs5rCNLOawlSzmsJgs5rCZLOawmizmsKEs5rCpLOawpCzmsKos5rCyLOaUtSzml" \
        "ZUs5pWrLOeJjSzniZIs54mWLOeIsCzomaIs5YiWLOiCnyzogpws6IKTLOiCvCzmnIos" \
        "6IK9LOiCsSzogqss6IKtLOiCtCzogrcs6IOnLOiDqCzog6ks6IOqLOiDmyzog4Is6IO" \
        "ELOiDmSzog40s6IOXLOackCzog50s6IOrLOiDsSzog7Qs6IOtLOiEjSzohI4s6IOyLO" \
        "iDvCzmnJUs6ISSLOixmizohLYs6ISeLOiErCzohJgs6ISyLOiFiCzohYws6IWTLOiFt" \
        "CzohZks6IWaLOiFsSzohaAs6IWpLOiFvCzohb0s6IWtLOiFpyzloY0s5aq1LOiGiCzo" \
        "hoIs6IaRLOa7lSzohqMs6IaqLOiHjCzmnKYs6IeKLOiGuyzpnKEs6ZyiLOmcoyzpnKQ" \
        "s6ZylLOmcpizpnKcs6ZyoLOmcqSzpnKss6ZysLOmcrizpnK8s6ZyxLOmcsyzpnLQs6Z" \
        "y1LOmctizpnLcs6Zy6LOmcuyzpnLws6Zy9LOmcvyzpnYAs6Z2BLOmdgizpnYMs6Z2EL" \
        "OmdhSzpnYYs6Z2HLOmdiCzpnYks6Z2KLOmdiyzpnYws6Z2NLOmdjizpnY8s6Z2QLOmd" \
        "kSzpnZQs6Z2VLOmdlyzpnZgs6Z2aLOmdnCzpnZ0s6Z2fLOmdoyzpnaQs6Z2mLOmdpyz" \
        "pnags6Z2qLOmdqyzpnaws6Z2tLOmdrizpna8s6Z2wLOmdsSws6Z2yLOmdtSzpnbcs6Z" \
        "24LOmduSzpnbos6Z27LOmdvSzpnb4s6Z2/LOmegCzpnoEs6Z6CLOmegyzpnoQs6Z6GL" \
        "Omehyzpnogs6Z6JLOmeiizpnows6Z6OLOmejyzpnpAs6Z6TLOmelSzpnpYs6Z6XLOme" \
        "mSzpnpos6Z6bLOmenCzpnp0s6IeBLOiGpizmrKQs5qy3LOasuSzmrYMs5q2GLOatmSz" \
        "po5Es6aOSLOmjkyzpo5Us6aOZLOmjmizmrrMs5b2ALOavgizop7Ms5paQLOm9kSzmlp" \
        "Ms5pa8LOaXhizml4Qs5peDLOaXjCzml44s5peSLOaXlizngoAs54KcLOeClizngp0s5" \
        "4K7LOeDgCzngrcs54KrLOeCsSzng6gs54OKLOeEkCznhJMs54SWLOeEryznhLEs54Wz" \
        "LOeFnCznhags54WFLOeFsiznhYos54W4LOeFuiznhpgs54azLOeGtSznhqgs54agLOe" \
        "HoCznh5Qs54enLOeHuSzniJ0s54ioLOeBrCznhJgs54WmLOeGuSzmiL4s5oi9LOaJgy" \
        "zmiYgs5omJLOekuyznpYAs56WGLOeliSznpZss56WcLOelkyznpZos56WiLOellyznp" \
        "aAs56WvLOelpyznpbos56aFLOemiiznppos56anLOemsyzlv5Es5b+QLOmenizpnp8s" \
        "6Z6hLOmeoizpnqQs6Z6lLOmepizpnqcs6Z6oLOmeqSzpnqos6Z6sLOmerizpnrAs6Z6" \
        "xLOmesyzpnrUs6Z62LOmetyzpnrgs6Z65LOmeuizpnrss6Z68LOmevSzpnr4s6Z6/LO" \
        "mfgCzpn4Es6Z+CLOmfgyzpn4Qs6Z+FLOmfhizpn4cs6Z+ILOmfiSzpn4os6Z+LLOmfj" \
        "Czpn40s6Z+OLOmfjyzpn5As6Z+RLOmfkizpn5Ms6Z+ULOmflSzpn5Ys6Z+XLOmfmCzp" \
        "n5ks6Z+aLOmfmyzpn5ws6Z+dLOmfnizpn58s6Z+gLOmfoSzpn6Is6Z+jLCzpn6Qs6Z+" \
        "lLOmfqCzpn64s6Z+vLOmfsCzpn7Es6Z+yLOmftCzpn7cs6Z+4LOmfuSzpn7os6Z+7LO" \
        "mfvCzpn70s6Z++LOmfvyzpoIAs6aCBLOmggizpoIMs6aCELOmghSzpoIYs6aCHLOmgi" \
        "CzpoIks6aCKLOmgiyzpoIws6aCNLOmgjizmgLws5oGdLOaBmizmgacs5oGBLOaBmSzm" \
        "gaMs5oKrLOaEhizmhI0s5oWdLOaGqSzmhp0s5oeLLOaHkSzmiIYs6IKALOiBvyzmspM" \
        "s5rO2LOa3vCznn7Ys55+4LOeggCznoIks56CXLOegmCznoJEs5parLOegrSznoJws56" \
        "CdLOeguSznoLos56C7LOegnyznoLws56ClLOegrCznoKMs56CpLOehjiznoa0s56GWL" \
        "OehlyznoKYs56GQLOehhyznoYws56GqLOeimyznopMs56KaLOeihyznopws56KhLOei" \
        "oyznorIs56K5LOeipSzno5Qs56OZLOejiSzno6ws56OyLOekhSzno7Qs56STLOekpCz" \
        "npJ4s56S0LOm+myzpu7ks6bu7LOm7vCznm7Es55yELOecjSznm7ks55yHLOeciCznnJ" \
        "os55yiLOecmSznnK0s55ymLOectSznnLgs552QLOedkSznnYcs552DLOedmiznnags6" \
        "aCPLOmgkCzpoJEs6aCSLOmgkyzpoJQs6aCVLOmglizpoJcs6aCYLOmgmSzpoJos6aCb" \
        "LOmgnCzpoJ0s6aCeLOmgnyzpoKAs6aChLOmgoizpoKMs6aCkLOmgpSzpoKYs6aCnLOm" \
        "gqCzpoKks6aCqLOmgqyzpoKws6aCtLOmgrizpoK8s6aCwLOmgsSzpoLIs6aCzLOmgtC" \
        "zpoLUs6aC2LOmgtyzpoLgs6aC5LOmguizpoLss6aC8LOmgvSzpoL4s6aC/LOmhgCzpo" \
        "YEs6aGCLOmhgyzpoYQs6aGFLOmhhizpoYcs6aGILOmhiSzpoYos6aGLLOmhjCzpoY0s" \
        "LOmhjizpoY8s6aGQLOmhkSzpoZIs6aGTLOmhlCzpoZUs6aGWLOmhlyzpoZgs6aGZLOm" \
        "hmizpoZss6aGcLOmhnSzpoZ4s6aGfLOmhoCzpoaEs6aGiLOmhoyzpoaQs6aGlLOmhpi" \
        "zpoacs6aGoLOmhqSzpoaos6aGrLOmhrCzpoa0s6aGuLOedoiznnaUs552/LOeejSznn" \
        "b0s556ALOeejCznnpEs556fLOeeoCznnrAs5561LOeevSznlLos55WALOeVjiznlYss" \
        "55WILOeVmyznlbIs55W5LOeWgyznvZgs572hLOe9nyzoqYgs572oLOe9tCznvbEs572" \
        "5LOe+gSznvb4s55uNLOebpSzooLIs6ZKFLOmShizpkocs6ZKLLOmSiizpkows6ZKNLO" \
        "mSjyzpkpAs6ZKULOmSlyzpkpUs6ZKaLOmSmyzpkpws6ZKjLOmSpCzpkqss6ZKqLOmSr" \
        "Szpkqws6ZKvLOmSsCzpkrIs6ZK0LOmStizpkrcs6ZK4LOmSuSzpkros6ZK8LOmSvSzp" \
        "kr8s6ZOELOmTiCzpk4ks6ZOKLOmTiyzpk4ws6ZONLOmTjizpk5As6ZORLOmTkizpk5U" \
        "s6ZOWLOmTlyzpk5ks6ZOYLOmTmyzpk54s6ZOfLOmToCzpk6Is6ZOkLOmTpSzpk6cs6Z" \
        "OoLOmTqizpoa8s6aGwLOmhsSzpobIs6aGzLOmhtCzpooss6aKOLOmikizpopUs6aKZL" \
        "Omioyzpoqgs6aKpLOmiqizpoqss6aKsLOmirSzpoq4s6aKvLOmisCzporEs6aKyLOmi" \
        "syzporQs6aK1LOmitizporcs6aK4LOmiuSzporos6aK7LOmivCzpor0s6aK+LOmivyz" \
        "po4As6aOBLOmjgizpo4Ms6aOELOmjhSzpo4Ys6aOHLOmjiCzpo4ks6aOKLOmjiyzpo4" \
        "ws6aONLOmjjyzpo5As6aOULOmjlizpo5cs6aObLOmjnCzpo50s6aOgLOmjoSzpo6Is6" \
        "aOjLOmjpCws6aOlLOmjpizpo6ks6aOqLOmjqyzpo6ws6aOtLOmjrizpo68s6aOwLOmj" \
        "sSzpo7Is6aOzLOmjtCzpo7Us6aO2LOmjtyzpo7gs6aO5LOmjuizpo7ss6aO8LOmjvSz" \
        "po74s6aO/LOmkgCzppIEs6aSCLOmkgyzppIQs6aSFLOmkhizppIcs6ZOpLOmTqyzpk6" \
        "4s6ZOvLOmTsyzpk7Qs6ZO1LOmTtyzpk7ks6ZO8LOmTvSzpk78s6ZSDLOmUgizplIYs6" \
        "ZSHLOmUiSzplIos6ZSNLOmUjizplI8s6ZSSLOmUkyzplJQs6ZSVLOmUlizplJgs6ZSb" \
        "LOmUnSzplJ4s6ZSfLOmUoizplKos6ZSrLOmUqSzplKws6ZSxLOmUsizplLQs6ZS2LOm" \
        "UtyzplLgs6ZS8LOmUvizplL8s6ZWCLOmUtSzplYQs6ZWFLOmVhizplYks6ZWMLOmVji" \
        "zplY8s6ZWSLOmVkyzplZQs6ZWWLOmVlyzplZgs6ZWZLOmVmyzplZ4s6ZWfLOmVnSzpl" \
        "aEs6ZWiLOmVpCzplaUs6ZWmLOmVpyzplags6ZWpLOmVqizplass6ZWsLOmVryzplbEs" \
        "6ZWyLOmVsyzplLos55+nLOefrCzpm4ks56eVLOenrSznp6Ms56erLOeohizltYcs56i" \
        "DLOeogiznqJ4s56iULOmkiCzppIks6aSKLOmkiyzppIws6aSOLOmkjyzppJEs6aSSLO" \
        "mkkyzppJQs6aSVLOmklizppJcs6aSYLOmkmSzppJos6aSbLOmknCzppJ0s6aSeLOmkn" \
        "yzppKAs6aShLOmkoizppKMs6aSkLOmkpSzppKYs6aSnLOmkqCzppKks6aSqLOmkqyzp" \
        "pKws6aStLOmkryzppLAs6aSxLOmksizppLMs6aS0LOmktSzppLYs6aS3LOmkuCzppLk" \
        "s6aS6LOmkuyzppLws6aS9LOmkvizppL8s6aWALOmlgSzppYIs6aWDLOmlhCzppYUs6a" \
        "WGLOmlhyzppYgs6aWJLCzppYos6aWLLOmljCzppY0s6aWOLOmljyzppZAs6aWRLOmlk" \
        "izppZMs6aWWLOmllyzppZgs6aWZLOmlmizppZss6aWcLOmlnSzppZ4s6aWfLOmloCzp" \
        "paEs6aWiLOmlpCzppaYs6aWzLOmluCzppbks6aW7LOmlvizppoIs6aaDLOmmiSznqLk" \
        "s56i3LOepkSzpu48s6aalLOepsCznmogs55qOLOeakyznmpks55qkLOeTniznk6As55" \
        "SsLOm4oCzpuKIs6bioLOm4qSzpuKos6birLOm4rCzpuLIs6bixLOm4tizpuLgs6bi3L" \
        "Om4uSzpuLos6bi+LOm5gSzpuYIs6bmELOm5hizpuYcs6bmILOm5iSzpuYss6bmMLOm5" \
        "jizpuZEs6bmVLOm5lyzpuZos6bmbLOm5nCzpuZ4s6bmjLOm5pizpuacs6bmoLOm5qSz" \
        "puaos6bmrLOm5rCzpubEs6bmtLOm5syznlpIs55aULOeWliznlqAs55adLOeWrCznlq" \
        "Ms55azLOeWtCznlrgs55eELOeWsSznlrAs55eDLOeXgiznl5Ys55eNLOeXoyznl6gs5" \
        "5emLOeXpCznl6ss55enLOeYgyznl7Es55e8LOeXvyznmJAs55iALOeYhSznmIws55iX" \
        "LOeYiiznmKUs55iYLOeYlSznmJks6aaMLOmmjizpppos6aabLOmmnCzppp0s6aaeLOm" \
        "mnyzppqAs6aahLOmmoizppqMs6aakLOmmpizppqcs6aapLOmmqizppqss6aasLOmmrS" \
        "zppq4s6aavLOmmsCzpprEs6aayLOmmsyzpprQs6aa1LOmmtizpprcs6aa4LOmmuSzpp" \
        "ros6aa7LOmmvCzppr0s6aa+LOmmvyzpp4As6aeBLOmngizpp4Ms6aeELOmnhSzpp4Ys" \
        "6aeHLOmniCzpp4ks6aeKLOmniyzpp4ws6aeNLOmnjizpp48s6aeQLOmnkSzpp5Is6ae" \
        "TLOmnlCzpp5Us6aeWLOmnlyzpp5gsLOmnmSzpp5os6aebLOmnnCzpp50s6aeeLOmnny" \
        "zpp6As6aehLOmnoizpp6Ms6aekLOmnpSzpp6Ys6aenLOmnqCzpp6ks6aeqLOmnqyzpp" \
        "6ws6aetLOmnrizpp68s6aewLOmnsSzpp7Is6aezLOmntCzpp7Us6ae2LOmntyzpp7gs" \
        "6ae5LOeYmyznmLws55iiLOeYoCznmYAs55itLOeYsCznmL8s55i1LOeZgyznmL4s55i" \
        "zLOeZjSznmZ4s55mULOeZnCznmZYs55mrLOeZryznv4os56umLOepuCznqbks56qALO" \
        "eqhiznqogs56qVLOeqpiznqqAs56qsLOeqqCznqq0s56qzLOihpCzooaks6KGyLOihv" \
        "Szoob8s6KKCLOiioizoo4Ys6KK3LOiivCzoo4ks6KOiLOijjizoo6Ms6KOlLOijsSzo" \
        "pJos6KO8LOijqCzoo74s6KOwLOikoSzopJks6KSTLOikmyzopIos6KS0LOikqyzopLY" \
        "s6KWBLOilpizopbss55aLLOiDpSznmrIs55q0LOefnCzogJIs6ICULOiAlizogJws6I" \
        "CgLOiAoizogKUs6ICmLOiApyzogKks6ICoLOiAsSzogIss6IC1LOiBgyzogYYs6IGNL" \
        "OiBkizogaks6IGxLOimgyzpobgs6aKALOmigyzpp7os6ae7LOmnvCzpp70s6ae+LOmn" \
        "vyzpqIAs6aiBLOmogizpqIMs6aiELOmohSzpqIYs6aiHLOmoiCzpqIks6aiKLOmoiyz" \
        "pqIws6aiNLOmojizpqI8s6aiQLOmokSzpqJIs6aiTLOmolCzpqJUs6aiWLOmolyzpqJ" \
        "gs6aiZLOmomizpqJss6aicLOmonSzpqJ4s6aifLOmooCzpqKEs6aiiLOmooyzpqKQs6" \
        "ailLOmopizpqKcs6aioLOmoqSzpqKos6airLOmorCzpqK0s6aiuLOmoryzpqLAs6aix" \
        "LOmosizpqLMs6ai0LOmotSzpqLYs6ai3LOmouCws6ai5LOmouizpqLss6ai8LOmovSz" \
        "pqL4s6ai/LOmpgCzpqYEs6amCLOmpgyzpqYQs6amFLOmphizpqYcs6amILOmpiSzpqY" \
        "os6amLLOmpjCzpqY0s6amOLOmpjyzpqZAs6amRLOmpkizpqZMs6amULOmplSzpqZYs6" \
        "amXLOmpmCzpqZks6aKJLOmijCzpoo0s6aKPLOmilCzpopos6aKbLOminizpop8s6aKh" \
        "LOmioizpoqUs6aKmLOiZjSzomZQs6JmsLOiZrizomb8s6Jm6LOiZvCzombss6JqoLOi" \
        "ajSzomoss6JqsLOianSzomqcs6JqjLOiaqizompMs6JqpLOiatizom4Qs6Jq1LOibji" \
        "zomrAs6Jq6LOiasSzomq8s6JuJLOibjyzomrQs6JupLOibsSzom7Is6JutLOibsyzom" \
        "5As6JyTLOibnizom7Qs6JufLOibmCzom5Es6JyDLOichyzom7gs6JyILOiciizonI0s" \
        "6JyJLOicoyzonLss6JyeLOicpSzonK4s6JyaLOicvizonYgs6Jy0LOicsSzonKks6Jy" \
        "3LOicvyzonoIs6JyiLOidvSzonb4s6J27LOidoCzonbAs6J2MLOidrizonoss6J2TLO" \
        "idoyzonbws6J2kLOidmSzonaUs6J6TLOieryzonqgs6J+SLOmpmizpqZss6amcLOmpn" \
        "SzpqZ4s6amfLOmpoCzpqaEs6amiLOmpoyzpqaQs6amlLOmppizpqacs6amoLOmpqSzp" \
        "qaos6amrLOmpsizpqoMs6aqJLOmqjSzpqo4s6aqULOmqlSzpqpks6aqmLOmqqSzpqqo" \
        "s6aqrLOmqrCzpqq0s6aquLOmqryzpqrIs6aqzLOmqtCzpqrUs6aq5LOmquyzpqr0s6a" \
        "q+LOmqvyzpq4Ms6auELOmrhizpq4cs6auILOmriSzpq4os6auNLOmrjizpq48s6auQL" \
        "Omrkizpq5Qs6auVLOmrlizpq5cs6auZLOmrmizpq5ss6aucLCzpq50s6aueLOmroCzp" \
        "q6Is6aujLOmrpCzpq6Us6aunLOmrqCzpq6ks6auqLOmrrCzpq64s6auwLOmrsSzpq7I" \
        "s6auzLOmrtCzpq7Us6au2LOmrtyzpq7gs6au6LOmrvCzpq70s6au+LOmrvyzprIAs6a" \
        "yBLOmsgizprIQs6ayFLOmshizon4Ys6J6ILOiehSzonq0s6J6XLOiegyzonqss6J+lL" \
        "OierCzonrUs6J6zLOifiyzon5Ms6J69LOifkSzon4As6J+KLOifmyzon6os6J+gLOif" \
        "rizooJYs6KCTLOifvizooIos6KCbLOigoSzooLks6KC8LOe8tiznvYIs572ELOe9hSz" \
        "oiJAs56u6LOervSznrIgs56yDLOeshCznrJUs56yKLOesqyznrI8s562HLOesuCznrK" \
        "os56yZLOesriznrLEs56ygLOespSznrKQs56yzLOesviznrJ4s562YLOetmiznrYUs5" \
        "621LOetjCznrZ0s562gLOetriznrbss562iLOetsiznrbEs566QLOeupiznrqcs5664" \
        "LOeurCznrp0s566oLOeuhSznrqos566cLOeuoiznrqss5660LOevkSznr4Es56+MLOe" \
        "vnSznr5os56+lLOevpiznr6os57CMLOevviznr7ws57CPLOewliznsIss6ayHLOmsiS" \
        "zprIos6ayLLOmsjCzprI0s6ayOLOmskCzprJEs6aySLOmslCzprJUs6ayWLOmslyzpr" \
        "Jgs6ayZLOmsmizprJss6aycLOmsnSzprJ4s6aygLOmsoSzprKIs6aykLOmspSzprKYs" \
        "6aynLOmsqCzprKks6ayqLOmsqyzprKws6aytLOmsrizprLAs6ayxLOmssyzprLQs6ay" \
        "1LOmstizprLcs6ay4LOmsuSzprLos6ay9LOmsvizprL8s6a2ALOmthizprYos6a2LLO" \
        "mtjCzprY4s6a2QLOmtkizprZMs6a2VLOmtlizprZcs6a2YLOmtmSzprZosLOmtmyzpr" \
        "Zws6a2dLOmtnizprZ8s6a2gLOmtoSzpraIs6a2jLOmtpCzpraUs6a2mLOmtpyzprags" \
        "6a2pLOmtqizprass6a2sLOmtrSzpra4s6a2vLOmtsCzprbEs6a2yLOmtsyzprbQs6a2" \
        "1LOmttizprbcs6a24LOmtuSzprbos6a27LOewnyznsKos57CmLOewuCznsYEs57GALO" \
        "iHvizoiIEs6IiCLOiIhCzoh6ws6KGELOiIoSzoiKIs6IijLOiIrSzoiK8s6IioLOiIq" \
        "yzoiLgs6Ii7LOiIsyzoiLQs6Ii+LOiJhCzoiYks6ImLLOiJjyzoiZos6ImfLOiJqCzo" \
        "ob4s6KKFLOiiiCzoo5gs6KOfLOilniznvp0s576fLOe+pyznvq8s576wLOe+siznsbw" \
        "s5pWJLOeykSznsp0s57KcLOeyniznsqIs57KyLOeyvCznsr0s57OBLOezhyzns4ws57" \
        "ONLOeziCzns4Us57OXLOezqCzoia4s5pqoLOe+vyznv44s57+VLOe/pSznv6Es57+mL" \
        "Oe/qSznv64s57+zLOezuCzntbcs57amLOe2riznuYcs57qbLOm6uCzpurQs6LWzLOi2" \
        "hCzotpQs6LaRLOi2sSzotacs6LWtLOixhyzosYks6YWKLOmFkCzphY4s6YWPLOmFpCz" \
        "prbws6a29LOmtvizprb8s6a6ALOmugSzproIs6a6DLOmuhCzproUs6a6GLOmuhyzpro" \
        "gs6a6JLOmuiizpross6a6MLOmujSzpro4s6a6PLOmukCzprpEs6a6SLOmukyzprpQs6" \
        "a6VLOmulizprpcs6a6YLOmumSzprpos6a6bLOmunCzprp0s6a6eLOmunyzprqAs6a6h" \
        "LOmuoizprqMs6a6kLOmupSzprqYs6a6nLOmuqCzprqks6a6qLOmuqyzprqws6a6tLOm" \
        "urizprq8s6a6wLOmusSzprrIs6a6zLOmutCzprrUs6a62LOmutyzprrgs6a65LOmuui" \
        "ws6a67LOmuvCzprr0s6a6+LOmuvyzpr4As6a+BLOmvgizpr4Ms6a+ELOmvhSzpr4Ys6" \
        "a+HLOmviCzpr4ks6a+KLOmviyzpr4ws6a+NLOmvjizpr48s6a+QLOmvkSzpr5Is6a+T" \
        "LOmvlCzpr5Us6a+WLOmvlyzpr5gs6a+ZLOmvmizpr5ss6YWiLOmFoSzphbAs6YWpLOm" \
        "Fryzphb0s6YW+LOmFsizphbQs6YW5LOmGjCzphoUs6YaQLOmGjSzphpEs6YaiLOmGoy" \
        "zphqos6YatLOmGrizphq8s6Ya1LOmGtCzphros6LGVLOm5vizotrgs6LerLOi4hSzou" \
        "Zks6LmpLOi2tSzotr8s6La8LOi2uizot4Qs6LeWLOi3lyzot5os6LeeLOi3jizot48s" \
        "6LebLOi3hizot6ws6Le3LOi3uCzot6Ms6Le5LOi3uyzot6Qs6LiJLOi3vSzouJQs6Li" \
        "dLOi4nyzouKws6LiuLOi4oyzouK8s6Li6LOi5gCzouLks6Li1LOi4vSzouLEs6LmJLO" \
        "i5gSzouYIs6LmRLOi5kizouYos6LmwLOi5tizoubws6LmvLOi5tCzouoUs6LqPLOi6l" \
        "CzoupAs6LqcLOi6nizosbgs6LKCLOiyiizosoUs6LKYLOiylCzmlpss6KeWLOinnizo" \
        "p5os6KecLOmvnCzpr50s6a+eLOmvnyzpr6As6a+hLOmvoizpr6Ms6a+kLOmvpSzpr6Y" \
        "s6a+nLOmvqCzpr6ks6a+qLOmvqyzpr6ws6a+tLOmvrizpr68s6a+wLOmvsSzpr7Is6a" \
        "+zLOmvtCzpr7Us6a+2LOmvtyzpr7gs6a+5LOmvuizpr7ss6a+8LOmvvSzpr74s6a+/L" \
        "OmwgCzpsIEs6bCCLOmwgyzpsIQs6bCFLOmwhizpsIcs6bCILOmwiSzpsIos6bCLLOmw" \
        "jCzpsI0s6bCOLOmwjyzpsJAs6bCRLOmwkizpsJMs6bCULOmwlSzpsJYs6bCXLOmwmCz" \
        "psJks6bCaLCzpsJss6bCcLOmwnSzpsJ4s6bCfLOmwoCzpsKEs6bCiLOmwoyzpsKQs6b" \
        "ClLOmwpizpsKcs6bCoLOmwqSzpsKos6bCrLOmwrCzpsK0s6bCuLOmwryzpsLAs6bCxL" \
        "OmwsizpsLMs6bC0LOmwtSzpsLYs6bC3LOmwuCzpsLks6bC6LOmwuyzop6Us6KerLOin" \
        "ryzoqL4s6KymLOmdkyzpm6ks6ZuzLOmbryzpnIYs6ZyBLOmciCzpnI8s6ZyOLOmcqiz" \
        "pnK0s6ZywLOmcvizpvoAs6b6DLOm+hSzpvoYs6b6HLOm+iCzpvoks6b6KLOm+jCzpu7" \
        "4s6byLLOm8jSzpmrks6Zq8LOmavSzpm44s6ZuSLOeevyzpm6As6YqOLOmKrizpi4gs6" \
        "Yy+LOmNqizpj4os6Y6PLOmQvizpkass6bG/LOmygizpsoUs6bKGLOmyhyzpsogs56ij" \
        "LOmyiyzpso4s6bKQLOmykSzpspIs6bKULOmylSzpspos6bKbLOmynizpsp8s6bKgLOm" \
        "yoSzpsqIs6bKjLOmypSzpsqYs6bKnLOmyqCzpsqks6bKrLOmyrSzpsq4s6bKwLOmysS" \
        "zpsrIs6bKzLOmytCzpsrUs6bK2LOmytyzpsros6bK7LOmyvCzpsr0s6bOELOmzhSzps" \
        "4Ys6bOHLOmziizps4ss6bC8LOmwvSzpsL4s6bC/LOmxgCzpsYEs6bGCLOmxgyzpsYQs" \
        "6bGFLOmxhizpsYcs6bGILOmxiSzpsYos6bGLLOmxjCzpsY0s6bGOLOmxjyzpsZAs6bG" \
        "RLOmxkizpsZMs6bGULOmxlSzpsZYs6bGXLOmxmCzpsZks6bGaLOmxmyzpsZws6bGdLO" \
        "mxnizpsZ8s6bGgLOmxoSzpsaIs6bGjLOmxpCzpsaUs6bGmLOmxpyzpsags6bGpLOmxq" \
        "izpsass6bGsLOmxrSzpsa4s6bGvLOmxsCzpsbEs6bGyLOmxsyzpsbQs6bG1LOmxtizp" \
        "sbcs6bG4LOmxuSzpsbosLOmxuyzpsb0s6bG+LOmygCzpsoMs6bKELOmyiSzpsoos6bK" \
        "MLOmyjyzpspMs6bKWLOmylyzpspgs6bKZLOmynSzpsqos6bKsLOmyryzpsrks6bK+LO" \
        "myvyzps4As6bOBLOmzgizps4gs6bOJLOmzkSzps5Is6bOaLOmzmyzps6As6bOhLOmzj" \
        "Czps40s6bOOLOmzjyzps5As6bOTLOmzlCzps5Us6bOXLOmzmCzps5ks6bOcLOmznSzp" \
        "s58s6bOiLOmdvCzpnoUs6Z6RLOmekizpnpQs6Z6vLOmeqyzpnqMs6Z6yLOmetCzpqrE" \
        "s6aqwLOmqtyzpuZgs6aq2LOmquizpqrws6auBLOmrgCzpq4Us6auCLOmriyzpq4ws6a" \
        "uRLOmthSzprYMs6a2HLOmtiSzprYgs6a2NLOmtkSzpo6gs6aSNLOmkrizppZUs6aWUL" \
        "Omrnyzpq6Es6aumLOmrryzpq6ss6au7LOmrrSzpq7ks6ayILOmsjyzprJMs6ayfLOms" \
        "oyzpur0s6bq+LOe4uyzpuoIs6bqHLOm6iCzpuoss6bqSLOmPlizpup0s6bqfLOm7myz" \
        "pu5ws6budLOm7oCzpu58s6buiLOm7qSzpu6cs6bulLOm7qizpu68s6byiLOm8rCzpvK" \
        "8s6by5LOm8tyzpvL0s6by+LOm9hCzps6Ms6bOkLOmzpSzps6Ys6bOnLOmzqCzps6ks6" \
        "bOqLOmzqyzps6ws6bOtLOmzrizps68s6bOwLOmzsSzps7Is6bOzLOmztCzps7Us6bO2" \
        "LOmztyzps7gs6bO5LOmzuizps7ss6bO8LOmzvSzps74s6bO/LOm0gCzptIEs6bSCLOm" \
        "0gyzptIQs6bSFLOm0hizptIcs6bSILOm0iSzptIos6bSLLOm0jCzptI0s6bSOLOm0jy" \
        "zptJAs6bSRLOm0kizptJMs6bSULOm0lSzptJYs6bSXLOm0mCzptJks6bSaLOm0myzpt" \
        "Jws6bSdLOm0nizptJ8s6bSgLOm0oSws6bSiLOm0oyzptKQs6bSlLOm0pizptKcs6bSo" \
        "LOm0qSzptKos6bSrLOm0rCzptK0s6bSuLOm0ryzptLAs6bSxLOm0sizptLMs6bS0LOm" \
        "0tSzptLYs6bS3LOm0uCzptLks6bS6LOm0uyzptLws6bS9LOm0vizptL8s6bWALOm1gS" \
        "zptYIsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOm1" \
        "gyzptYQs6bWFLOm1hizptYcs6bWILOm1iSzptYos6bWLLOm1jCzptY0s6bWOLOm1jyz" \
        "ptZAs6bWRLOm1kizptZMs6bWULOm1lSzptZYs6bWXLOm1mCzptZks6bWaLOm1myzptZ" \
        "ws6bWdLOm1nizptZ8s6bWgLOm1oSzptaIs6bWjLOm1pCzptaUs6bWmLOm1pyzptags6" \
        "bWpLOm1qizptass6bWsLOm1rSzpta4s6bWvLOm1sCzptbEs6bWyLOm1syzptbQs6bW1" \
        "LOm1tizptbcs6bW4LOm1uSzptbos6bW7LOm1vCzptb0s6bW+LOm1vyzptoAs6baBLCz" \
        "ptoIs6baDLOm2hCzptoUs6baGLOm2hyzptogs6baJLOm2iizptoss6baMLOm2jSzpto" \
        "4s6baPLOm2kCzptpEs6baSLOm2kyzptpQs6baVLOm2lizptpcs6baYLOm2mSzptpos6" \
        "babLOm2nCzptp0s6baeLOm2nyzptqAs6bahLOm2oiwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6bajLOm2pCzptqUs6bamLOm2pyzptqgs6b" \
        "apLOm2qizptqss6basLOm2rSzptq4s6bavLOm2sCzptrEs6bayLOm2syzptrQs6ba1L" \
        "Om2tizptrcs6ba4LOm2uSzptros6ba7LOm2vCzptr0s6ba+LOm2vyzpt4As6beBLOm3" \
        "gizpt4Ms6beELOm3hSzpt4Ys6beHLOm3iCzpt4ks6beKLOm3iyzpt4ws6beNLOm3jiz" \
        "pt48s6beQLOm3kSzpt5Is6beTLOm3lCzpt5Us6beWLOm3lyzpt5gs6beZLOm3mizpt5" \
        "ss6becLOm3nSzpt54s6befLOm3oCzpt6EsLOm3oizpt6Ms6bekLOm3pSzpt6Ys6benL" \
        "Om3qCzpt6ks6beqLOm3qyzpt6ws6betLOm3rizpt68s6bewLOm3sSzpt7Is6bezLOm3" \
        "tCzpt7Us6be2LOm3tyzpt7gs6be5LOm3uizpt7ss6be8LOm3vSzpt74s6be/LOm4gCz" \
        "puIEs6biCLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CzpuIMs6biELOm4hSzpuIYs6biHLOm4iCzpuIks6biKLOm4iyzpuIws6biNLOm4jizp" \
        "uI8s6biQLOm4kSzpuJIs6biTLOm4lCzpuJUs6biWLOm4lyzpuJgs6biZLOm4mizpuJs" \
        "s6bicLOm4nSzpuJ4s6bikLOm4pyzpuK4s6biwLOm4tCzpuLss6bi8LOm5gCzpuY0s6b" \
        "mQLOm5kizpuZMs6bmULOm5lizpuZks6bmdLOm5nyzpuaAs6bmhLOm5oizpuaUs6bmuL" \
        "Om5ryzpubIs6bm0LOm5tSzpubYs6bm3LOm5uCzpubks6bm6LOm5uyzpubws6bm9LOm6" \
        "gCws6bqBLOm6gyzpuoQs6bqFLOm6hizpuoks6bqKLOm6jCzpuo0s6bqOLOm6jyzpupA" \
        "s6bqRLOm6lCzpupUs6bqWLOm6lyzpupgs6bqZLOm6mizpupss6bqcLOm6nizpuqAs6b" \
        "qhLOm6oizpuqMs6bqkLOm6pSzpuqcs6bqoLOm6qSzpuqosLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOm6qyzpuqws6bqtLOm6rizpuq8s6bq" \
        "wLOm6sSzpurIs6bqzLOm6tSzpurYs6bq3LOm6uSzpuros6bq8LOm6vyzpu4As6buBLO" \
        "m7gizpu4Ms6buFLOm7hizpu4cs6buILOm7iizpu4ss6buMLOm7kCzpu5Is6buTLOm7l" \
        "Szpu5Ys6buXLOm7mSzpu5os6bueLOm7oSzpu6Ms6bukLOm7pizpu6gs6burLOm7rCzp" \
        "u60s6buuLOm7sCzpu7Es6buyLOm7syzpu7Qs6bu1LOm7tizpu7cs6bu4LOm7uizpu70" \
        "s6bu/LOm8gCzpvIEs6byCLOm8gyzpvIQs6byFLCzpvIYs6byHLOm8iCzpvIks6byKLO" \
        "m8jCzpvI8s6byRLOm8kizpvJQs6byVLOm8lizpvJgs6byaLOm8myzpvJws6bydLOm8n" \
        "izpvJ8s6byhLOm8oyzpvKQs6bylLOm8pizpvKcs6byoLOm8qSzpvKos6byrLOm8rSzp" \
        "vK4s6bywLOm8sSwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCws6byyLOm8syzpvLQs6by1LOm8tizpvLgs6by6LOm8vCzpvL8s6b2ALOm9gSzpv" \
        "YIs6b2DLOm9hSzpvYYs6b2HLOm9iCzpvYks6b2KLOm9iyzpvYws6b2NLOm9jizpvY8s" \
        "6b2SLOm9kyzpvZQs6b2VLOm9lizpvZcs6b2YLOm9mSzpvZos6b2bLOm9nCzpvZ0s6b2" \
        "eLOm9nyzpvaAs6b2hLOm9oizpvaMs6b2kLOm9pSzpvaYs6b2nLOm9qCzpvaks6b2qLO" \
        "m9qyzpvaws6b2tLOm9rizpva8s6b2wLOm9sSzpvbIs6b2zLOm9tCzpvbUs6b22LOm9t" \
        "yzpvbgsLOm9uSzpvbos6b27LOm9vCzpvb0s6b2+LOm+gSzpvoIs6b6NLOm+jizpvo8s" \
        "6b6QLOm+kSzpvpIs6b6TLOm+lCzpvpUs6b6WLOm+lyzpvpgs6b6cLOm+nSzpvp4s6b6" \
        "hLOm+oizpvqMs6b6kLOm+pSzvpKws76W5LO+mlSzvp6cs76exLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzvqIws76iNLO+ojizvqI8s76iR" \
        "LO+okyzvqJQs76iYLO+onyzvqKAs76ihLO+ooyzvqKQs76inLO+oqCzvqKk=" \
    );
    # '}'
    return (0);
}
# }}}
# {{{ (private)::acp::build_map_949_to_u8char
# '${__pp_comment:+'
#
# cp949
#
# ANSI/OEM Korean (Unified Hangul Code)
#
# [UNICODE-MAPPING]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP949.TXT
#
# [UNICODE-BESTFIT]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit949.txt
#
# [MS-VBAL] 3.3.5.1.2 Korean Identifiers
# VBA support for identifiers containing Korean characters is based upon
# Windows Codepage 949 [UNICODE-BESTFIT]. Korean characters are encoded as
# 16 bit double byte characters with code points beginning at %x8141.
# The Unicode equivalents of Windows Codepage 949 code points are specified
# by the file bestfit949.txt provided at [UNICODE-BESTFIT]. All of the code
# points in the range %x81-FE are lead bytes that serve as the first byte
# of a 16 bit encoding of a code point.
#
# A <CP949-initial-character> MAY be any Unicode character that corresponds
# to the following Windows Codepage 949 character code points: any defined
# 16-bit code point whose lead byte is less than %xA1 or greater than %xAF;
# any defined code point, regardless of its lead byte value, whose second
# bytes is less than %xA1 or greater than %xFE; code points in the range
# %xA3C1-A3DA; code points in the range %xA3E1-A3FA; code points in the
# range %xA4A1-A4FE.
#
# A <CP949-subsequent-character> is defined identically to
# <CP949-initial-character> with the addition of code point %xA3DF and code
# points in the range %xA3B0-A3B9.
#
# '}'
function \
__acp__build_map_949_to_u8char() {
    # cp949 charactor mappings
    # '${__pp__enable_multibyte:+'
    __acp__decode_charmap(acp__S_charmap, \
        "6rCCLOqwgyzqsIUs6rCGLOqwiyzqsIws6rCNLOqwjizqsI8s6rCYLOqwnizqsJ8s6rC" \
        "hLOqwoizqsKMs6rClLOqwpizqsKcs6rCoLOqwqSzqsKos6rCrLOqwrizqsLIs6rCzLO" \
        "qwtCzqsLUs6rC2LOqwtyzqsLos6rC7LOqwvSzqsL4s6rC/LOqxgSzqsYIs6rGDLOqxh" \
        "CzqsYUs6rGGLOqxhyzqsYgs6rGJLOqxiizqsYws6rGOLOqxjyzqsZAs6rGRLOqxkizq" \
        "sZMs6rGVLOqxlizqsZcs6rGZLOqxmizqsZss6rGdLOqxnizqsZ8s6rGgLOqxoSzqsaI" \
        "s6rGjLOqxpCzqsaUs6rGmLOqxpyzqsags6rGpLOqxqizqsass6rGsLOqxrSzqsa4s6r" \
        "GvLOqxsizqsbMs6rG1LOqxtizqsbks6rG7LOqxvCzqsb0s6rG+LOqxvyzqsoIs6rKHL" \
        "OqyiCzqso0s6rKOLOqyjyzqspEs6rKSLOqykyzqspUs6rKWLOqylyzqspgs6rKZLOqy" \
        "mizqspss6rKeLOqyoizqsqMs6rKkLOqypSzqsqYs6rKnLOqyqyzqsq0s6rKuLOqysSz" \
        "qsrIs6rKzLOqytCzqsrUs6rK2LOqytyzqsros6rK+LOqyvyzqs4As6rOCLOqzgyzqs4" \
        "Us6rOGLOqzhyzqs4ks6rOKLOqziyzqs40s6rOOLOqzjyzqs5As6rORLOqzkizqs5Ms6" \
        "rOULOqzlizqs5gs6rOZLOqzmizqs5ss6rOcLOqznSzqs54s6rOfLOqzoizqs6Ms6rOl" \
        "LOqzpizqs6ks6rOrLOqzrSzqs64s6rOyLOqztCzqs7cs6rO4LOqzuSzqs7os6rO7LOq" \
        "zvizqs78s6rSBLOq0gizqtIMs6rSFLOq0hyzqtIgs6rSJLOq0iizqtIss6rSOLOq0kC" \
        "zqtJIs6rSTLOq0lCzqtJUs6rSWLOq0lyzqtJks6rSaLOq0myzqtJ0s6rSeLOq0nyzqt" \
        "KEs6rSiLOq0oyzqtKQs6rSlLOq0pizqtKcs6rSoLOq0qizqtKss6rSuLOq0ryzqtLAs" \
        "6rSxLOq0sizqtLMs6rS2LOq0tyzqtLks6rS6LOq0uyzqtL0s6rS+LOq0vyzqtYAs6rW" \
        "BLOq1gizqtYMs6rWGLOq1iCzqtYos6rWLLOq1jCzqtY0s6rWOLOq1jyzqtZEs6rWSLO" \
        "q1kyzqtZUs6rWWLOq1lyzqtZks6rWaLOq1myzqtZws6rWdLOq1nizqtZ8s6rWgLOq1o" \
        "izqtaQs6rWlLOq1pizqtacs6rWoLOq1qSzqtaos6rWrLOq1rizqta8s6rWxLOq1sizq" \
        "tbcs6rW4LOq1uSzqtbos6rW+LOq2gCzqtoMs6raELOq2hSzqtoYs6raHLOq2iizqtos" \
        "s6raNLOq2jizqto8s6raRLOq2kizqtpMs6raULOq2lSzqtpYs6raXLOq2mCzqtpks6r" \
        "aaLOq2myzqtp4s6rafLOq2oCzqtqEs6raiLOq2oyzqtqUs6ramLOq2pyzqtqgs6rapL" \
        "Oq2qizqtqss6rasLOq2rSzqtq4s6ravLOq2sCzqtrEs6rayLOq2syzqtrQs6ra1LOq2" \
        "tizqtrgs6ra5LOq2uizqtrss6ra8LOq2vSzqtr4s6ra/LOq3gizqt4Ms6reFLOq3hiz" \
        "qt4cs6reJLOq3iizqt4ss6reMLOq3jSzqt44s6rePLOq3kizqt5Qs6reVLOq3lizqt5" \
        "cs6reYLOq3mSzqt5os6rebLOq3nSzqt54s6refLOq3oSzqt6Is6rejLOq3pSzqt6Ys6" \
        "renLOq3qCzqt6ks6reqLOq3qyzqt6ws6retLOq3rizqt68s6rewLOq3sSzqt7Is6rez" \
        "LOq3tCzqt7Us6re2LOq3tyzqt7os6re7LOq3vSzqt74s6riCLOq4gyzquIQs6riFLOq" \
        "4hizquIcs6riKLOq4jCzquI4s6riPLOq4kCzquJEs6riSLOq4kyzquJUs6riWLOq4ly" \
        "zquJgs6riZLOq4mizquJss6ricLOq4nSzquJ4s6rifLOq4oCzquKEs6riiLOq4oyzqu" \
        "KQs6rilLOq4pizquKcs6rioLOq4qSzquKos6rirLOq4rCzquK0s6riuLOq4ryzquLIs" \
        "6rizLOq4tSzquLYs6ri5LOq4uyzquLws6ri9LOq4vizquL8s6rmCLOq5hCzquYcs6rm" \
        "ILOq5iSzquYss6rmPLOq5kSzquZIs6rmTLOq5lSzquZcs6rmYLOq5mSzquZos6rmbLO" \
        "q5nizquaIs6rmjLOq5pCzquaYs6rmnLOq5qizquass6rmtLOq5rizqua8s6rmxLOq5s" \
        "izqubMs6rm0LOq5tSzqubYs6rm3LOq5uizqub4s6rm/LOq6gCzquoEs6rqCLOq6gyzq" \
        "uoYs6rqHLOq6iCzquoks6rqKLOq6iyzquo0s6rqOLOq6jyzqupAs6rqRLOq6kizqupM" \
        "s6rqULOq6lSzqupYs6rqXLOq6mCzqupks6rqaLOq6myzqupws6rqdLOq6nizqup8s6r" \
        "qgLOq6oSzquqIs6rqjLOq6pCzquqUs6rqmLOq6pyzquqgs6rqpLOq6qizquqss6rqsL" \
        "Oq6rSzquq4s6rqvLOq6sCzqurEs6rqyLOq6syzqurQs6rq1LOq6tizqurcs6rq4LOq6" \
        "uSzquros6rq7LOq6vyzqu4Es6ruCLOq7gyzqu4Us6ruGLOq7hyzqu4gs6ruJLOq7iiz" \
        "qu4ss6ruOLOq7kizqu5Ms6ruULOq7lSzqu5Ys6ruXLOq7mizqu5ss6rudLOq7nizqu5" \
        "8s6rugLOq7oSzqu6Is6rujLOq7pCzqu6Us6rumLOq7pyzqu6ks6ruqLOq7rCzqu64s6" \
        "ruvLOq7sCzqu7Es6ruyLOq7syzqu7Us6ru2LOq7tyzqu7ks6ru6LOq7uyzqu70s6ru+" \
        "LOq7vyzqvIAs6ryBLOq8gizqvIMs6ryELOq8hSzqvIYs6ryJLOq8iizqvIss6ryMLOq" \
        "8jizqvI8s6ryRLOq8kizqvJMs6ryULOq8lSzqvJYs6ryXLOq8mCzqvJks6ryaLOq8my" \
        "zqvJws6rydLOq8nizqvJ8s6rygLOq8oSzqvKIs6ryjLOq8pCzqvKUs6rymLOq8pyzqv" \
        "Kgs6rypLOq8qizqvKss6ryuLOq8ryzqvLEs6ryzLOq8tSzqvLYs6ry3LOq8uCzqvLks" \
        "6ry6LOq8uyzqvL4s6r2ALOq9hCzqvYUs6r2GLOq9hyzqvYos6r2LLOq9jCzqvY0s6r2" \
        "OLOq9jyzqvZEs6r2SLOq9kyzqvZQs6r2VLOq9lizqvZcs6r2YLOq9mSzqvZos6r2bLO" \
        "q9nizqvZ8s6r2gLOq9oSzqvaIs6r2jLOq9pizqvacs6r2oLOq9qSzqvaos6r2rLOq9r" \
        "Czqva0s6r2uLOq9ryzqvbAs6r2xLOq9sizqvbMs6r20LOq9tSzqvbYs6r23LOq9uCzq" \
        "vbos6r27LOq9vCzqvb0s6r2+LOq9vyzqvoEs6r6CLOq+gyzqvoUs6r6GLOq+hyzqvok" \
        "s6r6KLOq+iyzqvows6r6NLOq+jizqvo8s6r6SLOq+kyzqvpQs6r6WLOq+lyzqvpgs6r" \
        "6ZLOq+mizqvpss6r6dLOq+nizqvp8s6r6gLOq+oSzqvqIs6r6jLOq+pCzqvqUs6r6mL" \
        "Oq+pyzqvqgs6r6pLOq+qizqvqss6r6sLOq+rSzqvq4s6r6vLOq+sCzqvrEs6r6yLOq+" \
        "syzqvrQs6r61LOq+tizqvrcs6r66LOq+uyzqvr0s6r6+LOq+vyzqv4Es6r+CLOq/gyz" \
        "qv4Qs6r+FLOq/hizqv4os6r+MLOq/jyzqv5As6r+RLOq/kizqv5Ms6r+VLOq/lizqv5" \
        "cs6r+YLOq/mSzqv5os6r+bLOq/nSzqv54s6r+fLOq/oCzqv6Es6r+iLOq/oyzqv6Qs6" \
        "r+lLOq/pizqv6cs6r+qLOq/qyzqv6ws6r+tLOq/rizqv68s6r+yLOq/syzqv7Us6r+2" \
        "LOq/tyzqv7ks6r+6LOq/uyzqv7ws6r+9LOq/vizqv78s64CCLOuAgyzrgIUs64CGLOu" \
        "AhyzrgIgs64CJLOuAiizrgIss64CNLOuAjizrgI8s64CRLOuAkizrgJMs64CVLOuAli" \
        "zrgJcs64CYLOuAmSzrgJos64CbLOuAnizrgJ8s64CgLOuAoSzrgKIs64CjLOuApCzrg" \
        "KUs64CmLOuApyzrgKks64CqLOuAqyzrgKws64CtLOuArizrgK8s64CwLOuAsSzrgLIs" \
        "64CzLOuAtCzrgLUs64C2LOuAtyzrgLgs64C5LOuAuizrgLss64C8LOuAvSzrgL4s64C" \
        "/LOuBgCzrgYEs64GCLOuBgyzrgYYs64GHLOuBiSzrgYss64GNLOuBjyzrgZAs64GRLO" \
        "uBkizrgZYs64GYLOuBmizrgZss64GcLOuBnizrgZ8s64GgLOuBoSzrgaIs64GjLOuBp" \
        "CzrgaUs64GmLOuBpyzrgags64GpLOuBqizrgass64GsLOuBrSzrga4s64GvLOuBsCzr" \
        "gbEs64GyLOuBsyzrgbQs64G1LOuBtizrgbcs64G4LOuBuSzrgbos64G7LOuBvizrgb8" \
        "s64KBLOuCgizrgoMs64KFLOuChizrgocs64KILOuCiSzrgoos64KLLOuCjizrgpAs64" \
        "KSLOuCkyzrgpQs64KVLOuClizrgpcs64KbLOuCnSzrgp4s64KjLOuCpCzrgqUs64KmL" \
        "OuCpyzrgqos64KwLOuCsizrgrYs64K3LOuCuSzrgros64K7LOuCvSzrgr4s64K/LOuD" \
        "gCzrg4Es64OCLOuDgyzrg4Ys64OKLOuDiyzrg4ws64ONLOuDjizrg48s64OSLOuDkyz" \
        "rg5Us64OWLOuDlyzrg5ks64OaLOuDmyzrg5ws64OdLOuDnizrg58s64OhLOuDoizrg6" \
        "Ms64OkLOuDpizrg6cs64OoLOuDqSzrg6os64OrLOuDrCzrg60s64OuLOuDryzrg7As6" \
        "4OxLOuDsizrg7Ms64O0LOuDtSzrg7Ys64O3LOuDuCzrg7ks64O6LOuDuyzrg7ws64O9" \
        "LOuDvizrg78s64SALOuEgSzrhIIs64SDLOuEhCzrhIUs64SGLOuEhyzrhIos64SNLOu" \
        "EjizrhI8s64SRLOuElCzrhJUs64SWLOuElyzrhJos64SeLOuEnyzrhKAs64ShLOuEoi" \
        "zrhKYs64SnLOuEqSzrhKos64SrLOuErSzrhK4s64SvLOuEsCzrhLEs64SyLOuEsyzrh" \
        "LYs64S6LOuEuyzrhLws64S9LOuEvizrhL8s64WCLOuFgyzrhYUs64WGLOuFhyzrhYks" \
        "64WKLOuFiyzrhYws64WNLOuFjizrhY8s64WSLOuFkyzrhZYs64WXLOuFmSzrhZos64W" \
        "bLOuFnSzrhZ4s64WfLOuFoSzrhaIs64WjLOuFpCzrhaUs64WmLOuFpyzrhags64WpLO" \
        "uFqizrhass64WsLOuFrSzrha4s64WvLOuFsCzrhbEs64WyLOuFsyzrhbQs64W1LOuFt" \
        "izrhbcs64W6LOuFuyzrhb0s64W+LOuFvyzrhoEs64aDLOuGhCzrhoUs64aGLOuGhyzr" \
        "hoos64aMLOuGjizrho8s64aQLOuGkSzrhpUs64aWLOuGlyzrhpks64aaLOuGmyzrhp0" \
        "s64aeLOuGnyzrhqAs64ahLOuGoizrhqMs64akLOuGpSzrhqYs64anLOuGqSzrhqos64" \
        "arLOuGrCzrhq0s64auLOuGryzrhrAs64axLOuGsizrhrMs64a0LOuGtSzrhrYs64a3L" \
        "OuGuCzrhrks64a6LOuGuyzrhrws64a9LOuGvizrhr8s64eALOuHgSzrh4Is64eDLOuH" \
        "hCzrh4Us64eGLOuHhyzrh4gs64eJLOuHiizrh4ss64eNLOuHjizrh48s64eRLOuHkiz" \
        "rh5Ms64eVLOuHlizrh5cs64eYLOuHmSzrh5os64ebLOuHnizrh6As64ehLOuHoizrh6" \
        "Ms64ekLOuHpSzrh6Ys64enLOuHqizrh6ss64etLOuHrizrh68s64exLOuHsizrh7Ms6" \
        "4e0LOuHtSzrh7Ys64e3LOuHuCzrh7os64e8LOuHvizrh78s64iALOuIgSzriIIs64iD" \
        "LOuIhizriIcs64iJLOuIiizriI0s64iOLOuIjyzriJAs64iRLOuIkizriJMs64iWLOu" \
        "ImCzriJos64ibLOuInCzriJ0s64ieLOuInyzriKEs64iiLOuIoyzriKQs64ilLOuIpi" \
        "zriKcs64ioLOuIqSzriKos64irLOuIrCzriK0s64iuLOuIryzriLAs64ixLOuIsizri" \
        "LMs64i1LOuItizriLcs64i4LOuIuSzriLos64i7LOuIvSzriL4s64i/LOuJgCzriYEs" \
        "64mCLOuJgyzriYQs64mFLOuJhizriYcs64mILOuJiSzriYos64mLLOuJjCzriY0s64m" \
        "OLOuJjyzriZAs64mRLOuJkizriZMs64mULOuJlSzriZYs64mXLOuJmSzriZos64mbLO" \
        "uJnSzriZ4s64mfLOuJoSzriaIs64mjLOuJpCzriaUs64mmLOuJpyzriaos64mrLOuJr" \
        "Czria0s64muLOuJryzribAs64mxLOuJsizribMs64m2LOuJtyzribgs64m5LOuJuizr" \
        "ibss64m9LOuJvizrib8s64qALOuKgSzrioIs64qDLOuKhizriocs64qILOuKiizrios" \
        "s64qMLOuKjSzrio4s64qPLOuKkizripMs64qVLOuKlizripcs64qbLOuKnCzrip0s64" \
        "qeLOuKnyzriqIs64qkLOuKpyzriqgs64qpLOuKqyzriq0s64quLOuKryzrirEs64qyL" \
        "OuKsyzrirUs64q2LOuKtyzrirgs64q5LOuKuizrirss64q8LOuKvSzrir4s64q/LOuL" \
        "gCzri4Es64uCLOuLgyzri4Qs64uFLOuLhizri4cs64uKLOuLiyzri40s64uOLOuLjyz" \
        "ri5Es64uTLOuLlCzri5Us64uWLOuLlyzri5os64ucLOuLnizri58s64ugLOuLoSzri6" \
        "Ms64unLOuLqSzri6os64uwLOuLsSzri7Is64u2LOuLvCzri70s64u+LOuMgizrjIMs6" \
        "4yFLOuMhizrjIcs64yJLOuMiizrjIss64yMLOuMjSzrjI4s64yPLOuMkizrjJYs64yX" \
        "LOuMmCzrjJks64yaLOuMmyzrjJ0s64yeLOuMnyzrjKAs64yhLOuMoizrjKMs64ykLOu" \
        "MpSzrjKYs64ynLOuMqCzrjKks64yqLOuMqyzrjKws64ytLOuMrizrjK8s64ywLOuMsS" \
        "zrjLIs64yzLOuMtCzrjLUs64y2LOuMtyzrjLgs64y5LOuMuizrjLss64y8LOuMvSzrj" \
        "L4s64y/LOuNgCzrjYEs642CLOuNgyzrjYQs642FLOuNhizrjYcs642ILOuNiSzrjYos" \
        "642LLOuNjCzrjY0s642OLOuNjyzrjZAs642RLOuNkizrjZMs642XLOuNmSzrjZos642" \
        "dLOuNoCzrjaEs642iLOuNoyzrjaYs642oLOuNqizrjaws642tLOuNryzrjbIs642zLO" \
        "uNtSzrjbYs6423LOuNuSzrjbos6427LOuNvCzrjb0s642+LOuNvyzrjoIs646GLOuOh" \
        "yzrjogs646JLOuOiizrjoss646NLOuOjizrjo8s646RLOuOkizrjpMs646VLOuOlizr" \
        "jpcs646YLOuOmSzrjpos646bLOuOnCzrjp0s646eLOuOnyzrjqIs646jLOuOpCzrjqU" \
        "s646mLOuOpyzrjqks646qLOuOqyzrjq0s646uLOuOryzrjrAs646xLOuOsizrjrMs64" \
        "60LOuOtSzrjrYs6463LOuOuCzrjrks6466LOuOuyzrjrws6469LOuOvizrjr8s64+AL" \
        "OuPgSzrj4Is64+DLOuPhizrj4cs64+JLOuPiizrj40s64+PLOuPkSzrj5Is64+TLOuP" \
        "lizrj5gs64+aLOuPnCzrj54s64+fLOuPoSzrj6Is64+jLOuPpSzrj6Ys64+nLOuPqSz" \
        "rj6os64+rLOuPrCzrj60s64+uLOuPryzrj7As64+xLOuPsizrj7Ms64+0LOuPtSzrj7" \
        "Ys64+3LOuPuCzrj7ks64+6LOuPuyzrj70s64++LOuPvyzrkIAs65CBLOuQgizrkIMs6" \
        "5CELOuQhSzrkIYs65CHLOuQiCzrkIks65CKLOuQiyzrkIws65CNLOuQjizrkI8s65CR" \
        "LOuQkizrkJMs65CULOuQlSzrkJYs65CXLOuQmSzrkJos65CbLOuQnSzrkJ4s65CfLOu" \
        "QoSzrkKIs65CjLOuQpCzrkKUs65CmLOuQpyzrkKos65CsLOuQrSzrkK4s65CvLOuQsC" \
        "zrkLEs65CyLOuQsyzrkLUs65C2LOuQtyzrkLgs65C5LOuQuizrkLss65C8LOuQvSzrk" \
        "L4s65C/LOuRgCzrkYEs65GCLOuRgyzrkYQs65GFLOuRhizrkYcs65GILOuRiSzrkYos" \
        "65GLLOuRjCzrkY0s65GOLOuRjyzrkZIs65GTLOuRlSzrkZYs65GXLOuRmSzrkZos65G" \
        "bLOuRnCzrkZ0s65GeLOuRnyzrkaIs65GkLOuRpizrkacs65GoLOuRqSzrkaos65GrLO" \
        "uRrSzrka4s65GvLOuRsCzrkbEs65GyLOuRsyzrkbQs65G1LOuRtizrkbcs65G4LOuRu" \
        "Szrkbos65G7LOuRvCzrkb0s65G+LOuRvyzrkoEs65KCLOuSgyzrkoQs65KFLOuShizr" \
        "kocs65KJLOuSiizrkoss65KMLOuSjSzrko4s65KPLOuSkCzrkpEs65KSLOuSkyzrkpQ" \
        "s65KVLOuSlizrkpcs65KYLOuSmSzrkpos65KbLOuSnCzrkp4s65KfLOuSoCzrkqEs65" \
        "KiLOuSoyzrkqUs65KmLOuSpyzrkqks65KqLOuSqyzrkq0s65KuLOuSryzrkrAs65KxL" \
        "OuSsizrkrMs65K0LOuStizrkrgs65K6LOuSuyzrkrws65K9LOuSvizrkr8s65OBLOuT" \
        "gizrk4Ms65OFLOuThizrk4cs65OJLOuTiizrk4ss65OMLOuTjSzrk44s65OPLOuTkSz" \
        "rk5Is65OTLOuTlCzrk5Ys65OXLOuTmCzrk5ks65OaLOuTmyzrk54s65OfLOuToSzrk6" \
        "Is65OlLOuTpyzrk6gs65OpLOuTqizrk6ss65OuLOuTsCzrk7Is65OzLOuTtCzrk7Us6" \
        "5O2LOuTtyzrk7ks65O6LOuTuyzrk7ws65O9LOuTvizrk78s65SALOuUgSzrlIIs65SD" \
        "LOuUhCzrlIUs65SGLOuUhyzrlIgs65SJLOuUiizrlIss65SMLOuUjSzrlI4s65SPLOu" \
        "UkCzrlJEs65SSLOuUkyzrlJYs65SXLOuUmSzrlJos65SdLOuUnizrlJ8s65SgLOuUoS" \
        "zrlKIs65SjLOuUpizrlKss65SsLOuUrSzrlK4s65SvLOuUsizrlLMs65S1LOuUtizrl" \
        "Lcs65S5LOuUuizrlLss65S8LOuUvSzrlL4s65S/LOuVgizrlYYs65WHLOuViCzrlYks" \
        "65WKLOuVjizrlY8s65WRLOuVkizrlZMs65WVLOuVlizrlZcs65WYLOuVmSzrlZos65W" \
        "bLOuVnizrlaIs65WjLOuVpCzrlaUs65WmLOuVpyzrlags65WpLOuVqizrlass65WsLO" \
        "uVrSzrla4s65WvLOuVsCzrlbEs65WyLOuVsyzrlbQs65W1LOuVtizrlbcs65W4LOuVu" \
        "Szrlbos65W7LOuVvCzrlb0s65W+LOuVvyzrloAs65aBLOuWgizrloMs65aELOuWhSzr" \
        "loYs65aHLOuWiCzrloks65aKLOuWiyzrlows65aNLOuWjizrlo8s65aQLOuWkSzrlpI" \
        "s65aTLOuWlCzrlpUs65aWLOuWlyzrlpgs65aZLOuWmizrlpss65acLOuWnSzrlp4s65" \
        "afLOuWoizrlqMs65alLOuWpizrlqcs65apLOuWrCzrlq0s65auLOuWryzrlrIs65a2L" \
        "OuWtyzrlrgs65a5LOuWuizrlr4s65a/LOuXgSzrl4Is65eDLOuXhSzrl4Ys65eHLOuX" \
        "iCzrl4ks65eKLOuXiyzrl44s65eSLOuXkyzrl5Qs65eVLOuXlizrl5cs65eZLOuXmiz" \
        "rl5ss65ecLOuXnSzrl54s65efLOuXoCzrl6Es65eiLOuXoyzrl6Qs65elLOuXpizrl6" \
        "cs65eoLOuXqSzrl6os65erLOuXrSzrl64s65evLOuXsCzrl7Es65eyLOuXsyzrl7Qs6" \
        "5e1LOuXtizrl7cs65e4LOuXuSzrl7os65e7LOuXvCzrl70s65e+LOuXvyzrmIAs65iB" \
        "LOuYgizrmIMs65iELOuYhSzrmIYs65iHLOuYiCzrmIks65iKLOuYiyzrmIws65iNLOu" \
        "YjizrmI8s65iSLOuYkyzrmJUs65iWLOuYlyzrmJks65iaLOuYmyzrmJws65idLOuYni" \
        "zrmJ8s65igLOuYoSzrmKIs65ijLOuYpCzrmKYs65inLOuYqCzrmKks65iqLOuYqyzrm" \
        "K0s65iuLOuYryzrmLAs65ixLOuYsizrmLMs65i1LOuYtizrmLcs65i4LOuYuSzrmLos" \
        "65i7LOuYvCzrmL0s65i+LOuYvyzrmYAs65mBLOuZgizrmYMs65mELOuZhSzrmYYs65m" \
        "HLOuZiSzrmYos65mLLOuZjCzrmY0s65mOLOuZjyzrmZAs65mRLOuZkizrmZMs65mULO" \
        "uZlSzrmZYs65mXLOuZmCzrmZks65maLOuZmyzrmZws65mdLOuZnizrmZ8s65mgLOuZo" \
        "SzrmaIs65mjLOuZpSzrmaYs65mnLOuZqSzrmaos65mrLOuZrCzrma0s65muLOuZryzr" \
        "mbAs65mxLOuZsizrmbMs65m0LOuZtSzrmbYs65m3LOuZuCzrmbks65m6LOuZuyzrmbw" \
        "s65m9LOuZvizrmb8s65qALOuagSzrmoIs65qDLOuahCzrmoUs65qGLOuahyzrmogs65" \
        "qJLOuaiizrmoss65qMLOuajSzrmo4s65qPLOuakCzrmpEs65qSLOuakyzrmpQs65qVL" \
        "Oualizrmpcs65qYLOuamSzrmpos65qbLOuanizrmp8s65qhLOuaoizrmqMs65qlLOua" \
        "pizrmqcs65qoLOuaqSzrmqos65qtLOuarizrmq8s65qwLOuasizrmrMs65q0LOuatSz" \
        "rmrYs65q3LOuauCzrmrks65q6LOuauyzrmrws65q9LOuavizrmr8s65uALOubgSzrm4" \
        "Is65uDLOubhCzrm4Us65uGLOubhyzrm4gs65uJLOubiizrm4ss65uMLOubjSzrm44s6" \
        "5uPLOubkCzrm5Es65uSLOubkyzrm5Us65uWLOublyzrm5gs65uZLOubmizrm5ss65uc" \
        "LOubnSzrm54s65ufLOuboCzrm6Es65uiLOuboyzrm6Qs65ulLOubpizrm6cs65uoLOu" \
        "bqSzrm6os65urLOubrCzrm60s65uuLOubryzrm7Es65uyLOubsyzrm7Us65u2LOubty" \
        "zrm7ks65u6LOubuyzrm7ws65u9LOubvizrm78s65yCLOucgyzrnIQs65yGLOuchyzrn" \
        "Igs65yJLOuciizrnIss65yMLOucjSzrnI4s65yPLOuckCzrnJEs65ySLOuckyzrnJQs" \
        "65yVLOuclizrnJcs65yYLOucmSzrnJos65ybLOucnCzrnJ0s65yeLOucnyzrnKAs65y" \
        "hLOucoizrnKMs65ykLOucpSzrnKYs65ynLOucqizrnKss65ytLOucrizrnLEs65yyLO" \
        "ucsyzrnLQs65y1LOuctizrnLcs65y6LOucvCzrnL0s65y+LOucvyzrnYAs652BLOudg" \
        "izrnYMs652FLOudhizrnYcs652JLOudiizrnYss652NLOudjizrnY8s652QLOudkSzr" \
        "nZIs652TLOudlizrnZcs652YLOudmSzrnZos652bLOudnCzrnZ0s652eLOudnyzrnaE" \
        "s652iLOudoyzrnaUs652mLOudpyzrnaks652qLOudqyzrnaws652tLOudrizrna8s65" \
        "2yLOudtCzrnbYs6523LOuduCzrnbks6526LOuduyzrnb4s652/LOuegSzrnoIs656DL" \
        "OuehSzrnoYs656HLOueiCzrnoks656KLOueiyzrno4s656TLOuelCzrnpUs656aLOue" \
        "myzrnp0s656eLOuenyzrnqEs656iLOueoyzrnqQs656lLOuepizrnqcs656qLOueriz" \
        "rnq8s656wLOuesSzrnrIs656zLOuetizrnrcs6565LOueuizrnrss6568LOuevSzrnr" \
        "4s656/LOufgCzrn4Es65+CLOufgyzrn4Qs65+FLOufhizrn4gs65+KLOufiyzrn4ws6" \
        "5+NLOufjizrn48s65+QLOufkSzrn5Is65+TLOuflCzrn5Us65+WLOuflyzrn5gs65+Z" \
        "LOufmizrn5ss65+cLOufnSzrn54s65+fLOufoCzrn6Es65+iLOufoyzrn6Qs65+lLOu" \
        "fpizrn6cs65+oLOufqSzrn6os65+rLOufrizrn68s65+xLOufsizrn7Ms65+1LOufti" \
        "zrn7cs65+4LOufuSzrn7os65+7LOufvizroIIs66CDLOughCzroIUs66CGLOugiizro" \
        "Iss66CNLOugjizroI8s66CRLOugkizroJMs66CULOuglSzroJYs66CXLOugmizroJws" \
        "66CeLOugnyzroKAs66ChLOugoizroKMs66CmLOugpyzroKks66CqLOugqyzroK0s66C" \
        "uLOugryzroLAs66CxLOugsizroLMs66C2LOuguizroLss66C8LOugvSzroL4s66C/LO" \
        "uhgSzroYIs66GDLOuhhSzroYYs66GHLOuhiCzroYks66GKLOuhiyzroYws66GNLOuhj" \
        "izroY8s66GQLOuhkizroZQs66GVLOuhlizroZcs66GYLOuhmSzroZos66GbLOuhnizr" \
        "oZ8s66GhLOuhoizroaMs66GlLOuhpizroacs66GoLOuhqSzroaos66GrLOuhrizrobA" \
        "s66GyLOuhsyzrobQs66G1LOuhtizrobcs66G5LOuhuizrobss66G9LOuhvizrob8s66" \
        "KALOuigSzrooIs66KDLOuihCzrooUs66KGLOuihyzroogs66KJLOuiiizrooss66KML" \
        "Ouijizroo8s66KQLOuikSzropIs66KTLOuilCzropUs66KWLOuilyzropgs66KZLOui" \
        "mizropss66KcLOuinSzrop4s66KfLOuioCzroqEs66KiLOuioyzroqQs66KlLOuipiz" \
        "roqcs66KpLOuiqizroqss66KsLOuirSzroq4s66KvLOuisSzrorIs66KzLOuitSzror" \
        "Ys66K3LOuiuSzroros66K7LOuivCzror0s66K+LOuivyzro4Is66OELOujhizro4cs6" \
        "6OILOujiSzro4os66OLLOujjSzro44s66OPLOujkSzro5Is66OTLOujlSzro5Ys66OX" \
        "LOujmCzro5ks66OaLOujmyzro5ws66OeLOujoCzro6Is66OjLOujpCzro6Us66OmLOu" \
        "jpyzro6os66OrLOujrSzro64s66OvLOujsSzro7Is66OzLOujtCzro7Us66O2LOujty" \
        "zro7os66O8LOujvizro78s66SALOukgSzrpIIs66SDLOukhSzrpIYs66SHLOukiCzrp" \
        "Iks66SKLOukiyzrpIws66SNLOukjizrpI8s66SQLOukkSzrpJIs66STLOuklCzrpJUs" \
        "66SWLOuklyzrpJks66SaLOukmyzrpJws66SdLOuknizrpJ8s66ShLOukoizrpKMs66S" \
        "kLOukpSzrpKYs66SnLOukqCzrpKks66SqLOukqyzrpKws66StLOukrizrpK8s66SwLO" \
        "uksSzrpLIs66SzLOuktCzrpLUs66S2LOuktyzrpLgs66S5LOukuizrpLss66S+LOukv" \
        "yzrpYEs66WCLOulgyzrpYUs66WGLOulhyzrpYgs66WJLOuliizrpYss66WNLOuljizr" \
        "pZAs66WSLOulkyzrpZQs66WVLOullizrpZcs66WaLOulmyzrpZ0s66WeLOulnyzrpaE" \
        "s66WiLOuloyzrpaQs66WlLOulpizrpacs66WqLOulrCzrpa4s66WvLOulsCzrpbEs66" \
        "WyLOulsyzrpbYs66W3LOuluSzrpbos66W7LOulvSzrpb4s66W/LOumgCzrpoEs66aCL" \
        "OumgyzrpoYs66aILOumiyzrpows66aPLOumkCzrppEs66aSLOumkyzrppQs66aVLOum" \
        "lizrppcs66aYLOummSzrppos66abLOumnCzrpp0s66aeLOumnyzrpqAs66ahLOumoiz" \
        "rpqMs66akLOumpSzrpqYs66anLOumqCzrpqks66aqLOumqyzrpq4s66avLOumsSzrpr" \
        "Is66azLOumtSzrprYs66a3LOumuCzrprks66a6LOumuyzrpr4s66eALOungizrp4Ms6" \
        "6eELOunhSzrp4Ys66eHLOuniizrp4ss66eNLOunkyzrp5Qs66eVLOunlizrp5cs66ea" \
        "LOunnCzrp58s66egLOunoizrp6Ys66enLOunqSzrp6os66erLOunrSzrp64s66evLOu" \
        "nsCzrp7Es66eyLOunsyzrp7Ys66e7LOunvCzrp70s66e+LOunvyzrqIIs66iDLOuohC" \
        "zrqIUs66iGLOuohyzrqIks66iKLOuoiyzrqIws66iNLOuojizrqI8s66iQLOuokSzrq" \
        "JIs66iTLOuolCzrqJYs66iXLOuomCzrqJks66iaLOuomyzrqJws66idLOuonizrqJ8s" \
        "66igLOuooSzrqKIs66ijLOuopCzrqKUs66imLOuopyzrqKgs66ipLOuoqizrqKss66i" \
        "sLOuorSzrqK4s66ivLOuosCzrqLEs66iyLOuosyzrqLQs66i1LOuotizrqLcs66i6LO" \
        "uouyzrqL0s66i+LOuovyzrqYEs66mDLOuphCzrqYUs66mGLOuphyzrqYos66mMLOupj" \
        "yzrqZAs66mRLOupkizrqZYs66mXLOupmSzrqZos66mbLOupnSzrqZ4s66mfLOupoCzr" \
        "qaEs66miLOupoyzrqaYs66mqLOupqyzrqaws66mtLOuprizrqa8s66myLOupsyzrqbU" \
        "s66m2LOuptyzrqbks66m6LOupuyzrqbws66m9LOupvizrqb8s66qALOuqgSzrqoIs66" \
        "qGLOuqiCzrqoks66qKLOuqiyzrqo0s66qOLOuqjyzrqpAs66qRLOuqkizrqpMs66qUL" \
        "OuqlSzrqpYs66qXLOuqmCzrqpks66qaLOuqmyzrqpws66qdLOuqnizrqp8s66qgLOuq" \
        "oSzrqqIs66qjLOuqpCzrqqUs66qmLOuqpyzrqqos66qtLOuqrizrqq8s66qxLOuqsyz" \
        "rqrQs66q1LOuqtizrqrcs66q6LOuqvCzrqr4s66q/LOurgCzrq4Es66uCLOurgyzrq4" \
        "Us66uGLOurhyzrq4ks66uKLOuriyzrq4ws66uNLOurjizrq48s66uQLOurkSzrq5Is6" \
        "6uTLOurlCzrq5Us66uWLOurlyzrq5os66ubLOurnCzrq50s66ueLOurnyzrq6As66uh" \
        "LOuroizrq6Ms66ukLOurpSzrq6Ys66unLOurqCzrq6ks66uqLOurqyzrq6ws66utLOu" \
        "rrizrq68s66uwLOursSzrq7Is66uzLOurtCzrq7Us66u2LOurtyzrq7gs66u5LOurui" \
        "zrq7ss66u9LOurvizrq78s66yBLOusgizrrIMs66yFLOushizrrIcs66yILOusiSzrr" \
        "Ios66yLLOusjCzrrI4s66yQLOuskizrrJMs66yULOuslSzrrJYs66yXLOusmSzrrJos" \
        "66ybLOusnSzrrJ4s66yfLOusoSzrrKIs66yjLOuspCzrrKUs66ymLOuspyzrrKgs66y" \
        "qLOusrCzrrK0s66yuLOusryzrrLAs66yxLOussizrrLMs66y3LOusuSzrrLos66y/LO" \
        "utgCzrrYEs662CLOutgyzrrYYs662ILOutiizrrYss662MLOutjizrrZEs662SLOutk" \
        "yzrrZUs662WLOutlyzrrZks662aLOutmyzrrZws662dLOutnizrrZ8s662gLOutoizr" \
        "raQs662lLOutpizrracs662oLOutqSzrraos662rLOutrSzrra4s662vLOutsCzrrbE" \
        "s662yLOutsyzrrbQs6621LOuttizrrbcs6624LOutuSzrrbos6627LOutvCzrrb0s66" \
        "2+LOutvyzrroAs666BLOuugizrroMs666ELOuuhSzrroYs666HLOuuiSzrroos666LL" \
        "OuujSzrro4s666PLOuukSzrrpIs666TLOuulCzrrpUs666WLOuulyzrrpgs666ZLOuu" \
        "mizrrpss666cLOuunSzrrp4s666fLOuuoCzrrqEs666iLOuuoyzrrqUs666mLOuupyz" \
        "rrqks666qLOuuqyzrrq0s666uLOuuryzrrrAs666xLOuusizrrrMs6661LOuutizrrr" \
        "gs6665LOuuuizrrrss6668LOuuvSzrrr4s666/LOuvgSzrr4Is66+DLOuvhSzrr4Ys6" \
        "6+HLOuviSzrr4os66+LLOuvjCzrr40s66+OLOuvjyzrr5Es66+SLOuvlCzrr5Us66+W" \
        "LOuvlyzrr5gs66+ZLOuvmizrr5ss66+cLOuvnSzrr54s66+fLOuvoCzrr6Es66+iLOu" \
        "voyzrr6Qs66+lLOuvpizrr6cs66+oLOuvqSzrr6os66+rLOuvrCzrr60s66+uLOuvry" \
        "zrr7As66+xLOuvsizrr7Ms66+0LOuvtSzrr7Ys66+3LOuvuizrr7ss66+9LOuvvizrs" \
        "IEs67CDLOuwhCzrsIUs67CGLOuwhyzrsIos67COLOuwkCzrsJIs67CTLOuwmSzrsJos" \
        "67CgLOuwoSzrsKIs67CjLOuwpizrsKgs67CqLOuwqyzrsKws67CuLOuwryzrsLIs67C" \
        "zLOuwtSzrsLYs67C3LOuwuSzrsLos67C7LOuwvCzrsL0s67C+LOuwvyzrsYIs67GGLO" \
        "uxhyzrsYgs67GKLOuxiyzrsY4s67GPLOuxkSzrsZIs67GTLOuxlCzrsZUs67GWLOuxl" \
        "yzrsZgs67GZLOuxmizrsZss67GcLOuxnizrsZ8s67GgLOuxoSzrsaIs67GjLOuxpCzr" \
        "saUs67GmLOuxpyzrsags67GpLOuxqizrsass67GsLOuxrSzrsa4s67GvLOuxsCzrsbE" \
        "s67GyLOuxsyzrsbQs67G1LOuxtizrsbcs67G4LOuxuSzrsbos67G7LOuxvCzrsb0s67" \
        "G+LOuxvyzrsoAs67KBLOuygizrsoMs67KGLOuyhyzrsoks67KKLOuyjSzrso8s67KQL" \
        "OuykSzrspIs67KTLOuylizrspgs67KbLOuynCzrsp0s67KeLOuynyzrsqIs67KjLOuy" \
        "pSzrsqYs67KpLOuyqizrsqss67KsLOuyrSzrsq4s67KvLOuysizrsrYs67K3LOuyuCz" \
        "rsrks67K6LOuyuyzrsr4s67K/LOuzgSzrs4Is67ODLOuzhSzrs4Ys67OHLOuziCzrs4" \
        "ks67OKLOuziyzrs4ws67OOLOuzkizrs5Ms67OULOuzlizrs5cs67OZLOuzmizrs5ss6" \
        "7OdLOuznizrs58s67OgLOuzoSzrs6Is67OjLOuzpCzrs6Us67OmLOuzpyzrs6gs67Op" \
        "LOuzqizrs6ss67OsLOuzrSzrs64s67OvLOuzsCzrs7Es67OyLOuzsyzrs7cs67O5LOu" \
        "zuizrs7ss67O9LOuzvizrs78s67SALOu0gSzrtIIs67SDLOu0hizrtIgs67SKLOu0iy" \
        "zrtIws67SNLOu0jizrtI8s67SRLOu0kizrtJMs67SVLOu0lizrtJcs67SYLOu0mSzrt" \
        "Jos67SbLOu0nCzrtJ0s67SeLOu0nyzrtKAs67ShLOu0oizrtKMs67SlLOu0pizrtKcs" \
        "67SoLOu0qSzrtKos67SrLOu0rSzrtK4s67SvLOu0sCzrtLEs67SyLOu0syzrtLQs67S" \
        "1LOu0tizrtLcs67S4LOu0uSzrtLos67S7LOu0vCzrtL0s67S+LOu0vyzrtYEs67WCLO" \
        "u1gyzrtYQs67WFLOu1hizrtYcs67WKLOu1iyzrtY0s67WOLOu1jyzrtZEs67WSLOu1k" \
        "yzrtZQs67WVLOu1lizrtZcs67WaLOu1myzrtZws67WdLOu1nizrtZ8s67WgLOu1oSzr" \
        "taIs67WjLOu1pSzrtaYs67WnLOu1qSzrtaos67WrLOu1rCzrta0s67WuLOu1ryzrtbA" \
        "s67WxLOu1sizrtbMs67W0LOu1tSzrtbYs67W3LOu1uCzrtbks67W6LOu1uyzrtbws67" \
        "W9LOu1vizrtb8s67aCLOu2gyzrtoUs67aGLOu2iyzrtows67aNLOu2jizrto8s67aSL" \
        "Ou2lCzrtpYs67aXLOu2mCzrtpss67adLOu2nizrtp8s67agLOu2oSzrtqIs67ajLOu2" \
        "pSzrtqYs67anLOu2qCzrtqks67aqLOu2qyzrtqws67atLOu2rizrtq8s67axLOu2siz" \
        "rtrMs67a0LOu2tSzrtrYs67a3LOu2uSzrtros67a7LOu2vCzrtr0s67a+LOu2vyzrt4" \
        "As67eBLOu3gizrt4Ms67eELOu3hSzrt4Ys67eHLOu3iCzrt4ks67eKLOu3iyzrt4ws6" \
        "7eNLOu3jizrt48s67eQLOu3kSzrt5Is67eTLOu3lizrt5cs67eZLOu3mizrt5ss67ed" \
        "LOu3nizrt58s67egLOu3oSzrt6Is67ejLOu3pCzrt6Us67emLOu3pyzrt6gs67eqLOu" \
        "3qyzrt6ws67etLOu3rizrt68s67exLOu3sizrt7Ms67e1LOu3tizrt7cs67e5LOu3ui" \
        "zrt7ss67e8LOu3vSzrt74s67e/LOu4gSzruIIs67iELOu4hizruIcs67iILOu4iSzru" \
        "Ios67iLLOu4jizruI8s67iRLOu4kizruJMs67iVLOu4lizruJcs67iYLOu4mSzruJos" \
        "67ibLOu4nizruKAs67ihLOu4oizruKMs67ikLOu4pSzruKYs67inLOu4qCzruKks67i" \
        "qLOu4qyzruKws67itLOu4rizruK8s67iwLOu4sSzruLIs67izLOu4tCzruLUs67i2LO" \
        "u4tyzruLgs67i5LOu4uizruLss67i8LOu4vSzruL4s67i/LOu5gCzruYEs67mCLOu5g" \
        "yzruYYs67mHLOu5iSzruYos67mLLOu5jSzruY8s67mQLOu5kSzruZIs67mTLOu5lizr" \
        "uZgs67mcLOu5nSzruZ4s67mfLOu5oizruaMs67mlLOu5pizruacs67mpLOu5qyzruaw" \
        "s67mtLOu5rizrua8s67myLOu5tizrubcs67m4LOu5uSzrubos67m+LOu5vyzruoEs67" \
        "qCLOu6gyzruoUs67qGLOu6hyzruogs67qJLOu6iizruoss67qOLOu6kizrupMs67qUL" \
        "Ou6lSzrupYs67qXLOu6mizrupss67qcLOu6nSzrup4s67qfLOu6oCzruqEs67qiLOu6" \
        "oyzruqQs67qlLOu6pizruqcs67qpLOu6qizruqss67qsLOu6rSzruq4s67qvLOu6sCz" \
        "rurEs67qyLOu6syzrurQs67q1LOu6tizrurcs67q4LOu6uSzruros67q7LOu6vCzrur" \
        "0s67q+LOu6vyzru4As67uBLOu7gizru4Ms67uELOu7hSzru4Ys67uHLOu7iCzru4ks6" \
        "7uKLOu7iyzru4ws67uNLOu7jizru48s67uSLOu7kyzru5Us67uWLOu7mSzru5os67ub" \
        "LOu7nCzru50s67ueLOu7nyzru6Es67uiLOu7pizru6cs67uoLOu7qSzru6os67urLOu" \
        "7rSzru64s67uvLOu7sCzru7Es67uyLOu7syzru7Qs67u1LOu7tizru7cs67u4LOu7uS" \
        "zru7os67u7LOu7vCzru70s67u+LOu7vyzrvIAs67yCLOu8gyzrvIQs67yFLOu8hizrv" \
        "Ics67yKLOu8iyzrvIws67yNLOu8jizrvI8s67yQLOu8kSzrvJIs67yTLOu8lCzrvJUs" \
        "67yWLOu8lyzrvJos67yeLOu8nyzrvKAs67yhLOu8oizrvKMs67ykLOu8pSzrvKYs67y" \
        "nLOu8qCzrvKks67yqLOu8qyzrvKws67ytLOu8rizrvK8s67ywLOu8sSzrvLIs67yzLO" \
        "u8tCzrvLUs67y2LOu8tyzrvLgs67y5LOu8uizrvLss67y8LOu8vSzrvL4s67y/LOu9g" \
        "izrvYMs672FLOu9hizrvYcs672JLOu9iizrvYss672MLOu9jSzrvY4s672PLOu9kizr" \
        "vZMs672ULOu9lizrvZcs672YLOu9mSzrvZos672bLOu9nCzrvZ0s672eLOu9nyzrvaA" \
        "s672hLOu9oizrvaMs672kLOu9pSzrvaYs672nLOu9qCzrvaks672qLOu9qyzrvaws67" \
        "2tLOu9rizrva8s672wLOu9sSzrvbIs672zLOu9tCzrvbUs6722LOu9tyzrvbgs6725L" \
        "Ou9uizrvbss6728LOu9vSzrvb4s672/LOu+gCzrvoEs676CLOu+gyzrvoQs676FLOu+" \
        "hizrvocs676ILOu+iSzrvoos676LLOu+jCzrvo0s676OLOu+jyzrvpAs676RLOu+kiz" \
        "rvpMs676VLOu+lizrvpcs676YLOu+mSzrvpos676bLOu+nCzrvp0s676eLOu+nyzrvq" \
        "As676hLOu+oizrvqMs676kLOu+pSzrvqYs676nLOu+qCzrvqks676qLOu+qyzrvqws6" \
        "76tLOu+rizrvq8s676xLOu+sizrvrMs6760LOu+tSzrvrYs6763LOu+uCzrvrks6766" \
        "LOu+uyzrvrws6769LOu+vizrvr8s67+ALOu/gSzrv4Is67+DLOu/hCzrv4Ys67+HLOu" \
        "/iCzrv4ks67+KLOu/iyzrv44s67+PLOu/kSzrv5Is67+TLOu/lSzrv5Ys67+XLOu/mC" \
        "zrv5ks67+aLOu/myzrv50s67+eLOu/oCzrv6Is67+jLOu/pCzrv6Us67+mLOu/pyzrv" \
        "6gs67+pLOu/qizrv6ss67+sLOu/rSzrv64s67+vLOu/sCzrv7Es67+yLOu/syzrv7Qs" \
        "67+1LOu/tizrv7cs67+4LOu/uSzrv7os67+7LOu/vCzrv70s67++LOu/vyzsgIAs7IC" \
        "BLOyAgizsgIMs7ICELOyAhSzsgIYs7ICHLOyAiCzsgIks7ICKLOyAiyzsgIws7ICNLO" \
        "yAjizsgI8s7ICQLOyAkSzsgJIs7ICTLOyAlCzsgJUs7ICWLOyAlyzsgJgs7ICZLOyAm" \
        "izsgJss7ICcLOyAnSzsgJ4s7ICfLOyAoCzsgKEs7ICiLOyAoyzsgKQs7IClLOyApizs" \
        "gKcs7ICoLOyAqSzsgKos7ICrLOyArCzsgK0s7ICuLOyAryzsgLAs7ICxLOyAsizsgLM" \
        "s7IC0LOyAtSzsgLYs7IC3LOyAuCzsgLks7IC6LOyAuyzsgL0s7IC+LOyAvyzsgYAs7I" \
        "GBLOyBgizsgYMs7IGELOyBhSzsgYYs7IGHLOyBiCzsgYks7IGKLOyBiyzsgYws7IGNL" \
        "OyBjizsgY8s7IGQLOyBkizsgZMs7IGULOyBlSzsgZYs7IGXLOyBmSzsgZos7IGbLOyB" \
        "nSzsgZ4s7IGfLOyBoSzsgaIs7IGjLOyBpCzsgaUs7IGmLOyBpyzsgaos7IGrLOyBrCz" \
        "sga0s7IGuLOyBryzsgbAs7IGxLOyBsizsgbMs7IG0LOyBtSzsgbYs7IG3LOyBuCzsgb" \
        "ks7IG6LOyBuyzsgbws7IG9LOyBvizsgb8s7IKALOyCgSzsgoIs7IKDLOyChCzsgoUs7" \
        "IKGLOyChyzsgogs7IKJLOyCiizsgoss7IKMLOyCjSzsgo4s7IKPLOyCkizsgpMs7IKV" \
        "LOyClizsgpcs7IKZLOyCmizsgpss7IKcLOyCnSzsgp4s7IKfLOyCoizsgqQs7IKmLOy" \
        "Cpyzsgqgs7IKpLOyCqizsgqss7IKuLOyCsSzsgrIs7IK3LOyCuCzsgrks7IK6LOyCuy" \
        "zsgr4s7IOCLOyDgyzsg4Qs7IOGLOyDhyzsg4os7IOLLOyDjSzsg44s7IOPLOyDkSzsg" \
        "5Is7IOTLOyDlCzsg5Us7IOWLOyDlyzsg5os7IOeLOyDnyzsg6As7IOhLOyDoizsg6Ms" \
        "7IOmLOyDpyzsg6ks7IOqLOyDqyzsg60s7IOuLOyDryzsg7As7IOxLOyDsizsg7Ms7IO" \
        "2LOyDuCzsg7os7IO7LOyDvCzsg70s7IO+LOyDvyzshIEs7ISCLOyEgyzshIUs7ISGLO" \
        "yEhyzshIks7ISKLOyEiyzshIws7ISNLOyEjizshI8s7ISRLOyEkizshJMs7ISULOyEl" \
        "izshJcs7ISYLOyEmSzshJos7ISbLOyEoSzshKIs7ISlLOyEqCzshKks7ISqLOyEqyzs" \
        "hK4s7ISyLOyEsyzshLQs7IS1LOyEtyzshLos7IS7LOyEvSzshL4s7IS/LOyFgSzshYI" \
        "s7IWDLOyFhCzshYUs7IWGLOyFhyzshYos7IWOLOyFjyzshZAs7IWRLOyFkizshZMs7I" \
        "WWLOyFlyzshZks7IWaLOyFmyzshZ0s7IWeLOyFnyzshaAs7IWhLOyFoizshaMs7IWmL" \
        "OyFqizshass7IWsLOyFrSzsha4s7IWvLOyFsSzshbIs7IWzLOyFtSzshbYs7IW3LOyF" \
        "uSzshbos7IW7LOyFvCzshb0s7IW+LOyFvyzshoAs7IaBLOyGgizshoMs7IaELOyGhiz" \
        "shocs7IaILOyGiSzshoos7IaLLOyGjyzshpEs7IaSLOyGkyzshpUs7IaXLOyGmCzshp" \
        "ks7IaaLOyGmyzshp4s7IagLOyGoizshqMs7IakLOyGpizshqcs7IaqLOyGqyzshq0s7" \
        "IauLOyGryzshrEs7IayLOyGsyzshrQs7Ia1LOyGtizshrcs7Ia4LOyGuSzshros7Ia7" \
        "LOyGvCzshr4s7Ia/LOyHgCzsh4Es7IeCLOyHgyzsh4Us7IeGLOyHhyzsh4ks7IeKLOy" \
        "Hiyzsh40s7IeOLOyHjyzsh5As7IeRLOyHkizsh5Ms7IeVLOyHlizsh5ks7IeaLOyHmy" \
        "zsh5ws7IedLOyHnizsh58s7IehLOyHoizsh6Ms7IelLOyHpizsh6cs7IepLOyHqizsh" \
        "6ss7IesLOyHrSzsh64s7IevLOyHsizsh7Qs7Ie1LOyHtizsh7cs7Ie4LOyHuSzsh7os" \
        "7Ie7LOyHvizsh78s7IiBLOyIgizsiIMs7IiFLOyIhizsiIcs7IiILOyIiSzsiIos7Ii" \
        "LLOyIjizsiJAs7IiSLOyIkyzsiJQs7IiVLOyIlizsiJcs7IiaLOyImyzsiJ0s7IieLO" \
        "yIoSzsiKIs7IijLOyIpCzsiKUs7IimLOyIpyzsiKos7IisLOyIrizsiLAs7IizLOyIt" \
        "SzsiLYs7Ii3LOyIuCzsiLks7Ii6LOyIuyzsiLws7Ii9LOyIvizsiL8s7ImALOyJgSzs" \
        "iYIs7ImDLOyJhCzsiYUs7ImGLOyJhyzsiYks7ImKLOyJiyzsiYws7ImNLOyJjizsiY8" \
        "s7ImSLOyJkyzsiZUs7ImWLOyJlyzsiZks7ImaLOyJmyzsiZws7ImdLOyJnizsiZ8s7I" \
        "mhLOyJoizsiaMs7ImkLOyJpizsiacs7ImoLOyJqSzsiaos7ImrLOyJrizsia8s7ImxL" \
        "OyJsizsibMs7Im1LOyJtizsibcs7Im4LOyJuSzsibos7Im7LOyJvizsioAs7IqCLOyK" \
        "gyzsioQs7IqFLOyKhizsiocs7IqKLOyKiyzsiows7IqNLOyKjizsio8s7IqRLOyKkiz" \
        "sipMs7IqULOyKlSzsipYs7IqXLOyKmSzsipos7IqcLOyKnizsip8s7IqgLOyKoSzsiq" \
        "Is7IqjLOyKpizsiqcs7IqpLOyKqizsiqss7IquLOyKryzsirAs7IqxLOyKsizsirMs7" \
        "Iq2LOyKuCzsiros7Iq7LOyKvCzsir0s7Iq+LOyKvyzsi4As7IuBLOyLgizsi4Ms7IuE" \
        "LOyLhSzsi4Ys7IuHLOyLiCzsi4ks7IuKLOyLiyzsi4ws7IuNLOyLjizsi48s7IuQLOy" \
        "LkSzsi5Is7IuTLOyLlCzsi5Us7IuWLOyLlyzsi5gs7IuZLOyLmizsi5ss7IueLOyLny" \
        "zsi6Es7IuiLOyLpSzsi6Ys7IunLOyLqCzsi6ks7IuqLOyLrizsi7As7IuyLOyLsyzsi" \
        "7Qs7Iu1LOyLtyzsi7os7Iu9LOyLvizsi78s7IyBLOyMgizsjIMs7IyELOyMhSzsjIYs" \
        "7IyHLOyMiizsjIss7IyOLOyMjyzsjJAs7IyRLOyMkizsjJYs7IyXLOyMmSzsjJos7Iy" \
        "bLOyMnSzsjJ4s7IyfLOyMoCzsjKEs7IyiLOyMoyzsjKYs7IynLOyMqizsjKss7IysLO" \
        "yMrSzsjK4s7IyvLOyMsCzsjLEs7IyyLOyMsyzsjLQs7Iy1LOyMtizsjLcs7Iy4LOyMu" \
        "SzsjLos7Iy7LOyMvCzsjL0s7Iy+LOyMvyzsjYAs7I2BLOyNgizsjYMs7I2ELOyNhizs" \
        "jYcs7I2ILOyNiSzsjYos7I2LLOyNjCzsjY0s7I2OLOyNjyzsjZAs7I2RLOyNkizsjZM" \
        "s7I2ULOyNlSzsjZYs7I2XLOyNmCzsjZks7I2aLOyNmyzsjZws7I2dLOyNnizsjZ8s7I" \
        "2gLOyNoSzsjaIs7I2jLOyNpCzsjaUs7I2mLOyNpyzsjaos7I2rLOyNrSzsja4s7I2vL" \
        "OyNsSzsjbMs7I20LOyNtSzsjbYs7I23LOyNuizsjbss7I2+LOyNvyzsjoAs7I6BLOyO" \
        "gizsjoMs7I6FLOyOhizsjocs7I6JLOyOiizsjoss7I6NLOyOjizsjo8s7I6QLOyOkSz" \
        "sjpIs7I6TLOyOlCzsjpUs7I6WLOyOlyzsjpgs7I6ZLOyOmizsjpss7I6cLOyOnSzsjp" \
        "4s7I6fLOyOoCzsjqEs7I6iLOyOoyzsjqQs7I6lLOyOpizsjqcs7I6oLOyOqSzsjqos7" \
        "I6rLOyOrCzsjq0s7I6uLOyOryzsjrAs7I6xLOyOsizsjrMs7I60LOyOtSzsjrYs7I63" \
        "LOyOuCzsjrks7I66LOyOuyzsjrws7I69LOyOvizsjr8s7I+BLOyPgizsj4Ms7I+ELOy" \
        "PhSzsj4Ys7I+HLOyPiCzsj4ks7I+KLOyPiyzsj4ws7I+NLOyPjizsj48s7I+QLOyPkS" \
        "zsj5Is7I+TLOyPlCzsj5Us7I+WLOyPlyzsj5os7I+bLOyPnSzsj54s7I+hLOyPoyzsj" \
        "6Qs7I+lLOyPpizsj6cs7I+qLOyPqyzsj6ws7I+uLOyPryzsj7As7I+xLOyPsizsj7Ms" \
        "7I+2LOyPtyzsj7ks7I+6LOyPuyzsj7ws7I+9LOyPvizsj78s7JCALOyQgSzskIIs7JC" \
        "DLOyQhCzskIUs7JCGLOyQhyzskIks7JCKLOyQiyzskIws7JCNLOyQjizskI8s7JCRLO" \
        "yQkizskJMs7JCULOyQlSzskJYs7JCXLOyQmCzskJks7JCaLOyQmyzskJws7JCdLOyQn" \
        "izskJ8s7JCgLOyQoSzskKIs7JCjLOyQpSzskKYs7JCnLOyQqCzskKks7JCqLOyQqyzs" \
        "kK0s7JCuLOyQryzskLEs7JCyLOyQsyzskLUs7JC2LOyQtyzskLgs7JC5LOyQuizskLs" \
        "s7JC+LOyQvyzskYAs7JGBLOyRgizskYMs7JGELOyRhSzskYYs7JGHLOyRiSzskYos7J" \
        "GLLOyRjCzskY0s7JGOLOyRjyzskZAs7JGRLOyRkizskZMs7JGULOyRlSzskZYs7JGXL" \
        "OyRmCzskZks7JGaLOyRmyzskZws7JGdLOyRnizskZ8s7JGgLOyRoSzskaIs7JGjLOyR" \
        "pizskacs7JGpLOyRqizskass7JGtLOyRrizska8s7JGwLOyRsSzskbIs7JGzLOyRtiz" \
        "skbcs7JG4LOyRuizskbss7JG8LOyRvSzskb4s7JG/LOySgSzskoIs7JKDLOyShCzsko" \
        "Us7JKGLOyShyzskogs7JKJLOySiizskoss7JKMLOySjSzsko4s7JKPLOySkCzskpEs7" \
        "JKSLOySkyzskpUs7JKWLOySlyzskpgs7JKZLOySmizskpss7JKdLOySnizskp8s7JKg" \
        "LOySoSzskqIs7JKjLOySpCzskqUs7JKmLOySpyzskqgs7JKpLOySqizskqss7JKsLOy" \
        "SrSzskq4s7JKvLOySsCzskrEs7JKyLOySsyzskrQs7JK1LOyStizskrcs7JK5LOySui" \
        "zskrss7JK9LOySvizskr8s7JOALOyTgSzsk4Is7JODLOyThCzsk4Us7JOGLOyThyzsk" \
        "4gs7JOJLOyTiizsk4ss7JOMLOyTjSzsk44s7JOPLOyTkCzsk5Es7JOSLOyTkyzsk5Qs" \
        "7JOVLOyTlizsk5cs7JOYLOyTmSzsk5os7JObLOyTnCzsk50s7JOeLOyTnyzsk6As7JO" \
        "hLOyToizsk6Ms7JOkLOyTpSzsk6Ys7JOnLOyTqCzsk6os7JOrLOyTrCzsk60s7JOuLO" \
        "yTryzsk7Is7JOzLOyTtSzsk7Ys7JO3LOyTuSzsk7ss7JO8LOyTvSzsk74s7JSCLOyUg" \
        "yzslIQs7JSFLOyUhizslIcs7JSILOyUiSzslIos7JSLLOyUjSzslI4s7JSPLOyUkSzs" \
        "lJIs7JSTLOyUlSzslJYs7JSXLOyUmCzslJks7JSaLOyUmyzslJ0s7JSeLOyUnyzslKA" \
        "s7JShLOyUoizslKMs7JSkLOyUpSzslKYs7JSnLOyUqizslKss7JStLOyUrizslK8s7J" \
        "SxLOyUsizslLMs7JS0LOyUtSzslLYs7JS3LOyUuizslLws7JS+LOyUvyzslYAs7JWBL" \
        "OyVgizslYMs7JWGLOyVhyzslYss7JWPLOyVkCzslZEs7JWSLOyVlizslZos7JWbLOyV" \
        "nCzslZ8s7JWiLOyVoyzslaUs7JWmLOyVpyzslaks7JWqLOyVqyzslaws7JWtLOyVriz" \
        "sla8s7JWyLOyVtizslbcs7JW4LOyVuSzslbos7JW7LOyVvizslb8s7JaBLOyWgizslo" \
        "Ms7JaFLOyWhizslogs7JaJLOyWiizsloss7JaOLOyWkCzslpIs7JaTLOyWlCzslpYs7" \
        "JaZLOyWmizslpss7JadLOyWnizslp8s7JahLOyWoizslqMs7JakLOyWpSzslqYs7Jan" \
        "LOyWqCzslqos7JarLOyWrCzslq0s7JauLOyWryzslrAs7JaxLOyWsizslrMs7Ja2LOy" \
        "Wtyzslros7Ja/LOyXgCzsl4Es7JeCLOyXgyzsl4ss7JeNLOyXjyzsl5Is7JeTLOyXlS" \
        "zsl5Ys7JeXLOyXmSzsl5os7JebLOyXnCzsl50s7JeeLOyXnyzsl6Is7JekLOyXpizsl" \
        "6cs7JeoLOyXqSzsl6os7JerLOyXryzsl7Es7JeyLOyXsyzsl7Us7Je4LOyXuSzsl7os" \
        "7Je7LOyYgizsmIMs7JiELOyYiSzsmIos7JiLLOyYjSzsmI4s7JiPLOyYkSzsmJIs7Ji" \
        "TLOyYlCzsmJUs7JiWLOyYlyzsmJos7JidLOyYnizsmJ8s7JigLOyYoSzsmKIs7JijLO" \
        "yYpizsmKcs7JipLOyYqizsmKss7JivLOyYsSzsmLIs7Ji2LOyYuCzsmLos7Ji8LOyYv" \
        "SzsmL4s7Ji/LOyZgizsmYMs7JmFLOyZhizsmYcs7JmJLOyZiizsmYss7JmMLOyZjSzs" \
        "mY4s7JmPLOyZkizsmZYs7JmXLOyZmCzsmZks7JmaLOyZmyzsmZ4s7JmfLOyZoSzsmaI" \
        "s7JmjLOyZpCzsmaUs7JmmLOyZpyzsmags7JmpLOyZqizsmass7JmtLOyZrizsmbAs7J" \
        "myLOyZsyzsmbQs7Jm1LOyZtizsmbcs7Jm6LOyZuyzsmb0s7Jm+LOyZvyzsmoEs7JqCL" \
        "OyagyzsmoQs7JqFLOyahizsmocs7JqKLOyajCzsmo4s7JqPLOyakCzsmpEs7JqSLOya" \
        "kyzsmpYs7JqXLOyamSzsmpos7JqbLOyanSzsmp4s7JqfLOyaoCzsmqEs7JqiLOyaoyz" \
        "smqYs7JqoLOyaqizsmqss7JqsLOyarSzsmq4s7JqvLOyasizsmrMs7Jq1LOyatizsmr" \
        "cs7Jq7LOyavCzsmr0s7Jq+LOyavyzsm4Is7JuELOybhizsm4cs7JuILOybiSzsm4os7" \
        "JuLLOybjizsm48s7JuRLOybkizsm5Ms7JuVLOyblizsm5cs7JuYLOybmSzsm5os7Jub" \
        "LOybnizsm58s7JuiLOyboyzsm6Qs7JulLOybpizsm6cs7JuqLOybqyzsm60s7JuuLOy" \
        "bryzsm7Es7JuyLOybsyzsm7Qs7Ju1LOybtizsm7cs7Ju6LOybuyzsm7ws7Ju+LOybvy" \
        "zsnIAs7JyBLOycgizsnIMs7JyGLOychyzsnIks7JyKLOyciyzsnI0s7JyOLOycjyzsn" \
        "JAs7JyRLOyckizsnJMs7JyWLOycmCzsnJos7JybLOycnCzsnJ0s7JyeLOycnyzsnKIs" \
        "7JyjLOycpSzsnKYs7JynLOycqSzsnKos7JyrLOycrCzsnK0s7JyuLOycryzsnLIs7Jy" \
        "0LOyctizsnLgs7Jy5LOycuizsnLss7Jy+LOycvyzsnYEs7J2CLOydgyzsnYUs7J2GLO" \
        "ydhyzsnYgs7J2JLOydiyzsnY4s7J2QLOydmSzsnZos7J2bLOydnSzsnZ4s7J2fLOydo" \
        "SzsnaIs7J2jLOydpCzsnaUs7J2mLOydpyzsnaks7J2qLOydrCzsna0s7J2uLOydryzs" \
        "nbAs7J2xLOydsizsnbMs7J22LOydtyzsnbks7J26LOyduyzsnb8s7J6ALOyegSzsnoI" \
        "s7J6GLOyeiyzsnows7J6NLOyejyzsnpIs7J6TLOyelSzsnpks7J6bLOyenCzsnp0s7J" \
        "6eLOyenyzsnqIs7J6nLOyeqCzsnqks7J6qLOyeqyzsnq4s7J6vLOyesSzsnrIs7J6zL" \
        "OyetSzsnrYs7J63LOyeuCzsnrks7J66LOyeuyzsnr4s7J+CLOyfgyzsn4Qs7J+FLOyf" \
        "hizsn4cs7J+KLOyfiyzsn40s7J+PLOyfkSzsn5Is7J+TLOyflCzsn5Us7J+WLOyflyz" \
        "sn5ks7J+aLOyfmyzsn5ws7J+eLOyfnyzsn6As7J+hLOyfoizsn6Ms7J+lLOyfpizsn6" \
        "cs7J+pLOyfqizsn6ss7J+tLOyfrizsn68s7J+wLOyfsSzsn7Is7J+zLOyftCzsn7Us7" \
        "J+2LOyftyzsn7gs7J+5LOyfuizsn7ss7J+8LOyfvSzsn74s7J+/LOyggizsoIMs7KCF" \
        "LOyghizsoIcs7KCJLOygiyzsoIws7KCNLOygjizsoI8s7KCSLOyglCzsoJcs7KCYLOy" \
        "gmSzsoJos7KCbLOygnizsoJ8s7KChLOygoizsoKMs7KClLOygpizsoKcs7KCoLOygqS" \
        "zsoKos7KCrLOygrizsoLAs7KCyLOygsyzsoLQs7KC1LOygtizsoLcs7KC5LOyguizso" \
        "Lss7KC9LOygvizsoL8s7KGBLOyhgizsoYMs7KGELOyhhSzsoYYs7KGHLOyhiizsoYss" \
        "7KGOLOyhjyzsoZAs7KGRLOyhkizsoZMs7KGVLOyhlizsoZcs7KGYLOyhmSzsoZos7KG" \
        "bLOyhnCzsoZ0s7KGeLOyhnyzsoaAs7KGhLOyhoizsoaMs7KGkLOyhpSzsoaYs7KGnLO" \
        "yhqCzsoaks7KGqLOyhqyzsoaws7KGtLOyhrizsoa8s7KGyLOyhsyzsobUs7KG2LOyht" \
        "yzsobks7KG7LOyhvCzsob0s7KG+LOyhvyzsooIs7KKELOyiiCzsooks7KKKLOyijizs" \
        "oo8s7KKQLOyikSzsopIs7KKTLOyilSzsopYs7KKXLOyimCzsopks7KKaLOyimyzsopw" \
        "s7KKeLOyioCzsoqIs7KKjLOyipCzsoqUs7KKmLOyipyzsoqks7KKqLOyiqyzsoqws7K" \
        "KtLOyirizsoq8s7KKwLOyisSzsorIs7KKzLOyitCzsorUs7KK2LOyityzsorgs7KK5L" \
        "Oyiuizsorss7KK+LOyivyzso4As7KOBLOyjgizso4Ms7KOFLOyjhizso4cs7KOJLOyj" \
        "iizso4ss7KONLOyjjizso48s7KOQLOyjkSzso5Is7KOTLOyjlizso5gs7KOaLOyjmyz" \
        "so5ws7KOdLOyjnizso58s7KOiLOyjoyzso6Us7KOmLOyjpyzso6gs7KOpLOyjqizso6" \
        "ss7KOsLOyjrSzso64s7KOvLOyjsCzso7Es7KOyLOyjsyzso7Qs7KO2LOyjtyzso7gs7" \
        "KO5LOyjuizso7ss7KO+LOyjvyzspIEs7KSCLOykgyzspIcs7KSILOykiSzspIos7KSL" \
        "LOykjizjgIAs44CBLOOAgizCtyzigKUs4oCmLMKoLOOAgyzCrSzigJUs4oilLO+8vCz" \
        "iiLws4oCYLOKAmSzigJws4oCdLOOAlCzjgJUs44CILOOAiSzjgIos44CLLOOAjCzjgI" \
        "0s44COLOOAjyzjgJAs44CRLMKxLMOXLMO3LOKJoCziiaQs4omlLOKIniziiLQswrAs4" \
        "oCyLOKAsyzihIMs4oSrLO+/oCzvv6Es77+lLOKZgizimYAs4oigLOKKpSzijJIs4oiC" \
        "LOKIhyziiaEs4omSLMKnLOKAuyzimIYs4piFLOKXiyzil48s4peOLOKXhyzil4Ys4pa" \
        "hLOKWoCzilrMs4payLOKWvSzilrws4oaSLOKGkCzihpEs4oaTLOKGlCzjgJMs4omqLO" \
        "KJqyziiJos4oi9LOKInSziiLUs4oirLOKIrCziiIgs4oiLLOKKhiziiocs4oqCLOKKg" \
        "yziiKos4oipLOKIpyziiKgs77+iLOykkCzspJIs7KSTLOyklCzspJUs7KSWLOyklyzs" \
        "pJks7KSaLOykmyzspJws7KSdLOyknizspJ8s7KSgLOykoSzspKIs7KSjLOykpCzspKU" \
        "s7KSmLOykpyzspKgs7KSpLOykqizspKss7KStLOykrizspK8s7KSwLOyksSzspLIs7K" \
        "SzLOyktSzspLYs7KS3LOykuCzspLks7KS6LOykuyzspLws7KS9LOykvizspL8s7KWAL" \
        "OylgSzspYIs7KWDLOylhCzspYUs7KWGLOylhyzspYgs7KWJLOyliizspYss7KWMLOyl" \
        "jSzspY4s7KWPLOylkizspZMs7KWVLOyllizspZcs7KWZLOylmizspZss7KWcLOylnSz" \
        "spZ4s7KWfLOyloizspaQs7KWlLOylpizspacs7KWoLOylqSzspaos7KWrLOylrSzspa" \
        "4s7KWvLOKHkizih5Qs4oiALOKIgyzCtCzvvZ4sy4csy5gsy50sy5osy5kswrgsy5ssw" \
        "qEswr8sy5As4oiuLOKIkSziiI8swqQs4oSJLOKAsCzil4Es4peALOKWtyzilrYs4pmk" \
        "LOKZoCzimaEs4pmlLOKZpyzimaMs4oqZLOKXiCzilqMs4peQLOKXkSzilpIs4pakLOK" \
        "WpSzilqgs4panLOKWpizilqks4pmoLOKYjyzimI4s4picLOKYnizCtizigKAs4oChLO" \
        "KGlSzihpcs4oaZLOKGlizihpgs4pmtLOKZqSzimaos4pmsLOOJvyzjiJws4oSWLOOPh" \
        "yzihKIs44+CLOOPmCzihKEs4oKsLMKuLOOJviwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "7KWxLOylsizspbMs7KW1LOyltizspbcs7KW4LOyluSzspbos7KW7LOylvSzspb4s7KW" \
        "/LOymgCzspoEs7KaCLOymgyzspoQs7KaFLOymhizspocs7KaKLOymiyzspo0s7KaOLO" \
        "ymjyzsppEs7KaSLOymkyzsppQs7KaVLOymlizsppcs7KaaLOymnCzspp4s7KafLOymo" \
        "CzspqEs7KaiLOymoyzspqQs7KalLOympizspqcs7KaoLOymqSzspqos7KarLOymrCzs" \
        "pq0s7KauLOymryzsprAs7KaxLOymsizsprMs7Ka0LOymtSzsprYs7Ka3LOymuCzsprk" \
        "s7Ka6LOymuyzsprws7Ka9LOymvizspr8s7KeCLOyngyzsp4Us7KeGLOyniSzsp4ss7K" \
        "eMLOynjSzsp44s7KePLOynkizsp5Qs7KeXLOynmCzsp5ss77yBLO+8gizvvIMs77yEL" \
        "O+8hSzvvIYs77yHLO+8iCzvvIks77yKLO+8iyzvvIws77yNLO+8jizvvI8s77yQLO+8" \
        "kSzvvJIs77yTLO+8lCzvvJUs77yWLO+8lyzvvJgs77yZLO+8mizvvJss77ycLO+8nSz" \
        "vvJ4s77yfLO+8oCzvvKEs77yiLO+8oyzvvKQs77ylLO+8pizvvKcs77yoLO+8qSzvvK" \
        "os77yrLO+8rCzvvK0s77yuLO+8ryzvvLAs77yxLO+8sizvvLMs77y0LO+8tSzvvLYs7" \
        "7y3LO+8uCzvvLks77y6LO+8uyzvv6Ys77y9LO+8vizvvL8s772ALO+9gSzvvYIs772D" \
        "LO+9hCzvvYUs772GLO+9hyzvvYgs772JLO+9iizvvYss772MLO+9jSzvvY4s772PLO+" \
        "9kCzvvZEs772SLO+9kyzvvZQs772VLO+9lizvvZcs772YLO+9mSzvvZos772bLO+9nC" \
        "zvvZ0s77+jLOynnizsp58s7KehLOynoyzsp6Us7KemLOynqCzsp6ks7KeqLOynqyzsp" \
        "64s7KeyLOynsyzsp7Qs7Ke1LOyntizsp7cs7Ke6LOynuyzsp70s7Ke+LOynvyzsqIEs" \
        "7KiCLOyogyzsqIQs7KiFLOyohizsqIcs7KiKLOyojizsqI8s7KiQLOyokSzsqJIs7Ki" \
        "TLOyolSzsqJYs7KiXLOyomSzsqJos7KibLOyonCzsqJ0s7KieLOyonyzsqKAs7KihLO" \
        "yooizsqKMs7KikLOyopSzsqKYs7KinLOyoqCzsqKos7KirLOyorCzsqK0s7KiuLOyor" \
        "yzsqLAs7KixLOyosizsqLMs7Ki0LOyotSzsqLYs7Ki3LOyouCzsqLks7Ki6LOyouyzs" \
        "qLws7Ki9LOyovizsqL8s7KmALOypgSzsqYIs7KmDLOyphCzsqYUs7KmGLOOEsSzjhLI" \
        "s44SzLOOEtCzjhLUs44S2LOOEtyzjhLgs44S5LOOEuizjhLss44S8LOOEvSzjhL4s44" \
        "S/LOOFgCzjhYEs44WCLOOFgyzjhYQs44WFLOOFhizjhYcs44WILOOFiSzjhYos44WLL" \
        "OOFjCzjhY0s44WOLOOFjyzjhZAs44WRLOOFkizjhZMs44WULOOFlSzjhZYs44WXLOOF" \
        "mCzjhZks44WaLOOFmyzjhZws44WdLOOFnizjhZ8s44WgLOOFoSzjhaIs44WjLOOFpCz" \
        "jhaUs44WmLOOFpyzjhags44WpLOOFqizjhass44WsLOOFrSzjha4s44WvLOOFsCzjhb" \
        "Es44WyLOOFsyzjhbQs44W1LOOFtizjhbcs44W4LOOFuSzjhbos44W7LOOFvCzjhb0s4" \
        "4W+LOOFvyzjhoAs44aBLOOGgizjhoMs44aELOOGhSzjhoYs44aHLOOGiCzjhoks44aK" \
        "LOOGiyzjhows44aNLOOGjizsqYcs7KmILOypiSzsqYos7KmLLOypjizsqY8s7KmRLOy" \
        "pkizsqZMs7KmVLOyplizsqZcs7KmYLOypmSzsqZos7KmbLOypnizsqaIs7KmjLOyppC" \
        "zsqaUs7KmmLOyppyzsqaks7KmqLOypqyzsqaws7KmtLOyprizsqa8s7KmwLOypsSzsq" \
        "bIs7KmzLOyptCzsqbUs7Km2LOyptyzsqbgs7Km5LOypuizsqbss7Km8LOypvizsqb8s" \
        "7KqALOyqgSzsqoIs7KqDLOyqhSzsqoYs7KqHLOyqiCzsqoks7KqKLOyqiyzsqows7Kq" \
        "NLOyqjizsqo8s7KqQLOyqkSzsqpIs7KqTLOyqlCzsqpUs7KqWLOyqlyzsqpks7KqaLO" \
        "yqmyzsqpws7KqdLOyqnizsqp8s7KqgLOyqoSzsqqIs7KqjLOyqpCzsqqUs7KqmLOyqp" \
        "yzihbAs4oWxLOKFsizihbMs4oW0LOKFtSzihbYs4oW3LOKFuCzihbksLCwsLCzihaAs" \
        "4oWhLOKFoizihaMs4oWkLOKFpSzihaYs4oWnLOKFqCzihaksLCwsLCwsLM6RLM6SLM6" \
        "TLM6ULM6VLM6WLM6XLM6YLM6ZLM6aLM6bLM6cLM6dLM6eLM6fLM6gLM6hLM6jLM6kLM" \
        "6lLM6mLM6nLM6oLM6pLCwsLCwsLCwszrEszrIszrMszrQszrUszrYszrcszrgszrksz" \
        "roszrsszrwszr0szr4szr8sz4Asz4Esz4Msz4Qsz4Usz4Ysz4csz4gsz4ksLCwsLCws" \
        "7KqoLOyqqSzsqqos7KqrLOyqrCzsqq0s7KquLOyqryzsqrAs7KqxLOyqsizsqrMs7Kq" \
        "0LOyqtSzsqrYs7Kq3LOyquCzsqrks7Kq6LOyquyzsqr4s7Kq/LOyrgSzsq4Is7KuDLO" \
        "yrhSzsq4Ys7KuHLOyriCzsq4ks7KuKLOyriyzsq44s7KuQLOyrkizsq5Qs7KuVLOyrl" \
        "izsq5cs7KuaLOyrmyzsq5ws7KudLOyrnizsq58s7KuhLOyroizsq6Ms7KukLOyrpSzs" \
        "q6Ys7KunLOyrqCzsq6ks7KuqLOyrqyzsq60s7KuuLOyrryzsq7As7KuxLOyrsizsq7M" \
        "s7Ku1LOyrtizsq7cs7Ku4LOyruSzsq7os7Ku7LOyrvCzsq70s7Ku+LOyrvyzsrIAs7K" \
        "yBLOysgizsrIMs7KyELOyshSzsrIYs7KyHLOysiSzsrIos4pSALOKUgizilIws4pSQL" \
        "OKUmCzilJQs4pScLOKUrCzilKQs4pS0LOKUvCzilIEs4pSDLOKUjyzilJMs4pSbLOKU" \
        "lyzilKMs4pSzLOKUqyzilLss4pWLLOKUoCzilK8s4pSoLOKUtyzilL8s4pSdLOKUsCz" \
        "ilKUs4pS4LOKVgizilJIs4pSRLOKUmizilJks4pSWLOKUlSzilI4s4pSNLOKUnizilJ" \
        "8s4pShLOKUoizilKYs4pSnLOKUqSzilKos4pStLOKUrizilLEs4pSyLOKUtSzilLYs4" \
        "pS5LOKUuizilL0s4pS+LOKVgCzilYEs4pWDLOKVhCzilYUs4pWGLOKVhyzilYgs4pWJ" \
        "LOKViiwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOysiyzsrIws7KyNLOysjizsrI8" \
        "s7KyRLOyskizsrJMs7KyVLOyslizsrJcs7KyZLOysmizsrJss7KycLOysnSzsrJ4s7K" \
        "yfLOysoizsrKMs7KykLOyspSzsrKYs7KynLOysqCzsrKks7KyqLOysqyzsrKws7KytL" \
        "OysrizsrK8s7KywLOyssSzsrLIs7KyzLOystCzsrLUs7Ky2LOystyzsrLgs7Ky5LOys" \
        "uizsrLss7Ky8LOysvSzsrL4s7Ky/LOytgCzsrYIs7K2DLOythCzsrYUs7K2GLOythyz" \
        "srYos7K2LLOytjSzsrY4s7K2PLOytkSzsrZIs7K2TLOytlCzsrZUs7K2WLOytlyzsrZ" \
        "os7K2bLOytnCzsrZ4s7K2fLOytoCzsraEs7K2iLOytoyzsraUs7K2mLOytpyzsrags7" \
        "K2pLOytqizsrass7K2sLOOOlSzjjpYs446XLOKEkyzjjpgs44+ELOOOoyzjjqQs446l" \
        "LOOOpizjjpks446aLOOOmyzjjpws446dLOOOnizjjp8s446gLOOOoSzjjqIs44+KLOO" \
        "OjSzjjo4s446PLOOPjyzjjogs446JLOOPiCzjjqcs446oLOOOsCzjjrEs446yLOOOsy" \
        "zjjrQs4461LOOOtizjjrcs4464LOOOuSzjjoAs446BLOOOgizjjoMs446ELOOOuizjj" \
        "rss4468LOOOvSzjjr4s446/LOOOkCzjjpEs446SLOOOkyzjjpQs4oSmLOOPgCzjj4Es" \
        "446KLOOOiyzjjows44+WLOOPhSzjjq0s446uLOOOryzjj5ss446pLOOOqizjjqss446" \
        "sLOOPnSzjj5As44+TLOOPgyzjj4ks44+cLOOPhiwsLCwsLCwsLCwsLCwsLCzsra0s7K" \
        "2uLOytryzsrbAs7K2xLOytsizsrbMs7K20LOyttSzsrbYs7K23LOytuizsrbss7K28L" \
        "OytvSzsrb4s7K2/LOyugCzsroEs7K6CLOyugyzsroQs7K6FLOyuhizsrocs7K6ILOyu" \
        "iSzsroos7K6LLOyujCzsro0s7K6OLOyujyzsrpAs7K6RLOyukizsrpMs7K6ULOyulSz" \
        "srpYs7K6XLOyumCzsrpks7K6aLOyumyzsrp0s7K6eLOyunyzsrqAs7K6hLOyuoizsrq" \
        "Ms7K6kLOyupSzsrqYs7K6nLOyuqCzsrqks7K6qLOyuqyzsrqws7K6tLOyurizsrq8s7" \
        "K6wLOyusSzsrrIs7K6zLOyutCzsrrUs7K62LOyutyzsrrks7K66LOyuuyzsrrws7K69" \
        "LOyuvizsrr8s7K+ALOyvgSzsr4Is7K+DLOyvhCzDhizDkCzCqizEpiwsxLIsLMS/LMW" \
        "BLMOYLMWSLMK6LMOeLMWmLMWKLCzjiaAs44mhLOOJoizjiaMs44mkLOOJpSzjiaYs44" \
        "mnLOOJqCzjiaks44mqLOOJqyzjiaws44mtLOOJrizjia8s44mwLOOJsSzjibIs44mzL" \
        "OOJtCzjibUs44m2LOOJtyzjibgs44m5LOOJuizjibss4pOQLOKTkSzik5Is4pOTLOKT" \
        "lCzik5Us4pOWLOKTlyzik5gs4pOZLOKTmizik5ss4pOcLOKTnSzik54s4pOfLOKToCz" \
        "ik6Es4pOiLOKToyzik6Qs4pOlLOKTpizik6cs4pOoLOKTqSzikaAs4pGhLOKRoizika" \
        "Ms4pGkLOKRpSzikaYs4pGnLOKRqCzikaks4pGqLOKRqyzikaws4pGtLOKRrizCvSzih" \
        "ZMs4oWULMK8LMK+LOKFmyzihZws4oWdLOKFnizsr4Us7K+GLOyvhyzsr4gs7K+JLOyv" \
        "iizsr4ss7K+MLOyvjSzsr44s7K+PLOyvkCzsr5Es7K+SLOyvkyzsr5Us7K+WLOyvlyz" \
        "sr5gs7K+ZLOyvmizsr5ss7K+cLOyvnSzsr54s7K+fLOyvoCzsr6Es7K+iLOyvoyzsr6" \
        "Us7K+mLOyvqCzsr6os7K+rLOyvrCzsr60s7K+uLOyvryzsr7As7K+xLOyvsizsr7Ms7" \
        "K+0LOyvtSzsr7Ys7K+3LOyvuCzsr7ks7K+6LOyvuyzsr7ws7K+9LOyvvizsr78s7LCA" \
        "LOywgSzssIIs7LCDLOywhCzssIUs7LCGLOywhyzssIgs7LCJLOywiizssIss7LCOLOy" \
        "wjyzssJEs7LCSLOywkyzssJUs7LCWLOywlyzssJgs7LCZLOywmizssJss7LCeLOywny" \
        "zssKAs7LCjLOywpCzDpizEkSzDsCzEpyzEsSzEsyzEuCzFgCzFgizDuCzFkyzDnyzDv" \
        "izFpyzFiyzFiSzjiIAs44iBLOOIgizjiIMs44iELOOIhSzjiIYs44iHLOOIiCzjiIks" \
        "44iKLOOIiyzjiIws44iNLOOIjizjiI8s44iQLOOIkSzjiJIs44iTLOOIlCzjiJUs44i" \
        "WLOOIlyzjiJgs44iZLOOImizjiJss4pKcLOKSnSzikp4s4pKfLOKSoCzikqEs4pKiLO" \
        "KSoyzikqQs4pKlLOKSpizikqcs4pKoLOKSqSzikqos4pKrLOKSrCzikq0s4pKuLOKSr" \
        "yzikrAs4pKxLOKSsizikrMs4pK0LOKStSzikbQs4pG1LOKRtizikbcs4pG4LOKRuSzi" \
        "kbos4pG7LOKRvCzikb0s4pG+LOKRvyzikoAs4pKBLOKSgizCuSzCsizCsyzigbQs4oG" \
        "/LOKCgSzigoIs4oKDLOKChCzssKUs7LCmLOywqizssKss7LCtLOywryzssLEs7LCyLO" \
        "ywsyzssLQs7LC1LOywtizssLcs7LC6LOywvyzssYAs7LGBLOyxgizssYMs7LGGLOyxh" \
        "yzssYks7LGKLOyxiyzssY0s7LGOLOyxjyzssZAs7LGRLOyxkizssZMs7LGWLOyxmizs" \
        "sZss7LGcLOyxnSzssZ4s7LGfLOyxoSzssaIs7LGjLOyxpSzssacs7LGpLOyxqizssas" \
        "s7LGsLOyxrSzssa4s7LGvLOyxsSzssbIs7LGzLOyxtCzssbYs7LG3LOyxuCzssbks7L" \
        "G6LOyxuyzssbws7LG9LOyxvizssb8s7LKALOyygSzssoIs7LKDLOyyhCzssoUs7LKGL" \
        "Oyyhyzssogs7LKJLOyyiizssoss7LKMLOyyjSzsso4s7LKPLOyykCzsspEs7LKSLOyy" \
        "kyzjgYEs44GCLOOBgyzjgYQs44GFLOOBhizjgYcs44GILOOBiSzjgYos44GLLOOBjCz" \
        "jgY0s44GOLOOBjyzjgZAs44GRLOOBkizjgZMs44GULOOBlSzjgZYs44GXLOOBmCzjgZ" \
        "ks44GaLOOBmyzjgZws44GdLOOBnizjgZ8s44GgLOOBoSzjgaIs44GjLOOBpCzjgaUs4" \
        "4GmLOOBpyzjgags44GpLOOBqizjgass44GsLOOBrSzjga4s44GvLOOBsCzjgbEs44Gy" \
        "LOOBsyzjgbQs44G1LOOBtizjgbcs44G4LOOBuSzjgbos44G7LOOBvCzjgb0s44G+LOO" \
        "BvyzjgoAs44KBLOOCgizjgoMs44KELOOChSzjgoYs44KHLOOCiCzjgoks44KKLOOCiy" \
        "zjgows44KNLOOCjizjgo8s44KQLOOCkSzjgpIs44KTLCwsLCwsLCwsLCws7LKULOyyl" \
        "SzsspYs7LKXLOyymizsspss7LKdLOyynizssp8s7LKhLOyyoizssqMs7LKkLOyypSzs" \
        "sqYs7LKnLOyyqizssq4s7LKvLOyysCzssrEs7LKyLOyysyzssrYs7LK3LOyyuSzssro" \
        "s7LK7LOyyvSzssr4s7LK/LOyzgCzss4Es7LOCLOyzgyzss4Ys7LOILOyziizss4ss7L" \
        "OMLOyzjSzss44s7LOPLOyzkSzss5Is7LOTLOyzlSzss5Ys7LOXLOyzmCzss5ks7LOaL" \
        "Oyzmyzss5ws7LOdLOyznizss58s7LOgLOyzoSzss6Is7LOjLOyzpSzss6Ys7LOnLOyz" \
        "qCzss6ks7LOqLOyzqyzss60s7LOuLOyzryzss7Es7LOyLOyzsyzss7Qs7LO1LOyztiz" \
        "ss7cs7LO4LOyzuSzss7os7LO7LOyzvCzss70s44KhLOOCoizjgqMs44KkLOOCpSzjgq" \
        "Ys44KnLOOCqCzjgqks44KqLOOCqyzjgqws44KtLOOCrizjgq8s44KwLOOCsSzjgrIs4" \
        "4KzLOOCtCzjgrUs44K2LOOCtyzjgrgs44K5LOOCuizjgrss44K8LOOCvSzjgr4s44K/" \
        "LOODgCzjg4Es44OCLOODgyzjg4Qs44OFLOODhizjg4cs44OILOODiSzjg4os44OLLOO" \
        "DjCzjg40s44OOLOODjyzjg5As44ORLOODkizjg5Ms44OULOODlSzjg5Ys44OXLOODmC" \
        "zjg5ks44OaLOODmyzjg5ws44OdLOODnizjg58s44OgLOODoSzjg6Is44OjLOODpCzjg" \
        "6Us44OmLOODpyzjg6gs44OpLOODqizjg6ss44OsLOODrSzjg64s44OvLOODsCzjg7Es" \
        "44OyLOODsyzjg7Qs44O1LOODtiwsLCwsLCwsLOyzvizss78s7LSALOy0gizstIMs7LS" \
        "ELOy0hSzstIYs7LSHLOy0iizstIss7LSNLOy0jizstI8s7LSRLOy0kizstJMs7LSULO" \
        "y0lSzstJYs7LSXLOy0mizstJws7LSeLOy0nyzstKAs7LShLOy0oizstKMs7LSlLOy0p" \
        "izstKcs7LSpLOy0qizstKss7LStLOy0rizstK8s7LSwLOy0sSzstLIs7LSzLOy0tCzs" \
        "tLUs7LS2LOy0tyzstLgs7LS6LOy0uyzstLws7LS9LOy0vizstL8s7LWALOy1gSzstYI" \
        "s7LWDLOy1hCzstYUs7LWGLOy1hyzstYgs7LWJLOy1iizstYss7LWMLOy1jSzstY4s7L" \
        "WPLOy1kCzstZEs7LWSLOy1kyzstZQs7LWVLOy1lizstZcs7LWYLOy1mSzstZos7LWbL" \
        "Oy1nSzstZ4s7LWfLNCQLNCRLNCSLNCTLNCULNCVLNCBLNCWLNCXLNCYLNCZLNCaLNCb" \
        "LNCcLNCdLNCeLNCfLNCgLNChLNCiLNCjLNCkLNClLNCmLNCnLNCoLNCpLNCqLNCrLNC" \
        "sLNCtLNCuLNCvLCwsLCwsLCwsLCwsLCwsLNCwLNCxLNCyLNCzLNC0LNC1LNGRLNC2LN" \
        "C3LNC4LNC5LNC6LNC7LNC8LNC9LNC+LNC/LNGALNGBLNGCLNGDLNGELNGFLNGGLNGHL" \
        "NGILNGJLNGKLNGLLNGMLNGNLNGOLNGPLCwsLCwsLCwsLCwsLCzstaEs7LWiLOy1oyzs" \
        "taUs7LWmLOy1pyzstags7LWpLOy1qizstass7LWuLOy1sCzstbIs7LWzLOy1tCzstbU" \
        "s7LW2LOy1tyzstbks7LW6LOy1uyzstbws7LW9LOy1vizstb8s7LaALOy2gSzstoIs7L" \
        "aDLOy2hCzstoUs7LaGLOy2hyzstoks7LaKLOy2iyzstows7LaNLOy2jizsto8s7LaQL" \
        "Oy2kSzstpIs7LaTLOy2lizstpcs7LaZLOy2mizstpss7LadLOy2nizstp8s7LagLOy2" \
        "oSzstqIs7LajLOy2pizstqgs7LaqLOy2qyzstqws7LatLOy2rizstq8s7LaxLOy2siz" \
        "strMs7La0LOy2tSzstrYs7La3LOy2uCzstrks7La6LOy2uyzstrws7La9LOy2vizstr" \
        "8s7LeALOy3gSzst4Is7LeDLOy3hSwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCws7LeGLOy3hyzst4gs7LeJLOy3iizst4ss7LeNLOy3jizst48" \
        "s7LeRLOy3kizst5Ms7LeULOy3lSzst5Ys7LeXLOy3mCzst5ks7LeaLOy3myzst5ws7L" \
        "edLOy3nizst58s7LegLOy3oSzst6Is7LejLOy3pCzst6Us7LemLOy3pyzst6ks7LeqL" \
        "Oy3qyzst60s7LeuLOy3ryzst7Es7LeyLOy3syzst7Qs7Le1LOy3tizst7cs7Le6LOy3" \
        "vCzst74s7Le/LOy4gCzsuIEs7LiCLOy4gyzsuIUs7LiGLOy4hyzsuIks7LiKLOy4iyz" \
        "suI0s7LiOLOy4jyzsuJAs7LiRLOy4kizsuJMs7LiVLOy4lizsuJcs7LiYLOy4mizsuJ" \
        "ss7LicLOy4nSzsuJ4s7LifLOy4oizsuKMs7LilLOy4pizsuKcs7LipLOy4qizsuKssL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOy4rCzsuK0" \
        "s7LiuLOy4ryzsuLIs7Li0LOy4tizsuLcs7Li4LOy4uSzsuLos7Li7LOy4vCzsuL0s7L" \
        "i+LOy4vyzsuYAs7LmBLOy5gizsuYMs7LmELOy5hSzsuYYs7LmHLOy5iCzsuYks7LmKL" \
        "Oy5iyzsuYws7LmNLOy5jizsuY8s7LmQLOy5kSzsuZIs7LmTLOy5lCzsuZUs7LmWLOy5" \
        "lyzsuZos7LmbLOy5nSzsuZ4s7LmiLOy5oyzsuaQs7LmlLOy5pizsuacs7LmqLOy5rCz" \
        "sua4s7LmvLOy5sCzsubEs7LmyLOy5syzsubYs7Lm3LOy5uSzsubos7Lm7LOy5vSzsub" \
        "4s7Lm/LOy6gCzsuoEs7LqCLOy6gyzsuoYs7LqILOy6iizsuoss7LqMLOy6jSzsuo4s7" \
        "LqPLOy6kizsupMs7LqVLOy6lizsupcs7LqZLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCzsupos7LqbLOy6nCzsup0s7LqeLOy6nyzsuqIs7L" \
        "qmLOy6pyzsuqgs7LqpLOy6qizsuqss7LquLOy6ryzsurAs7LqxLOy6sizsurMs7Lq0L" \
        "Oy6tSzsurYs7Lq3LOy6uCzsurks7Lq6LOy6uyzsurws7Lq9LOy6vizsur8s7LuALOy7" \
        "gizsu4Ms7LuELOy7hSzsu4Ys7LuHLOy7iCzsu4ks7LuKLOy7iyzsu4ws7LuNLOy7jiz" \
        "su48s7LuQLOy7kSzsu5Is7LuTLOy7lCzsu5Us7LuWLOy7lyzsu5gs7LuZLOy7mizsu5" \
        "ss7LucLOy7nSzsu54s7LufLOy7oCzsu6Es7LuiLOy7oyzsu6Ys7LunLOy7qSzsu6os7" \
        "LutLOy7rizsu68s7LuwLOy7sSzsu7Is7LuzLOy7tizsu7os7Lu7LOy7vCzsu70s7Lu+" \
        "LOy7vyzqsIAs6rCBLOqwhCzqsIcs6rCILOqwiSzqsIos6rCQLOqwkSzqsJIs6rCTLOq" \
        "wlCzqsJUs6rCWLOqwlyzqsJks6rCaLOqwmyzqsJws6rCdLOqwoCzqsKQs6rCsLOqwrS" \
        "zqsK8s6rCwLOqwsSzqsLgs6rC5LOqwvCzqsYAs6rGLLOqxjSzqsZQs6rGYLOqxnCzqs" \
        "bAs6rGxLOqxtCzqsbcs6rG4LOqxuizqsoAs6rKBLOqygyzqsoQs6rKFLOqyhizqsoks" \
        "6rKKLOqyiyzqsows6rKQLOqylCzqspws6rKdLOqynyzqsqAs6rKhLOqyqCzqsqks6rK" \
        "qLOqyrCzqsq8s6rKwLOqyuCzqsrks6rK7LOqyvCzqsr0s6rOBLOqzhCzqs4gs6rOMLO" \
        "qzlSzqs5cs6rOgLOqzoSzqs6Qs6rOnLOqzqCzqs6os6rOsLOqzryzqs7As6rOxLOqzs" \
        "yzqs7Us6rO2LOqzvCzqs70s6rSALOq0hCzqtIYs7LyCLOy8gyzsvIUs7LyGLOy8hyzs" \
        "vIks7LyKLOy8iyzsvIws7LyNLOy8jizsvI8s7LySLOy8lCzsvJYs7LyXLOy8mCzsvJk" \
        "s7LyaLOy8myzsvJ0s7LyeLOy8nyzsvKEs7LyiLOy8oyzsvKUs7LymLOy8pyzsvKgs7L" \
        "ypLOy8qizsvKss7LyuLOy8sizsvLMs7Ly0LOy8tSzsvLYs7Ly3LOy8uSzsvLos7Ly7L" \
        "Oy8vCzsvL0s7Ly+LOy8vyzsvYAs7L2BLOy9gizsvYMs7L2ELOy9hSzsvYYs7L2HLOy9" \
        "iCzsvYks7L2KLOy9iyzsvYws7L2NLOy9jizsvY8s7L2QLOy9kSzsvZIs7L2TLOy9liz" \
        "svZcs7L2ZLOy9mizsvZss7L2dLOy9nizsvZ8s7L2gLOy9oSzsvaIs7L2jLOy9pizsva" \
        "gs7L2qLOy9qyzsvaws6rSMLOq0jSzqtI8s6rSRLOq0mCzqtJws6rSgLOq0qSzqtKws6" \
        "rStLOq0tCzqtLUs6rS4LOq0vCzqtYQs6rWFLOq1hyzqtYks6rWQLOq1lCzqtZgs6rWh" \
        "LOq1oyzqtaws6rWtLOq1sCzqtbMs6rW0LOq1tSzqtbYs6rW7LOq1vCzqtb0s6rW/LOq" \
        "2gSzqtoIs6raILOq2iSzqtows6raQLOq2nCzqtp0s6rakLOq2tyzqt4As6reBLOq3hC" \
        "zqt4gs6reQLOq3kSzqt5Ms6recLOq3oCzqt6Qs6re4LOq3uSzqt7ws6re/LOq4gCzqu" \
        "IEs6riILOq4iSzquIss6riNLOq4lCzquLAs6rixLOq4tCzquLcs6ri4LOq4uizquYAs" \
        "6rmBLOq5gyzquYUs6rmGLOq5iizquYws6rmNLOq5jizquZAs6rmULOq5lizquZws6rm" \
        "dLOq5nyzquaAs6rmhLOq5pSzquags6rmpLOq5rCzqubAs6rm4LOy9rSzsva4s7L2vLO" \
        "y9sizsvbMs7L21LOy9tizsvbcs7L25LOy9uizsvbss7L28LOy9vSzsvb4s7L2/LOy+g" \
        "SzsvoIs7L6DLOy+hCzsvoYs7L6HLOy+iCzsvoks7L6KLOy+iyzsvo0s7L6OLOy+jyzs" \
        "vpAs7L6RLOy+kizsvpMs7L6ULOy+lSzsvpYs7L6XLOy+mCzsvpks7L6aLOy+myzsvpw" \
        "s7L6dLOy+nizsvp8s7L6gLOy+oizsvqMs7L6kLOy+pSzsvqYs7L6nLOy+qSzsvqos7L" \
        "6rLOy+rCzsvq0s7L6uLOy+ryzsvrEs7L6yLOy+syzsvrQs7L61LOy+tizsvrcs7L64L" \
        "Oy+uSzsvros7L67LOy+vCzsvr0s7L6+LOy+vyzsv4As7L+BLOy/gizsv4Ms7L+FLOy/" \
        "hizsv4cs7L+ILOy/iSzsv4os7L+LLOq5uSzqubss6rm8LOq5vSzquoQs6rqFLOq6jCz" \
        "qurws6rq9LOq6vizqu4As6ruELOq7jCzqu40s6ruPLOq7kCzqu5Es6ruYLOq7mSzqu5" \
        "ws6ruoLOq7qyzqu60s6ru0LOq7uCzqu7ws6ryHLOq8iCzqvI0s6ryQLOq8rCzqvK0s6" \
        "rywLOq8sizqvLQs6ry8LOq8vSzqvL8s6r2BLOq9gizqvYMs6r2ILOq9iSzqvZAs6r2c" \
        "LOq9nSzqvaQs6r2lLOq9uSzqvoAs6r6ELOq+iCzqvpAs6r6RLOq+lSzqvpws6r64LOq" \
        "+uSzqvrws6r+ALOq/hyzqv4gs6r+JLOq/iyzqv40s6r+OLOq/lCzqv5ws6r+oLOq/qS" \
        "zqv7As6r+xLOq/tCzqv7gs64CALOuAgSzrgIQs64CMLOuAkCzrgJQs64CcLOuAnSzrg" \
        "Kgs64GELOuBhSzrgYgs64GKLOuBjCzrgY4s64GTLOuBlCzrgZUs64GXLOuBmSzsv4ws" \
        "7L+NLOy/jizsv48s7L+QLOy/kSzsv5Is7L+TLOy/lCzsv5Us7L+WLOy/lyzsv5gs7L+" \
        "ZLOy/mizsv5ss7L+cLOy/nSzsv54s7L+fLOy/oizsv6Ms7L+lLOy/pizsv6cs7L+pLO" \
        "y/qizsv6ss7L+sLOy/rSzsv64s7L+vLOy/sizsv7Qs7L+2LOy/tyzsv7gs7L+5LOy/u" \
        "izsv7ss7L+9LOy/vizsv78s7YCBLO2AgiztgIMs7YCFLO2AhiztgIcs7YCILO2AiSzt" \
        "gIos7YCLLO2AjCztgI0s7YCOLO2AjyztgJAs7YCSLO2AkyztgJQs7YCVLO2AliztgJc" \
        "s7YCZLO2AmiztgJss7YCcLO2AnSztgJ4s7YCfLO2AoCztgKEs7YCiLO2AoyztgKQs7Y" \
        "ClLO2ApiztgKcs7YCoLO2AqSztgKos7YCrLO2ArCzrgZ0s64G8LOuBvSzrgoAs64KEL" \
        "OuCjCzrgo0s64KPLOuCkSzrgpgs64KZLOuCmizrgpws64KfLOuCoCzrgqEs64KiLOuC" \
        "qCzrgqks64KrLOuCrCzrgq0s64KuLOuCryzrgrEs64KzLOuCtCzrgrUs64K4LOuCvCz" \
        "rg4Qs64OFLOuDhyzrg4gs64OJLOuDkCzrg5Es64OULOuDmCzrg6As64OlLOuEiCzrhI" \
        "ks64SLLOuEjCzrhJAs64SSLOuEkyzrhJgs64SZLOuEmyzrhJws64SdLOuEoyzrhKQs6" \
        "4SlLOuEqCzrhKws64S0LOuEtSzrhLcs64S4LOuEuSzrhYAs64WBLOuFhCzrhYgs64WQ" \
        "LOuFkSzrhZQs64WVLOuFmCzrhZws64WgLOuFuCzrhbks64W8LOuGgCzrhoIs64aILOu" \
        "GiSzrhoss64aNLOuGkizrhpMs64aULOuGmCzrhpws64aoLOuHjCzrh5As64eULOuHnC" \
        "zrh50s7YCuLO2AryztgLAs7YCxLO2AsiztgLMs7YC2LO2AtyztgLks7YC6LO2Auyztg" \
        "L0s7YC+LO2AvyztgYAs7YGBLO2BgiztgYMs7YGGLO2BiCztgYos7YGLLO2BjCztgY0s" \
        "7YGOLO2BjyztgZEs7YGSLO2BkyztgZUs7YGWLO2BlyztgZks7YGaLO2BmyztgZws7YG" \
        "dLO2BniztgZ8s7YGhLO2BoiztgaMs7YGkLO2BpSztgaYs7YGnLO2BqCztgaks7YGqLO" \
        "2Bqyztga4s7YGvLO2BsSztgbIs7YGzLO2BtSztgbYs7YG3LO2BuCztgbks7YG6LO2Bu" \
        "yztgb4s7YG/LO2CgCztgoIs7YKDLO2ChCztgoUs7YKGLO2Chyztgogs7YKJLO2Ciizt" \
        "goss7YKMLO2CjSztgo4s7YKPLO2CkCztgpEs7YKSLO2CkyztgpQs64efLOuHqCzrh6k" \
        "s64esLOuHsCzrh7ks64e7LOuHvSzriIQs64iFLOuIiCzriIss64iMLOuIlCzriJUs64" \
        "iXLOuImSzriKAs64i0LOuIvCzriZgs64mcLOuJoCzriags64mpLOuJtCzribUs64m8L" \
        "OuKhCzrioUs64qJLOuKkCzripEs64qULOuKmCzripks64qaLOuKoCzriqEs64qjLOuK" \
        "pSzriqYs64qqLOuKrCzrirAs64q0LOuLiCzri4ks64uMLOuLkCzri5Is64uYLOuLmSz" \
        "ri5ss64udLOuLoizri6Qs64ulLOuLpizri6gs64urLOuLrCzri60s64uuLOuLryzri7" \
        "Ms64u0LOuLtSzri7cs64u4LOuLuSzri7os64u7LOuLvyzrjIAs64yBLOuMhCzrjIgs6" \
        "4yQLOuMkSzrjJMs64yULOuMlSzrjJws642ULOuNlSzrjZYs642YLOuNmyzrjZws642e" \
        "LOuNnyzrjaQs642lLO2ClSztgpYs7YKXLO2CmCztgpks7YKaLO2Cmyztgpws7YKdLO2" \
        "Cniztgp8s7YKgLO2CoSztgqIs7YKjLO2Cpiztgqcs7YKpLO2Cqiztgqss7YKtLO2Cri" \
        "ztgq8s7YKwLO2CsSztgrIs7YKzLO2Ctiztgrgs7YK6LO2Cuyztgrws7YK9LO2Cviztg" \
        "r8s7YOCLO2Dgyztg4Us7YOGLO2Dhyztg4os7YOLLO2DjCztg40s7YOOLO2Djyztg5Is" \
        "7YOWLO2Dlyztg5gs7YOZLO2Dmiztg5ss7YOeLO2Dnyztg6Es7YOiLO2Doyztg6Us7YO" \
        "mLO2Dpyztg6gs7YOpLO2Dqiztg6ss7YOuLO2Dsiztg7Ms7YO0LO2DtSztg7Ys7YO3LO" \
        "2DuSztg7os7YO7LO2DvCztg70s7YO+LO2DvyzthIAs7YSBLO2EgizthIMs7YSELOuNp" \
        "yzrjaks642rLOuNrizrjbAs642xLOuNtCzrjbgs646ALOuOgSzrjoMs646ELOuOhSzr" \
        "jows646QLOuOlCzrjqAs646hLOuOqCzrjqws64+ELOuPhSzrj4gs64+LLOuPjCzrj44" \
        "s64+QLOuPlCzrj5Us64+XLOuPmSzrj5ss64+dLOuPoCzrj6Qs64+oLOuPvCzrkJAs65" \
        "CYLOuQnCzrkKAs65CoLOuQqSzrkKss65C0LOuRkCzrkZEs65GULOuRmCzrkaAs65GhL" \
        "OuRoyzrkaUs65GsLOuSgCzrkogs65KdLOuSpCzrkqgs65KsLOuStSzrkrcs65K5LOuT" \
        "gCzrk4Qs65OILOuTkCzrk5Us65OcLOuTnSzrk6As65OjLOuTpCzrk6Ys65OsLOuTrSz" \
        "rk68s65OxLOuTuCzrlJQs65SVLOuUmCzrlJss65ScLOuUpCzrlKUs65SnLOuUqCzrlK" \
        "ks65SqLOuUsCzrlLEs65S0LOuUuCzthIUs7YSGLO2EhyzthIgs7YSJLO2EiizthIss7" \
        "YSMLO2EjizthI8s7YSQLO2EkSzthJIs7YSTLO2ElCzthJUs7YSWLO2ElyzthJgs7YSZ" \
        "LO2EmizthJss7YScLO2EnSzthJ4s7YSfLO2EoCzthKEs7YSiLO2EoyzthKQs7YSlLO2" \
        "EpizthKcs7YSoLO2EqSzthKos7YSrLO2ErCzthK0s7YSuLO2EryzthLIs7YSzLO2EtS" \
        "zthLYs7YS3LO2EuSzthLss7YS8LO2EvSzthL4s7YS/LO2FgizthYYs7YWHLO2FiCzth" \
        "Yks7YWKLO2FiyzthY4s7YWPLO2FkSzthZIs7YWTLO2FlSzthZYs7YWXLO2FmCzthZks" \
        "7YWaLO2FmyzthZ4s7YWgLO2FoizthaMs7YWkLO2FpSzthaYs7YWnLO2FqSzthaos7YW" \
        "rLO2FrSzrlYAs65WBLOuVgyzrlYQs65WFLOuViyzrlYws65WNLOuVkCzrlZQs65WcLO" \
        "uVnSzrlZ8s65WgLOuVoSzrlqAs65ahLOuWpCzrlqgs65aqLOuWqyzrlrAs65axLOuWs" \
        "yzrlrQs65a1LOuWuyzrlrws65a9LOuXgCzrl4Qs65eMLOuXjSzrl48s65eQLOuXkSzr" \
        "l5gs65esLOuYkCzrmJEs65iULOuYmCzrmKUs65isLOuYtCzrmYgs65mkLOuZqCzrmpw" \
        "s65qdLOuaoCzrmqQs65qrLOuarCzrmrEs65uULOubsCzrm7Qs65u4LOucgCzrnIEs65" \
        "yFLOucqCzrnKks65ysLOucryzrnLAs65y4LOucuSzrnLss652ELOudiCzrnYws652UL" \
        "OudlSzrnaAs652kLOudqCzrnbAs652xLOudsyzrnbUs6528LOudvSzrnoAs656ELOue" \
        "jCzrno0s656PLOuekCzrnpEs656SLOuelizrnpcs7YWuLO2FryzthbAs7YWxLO2Fsiz" \
        "thbMs7YW0LO2FtSzthbYs7YW3LO2FuCzthbks7YW6LO2Fuyzthb0s7YW+LO2Fvyztho" \
        "As7YaBLO2GgizthoMs7YaFLO2Ghizthocs7YaJLO2Giizthoss7YaMLO2GjSztho4s7" \
        "YaPLO2GkCzthpEs7YaSLO2GkyzthpQs7YaVLO2Glizthpcs7YaYLO2GmSzthpos7Yab" \
        "LO2GnCzthp0s7YaeLO2GnyzthqIs7YajLO2GpSzthqYs7YanLO2GqSzthqos7YarLO2" \
        "GrCzthq0s7YauLO2GryzthrIs7Ya0LO2Gtizthrcs7Ya4LO2GuSzthrss7Ya9LO2Gvi" \
        "zthr8s7YeBLO2Hgizth4Ms7YeELO2HhSzth4Ys7YeHLO2HiCzth4ks7YeKLO2Hiyzth" \
        "4ws7YeNLO2Hjizth48s656YLOuemSzrnpws656gLOueqCzrnqks656rLOuerCzrnq0s" \
        "6560LOuetSzrnrgs65+HLOufiSzrn6ws65+tLOufsCzrn7Qs65+8LOufvSzrn78s66C" \
        "ALOuggSzroIcs66CILOugiSzroIws66CQLOugmCzroJks66CbLOugnSzroKQs66ClLO" \
        "ugqCzroKws66C0LOugtSzroLcs66C4LOuguSzroYAs66GELOuhkSzroZMs66GcLOuhn" \
        "SzroaAs66GkLOuhrCzroa0s66GvLOuhsSzrobgs66G8LOuijSzroqgs66KwLOuitCzr" \
        "orgs66OALOujgSzro4Ms66OFLOujjCzro5As66OULOujnSzro58s66OhLOujqCzro6k" \
        "s66OsLOujsCzro7gs66O5LOujuyzro70s66SELOukmCzrpKAs66S8LOukvSzrpYAs66" \
        "WELOuljCzrpY8s66WRLOulmCzrpZks66WcLOuloCzrpags66WpLO2HkCzth5Es7YeSL" \
        "O2Hkyzth5Qs7YeVLO2Hlizth5cs7YeZLO2Hmizth5ss7YecLO2HnSzth54s7YefLO2H" \
        "oCzth6Es7YeiLO2Hoyzth6Qs7YelLO2Hpizth6cs7YeoLO2HqSzth6os7YerLO2HrCz" \
        "th60s7YeuLO2Hryzth7As7YexLO2Hsizth7Ms7Ye1LO2Htizth7cs7Ye5LO2Huizth7" \
        "ss7Ye8LO2HvSzth74s7Ye/LO2IgCztiIEs7YiCLO2IgyztiIQs7YiFLO2IhiztiIgs7" \
        "YiKLO2IiyztiIws7YiNLO2IjiztiI8s7YiRLO2IkiztiJMs7YiULO2IlSztiJYs7YiX" \
        "LO2ImCztiJks7YiaLO2ImyztiJws7YidLO2IniztiJ8s7YigLO2IoSztiKIs7YijLO2" \
        "IpCztiKUs7YimLO2IpyztiKgs7YipLOulqyzrpa0s66W0LOultSzrpbgs66W8LOumhC" \
        "zrpoUs66aHLOumiSzrpoos66aNLOumjizrpqws66atLOumsCzrprQs66a8LOumvSzrp" \
        "r8s66eBLOuniCzrp4ks66eMLOunjizrp48s66eQLOunkSzrp5Is66eYLOunmSzrp5ss" \
        "66edLOunnizrp6Es66ejLOunpCzrp6Us66eoLOunrCzrp7Qs66e1LOuntyzrp7gs66e" \
        "5LOunuizrqIAs66iBLOuoiCzrqJUs66i4LOuouSzrqLws66mALOupgizrqYgs66mJLO" \
        "upiyzrqY0s66mOLOupkyzrqZQs66mVLOupmCzrqZws66mkLOuppSzrqacs66moLOupq" \
        "SzrqbAs66mxLOuptCzrqbgs66qDLOuqhCzrqoUs66qHLOuqjCzrqqgs66qpLOuqqyzr" \
        "qqws66qwLOuqsizrqrgs66q5LOuquyzrqr0s66uELOuriCzrq5gs66uZLOurvCztiKo" \
        "s7YirLO2IriztiK8s7YixLO2IsiztiLMs7Yi1LO2ItiztiLcs7Yi4LO2IuSztiLos7Y" \
        "i7LO2IviztiYAs7YmCLO2JgyztiYQs7YmFLO2JhiztiYcs7YmJLO2JiiztiYss7YmML" \
        "O2JjSztiY4s7YmPLO2JkCztiZEs7YmSLO2JkyztiZQs7YmVLO2JliztiZcs7YmYLO2J" \
        "mSztiZos7YmbLO2JnSztiZ4s7YmfLO2JoCztiaEs7YmiLO2JoyztiaUs7YmmLO2Jpyz" \
        "tiags7YmpLO2Jqiztiass7YmsLO2JrSztia4s7YmvLO2JsCztibEs7YmyLO2Jsyztib" \
        "Qs7Ym1LO2Jtiztibcs7Ym4LO2JuSztibos7Ym7LO2JvCztib0s7Ym+LO2JvyztioIs7" \
        "YqDLO2KhSztioYs7YqHLO2KiSztioos7YqLLO2KjCzrrIAs66yELOusjSzrrI8s66yR" \
        "LOusmCzrrJws66ygLOusqSzrrKss66y0LOustSzrrLYs66y4LOusuyzrrLws66y9LOu" \
        "svizrrYQs662FLOuthyzrrYks662NLOutjyzrrZAs662ULOutmCzrraEs662jLOutrC" \
        "zrrogs666MLOuukCzrrqQs666oLOuurCzrrrQs6663LOuvgCzrr4Qs66+ILOuvkCzrr" \
        "5Ms66+4LOuvuSzrr7ws66+/LOuwgCzrsIIs67CILOuwiSzrsIss67CMLOuwjSzrsI8s" \
        "67CRLOuwlCzrsJUs67CWLOuwlyzrsJgs67CbLOuwnCzrsJ0s67CeLOuwnyzrsKQs67C" \
        "lLOuwpyzrsKks67CtLOuwsCzrsLEs67C0LOuwuCzrsYAs67GBLOuxgyzrsYQs67GFLO" \
        "uxiSzrsYws67GNLOuxkCzrsZ0s67KELOuyhSzrsogs67KLLOuyjCzrso4s67KULOuyl" \
        "Szrspcs7YqNLO2Kjiztio8s7YqSLO2KkyztipQs7YqWLO2Klyztipgs7YqZLO2Kmizt" \
        "ipss7YqdLO2Kniztip8s7YqhLO2KoiztiqMs7YqlLO2Kpiztiqcs7YqoLO2KqSztiqo" \
        "s7YqrLO2KrSztiq4s7YqvLO2KsCztirIs7YqzLO2KtCztirUs7Yq2LO2Ktyztiros7Y" \
        "q7LO2KvSztir4s7YuBLO2Lgyzti4Qs7YuFLO2Lhizti4cs7YuKLO2LjCzti40s7YuOL" \
        "O2Ljyzti5As7YuRLO2Lkizti5Ms7YuVLO2Llizti5cs7YuZLO2Lmizti5ss7YudLO2L" \
        "nizti58s7YugLO2LoSzti6Is7YujLO2Lpizti6cs7YuoLO2LqSzti6os7YurLO2LrCz" \
        "ti60s7YuuLO2Lryzti7Is7YuzLO2LtSzti7Ys7Yu3LO2LuSzti7os67KZLOuymizrsq" \
        "As67KhLOuypCzrsqcs67KoLOuysCzrsrEs67KzLOuytCzrsrUs67K8LOuyvSzrs4As6" \
        "7OELOuzjSzrs48s67OQLOuzkSzrs5Us67OYLOuznCzrs7Qs67O1LOuztizrs7gs67O8" \
        "LOu0hCzrtIUs67SHLOu0iSzrtJAs67SULOu0pCzrtKws67WALOu1iCzrtYks67WMLOu" \
        "1kCzrtZgs67WZLOu1pCzrtags67aALOu2gSzrtoQs67aHLOu2iCzrtoks67aKLOu2kC" \
        "zrtpEs67aTLOu2lSzrtpks67aaLOu2nCzrtqQs67awLOu2uCzrt5Qs67eVLOu3mCzrt" \
        "5ws67epLOu3sCzrt7Qs67e4LOu4gCzruIMs67iFLOu4jCzruI0s67iQLOu4lCzruJws" \
        "67idLOu4nyzruYQs67mFLOu5iCzruYws67mOLOu5lCzruZUs67mXLOu5mSzruZos67m" \
        "bLOu5oCzruaEs67mkLO2Luyzti7ws7Yu9LO2Lvizti78s7YyCLO2MhCztjIYs7YyHLO" \
        "2MiCztjIks7YyKLO2MiyztjI8s7YyRLO2MkiztjJMs7YyVLO2MlyztjJgs7YyZLO2Mm" \
        "iztjJss7YyeLO2MoiztjKMs7YykLO2MpiztjKcs7YyqLO2MqyztjK0s7YyuLO2Mryzt" \
        "jLEs7YyyLO2MsyztjLQs7Yy1LO2MtiztjLcs7Yy6LO2MviztjL8s7Y2ALO2NgSztjYI" \
        "s7Y2DLO2NhiztjYcs7Y2ILO2NiSztjYos7Y2LLO2NjCztjY0s7Y2OLO2NjyztjZAs7Y" \
        "2RLO2NkiztjZMs7Y2ULO2NlSztjZYs7Y2XLO2NmCztjZks7Y2aLO2NmyztjZws7Y2dL" \
        "O2NniztjZ8s7Y2gLO2NoSztjaIs7Y2jLO2NpCztjaUs7Y2mLO2Npyztjags7Y2pLOu5" \
        "qCzruaos67mwLOu5sSzrubMs67m0LOu5tSzrubss67m8LOu5vSzruoAs67qELOu6jCz" \
        "ruo0s67qPLOu6kCzrupEs67qYLOu6mSzruqgs67uQLOu7kSzru5Qs67uXLOu7mCzru6" \
        "As67ujLOu7pCzru6Us67usLOu8gSzrvIgs67yJLOu8mCzrvJks67ybLOu8nCzrvJ0s6" \
        "72ALOu9gSzrvYQs672ILOu9kCzrvZEs672VLOu+lCzrvrAs67+FLOu/jCzrv40s67+Q" \
        "LOu/lCzrv5ws67+fLOu/oSzsgLws7IGRLOyBmCzsgZws7IGgLOyBqCzsgaks7IKQLOy" \
        "CkSzsgpQs7IKYLOyCoCzsgqEs7IKjLOyCpSzsgqws7IKtLOyCryzsgrAs7IKzLOyCtC" \
        "zsgrUs7IK2LOyCvCzsgr0s7IK/LOyDgCzsg4Es7IOFLOyDiCzsg4ks7IOMLOyDkCzsg" \
        "5gs7IOZLOyDmyzsg5ws7IOdLOyDpCztjaos7Y2rLO2NrCztja0s7Y2uLO2NryztjbAs" \
        "7Y2xLO2NsiztjbMs7Y20LO2NtSztjbYs7Y23LO2NuCztjbks7Y26LO2Nuyztjb4s7Y2" \
        "/LO2OgSztjoIs7Y6DLO2OhSztjoYs7Y6HLO2OiCztjoks7Y6KLO2Oiyztjo4s7Y6SLO" \
        "2OkyztjpQs7Y6VLO2Oliztjpcs7Y6aLO2Omyztjp0s7Y6eLO2OnyztjqEs7Y6iLO2Oo" \
        "yztjqQs7Y6lLO2Opiztjqcs7Y6qLO2OrCztjq4s7Y6vLO2OsCztjrEs7Y6yLO2Osyzt" \
        "jrUs7Y62LO2Otyztjrks7Y66LO2Ouyztjr0s7Y6+LO2Ovyztj4As7Y+BLO2Pgiztj4M" \
        "s7Y+GLO2Phyztj4os7Y+LLO2PjCztj40s7Y+OLO2Pjyztj5Es7Y+SLO2Pkyztj5Qs7Y" \
        "+VLO2Plizsg6Us7IOoLOyDrCzsg7Qs7IO1LOyDtyzsg7ks7ISALOyEhCzshIgs7ISQL" \
        "OyElSzshJws7ISdLOyEnizshJ8s7ISgLOyEoyzshKQs7ISmLOyEpyzshKws7IStLOyE" \
        "ryzshLAs7ISxLOyEtizshLgs7IS5LOyEvCzshYAs7IWILOyFiSzshYss7IWMLOyFjSz" \
        "shZQs7IWVLOyFmCzshZws7IWkLOyFpSzshacs7IWoLOyFqSzshbAs7IW0LOyFuCzsho" \
        "Us7IaMLOyGjSzsho4s7IaQLOyGlCzshpYs7IacLOyGnSzshp8s7IahLOyGpSzshqgs7" \
        "IapLOyGrCzshrAs7Ia9LOyHhCzsh4gs7IeMLOyHlCzsh5cs7IeYLOyHoCzsh6Qs7Ieo" \
        "LOyHsCzsh7Es7IezLOyHvCzsh70s7IiALOyIhCzsiIws7IiNLOyIjyzsiJEs7IiYLOy" \
        "ImSzsiJws7IifLOyIoCzsiKgs7IipLOyIqyzsiK0s7Y+XLO2PmSztj5os7Y+bLO2PnC" \
        "ztj50s7Y+eLO2Pnyztj6As7Y+iLO2PpCztj6Us7Y+mLO2Ppyztj6gs7Y+pLO2Pqiztj" \
        "6ss7Y+uLO2Pryztj7Es7Y+yLO2Psyztj7Us7Y+2LO2Ptyztj7gs7Y+5LO2Puiztj7ss" \
        "7Y++LO2QgCztkIIs7ZCDLO2QhCztkIUs7ZCGLO2QhyztkIks7ZCKLO2QiyztkIws7ZC" \
        "NLO2QjiztkI8s7ZCQLO2QkSztkJIs7ZCTLO2QlCztkJUs7ZCWLO2QlyztkJgs7ZCZLO" \
        "2QmiztkJss7ZCcLO2QniztkJ8s7ZCgLO2QoSztkKIs7ZCjLO2QpCztkKUs7ZCmLO2Qp" \
        "yztkKgs7ZCpLO2QqiztkKss7ZCsLO2QrSztkK4s7ZCvLO2QsCztkLEs7ZCyLO2Qsyzt" \
        "kLQs7ZC1LO2QtiztkLcs7IivLOyIsSzsiLIs7Ii0LOyJiCzsiZAs7ImRLOyJlCzsiZg" \
        "s7ImgLOyJpSzsiaws7ImtLOyJsCzsibQs7Im8LOyJvSzsib8s7IqBLOyKiCzsioks7I" \
        "qQLOyKmCzsipss7IqdLOyKpCzsiqUs7IqoLOyKrCzsiq0s7Iq0LOyKtSzsircs7Iq5L" \
        "OyLnCzsi50s7IugLOyLoyzsi6Qs7IurLOyLrCzsi60s7IuvLOyLsSzsi7Ys7Iu4LOyL" \
        "uSzsi7ss7Iu8LOyMgCzsjIgs7IyJLOyMjCzsjI0s7IyTLOyMlCzsjJUs7IyYLOyMnCz" \
        "sjKQs7IylLOyMqCzsjKks7I2FLOyNqCzsjaks7I2sLOyNsCzsjbIs7I24LOyNuSzsjb" \
        "ws7I29LOyOhCzsjogs7I6MLOyPgCzsj5gs7I+ZLOyPnCzsj58s7I+gLOyPoizsj6gs7" \
        "I+pLOyPrSzsj7Qs7I+1LOyPuCzskIgs7JCQLOyQpCzskKws7JCwLO2QuCztkLks7ZC6" \
        "LO2QuyztkLws7ZC9LO2QviztkL8s7ZGBLO2RgiztkYMs7ZGFLO2RhiztkYcs7ZGILO2" \
        "RiSztkYos7ZGLLO2RjCztkY0s7ZGOLO2RjyztkZAs7ZGRLO2RkiztkZMs7ZGULO2RlS" \
        "ztkZYs7ZGXLO2RmCztkZks7ZGaLO2RmyztkZ0s7ZGeLO2RnyztkaEs7ZGiLO2Royztk" \
        "aUs7ZGmLO2Rpyztkags7ZGpLO2Rqiztkass7ZGsLO2RriztkbAs7ZGxLO2RsiztkbMs" \
        "7ZG0LO2RtSztkbYs7ZG3LO2Ruiztkbss7ZG9LO2RviztkoEs7ZKDLO2ShCztkoUs7ZK" \
        "GLO2Shyztkoos7ZKMLO2Sjiztko8s7ZKQLO2SkSztkpIs7ZKTLO2SlSztkpYs7ZKXLO" \
        "2SmCztkpks7ZKaLO2Smyztkpws7ZKdLOyQtCzskLws7JC9LOyRiCzskaQs7JGlLOyRq" \
        "Czskaws7JG0LOyRtSzskbks7JKALOySlCzskpws7JK4LOySvCzsk6ks7JOwLOyTsSzs" \
        "k7Qs7JO4LOyTuizsk78s7JSALOyUgSzslIws7JSQLOyUlCzslJws7JSoLOyUqSzslKw" \
        "s7JSwLOyUuCzslLks7JS7LOyUvSzslYQs7JWFLOyViCzslYks7JWKLOyVjCzslY0s7J" \
        "WOLOyVkyzslZQs7JWVLOyVlyzslZgs7JWZLOyVnSzslZ4s7JWgLOyVoSzslaQs7JWoL" \
        "OyVsCzslbEs7JWzLOyVtCzslbUs7JW8LOyVvSzsloAs7JaELOyWhyzslows7JaNLOyW" \
        "jyzslpEs7JaVLOyWlyzslpgs7JacLOyWoCzslqks7Ja0LOyWtSzslrgs7Ja5LOyWuyz" \
        "slrws7Ja9LOyWvizsl4Qs7JeFLOyXhizsl4cs7JeILOyXiSzsl4os7JeMLOyXjiztkp" \
        "4s7ZKfLO2SoCztkqEs7ZKiLO2SoyztkqQs7ZKlLO2Spiztkqcs7ZKoLO2Sqiztkqss7" \
        "ZKsLO2SrSztkq4s7ZKvLO2SsCztkrEs7ZKyLO2SsyztkrQs7ZK1LO2Stiztkrcs7ZK4" \
        "LO2SuSztkros7ZK7LO2SvCztkr0s7ZK+LO2Svyztk4As7ZOBLO2Tgiztk4Ms7ZOELO2" \
        "ThSztk4Ys7ZOHLO2TiCztk4ks7ZOKLO2Tiyztk40s7ZOOLO2Tjyztk5Es7ZOSLO2Tky" \
        "ztk5Us7ZOWLO2Tlyztk5gs7ZOZLO2Tmiztk5ss7ZOdLO2Tniztk6As7ZOhLO2Toiztk" \
        "6Ms7ZOkLO2TpSztk6Ys7ZOnLO2TqSztk6os7ZOrLO2TrSztk64s7ZOvLO2TsSztk7Is" \
        "7ZOzLO2TtCztk7Us7ZO2LO2Ttyztk7ks7ZO6LO2TvCzsl5As7JeRLOyXlCzsl5gs7Je" \
        "gLOyXoSzsl6Ms7JelLOyXrCzsl60s7JeuLOyXsCzsl7Qs7Je2LOyXtyzsl7ws7Je9LO" \
        "yXvizsl78s7JiALOyYgSzsmIUs7JiGLOyYhyzsmIgs7JiMLOyYkCzsmJgs7JiZLOyYm" \
        "yzsmJws7JikLOyYpSzsmKgs7JisLOyYrSzsmK4s7JiwLOyYsyzsmLQs7Ji1LOyYtyzs" \
        "mLks7Ji7LOyZgCzsmYEs7JmELOyZiCzsmZAs7JmRLOyZkyzsmZQs7JmVLOyZnCzsmZ0" \
        "s7JmgLOyZrCzsma8s7JmxLOyZuCzsmbks7Jm8LOyagCzsmogs7JqJLOyaiyzsmo0s7J" \
        "qULOyalSzsmpgs7JqcLOyapCzsmqUs7JqnLOyaqSzsmrAs7JqxLOyatCzsmrgs7Jq5L" \
        "Oyauizsm4As7JuBLOybgyzsm4Us7JuMLOybjSzsm5As7JuULOybnCzsm50s7JugLOyb" \
        "oSzsm6gs7ZO+LO2TvyztlIAs7ZSBLO2UgiztlIMs7ZSFLO2UhiztlIcs7ZSJLO2Uiiz" \
        "tlIss7ZSNLO2UjiztlI8s7ZSQLO2UkSztlJIs7ZSTLO2UliztlJgs7ZSZLO2UmiztlJ" \
        "ss7ZScLO2UnSztlJ4s7ZSfLO2UoCztlKEs7ZSiLO2UoyztlKQs7ZSlLO2UpiztlKcs7" \
        "ZSoLO2UqSztlKos7ZSrLO2UrCztlK0s7ZSuLO2UryztlLAs7ZSxLO2UsiztlLMs7ZS0" \
        "LO2UtSztlLYs7ZS3LO2UuCztlLks7ZS6LO2UuyztlL4s7ZS/LO2VgSztlYIs7ZWDLO2" \
        "VhSztlYYs7ZWHLO2ViCztlYks7ZWKLO2ViyztlY4s7ZWQLO2VkiztlZMs7ZWULO2VlS" \
        "ztlZYs7ZWXLO2VmiztlZss7ZWdLO2VniztlZ8s7ZWhLO2VoiztlaMs7JupLOybrCzsm" \
        "7As7Ju4LOybuSzsm70s7JyELOychSzsnIgs7JyMLOyclCzsnJUs7JyXLOycmSzsnKAs" \
        "7JyhLOycpCzsnKgs7JywLOycsSzsnLMs7Jy1LOyctyzsnLws7Jy9LOydgCzsnYQs7J2" \
        "KLOydjCzsnY0s7J2PLOydkSzsnZIs7J2TLOydlCzsnZUs7J2WLOydlyzsnZgs7J2cLO" \
        "ydoCzsnags7J2rLOydtCzsnbUs7J24LOydvCzsnb0s7J2+LOyegyzsnoQs7J6FLOyeh" \
        "yzsnogs7J6JLOyeiizsno4s7J6QLOyekSzsnpQs7J6WLOyelyzsnpgs7J6aLOyeoCzs" \
        "nqEs7J6jLOyepCzsnqUs7J6mLOyerCzsnq0s7J6wLOyetCzsnrws7J69LOyevyzsn4A" \
        "s7J+BLOyfiCzsn4ks7J+MLOyfjizsn5As7J+YLOyfnSzsn6Qs7J+oLOyfrCzsoIAs7K" \
        "CBLOyghCzsoIgs7KCKLO2VpCztlaYs7ZWnLO2Vqiztlaws7ZWuLO2VryztlbAs7ZWxL" \
        "O2VsiztlbMs7ZW2LO2Vtyztlbks7ZW6LO2Vuyztlb0s7ZW+LO2VvyztloAs7ZaBLO2W" \
        "giztloMs7ZaGLO2Wiiztloss7ZaMLO2WjSztlo4s7ZaPLO2WkSztlpIs7ZaTLO2WlCz" \
        "tlpUs7ZaWLO2Wlyztlpgs7ZaZLO2Wmiztlpss7ZacLO2WnSztlp4s7ZafLO2WoCztlq" \
        "Es7ZaiLO2WoyztlqQs7ZamLO2Wpyztlqgs7ZapLO2Wqiztlqss7ZasLO2WrSztlq4s7" \
        "ZavLO2WsCztlrEs7ZayLO2WsyztlrQs7Za1LO2Wtiztlrcs7Za4LO2WuSztlros7Za7" \
        "LO2WvCztlr0s7Za+LO2Wvyztl4As7ZeBLO2Xgiztl4Ms7ZeELO2XhSztl4Ys7ZeHLOy" \
        "gkCzsoJEs7KCTLOyglSzsoJYs7KCcLOygnSzsoKAs7KCkLOygrCzsoK0s7KCvLOygsS" \
        "zsoLgs7KC8LOyhgCzsoYgs7KGJLOyhjCzsoY0s7KGULOyhsCzsobEs7KG0LOyhuCzso" \
        "bos7KKALOyigSzsooMs7KKFLOyihizsoocs7KKLLOyijCzsoo0s7KKULOyinSzsop8s" \
        "7KKhLOyiqCzsorws7KK9LOyjhCzso4gs7KOMLOyjlCzso5Us7KOXLOyjmSzso6As7KO" \
        "hLOyjpCzso7Us7KO8LOyjvSzspIAs7KSELOykhSzspIYs7KSMLOykjSzspI8s7KSRLO" \
        "ykmCzspKws7KS0LOylkCzspZEs7KWULOylmCzspaAs7KWhLOyloyzspaws7KWwLOylt" \
        "Czspbws7KaILOymiSzspows7KaQLOymmCzsppks7KabLOymnSzsp4As7KeBLOynhCzs" \
        "p4cs7KeILOyniizsp5As7KeRLOynkyztl4os7ZeLLO2XjSztl44s7ZePLO2XkSztl5M" \
        "s7ZeULO2XlSztl5Ys7ZeXLO2Xmiztl5ws7ZeeLO2Xnyztl6As7ZehLO2Xoiztl6Ms7Z" \
        "emLO2Xpyztl6ks7ZeqLO2Xqyztl60s7ZeuLO2Xryztl7As7ZexLO2Xsiztl7Ms7Ze2L" \
        "O2XuCztl7os7Ze7LO2XvCztl70s7Ze+LO2XvyztmIIs7ZiDLO2YhSztmIYs7ZiHLO2Y" \
        "iSztmIos7ZiLLO2YjCztmI0s7ZiOLO2YjyztmJIs7ZiWLO2YlyztmJgs7ZiZLO2Ymiz" \
        "tmJss7ZidLO2YniztmJ8s7ZihLO2YoiztmKMs7ZilLO2YpiztmKcs7ZioLO2YqSztmK" \
        "os7ZirLO2YrCztmK4s7ZivLO2YsCztmLEs7ZiyLO2YsyztmLQs7Zi1LO2YtiztmLcs7" \
        "Zi6LO2Yuyzsp5Us7KeWLOynmSzsp5os7KecLOynnSzsp6As7KeiLOynpCzsp6cs7Kes" \
        "LOynrSzsp68s7KewLOynsSzsp7gs7Ke5LOynvCzsqIAs7KiILOyoiSzsqIss7KiMLOy" \
        "ojSzsqJQs7KiYLOyoqSzsqYws7KmNLOypkCzsqZQs7KmcLOypnSzsqZ8s7KmgLOypoS" \
        "zsqags7Km9LOyqhCzsqpgs7Kq8LOyqvSzsq4As7KuELOyrjCzsq40s7KuPLOyrkSzsq" \
        "5Ms7KuYLOyrmSzsq6As7KusLOyrtCzsrIgs7KyQLOyslCzsrJgs7KygLOysoSzsrYEs" \
        "7K2ILOytiSzsrYws7K2QLOytmCzsrZks7K2dLOytpCzsrbgs7K25LOyunCzsrrgs7K+" \
        "ULOyvpCzsr6cs7K+pLOywjCzssI0s7LCQLOywlCzssJws7LCdLOywoSzssKIs7LCnLO" \
        "ywqCzssKks7LCsLOywrizssLAs7LC4LOywuSzssLss7Zi9LO2YviztmL8s7ZmBLO2Zg" \
        "iztmYMs7ZmELO2ZhiztmYcs7ZmKLO2ZjCztmY4s7ZmPLO2ZkCztmZIs7ZmTLO2Zlizt" \
        "mZcs7ZmZLO2ZmiztmZss7ZmdLO2ZniztmZ8s7ZmgLO2ZoSztmaIs7ZmjLO2ZpCztmaU" \
        "s7ZmmLO2ZqCztmaos7ZmrLO2ZrCztma0s7ZmuLO2ZryztmbIs7ZmzLO2ZtSztmbYs7Z" \
        "m3LO2ZuCztmbks7Zm6LO2Zuyztmbws7Zm9LO2Zviztmb8s7ZqALO2agSztmoIs7ZqEL" \
        "O2ahiztmocs7ZqILO2aiSztmoos7ZqLLO2ajiztmo8s7ZqRLO2akiztmpMs7ZqVLO2a" \
        "liztmpcs7ZqYLO2amSztmpos7ZqbLO2anCztmp4s7ZqgLO2aoiztmqMs7ZqkLO2apSz" \
        "tmqYs7ZqnLO2aqSztmqos7LC8LOywvSzssL4s7LGELOyxhSzssYgs7LGMLOyxlCzssZ" \
        "Us7LGXLOyxmCzssZks7LGgLOyxpCzssaYs7LGoLOyxsCzssbUs7LKYLOyymSzsspws7" \
        "LKgLOyyqCzssqks7LKrLOyyrCzssq0s7LK0LOyytSzssrgs7LK8LOyzhCzss4Us7LOH" \
        "LOyziSzss5As7LOULOyzpCzss6ws7LOwLOy0gSzstIgs7LSJLOy0jCzstJAs7LSYLOy" \
        "0mSzstJss7LSdLOy0pCzstKgs7LSsLOy0uSzstZws7LWgLOy1pCzstaws7LWtLOy1ry" \
        "zstbEs7LW4LOy2iCzstpQs7LaVLOy2mCzstpws7LakLOy2pSzstqcs7LapLOy2sCzst" \
        "4Qs7LeMLOy3kCzst6gs7LesLOy3sCzst7gs7Le5LOy3uyzst70s7LiELOy4iCzsuIws" \
        "7LiULOy4mSzsuKAs7LihLOy4pCzsuKgs7LiwLOy4sSzsuLMs7Li1LO2aqyztmq0s7Zq" \
        "uLO2aryztmrEs7ZqyLO2asyztmrQs7Zq1LO2atiztmrcs7Zq4LO2auiztmrws7Zq9LO" \
        "2aviztmr8s7ZuALO2bgSztm4Is7ZuDLO2bhiztm4cs7ZuJLO2biiztm4ss7ZuNLO2bj" \
        "iztm48s7ZuQLO2bkiztm5Ms7ZuVLO2bliztm5gs7ZuaLO2bmyztm5ws7ZudLO2bnizt" \
        "m58s7ZuhLO2boiztm6Ms7ZulLO2bpiztm6cs7ZupLO2bqiztm6ss7ZusLO2brSztm64" \
        "s7ZuvLO2bsSztm7Is7ZuzLO2btCztm7Ys7Zu3LO2buCztm7ks7Zu6LO2buyztm74s7Z" \
        "u/LO2cgSztnIIs7ZyDLO2chSztnIYs7ZyHLO2ciCztnIks7ZyKLO2ciyztnIws7ZyNL" \
        "O2cjiztnI8s7ZyQLO2ckiztnJMs7ZyULOy5mCzsuZks7LmcLOy5nyzsuaAs7LmhLOy5" \
        "qCzsuaks7LmrLOy5rSzsubQs7Lm1LOy5uCzsubws7LqELOy6hSzsuocs7LqJLOy6kCz" \
        "supEs7LqULOy6mCzsuqAs7LqhLOy6oyzsuqQs7LqlLOy6rCzsuq0s7LuBLOy7pCzsu6" \
        "Us7LuoLOy7qyzsu6ws7Lu0LOy7tSzsu7cs7Lu4LOy7uSzsvIAs7LyBLOy8hCzsvIgs7" \
        "LyQLOy8kSzsvJMs7LyVLOy8nCzsvKAs7LykLOy8rCzsvK0s7LyvLOy8sCzsvLEs7Ly4" \
        "LOy9lCzsvZUs7L2YLOy9nCzsvaQs7L2lLOy9pyzsvaks7L2wLOy9sSzsvbQs7L24LOy" \
        "+gCzsvoUs7L6MLOy+oSzsvqgs7L6wLOy/hCzsv6As7L+hLOy/pCzsv6gs7L+wLOy/sS" \
        "zsv7Ms7L+1LOy/vCztgIAs7YCELO2AkSztgJgs7YCtLO2AtCztgLUs7YC4LO2AvCztn" \
        "JUs7ZyWLO2clyztnJos7ZybLO2cnSztnJ4s7ZyfLO2coSztnKIs7ZyjLO2cpCztnKUs" \
        "7ZymLO2cpyztnKos7ZysLO2criztnK8s7ZywLO2csSztnLIs7ZyzLO2ctiztnLcs7Zy" \
        "5LO2cuiztnLss7Zy9LO2cviztnL8s7Z2ALO2dgSztnYIs7Z2DLO2dhSztnYYs7Z2ILO" \
        "2diiztnYss7Z2MLO2djSztnY4s7Z2PLO2dkiztnZMs7Z2VLO2dmiztnZss7Z2cLO2dn" \
        "SztnZ4s7Z2fLO2doiztnaQs7Z2mLO2dpyztnags7Z2qLO2dqyztna0s7Z2uLO2dryzt" \
        "nbEs7Z2yLO2dsyztnbUs7Z22LO2dtyztnbgs7Z25LO2duiztnbss7Z2+LO2dvyztnoA" \
        "s7Z6CLO2egyztnoQs7Z6FLO2ehiztnocs7Z6KLO2eiyztgYQs7YGFLO2BhyztgYks7Y" \
        "GQLO2BlCztgZgs7YGgLO2BrCztga0s7YGwLO2BtCztgbws7YG9LO2CgSztgqQs7YKlL" \
        "O2CqCztgqws7YK0LO2CtSztgrcs7YK5LO2DgCztg4Es7YOELO2DiCztg4ks7YOQLO2D" \
        "kSztg5Ms7YOULO2DlSztg5ws7YOdLO2DoCztg6Qs7YOsLO2DrSztg68s7YOwLO2DsSz" \
        "tg7gs7YSNLO2EsCzthLEs7YS0LO2EuCzthLos7YWALO2FgSzthYMs7YWELO2FhSzthY" \
        "ws7YWNLO2FkCzthZQs7YWcLO2FnSzthZ8s7YWhLO2FqCzthaws7YW8LO2GhCzthogs7" \
        "YagLO2GoSzthqQs7YaoLO2GsCzthrEs7YazLO2GtSzthros7Ya8LO2HgCzth5gs7Ye0" \
        "LO2HuCztiIcs7YiJLO2IkCztiKws7YitLO2IsCztiLQs7Yi8LO2IvSztiL8s7YmBLO2" \
        "JiCztiZws7Z6NLO2ejiztno8s7Z6RLO2ekiztnpMs7Z6ULO2elSztnpYs7Z6XLO2emi" \
        "ztnpws7Z6eLO2enyztnqAs7Z6hLO2eoiztnqMsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws7YmkLO2K" \
        "gCztioEs7YqELO2KiCztipAs7YqRLO2KlSztipws7YqgLO2KpCztiqws7YqxLO2KuCz" \
        "tirks7Yq8LO2Kvyzti4As7YuCLO2LiCzti4ks7YuLLO2LlCzti5gs7YucLO2LpCzti6" \
        "Us7YuwLO2LsSzti7Qs7Yu4LO2MgCztjIEs7YyDLO2MhSztjIws7YyNLO2MjiztjJAs7" \
        "YyULO2MliztjJws7YydLO2MnyztjKAs7YyhLO2MpSztjKgs7YypLO2MrCztjLAs7Yy4" \
        "LO2MuSztjLss7Yy8LO2MvSztjYQs7Y2FLO2NvCztjb0s7Y6ALO2OhCztjows7Y6NLO2" \
        "OjyztjpAs7Y6RLO2OmCztjpks7Y6cLO2OoCztjqgs7Y6pLO2Oqyztjq0s7Y60LO2OuC" \
        "ztjrws7Y+ELO2PhSztj4gs7Y+JLO2PkCztj5gs7Y+hLO2Poyztj6ws7Y+tLO2PsCztj" \
        "7Qs7Y+8LO2PvSztj78s7ZCBLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLO2QiCztkJ0s7ZGALO2RhCztkZws7ZGgLO2RpCztka0s7ZGvLO2RuCztkbks7ZG8LO" \
        "2RvyztkoAs7ZKCLO2SiCztkoks7ZKLLO2SjSztkpQs7ZKpLO2TjCztk5As7ZOULO2Tn" \
        "Cztk58s7ZOoLO2TrCztk7As7ZO4LO2Tuyztk70s7ZSELO2UiCztlIws7ZSULO2UlSzt" \
        "lJcs7ZS8LO2UvSztlYAs7ZWELO2VjCztlY0s7ZWPLO2VkSztlZgs7ZWZLO2VnCztlaA" \
        "s7ZWlLO2VqCztlaks7ZWrLO2VrSztlbQs7ZW1LO2VuCztlbws7ZaELO2WhSztlocs7Z" \
        "aILO2WiSztlpAs7ZalLO2XiCztl4ks7ZeMLO2XkCztl5Is7ZeYLO2XmSztl5ss7ZedL" \
        "O2XpCztl6Us7ZeoLO2XrCztl7Qs7Ze1LO2Xtyztl7ks7ZiALO2YgSztmIQs7ZiILO2Y" \
        "kCztmJEs7ZiTLO2YlCztmJUs7ZicLO2YoCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCztmKQs7ZitLO2YuCztmLks7Zi8LO2ZgCztmYUs7ZmILO2ZiSztmYss7" \
        "ZmNLO2ZkSztmZQs7ZmVLO2ZmCztmZws7ZmnLO2ZqSztmbAs7ZmxLO2ZtCztmoMs7ZqF" \
        "LO2ajCztmo0s7ZqQLO2alCztmp0s7ZqfLO2aoSztmqgs7ZqsLO2asCztmrks7Zq7LO2" \
        "bhCztm4Us7ZuILO2bjCztm5Es7ZuULO2blyztm5ks7ZugLO2bpCztm6gs7ZuwLO2btS" \
        "ztm7ws7Zu9LO2cgCztnIQs7ZyRLO2cmCztnJks7ZycLO2coCztnKgs7ZypLO2cqyztn" \
        "K0s7Zy0LO2ctSztnLgs7Zy8LO2dhCztnYcs7Z2JLO2dkCztnZEs7Z2ULO2dliztnZcs" \
        "7Z2YLO2dmSztnaAs7Z2hLO2doyztnaUs7Z2pLO2drCztnbAs7Z20LO2dvCztnb0s7Z6" \
        "BLO2eiCztnoks7Z6MLO2ekCztnpgs7Z6ZLO2emyztnp0sLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOS8vSzkv" \
        "bMs5YGHLOWDuSzliqAs5Y+vLOWRtSzlk6Us5ZiJLOWrgSzlrrYs5pqHLOaetizmnrcs" \
        "5p+vLOatjCznj4Is55eCLOeovCzoi5ss6IyELOihlyzooogs6Ki2LOiziCzot48s6Lu" \
        "7LOi/pizpp5Us5Yi7LOWNtCzlkIQs5oGqLOaFpCzmrrws54+PLOiEmizopros6KeSLO" \
        "mWoyzkvoMs5YiKLOWivizlpbgs5aemLOW5sizlubks5oeHLOaPgCzmnYYs5p+sLOahv" \
        "yzmvpcs55mOLOeciyzno7Us56iILOervyznsKEs6IKdLOiJrizoibEs6KurLOmWkyzk" \
        "uass5ZadLOabtyzmuLQs56KjLOerrSzokZss6KSQLOidjizpnqgs5YuYLOWdjizloKo" \
        "s5bWMLOaEnyzmhr4s5oihLOaVoizmn5Es5qmELOa4myznlJgs55azLOeboyznnrAs57" \
        "S6LOmCryzpkZEs6ZGSLOm+lSwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCzljKMs5bKsLOeUsizog5ss6YmALOmWmCzliZss5aCILOWnnCzlsqEs5bSXLOW6tyz" \
        "lvLos5b2KLOaFtyzmsZ8s55W6LOeWhizns6As57WzLOe2sSznvows6IWULOiIoSzolp" \
        "Es6KWBLOismyzpi7ws6ZmNLOmxhyzku4ss5Lu3LOWAiyzlh7Es5aGPLOaEtyzmhL4s5" \
        "oWoLOaUuSzmp6os5ryRLOeWpSznmoYs55uWLOeuhyzoiqUs6JOLLO+kgCzpjqcs6ZaL" \
        "LOWWgCzlrqIs5Z2RLO+kgSznsrMs5765LOmGtSzlgKgs5Y67LOWxhSzlt6gs5ouSLOa" \
        "Nrizmk5os5pOnLOa4oCzngqws56WbLOi3nSzouJ4s76SCLOmBvSzpiYUs6Yu4LOS5vi" \
        "zku7Ys5YGlLOW3vizlu7os5oSGLOallyzohbEs6JmULOi5hyzpjbUs6airLOS5nizlg" \
        "pEs5p2wLOahgCzlhIks5YqNLOWKkizmqqIsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCws5568LOmIkCzpu5Qs5YqrLOaAryzov7Is5YGILOaGqSzmj60s5pOKLO" \
        "agvCzmqoQs5r+ALOiGiCzopqEs6ZqULOWghSznib0s54qsLOeUhCzntbks57mtLOiCq" \
        "Szoposs6K20LOmBoyzptZEs5oqJLOaxuizmvZQs57WQLOe8uizoqKMs5YW8LOaFiizn" \
        "rp0s6KyZLOmJlyzpjows5LqsLOS/kyzlgJ4s5YK+LOWEhizli4Es5YuNLOWNvyzlnbA" \
        "s5aKDLOW6mizlvpEs5oW2LOaGrCzmk44s5pWsLOaZryzmmrss5pu0LOailyzmtocs54" \
        "KFLOeDsSznkp8s55KlLOeTiiznl5ks56GsLOejrCznq58s56u2LOe1hSzntpMs6ICVL" \
        "OiAvyzohJss6I6WLOitpizovJUs6YCVLOmPoSzpoIMs6aC4LOmpmizpr6gs5L+CLOWV" \
        "kyzloLos5aWRLOWtoyzlsYYs5oK4LOaIkizmoYIs5qKwLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLOajqCzmuqos55WMLOeZuCzno44s56i9LOezuyznuass5" \
        "7m8LOioiCzoqqEs6LC/LOmajizpt4Qs5Y+kLOWPqSzlkYos5ZGxLOWbuizlp5Es5a2k" \
        "LOWwuyzluqss5ou3LOaUtyzmlYUs5pWyLOaaoCzmnq8s5qeBLOayvSznl7ws55qQLOe" \
        "dviznqL8s576ULOiAgyzogqEs6IaPLOiLpizoi70s6I+wLOiXgSzooLEs6KK0LOiqpS" \
        "zvpIMs6L6cLOmMrizpm4cs6aGnLOmrmCzpvJMs5ZOtLOaWmyzmm7Is5qKPLOepgCzos" \
        "Lcs6bWgLOWbsCzlnaQs5bSRLOaYhizmorEs5qONLOa7viznkKgs6KKeLOmvpCzmsags" \
        "76SELOmqqCzkvpss5YWsLOWFsSzlip8s5a2ULOW3pSzmgZAs5oGtLOaLsSzmjqcs5pS" \
        "7LOePmSznqbos6JqjLOiyoizpno8s5LiyLOWvoSzmiIgs5p6cLOeTnCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCznp5Es6I+TLOiqhyzoqrIs6LeoLOmBjizp" \
        "jYss6aGGLOW7kyzmp6gs6Je/LOmDrSzvpIUs5YagLOWumCzlr6ws5oWjLOajuizmrL4" \
        "s54GMLOeQryznk5gs566hLOe9kCzoj4Us6KeALOiyqyzpl5ws6aSoLOWIrizmgZ0s5o" \
        "usLOmAgizkvoos5YWJLOWMoSzlo5ks5bujLOaboCzmtLgs54KaLOeLgiznj5Ys562QL" \
        "OiDsSzpkZss5Y2mLOaOmyznvass5LmWLOWCgCzloYos5aOeLOaAqizmhKcs5ouQLOan" \
        "kCzprYEs5a6PLOe0mCzogrEs6L2fLOS6pCzlg5Es5ZKsLOWWrCzlrIws5bagLOW3pyz" \
        "mlKos5pWOLOagoSzmqYss54uhLOeajiznn68s57WeLOe/uSzohqAs6JWOLOibnyzovI" \
        "Ms6L2OLOmDiizppIMs6amVLOmuqyzkuJgs5LmFLOS5nSzku4cs5L+xLOWFtyzli74sL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws5Y2ALOWPoyzlj6Us5ZKOLOW" \
        "YlCzlnbUs5Z6iLOWvhyzltocs5buQLOaHvCzmi5gs5pWRLOaeuCzmn6ks5qeLLOatkC" \
        "zmr4Ys5q+sLOaxgizmup0s54G4LOeLlyznjpYs55CDLOeevyznn6ks56m2LOe1vyzog" \
        "Iks6Ie8LOiIhSzoiIos6IufLOihoizorLMs6LO8LOi7gCzpgJEs6YKxLOmJpCzpirYs" \
        "6aeSLOmphSzps6ks6beXLOm+nCzlnIss5bGALOiPiizpnqAs6Z6rLOm6tCzlkJss56q" \
        "YLOe+pCzoo5ks6LuNLOmDoSzloIAs5bGILOaOmCznqp8s5a6uLOW8kyznqbks56quLO" \
        "iKjizouqws5YCmLOWIuCzli7gs5Y23LOWciCzmi7Ms5o2yLOasiizmt4Ms55y3LOWOp" \
        "SznjZcs6JWoLOi5tizpl5Us5py6LOargyzmvbAs6KmtLOi7jCzppYss76SGLOaZtyzm" \
        "rbgs6LK0LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOmsvCzvpIcs5Y" \
        "+rLOWcrSzlpY4s5o+GLOanuyznj6os56GFLOequiznq4Us57O+LOiRtSzopo8s6LWzL" \
        "OmAtSzplqgs5Yu7LOWdhyznlYcs562gLOiPjCzpiJ4s76SILOapmCzlhYss5YmLLOWK" \
        "hyzmiJ8s5qOYLOaltSzpmpks5YOFLOWKpCzli6Qs5oeDLOaWpCzmoLks5qe/LOeRviz" \
        "nrYss6Iq5LOiPqyzoprIs6Ky5LOi/kSzppYks76SJLOS7iizlppcs5pOSLOaYkSzmqo" \
        "4s55C0LOemgSznpr0s6IqpLOihvizoob8s6KWfLO+kiizpjKYs5LyLLOWPiizmgKUs5" \
        "omxLOaxsizntJos57WmLOS6mCzlhaIs55+cLOiCryzkvIEs5LyOLOWFtizlhoAs5Zec" \
        "LOWZqCzlnLss5Z+6LOWfvCzlpJQs5aWHLOWmkyzlr4Qs5bKQLOW0jizlt7Es5bm+LOW" \
        "/jCzmioAs5peXLOaXoywsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzmn" \
        "J4s5pyfLOadnizmo4ss5qOELOapnyzmrLos5rCjLOaxvSzmsoIs5reHLOeOmCznkKYs" \
        "55CqLOeSgiznkqMs55W4LOeVvyznooEs56OvLOelgSznpYcs56WILOeluiznrpUs57S" \
        "ALOe2uiznvogs6ICGLOiArSzogows6KiYLOitjyzosYgs6LW3LOmMoSzpjKQs6aOiLO" \
        "mlkSzpqI4s6aiPLOmppSzpupIs57eKLOS9tizlkIks5ouuLOahlCzph5Es5ZarLOWEu" \
        "izvpIss76SMLOWonCzmh6Ys76SNLOaLjyzmi78s76SOLO+kjyzvpJAs76SRLO+kkizv" \
        "pJMs6YKjLO+klCzvpJUs76SWLO+klyzvpJgs6Ku+LO+kmSzvpJos76SbLO+knCzmmpY" \
        "s76SdLOeFlizvpJ4s76SfLOmboyzvpKAs5o2PLOaNuizljZcs76ShLOaejyzmpaAs5r" \
        "mzLO+koiznlLcs76SjLO+kpCzvpKUsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCws57SNLO+kpizvpKcs6KGyLOWbiizlqJgs76SoLO+kqSzvpKos76SrLO+krCz" \
        "kuYMs76StLOWFpyzlpYgs5p+wLOiAkCzvpK4s5aWzLOW5tCzmkpos56eKLOW/tSzmga" \
        "ws5ouILOaNuyzlr6cs5a+XLOWKqizvpK8s5aW0LOW8qSzmgJIs76SwLO+ksSzvpLIs5" \
        "5GZLO+ksyzvpLQs76S1LO+ktizvpLcs76S4LOmnkSzvpLks76S6LO+kuyzvpLws76S9" \
        "LO+kvizvpL8s76WALO+lgSzvpYIs76WDLOa/gyzvpYQs76WFLOiGvyzovrIs5oOxLO+" \
        "lhizvpYcs6IWmLO+liCzvpYks5bC/LO+liizvpYss76WMLO+ljSzvpY4s76WPLO+lkC" \
        "zvpZEs5aupLOiopSzmnbss57SQLO+lkizvpZMs76WULO+llSzvpZYs76WXLOiDvSzvp" \
        "Zgs76WZLOWwvCzms6Us5Yy/LOa6uizlpJos6Iy2LCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLOS4uSzkurYs5L2GLOWWrizlnJgs5aOHLOW9lizmlrcs5pemLO" \
        "aqgCzmrrUs5rmNLOefrSznq68s57CeLOe3nizom4ss6KKSLOmEsizpjZss5pK7LOa+v" \
        "iznjbos55a4LOmBlCzllZYs5Z2NLOaGuizmk5Qs5puHLOa3oSzmuZss5r2tLOa+uSzn" \
        "l7As6IGDLOiGvSzolYEs6KaDLOirhyzorZos6YyfLOaykyznlZMs562ULOi4jyzpgZ0" \
        "s5ZSQLOWggizloZgs5bmiLOaIhyzmkp4s5qOgLOeVtizns5Ys6J6zLOm7qCzku6Ms5Z" \
        "6ILOWdrizlpKcs5bCNLOWysSzluLYs5b6FLOaItCzmk6Es546zLOiHuizoooss6LK4L" \
        "Omaiizpu5ss5a6FLOW+tyzmgrMs5YCSLOWIgCzliLAs5ZyWLOWgtSzloZcs5bCOLOWx" \
        "oCzls7Ys5baLLOW6pizlvpIs5oK8LOaMkSzmjoks5pCXLOahgywsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCzmo7ks5quCLOa3mCzmuKEs5ruULOa/pCznh74s5" \
        "5ucLOeduSznprEs56i7LOiQhCzopqks6LOtLOi3syzouYgs6YCDLOmAlCzpgZMs6YO9" \
        "LOmNjSzpmbYs6Z+cLOavkizngIYs54mYLOeKoiznjags552jLOemvyznr6Qs57qbLOi" \
        "ugCzloqks5oOHLOaVpizml70s5pq+LOayjCznhJ4s54eJLOixmizpoJMs5LmtLOeqgS" \
        "zku50s5YasLOWHjSzli5Us5ZCMLOaGpyzmnbEs5qGQLOajnyzmtJ4s5r28LOeWvCznn" \
        "rMs56ulLOiDtCzokaMs6YqFLOWFnCzmlpcs5p2cLOaekyznl5gs56uHLOiNsyzvpZos" \
        "6LGGLOmAlyzpoK0s5bGvLOiHgCzoipos6YGBLOmBryzpiI0s5b6XLOW2nSzmqZks54e" \
        "ILOeZuyznrYks6JekLOishCzphKcs6aiwLOWWhyzmh7Ys76WbLOeZqSznvoUsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6Ji/LOieuizoo7gs6YKPLO+lnCzm" \
        "tJss54OZLOePnizntaEs6JC9LO+lnSzphaos6aexLO+lnizkuoIs5Y21LOashCzmrJI" \
        "s54C+LOeImyzomK0s6bieLOWJjCzovqMs5bWQLOaTpSzmlKws5qyWLOa/qyznsYMs57" \
        "qcLOiXjSzopaQs6Ka9LOaLiSzoh5gs6KCfLOW7iizmnJcs5rWqLOeLvCznkIUs55GvL" \
        "Oiegizpg54s5L6GLOW0jSzlvqAs6JCKLOWGtyzmjqAs55WlLOS6rizlgIYs5YWpLOWH" \
        "iSzmooEs5qiRLOeyriznsrEs57OnLOiJryzoq5Is6LybLOmHjyzkvrYs5YS3LOWLtSz" \
        "lkYIs5busLOaFrizmiL4s5peFLOarmizmv74s56SqLOiXnCzooKMs6ZatLOmpoizpqa" \
        "os6bqXLOm7jizlipss5puGLOattyzngJ0s56SrLOi9oizpnYIs5oaQLOaIgCzmlKMs5" \
        "ryjLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOeFiSznkoks57e0LOi" \
        "Bryzok64s6LymLOmAoyzpjYos5Ya9LOWIlyzliqMs5rSMLOeDiCzoo4Is5buJLOaWgi" \
        "zmrq4s5r+CLOewviznjbUs5LukLOS8tizlm7ks76WfLOWyuizltros5oCcLOeOsiznr" \
        "K0s576aLOe/jizogYYs6YCeLOmItCzpm7Ys6Z2ILOmgmCzpvaEs5L6LLOa+pyznpq4s" \
        "6Ya0LOmatyzli54s76WgLOaSiCzmk4Qs5quTLOa9nizngJgs54iQLOebpyzogIEs6Ji" \
        "GLOiZnCzot68s6LyFLOmcsizpra8s6be6LOm5tSznoows56W/LOe2oCzoj4ks6YyELO" \
        "m5vyzpupMs6KuWLOWjnyzlvIQs5pynLOeApyznk48s57GgLOiBvizlhKEs54CoLOeJo" \
        "izno4os6LOCLOizmizos7Qs6Zu3LOS6hizlg5os5a+uLOW7lizmlpks54eOLOeZgizn" \
        "nq0s6IGKLOiTvCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzpgbws6a" \
        "ynLOm+jSzlo5gs5amBLOWxoizmqJMs5reaLOa8jyznmLss57SvLOe4tyzolJ4s6KS4L" \
        "OmPpCzpmYss5YqJLOaXkizmn7Ms5qa0LOa1gSzmupws54CPLOeQiSznkaAs55WZLOeY" \
        "pCznoass6KysLOmhnizlha0s5oiuLOmZuCzkvpYs5YCrLOW0mSzmt6os57a4LOi8qiz" \
        "lvoss5oWELOaglyzvpaEs6ZqGLOWLkizogoss5YecLOWHjCzmpZ4s56icLOe2vizoj7" \
        "Es6Zm1LOS/mizliKks5Y6YLOWQjyzllI4s5bGlLOaCpyzmnY4s5qKoLOa1rCznioEs5" \
        "4u4LOeQhiznkoMs76WiLOeXoiznsaws5725LOe+uCzojoks6KOPLOijoSzph4ws6YeQ" \
        "LOmboizpr4ks5ZCdLOa9viznh5As55KYLOiXuizouqos6ZqjLOmxlyzpup8s5p6XLOa" \
        "3iyznkLMs6IeoLOmcliznoKwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "Cws56uLLOesoCznspIs5pGpLOeRqiznl7Is56K8LOejqCzppqws6a2ULOm6uyzlr54s" \
        "5bmVLOa8oCzohpws6I6rLOmCiCzkuIcs5Y2NLOWoqSzlt5Is5b2OLOaFoizmjL0s5pm" \
        "pLOabvCzmu78s5ryrLOeBoyznnp4s6JCsLOiUkyzooLss6LyTLOmlhSzpsLss5ZScLO" \
        "aKuSzmnKss5rKrLOiMiSzopaos6Z26LOS6oSzlpoQs5b+YLOW/mSzmnJss57ayLOe9l" \
        "CzoipIs6IyrLOiOvSzovJ4s6YKZLOWfiyzlprks5aqSLOWvkCzmmKcs5p6aLOaihSzm" \
        "r48s54WkLOe9tSzosrcs6LOjLOmCgSzprYUs6ISILOiyiizpmYws6amALOm6pSzlrZ8" \
        "s5rCTLOeMmyznm7Is55ufLOiQjCzlhqos6KaTLOWFjSzlhpUs5YuJLOajiSzmspQs55" \
        "yELOecoCzntr8s57esLOmdoizpurUs5ruFLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLOiUkSzlhqUs5ZCNLOWRvSzmmI4s5pqdLOakpyzmup8s55q/LOeekSz" \
        "ojJcs6JOCLOienyzphaks6YqYLOmztCzoooIs5L6uLOWGkizli58s5aeGLOW4vSzmhZ" \
        "Us5pG4LOaRuSzmmq4s5p+QLOaooSzmr40s5q+bLOeJnyzniaEs55GBLOecuCznn5ss6" \
        "ICXLOiKvCzojIUs6KyALOisqCzosows5pyoLOaykCzniacs55uuLOedpiznqYYs6bap" \
        "LOatvyzmspIs5aSiLOacpizokpks5Y2vLOWikyzlppks5bufLOaPjyzmmLQs5p2zLOa" \
        "4uiznjKss56uXLOiLlyzpjKgs5YuZLOW3qyzmhq4s5oeLLOaIiizmi4cs5pKrLOaXoC" \
        "zmpZks5q2mLOaviyznhKEs54+3LOeVnSznuYYs6IieLOiMgizolaos6KqjLOiyvyzpn" \
        "Kcs6bWhLOWiqCzpu5gs5YCRLOWIjizlkLss5ZWPLOaWhywsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCzmsbYs57SKLOe0iyzogZ4s6JqKLOmWgCzpm68s5Yu/LO" \
        "aylSzniaks5ZGzLOWqmizlsL4s5bWLLOW9jCzlvq4s5pyqLOaitizmpaMs5ri8LOa5h" \
        "CznnIks57GzLOe+jizolocs6KyOLOi/tyzpnaEs6bu0LOWytyzmgrYs5oSNLOaGqyzm" \
        "lY8s5pe7LOaXvCzmsJEs5rOvLOeOnyznj4ks57ehLOmWlCzlr4Ys6JycLOiskCzliZ0" \
        "s5Y2aLOaLjSzmkI8s5pKyLOactCzmqLgs5rOKLOePgCznkp4s566ULOeylSznuJss6I" \
        "aKLOiItizoloQs6L+rLOmbuSzpp4Es5Ly0LOWNiizlj40s5Y+bLOaLjCzmkKws5pSAL" \
        "OaWkSzmp4Ms5rOuLOa9mCznj60s55WULOeYoiznm6Qs55u8LOejkCzno7ss56SsLOe1" \
        "hizoiKws6J+gLOi/lCzpoJIs6aOvLOWLgyzmi5Qs5pKlLOa4pCzmvZEsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws55m8LOi3iyzphrEs6YmiLOmrrizprYMs5" \
        "YCjLOWCjSzlnYos5aaoLOWwqCzluYcs5b23LOaIvyzmlL4s5pa5LOaXgSzmmIks5p6L" \
        "LOamnCzmu4Is56OFLOe0oSzogqos6IaALOiIqyzoirMs6JKhLOiajCzoqKos6KyXLOm" \
        "CpizpmLIs6b6QLOWAjSzkv7Ms76WjLOWfuSzlvpgs5oucLOaOkizmna8s5rmDLOeEmS" \
        "znm4Ms6IOMLOiDmizoo7Qs6KO1LOikmSzos6As6LypLOmFjSzpmaos5LyvLOS9sCzlu" \
        "Jss5p+PLOagoiznmb0s55m+LOmthCzluaEs5qiKLOeFqSznh5Qs55WqLO+lpCznuYEs" \
        "6JWDLOiXqSzpo5ws5LyQLOetjyznvbAs6ZalLOWHoSzluIYs5qK1LOawvizmsY4s5rO" \
        "bLOeKryznr4Qs6IyDLOazlSznkLos5YO7LOWKiCzlo4Es5pOYLOaqlyznkqcs55mWLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOeipyzomJcs6ZeiLOmcuSzv" \
        "paUs5Y2eLOW8gSzoroos6L6oLOi+ryzpgoos5YilLOeepSzpsYks6byILOS4mSzlgII" \
        "s5YW1LOWxmyzlubcs5pieLOaYuizmn4Qs5qOFLOeCsyznlIEs55eFLOeniSznq50s6L" \
        "ynLOmkoCzpqIgs5L+dLOWgoSzloLEs5a+2LOaZrizmraUs5rSRLOa5uizmvb0s54+kL" \
        "OeUqyzoj6ks6KOcLOikkyzorZws6LyULOS8jyzlg5Us5YyQLOWNnCzlrpMs5b6pLOac" \
        "jSznpo8s6IW5LOiMryzolJQs6KSHLOimhizovLks6Ly7LOmmpSzpsJIs5pysLOS5tiz" \
        "kv7gs5aWJLOWwgSzls68s5bOwLOaNpyzmo5Is54O9LOeGoiznkKss57irLOiTrCzonI" \
        "Is6YCiLOmLkizps7Ms5LiNLOS7mCzkv68s5YKFLOWJlizlia8s5ZCmLOWSkCzln6As5" \
        "aSrLOWppiwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzlrZos5a21LOW" \
        "vjCzlupws76WmLOaJtizmlbcs5panLOa1rizmuqUs54i2LOespiznsL8s57y2LOiFkC" \
        "zohZEs6IaaLOiJgCzoipks6I6pLOiogyzosqAs6LOmLOizuyzotbQs6La6LOmDqCzph" \
        "5ws6ZicLOmZhCzpp5ks6bOnLOWMlyzliIYs5ZCpLOWZtCzlorMs5aWULOWlrizlv78s" \
        "5oakLOaJrizmmJAs5rG+LOeEmiznm4Ys57KJLOeznizntJss6IqsLOizgSzpm7As76W" \
        "nLOS9myzlvJcs5b2/LOaLgizltKks5pyLLOajmiznobws57mDLOm1rCzkuJUs5YKZLO" \
        "WMlSzljKos5Y2RLOWmgyzlqaIs5bqHLOaCsizmhoos5omJLOaJuSzmlpAs5p6HLOamp" \
        "yzmr5Qs5q+WLOavlyzmr5gs5rK4LO+lqCznkLUs55e6LOegkiznopEs56eVLOenmCzn" \
        "soMs57eLLOe/oSzogqUsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6I" \
        "S+LOiHgizoj7Is6JyaLOijqCzoqrks6K2sLOiyuyzphJks6Z2eLOmjmyzpvLss5ZqsL" \
        "OWsqizlvaws5paMLOaqsyzmrq8s5rWcLOa/sSzngJUs54mdLOeOrSzosqcs6LOTLOmg" \
        "uyzmhpEs5rC3LOiBmCzpqIEs5LmNLOS6iyzkupss5LuVLOS8uizkvLws5L2/LOS/nyz" \
        "lg78s5Y+yLOWPuCzllIYs5ZejLOWbmyzlo6ss5aWiLOWokSzlr6ss5a+6LOWwhCzlt7" \
        "Ms5birLOW+mSzmgJ0s5o2oLOaWnCzmlq8s5p+2LOafuyzmoq0s5q27LOaymSzms5cs5" \
        "rijLOeAiSznjYUs56CCLOekviznpYAs56WgLOengSznr6ks57SXLOe1sizogoYs6IiN" \
        "LOiOjizok5Es6JuHLOijnyzoqZAs6KmeLOisnSzos5ws6LWmLOi+rSzpgqos6aO8LOm" \
        "nnyzpup0s5YmKLO+lqSzmnJQs76WqLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLOWCmCzliKos5bGxLOaVoyzmsZUs54+KLOeUoyznlp0s566XLOiSnCzphbgs" \
        "6ZywLOS5tyzmkpIs5q66LOeFnizolqks5LiJLO+lqyzmnYks5qOuLOa4lyzoip8s6JS" \
        "YLOihqyzmj7cs5r6BLOmIkizpoq8s5LiKLOWCtyzlg48s5YSfLOWVhizllqos5ZiXLO" \
        "WtgCzlsJks5bOgLOW4uCzluoos5bqgLOW7gizmg7Ms5qGRLOapoSzmuZgs54i9LOeJg" \
        "Czni4As55u4LOelpSznrrEs57+ULOijsyzop7Qs6KmzLOixoSzos54s6ZycLOWhnizn" \
        "kr0s6LO9LOWXhyzvpaws56mhLOe0oizoibIs54myLOeUnyznlKUs76WtLOesmSzlooU" \
        "s5aO7LOW2vCzluo8s5bq2LOW+kCzmgZUs5oqSLOaNvyzmlY0s5pqRLOabmSzmm7gs5q" \
        "CWLOajsiznioAs55GeLOetriznta4s57eWLOe9siwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCzog6Us6IiSLOiWryzopb8s6KqTLOmAnSzpi6Qs6buNLOm8oCz" \
        "lpJUs5aWtLOW4rSzmg5ws5piULOaZsyzmnpAs5rGQLOa3hSzmvZ8s55+zLOeiqSzok4" \
        "Ys6YeLLOmMqyzku5ks5YOKLOWFiCzlloQs5ayLLOWuoyzmiYcs5pW+LOaXiyzmuLIs5" \
        "4W9LOeQgSznkYQs55KHLOeSvyznmaws56aqLOe3miznuZUs576oLOiFuizohrMs6Ii5" \
        "LOiYmizon6ws6Km1LOi3oyzpgbgs6YqRLOmQpSzppY0s6a6uLOWNqCzlsZEs5qWULOa" \
        "zhCzmtKks5rirLOiIjCzolpss6KS7LOiorSzoqqos6ZuqLOm9pyzliaEs5pq5LOausi" \
        "znupYs6J++LOi0jSzploMs6ZmdLOaUnSzmtoks54euLO+lrizln44s5aeTLOWurCzmg" \
        "Kcs5oO6LOaIkCzmmJ8s5pmfLOeMqSznj7ks55ubLOecgSznrawsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCws6IGWLOiBsizohaUs6KqgLOmGkizkuJYs5YuiLO" \
        "atsizmtJcs56iFLOesuSzntLAs76WvLOiysCzlj6ws5ZivLOWhkSzlrrUs5bCPLOWwk" \
        "Szlt6Is5omALOaOgyzmkJQs5pitLOaisyzmsrws5raILOa6ryzngJ8s54KkLOeHkizn" \
        "lKYs55aPLOeWjiznmJks56yRLOevoCznsKss57SgLOe0uSzolKws6JWtLOiYhyzoqLQ" \
        "s6YCNLOmBoSzpgrUs6Yq3LOmftizpqLcs5L+XLOWxrCzmnZ8s5raRLOeynyznuows6K" \
        "yWLOi0lizpgJ8s5a2rLOW3vSzmkI0s6JOALOmBnCzpo6Es546HLOWuiyzmgpos5p2+L" \
        "Oa3nizoqJ8s6KqmLOmAgSzpoIws5Yi3LO+lsCzngZEs56KOLOmOlizoobAs6YeXLOS/" \
        "rizlj5cs5Ze9LOWbmizlnoIs5aO9LOWrgizlrogs5bKrLOWzgCzluKUs5oSBLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOaIjSzmiYss5o6ILOaQnCzmlLYs5" \
        "pW4LOaouSzmroos5rC0LOa0mSzmvLEs54enLOeLqSznjbgs55CHLOeSsiznmKYs552h" \
        "LOengCznqZcs56uqLOeyuSznto8s57asLOe5oSznvp4s6ISpLOiMsSzokpAs6JOaLOi" \
        "XqizoopYs6KqwLOiukCzovLgs6YGCLOmCgyzphaws6YqWLOmKuSzpmoss6ZqnLOmaqC" \
        "zpm5Ys6ZyALOmgiCzpppYs6auTLOmsmizlj5Qs5aG+LOWkmSzlrbAs5a6/LOa3kSzmv" \
        "Zos54afLOeQoSznkrks6IKFLOiPvSzlt6Es5b6HLOW+qizmgYIs5pesLOagkizmpa8s" \
        "5qmTLOauiSzmtLUs5rezLOePoyznm74s556sLOetjSzntJQs6ISjLOiInCzojYAs6JO" \
        "0LOiVoyzoqaIs6KuELOmGhyzpjJ4s6aCGLOmmtCzmiIws6KGTLOi/sCzpiaUs5bSHLO" \
        "W0pywsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzltaks55GfLOiGnSzo" \
        "nags5r+VLOaLviznv5Is6KS2LOilsizkuJ4s5LmYLOWDpyzli50s5Y2HLOaJvyzmmIc" \
        "s57mpLOighSzpmZ4s5L6NLOWMmSzlmLYs5aeLLOWqpCzlsLgs5bGOLOWxjSzluIIs5b" \
        "yRLOaBgyzmlr0s5pivLOaZgizmnr4s5p+0LOeMnCznn6Is56S6LOe/hSzokpQs6JONL" \
        "OimlizoqaYs6KmpLOiroSzosZUs6LG6LOWftCzlr5Qs5byPLOaBryzmi60s5qSNLOau" \
        "lizmuZws54aELOevkizonZUs6K2YLOi7vizpo58s6aO+LOS8uCzkvoEs5L+hLOWRuyz" \
        "lqKAs5a64LOaEvCzmlrAs5pmoLOeHvCznlLMs56WeLOe0syzohY4s6IejLOiOmCzolq" \
        "os6JeOLOicgyzoqIos6LqrLOi+myzvpbEs6L+FLOWksSzlrqQs5a+mLOaCiSzlr6ks5" \
        "bCLLOW/gyzmsoEsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws76WyLOa" \
        "3sSzngIss55SaLOiKryzoq7Ys5LuALOWNgSzvpbMs6ZuZLOawjyzkup4s5L+ELOWFki" \
        "zllZ4s5ailLOWzqCzmiJEs54mZLOiKvSzojqos6Ju+LOihmSzoqJ0s6Zi/LOmbhSzpp" \
        "JMs6bSJLOm1nSzloIos5bKzLOW2vSzluYQs5oOhLOaElSzmj6Es5qiCLOa4pSzphIIs" \
        "6Y2ULOmhjizpsJAs6b23LOWuiSzlsrgs5oyJLOaZjyzmoYgs55y8LOmbgSzpno0s6aG" \
        "ULOmunyzmlqEs6KyBLOi7iyzplrws5ZS1LOWyqSzlt5Ys5bq1LOaalyznmYws6I+0LO" \
        "mXhyzlo5Ms5oq8LOeLjizptKgs5LuwLOWkrizmgI8s5pi7LOaugyznp6cs6bSmLOWOk" \
        "yzlk4As5Z+DLOW0lizmhJss5puWLOa2ryznoo0s6Im+LOmamCzpnYQs5Y6ELOaJvCzm" \
        "jpYs5rayLOe4iizohYss6aGNLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLOaruyznvYws6bavLOm4mizkuZ8s5YC7LOWGtizlpJws5oO5LOaPtizmpLAs54i6L" \
        "OiAtizvpbQs6YeOLOW8sSzvpbUs76W2LOe0hCzoi6Us6JGvLOiSuyzol6Us6LqNLO+l" \
        "tyzkva8s76W4LO+luSzlo6Qs5a2DLOaBmSzmj5os5pSYLOaVrSzmmpgs76W6LOaliiz" \
        "mqKMs5rSLLOeAgSznhaws55eSLOeYjSznprMs56mwLO+luyznvoos76W8LOilhCzvpb" \
        "0s6K6TLOmHgCzpmb0s76W+LOmkiizlnIQs5b6hLOaWvCzmvIEs55iALOempizoqp4s6" \
        "aatLOmtmizpvaws5YSELOaGtizmipEs5qqNLOiHhizlgYMs5aCwLOW9piznhIks6KiA" \
        "LOiruizlrbws6JiWLOS/uizlhLws5Zq0LOWlhCzmjqks5re5LOW2qizmpa0s5YaGLOS" \
        "6iCzkvZks76W/LO+mgCzvpoEs5aaCLO+mgiwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCzvpoMs5q2fLOaxnSzvpoQs55K1LOeklizvpoUs6IiHLOiJhSzojLks" \
        "6Ly/LOi9nSzvpoYs6aSYLO+mhyzvpogs76aJLOS6pizvpoos5Z+fLOW9uSzmmJMs76a" \
        "LLO+mjCznlqss57m5LOitryzvpo0s6YCGLOmpmyzlmqUs5aCnLOWnuCzlqJ8s5a60LO" \
        "+mjizlu7Ys76aPLO+mkCzmjZAs5oy7LO+mkSzmpL0s5rKHLOayvyzmto4s5raTLOa3t" \
        "SzmvJQs76aSLOeDnyznhLYs54WZLO+mkyznh4Ms54eVLO+mlCznoY8s56GvLO+mlSzn" \
        "rbUs57ejLO+mliznuK8s76aXLOihjSzou58s76aYLO+mmSzvppos6YmbLO+mmyzps7Y" \
        "s76acLO+mnSzvpp4s5oKFLOa2hSzvpp8s54axLO+moCzvpqEs6ZaxLOWOrSzvpqIs76" \
        "ajLO+mpCzmn5Ms76alLOeCjiznhLAs55CwLOiJtizoi5IsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCws76amLOmWuyzpq6Us6bm9LOabhCzvpqcs54eBLOiRiSz" \
        "vpqgs76apLOWhiyzvpqos76arLOW2uCzlvbEs76asLOaYoCzmmo4s5qW5LOamrizmsL" \
        "gs5rOzLOa4tizmvYEs5r+aLOeAmyzngK8s54WQLOeHnyznjbAs76atLOeRmyzvpq4s5" \
        "5OULOebiCznqY4s57qTLO+mryzvprAs6IuxLOipoCzov44s76axLOmNiCzvprIs6ZyZ" \
        "LO+msyzvprQs5LmCLOWAqizvprUs5YiILOWPoSzmm7Ms5rGtLOa/iiznjIos552/LOe" \
        "poizoiq4s6JedLOiYgizvprYs6KOULOipoyzorb0s6LGrLO+mtyzpirMs76a4LOmcky" \
        "zpoJAs5LqULOS8jSzkv4ks5YKyLOWNiCzlkL4s5ZCzLOWXmizloaIs5aK6LOWlpyzlq" \
        "Jss5a+kLOaCnyzvprks5oeKLOaVlizml78s5pmkLOaipyzmsZos5r6zLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOeDjyznhqws542SLOetvSzonIgs6KqkLO" \
        "mwsizpvIcs5bGLLOaygyznjYQs546JLOmIuizmuqss55GlLOeYnyznqaks57iVLOiYi" \
        "izlhYAs5aOFLOaTgSznk64s55SVLOeZsCznv4Es6YKVLOmbjSzppZQs5rimLOeTpizn" \
        "qqks56qqLOiHpSzom5ks6J24LOiomyzlqYks5a6MLOWumyzmoqEs5qSALOa1oyznjqk" \
        "s55CTLOeQrCznopcs57epLOe/qyzohJgs6IWVLOiOnizosYws6ZiuLOmgkSzmm7As5b" \
        "6ALOaXuizmnoks5rGqLOeOiyzlgK0s5aiDLOatqiznn64s5aSWLOW1rCzlt40s54ylL" \
        "OeVjyzvpros76a7LOWDpSzlh7ks5aCvLOWkrSzlppYs5aeaLOWvpSzvprws76a9LOW2" \
        "oizmi5cs5pCWLOaSkyzmk74s76a+LOabnCzvpr8s5qmILO+ngCznh78s55GkLO+ngSw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCznqogs56qvLOe5hyznuZ4s6" \
        "ICALOiFsCzvp4Is6J+vLOimgSzorKAs6YGZLO+ngyzpgoAs6aWSLOaFvizmrLIs5rW0" \
        "LOe4nyzopKUs6L6xLOS/kSzlgq0s5YaXLOWLhyzln4cs5aKJLOWuuSzlurgs5oWCLOa" \
        "mlSzmtows5rmnLOa6tiznhpQs55GiLOeUqCznlKws6IGzLOiMuCzok4ks6LiKLOmOlC" \
        "zpj54s76eELOS6jizkvZEs5YG2LOWEqizlj4gs5Y+LLOWPsyzlrocs5a+TLOWwpCzmh" \
        "Jos5oaCLOaXtCzniZss546XLOeRgCznm4Is56WQLOemkSznprks57SGLOe+vSzoioss" \
        "6JeVLOiZnizov4Is6YGHLOmDtSzph6os6ZqFLOmbqCzpm6ks5YuWLOW9pyzml60s5pi" \
        "xLOagryznhZws56i2LOmDgSzpoIos5LqRLO+nhSzmqZIs5q6eLOa+kCznhoks6ICYLO" \
        "iKuCzolZMsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6YGLLOmalSzp" \
        "m7Is6Z+7LOiUmizprLEs5LqQLOeGiizpm4Qs5YWDLOWOnyzlk6Es5ZyTLOWckizlnqM" \
        "s5aqbLOWrhCzlr4Ms5oCoLOaEvyzmj7Qs5rKFLOa0uSzmubIs5rqQLOeIsCznjL8s55" \
        "GXLOiLkSzoooEs6L2FLOmBoCzvp4Ys6ZmiLOmhmCzptJss5pyILOi2iizpiZ4s5L2NL" \
        "OWBiSzlg54s5Y2xLOWcjSzlp5Qs5aiBLOWwiSzmhbAs5pqQLOa4rSzniLIs55GLLOe3" \
        "ryzog4Ms6JCOLOiRpizolL8s6J2fLOihmyzopJgs6KyCLOmBlSzpn4ss6a2PLOS5syz" \
        "kvpEs5YSSLOWFqizvp4cs5ZSvLOWWqSzlrbos5a6lLOW5vCzlub0s5bq+LOaCoCzmg5" \
        "8s5oSILOaEiSzmj4Qs5pS4LOaciSzvp4gs5p+ULOafmizvp4ks5qWhLOaloizmsrks5" \
        "rSnLO+niizmuLgs76eLLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOa" \
        "/oSznjLYs54y3LO+njCznkZws55SxLO+njSznmZIs76eOLO+njyzntq0s6Ie+LOiQuC" \
        "zoo5Us6KqYLOirmyzoq60s6LiwLOi5gizpgYos6YC+LOmBuizphYks6YeJLOmNrizvp" \
        "5As76eRLOWgiSzvp5Is5q+TLOiCiSzogrIs76eTLO+nlCzlhYEs5aWrLOWwuSzvp5Us" \
        "76eWLOa9pCznjqcs6IOkLOi0hyzvp5cs6YiXLOmWjyzvp5gs76eZLO+nmizvp5ss6IG" \
        "/LOaIjizngJws57WoLOiejSzvp5ws5Z6gLOaBqSzmhYcs5q63LOiqvizpioAs6ZqxLO" \
        "S5mSzlkJ8s5rerLOiUrSzpmbAs6Z+zLOmjrizmj5Ys5rOjLOmCkSzlh50s5oeJLOiGu" \
        "izpt7ks5L6dLOWAmizlhIAs5a6cLOaEjyzmh78s5pOsLOakhSzmr4Us55aRLOefoyzn" \
        "vqks6ImkLOiWjyzon7ss6KGjLOiqvCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCzorbAs6YarLOS6jCzku6Us5LyKLO+nnSzvp54s5aS3LOWnqCzvp58s5beyL" \
        "OW8myzlvZss5oChLO+noCzvp6Es76eiLO+noyzniL4s54+lLO+npCznlbAs55eNLO+n" \
        "pSznp7ss76emLOiAjCzogLMs6IKELOiLoSzojZEs76enLO+nqCzosr0s6LKzLOmChyz" \
        "vp6ks76eqLOmjtCzppIws76erLO+nrCzngLcs55uKLOe/iiznv4ws57+8LOismizkur" \
        "os5LuBLOWIgyzljbAs76etLOWSvSzlm6As5ae7LOWvhSzlvJUs5b+NLOa5rizvp64s7" \
        "6evLOe1qizojLUs76ewLOiakyzoqo0s76exLOmdrSzpnbcs76eyLO+nsyzkuIAs5L2a" \
        "LOS9vizlo7ks5pelLOa6oizpgLgs6Y6wLOmmuSzku7ss5aOsLOWmiizlp5ks5oGBLO+" \
        "ntCzvp7Us56iULO+ntizojY8s6LODLOWFpSzljYQsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCws76e3LO+nuCzvp7ks5LuNLOWJqSzlrZUs6Iq/LOS7lCzliLos" \
        "5ZKoLOWniSzlp78s5a2QLOWtlyzlrZws5oGjLOaFiCzmu4ss54KZLOeFriznjoYs55O" \
        "3LOeWtSzno4Es57SrLOiAhSzoh6os6IyoLOiUlyzol4ks6KuuLOizhyzpm4ws5L2cLO" \
        "WLuizlmrws5parLOaYqCzngbws54K4LOeItSzntr0s6IqNLOmFjCzpm4As6bWyLOWts" \
        "Szmo6cs5q6YLOa9uiznm54s5bKRLOaaqyzmvZss5660LOewqizooLYs6ZucLOS4iCzk" \
        "u5cs5YygLOWgtCzlorss5aOvLOWlrCzlsIcs5bizLOW6hCzlvLUs5o6MLOaasizmnZY" \
        "s5qifLOaqoyzmrIws5ry/LOeJhizvp7os542QLOeSiyznq6As57KnLOiFuCzoh58s6I" \
        "enLOiOiizokaws6JSjLOiWlCzol48s6KOdLOi0kyzphqws6ZW3LCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLOmanCzlho0s5ZOJLOWcqCzlrrAs5omNLOadkCz" \
        "moL0s5qKTLOa4vSzmu5Ms54G9LOe4oSzoo4Es6LKhLOi8iSzpvYss6b2OLOeIrSznro" \
        "8s6KuNLOmMmizkvYcs5L2OLOWEsizlkoAs5aeQLOW6lSzmirUs5p21LOalrizmqJcs5" \
        "rKuLOa4mizni5ks54yqLOeWvSznrrgs57S1LOiLpyzoj7ks6JGXLOiXtyzoqZss6LKv" \
        "LOi6hyzpgJks6YK4LOmbjizpvZ8s5YujLOWQiizlq6Es5a+CLOaRmCzmlbUs5ru0LOe" \
        "LhCzvp7ss55qELOepjSznrJss57GNLOe4viznv58s6I27LOisqyzos4os6LWkLOi3oS" \
        "zouZ8s6L+qLOi/uSzpgaks6Y+RLOS9gyzkvbos5YKzLOWFqCzlhbgs5YmNLOWJqizlo" \
        "aEs5aG8LOWloCzlsIgs5bGVLOW7myzmgpss5oiwLOagkyzmrr8s5rCILOa+sSwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCznhY4s55CgLOeUsCznlLgs55WRLO" \
        "eZsiznrYws566LLOeurSznr4Ys57qPLOiprizovL4s6L2JLOmIvyzpipMs6YyiLOmQq" \
        "yzpm7ss6aGaLOmhqyzppJ4s5YiHLOaIqizmipgs5rWZLOeZpCznq4os56+ALOe1tizl" \
        "jaAs5bK+LOW6lyzmvLgs54K5LOeymCzpnJEs6a6OLOm7nizmjqUs5pG6LOidtizkuIE" \
        "s5LqVLOS6rSzlgZws5YG1LOWRiCzlp4Ms5a6aLOW5gCzluq0s5bu3LOW+gSzmg4Us5o" \
        "y6LOaUvyzmlbQs5peMLOaZtizmmbgs5p++LOalqCzmqoks5q2jLOaxgCzmt4As5reoL" \
        "Oa4nyzmuZ4s54CeLOeCoSznjo4s54+9LOeUuiznnZss56KHLOemjiznqIss56m9LOey" \
        "viznto4s6ImHLOiogizoq6os6LKeLOmErSzphYos6YeYLOmJpizpi4ws6YygLOmchiz" \
        "pnZYsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6Z2cLOmggizpvI4s5" \
        "Yi2LOWKkSzllbws5aCkLOW4nSzlvJ8s5oKMLOaPkCzmoq8s5r+fLOelrSznrKws6IeN" \
        "LOiWuizoo70s6Ku4LOi5hCzpho0s6ZmkLOmamyzpnL0s6aGMLOm9iizkv44s5YWGLOW" \
        "Hiyzliqks5ZiyLOW8lCzlvass5o6qLOaTjSzml6ks5pmBLOabuizmm7ks5pydLOainS" \
        "zmo5cs5qe9LOa8lSzmva4s54WnLOeHpSzniKos55KqLOecuiznpZYs56WaLOennyznq" \
        "KAs56qVLOeylyzns58s57WELOe5sCzogocs6Je7LOiapCzoqZQs6Kq/LOi2mSzouoEs" \
        "6YCgLOmBrSzph6Ms6Zi7LOmblSzps6Us5pePLOewhyzotrMs6Y+DLOWtmCzlsIos5Y2" \
        "SLOaLmSznjJ0s5YCnLOWulyzlvp4s5oKwLOaFqyzmo5Us5reZLOeQriznqK4s57WCLO" \
        "e2nCznuLEs6IWrLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOi4qizo" \
        "uLUs6Y2+LOmQmCzkvZAs5Z2QLOW3pizluqcs5oyrLOe9qizkuLss5L2PLOS+jyzlgZo" \
        "s5aedLOiDhCzlkaos5ZGoLOWXvizlpY8s5a6ZLOW3nizlu5os5pmdLOacsSzmn7Es5q" \
        "CqLOazqCzmtLIs5rmKLOa+jSzngrcs54+gLOeWhyznsYws57SCLOe0rCzntqIs6IifL" \
        "OibmyzoqLss6KqFLOi1sCzouoos6LyzLOmAsSzphY4s6YWSLOmRhCzpp5As56u5LOey" \
        "pSzkv4os5YSBLOWHhizln4gs5a+vLOWzuyzmmZks5qi9LOa1mizmupYs5r+sLOeEjCz" \
        "nla8s56ujLOigoizpgKEs6YG1LOmbiyzpp78s6IyBLOS4rSzku7Is6KGGLOmHjSzljb" \
        "0s5qubLOalqyzmsYEs6JG6LOWinizmho4s5pu+LOaLryzng50s55SRLOeXhyznuZIs6" \
        "JK4LOitiSzotIgs5LmLLOWPqiwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCzlkqss5ZywLOWdgCzlv5cs5oyBLOaMhyzmka8s5pSvLOaXqCzmmbos5p6dLOaesy" \
        "zmraIs5rGgLOaymizmvKws55+lLOegpSznpYks56WXLOe0mSzogqIs6ISCLOiHsyzoi" \
        "p0s6Iq3LOicmCzoqows76e8LOi0hCzotr4s6YGyLOebtCznqJks56i3LOe5lCzogbcs" \
        "5ZSHLOWXlCzlobUs5oyvLOaQoizmmYks5pmLLOahrSzmppss5q6ELOa0pSzmurEs54+" \
        "NLOeRqCznkqEs55WbLOeWuSznm6Es55yeLOeeiyznp6Ys57iJLOe4nSzoh7ss6JSvLO" \
        "iilyzoqLos6LORLOi7qyzovrAs6YCyLOmOrSzpmaMs6ZmzLOmchyzkvoQs5Y+xLOWnq" \
        "izlq4ks5biZLOahjiznk4Ys55a+LOenqSznqpIs6IajLOibrSzos6os6LeMLOi/rSzm" \
        "lp8s5pyVLO+nvSzln7cs5r2XLOe3nSzovK8sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCws6Y+2LOmbhizlvrUs5oeyLOa+hCzkuJQs5L6YLOWAnyzlj4ks5ZefL" \
        "OW1ryzlt64s5qyhLOatpCzno4ss566aLO+nvizouYks6LuKLOmBrizmjYks5pC+LOed" \
        "gCznqoQs6YyvLOmRvyzpvaos5pKwLOa+ryznh6Ys55KoLOeTmiznq4Qs57CSLOe6giz" \
        "nsrIs57qYLOiumizotIos6ZG9LOmkkCzppYws5Yi5LOWvnyzmk6Ys5pytLOe0rizlg6" \
        "0s5Y+DLOWhuSzmhZgs5oWZLOaHuizmlqws56uZLOiukizorpYs5YCJLOWAoSzlibUs5" \
        "ZSxLOWovCzlu6As5b2wLOaEtCzmlZ4s5piMLOaYtizmmqIs5qeNLOa7hCzmvLIs54yW" \
        "LOeYoSznqpMs6IS5LOiJmSzoj5Ys6JK8LOWCtSzln7As5a+ALOWvqCzlvaks5o6hLOe" \
        "gpizntrUs6I+cLOiUoSzph4cs6Ye1LOWGiizmn7Us562WLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLOiyrCzlh4Qs5aa7LOaCvSzomZUs5YCcLO+nvyzliZQs" \
        "5bC6LOaFvSzmiJos5ouTLOaTsizmlqUs5ruMLOeYoCzohIos6LmgLOmZnyzpmrss5Lu" \
        "fLOWNgyzllpgs5aSpLOW3nSzmk4Us5rOJLOa3uiznjpQs56m/LOiImyzolqYs6LOkLO" \
        "i4kCzpgbcs6YenLOmXoSzpmKEs6Z+GLOWHuCzlk7Is5ZaGLOW+uSzmkqQs5r6ILOe2t" \
        "CzovJ8s6L2NLOmQtSzlg4ks5bCWLOayvizmt7ss55SbLOeeuyznsL0s57GkLOipuSzo" \
        "q4Is5aCeLOWmvizluJYs5o23LOeJkiznloos552rLOirnCzosrws6LySLOW7syzmmbQ" \
        "s5re4LOiBvSzoj4Es6KuLLOmdkSzpr5Ys76iALOWJgyzmm78s5raVLOa7ryznt6As6K" \
        "umLOmArizpgZ4s6auULOWInSzlib8s5ZOoLOaGlCzmioQs5oubLOaioiwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzmpJIs5qWaLOaotSzngpIs54SmLOehnSz" \
        "npIEs56SOLOenkiznqI0s6IKWLOiJuCzoi5Us6I2JLOiViSzosoIs6LaFLOmFoizpho" \
        "ss6YauLOS/gyzlm5Es54etLOeflyzonIAs6Ke4LOWvuCzlv5Ys5p2RLOmCqCzlj6Is5" \
        "aGaLOWvtSzmgqQs5oaBLOaRoCznuL0s6IGwLOiUpSzpioMs5pKuLOWCrCzltJQs5pyA" \
        "LOWinCzmir0s5o6oLOakjizmpbgs5qieLOa5qyznmros56eLLOiKuyzokKks6KuPLOi" \
        "2qCzov70s6YSSLOmFiyzphpws6YyQLOmMmCzpjpos6ZubLOmotizpsI0s5LiRLOeVnC" \
        "znpZ0s56u6LOetkSznr4ks57iuLOiThCzouZks6Lm0LOi7uCzpgJAs5pilLOakvyznk" \
        "YMs5Ye6LOacrizpu5ws5YWFLOW/oCzmspYs6J+yLOihnSzoobcs5oK0LOiGtSzokIMs" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws6LSFLOWPlizlkLks5Zi0LO" \
        "WotizlsLEs54KKLOe/oCzogZos6ISGLOiHrSzotqMs6YaJLOmpnyzpt7Is5YG0LOS7h" \
        "CzljqAs5oO7LOa4rCzlsaQs5L6ILOWApCzll6Qs5bOZLOW5nyzmgaUs5qKULOayuyzm" \
        "t4Qs54a+LOeXlCznl7Qs55mhLOeomiznqYks57eHLOe3uyznva4s6Ie0LOiaqSzovJw" \
        "s6ZuJLOmmsyzpvZIs5YmHLOWLhSzpo60s6KaqLOS4gyzmn5Is5ryGLOS+tSzlr6Is5p" \
        "6VLOayiCzmtbgs55CbLOegpyzph50s6Y28LOifhCznp6Qs56ixLOW/qyzku5Ys5ZKkL" \
        "OWUvizloq4s5aalLOaDsCzmiZMs5ouWLOactizmpZUs6Ii1LOmZgCzpprEs6aedLOWA" \
        "rCzljZMs5ZWELOWdvCzvqIEs5omYLO+ogizmk6Is5pmrLOafnSzmv4Es5r+vLOeQoiz" \
        "nkLgs6KiXLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOmQuCzlkZEs5" \
        "ZiGLOWdpizlvYgs5oaaLOatjizngZgs54KtLOe2uyzoqpUs5aWqLOiEqyzmjqIs55yI" \
        "LOiAvSzosqos5aGULOaQrSzmprss5a6VLOW4kSzmua8s76iDLOiVqSzlhYws5Y+wLOW" \
        "kqizmgKAs5oWLLOauhizmsbAs5rOwLOesnizog44s6IuULOi3hizpgrAs6aKxLO+ohC" \
        "zmk4cs5r6kLOaSkSzmlIQs5YWOLOWQkCzlnJ8s6KiOLOaFnyzmobYs76iFLOeXmyznr" \
        "ZIs57WxLOmAmizloIYs5qeMLOiFvyzopKos6YCALOmguSzlgbgs5aWXLOWmrCzmipUs" \
        "6YCPLOmsqizmhZ0s54m5LOmXlizlnaEs5amGLOW3tCzmioos5pKtLOaTuizmnbcs5rO" \
        "iLOa0vizniKws55C2LOegtCznvbcs6IqtLOi3myzpoJcs5YikLOWdgizmnb8s54mILO" \
        "eToyzosqks6L6mLOmIkSwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzp" \
        "mKos5YWrLOWPrSzmjYws5L2pLOWUhCzmgpYs5pWXLOaymyzmtb8s54mMLOeLvSznqJc" \
        "s6KaHLOiynSzlva0s5r6OLOeDuSzohqgs5oSOLOS+vyzlgY8s5omBLOeJhyznr4cs57" \
        "eoLOe/qSzpgY0s6Z6tLOmomSzosrYs5Z2qLOW5syzmnrAs6JCNLOiplSzlkKAs5ayWL" \
        "OW5oyzlu6Is5byKLOaWgyzogros6JS9LOmWiSzpmZss5L2ILOWMhSzljI0s5YyPLOWS" \
        "hizlk7os5ZyDLOW4gyzmgJYs5oqbLOaKsSzmjZUs76iGLOazoSzmtaYs55axLOegsiz" \
        "og54s6ISvLOiLnizokaEs6JKyLOiijSzopJIs6YCLLOmLqizpo70s6a6RLOW5hSzmmr" \
        "Qs5pudLOeAkSzniIYs76iHLOS/tSzlib0s5b2qLOaFkyzmnZMs5qiZLOa8giznk6Is5" \
        "6WoLOihqCzosbks6aOHLOmjhCzpqYMsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCws5ZOBLOeonyzmpZMs6Ku3LOixiizpoqgs6aauLOW9vCzmiqss55ayLOeari" \
        "zooqss6YG/LOmZgizljLks5by8LOW/hSzms4ws54+MLOeVoiznloss562GLOiLvizpp" \
        "p0s5LmPLOmAvCzkuIss5L2VLOWOpizlpI8s5buILOaYsCzmsrMs55GVLOiNtyzonaYs" \
        "6LOALOmBkCzpnJ4s6bCVLOWjkSzlrbgs6JmQLOislCzptrQs5a+SLOaBqCzmgo0s5pe" \
        "xLOaxlyzmvKIs5r6jLOeAmiznvZUs57+wLOmWkSzplpIs6ZmQLOmfkyzlibIs6L2ELO" \
        "WHvSzlkKss5ZK4LOWVoyzlloos5qq7LOa2tSznt5gs6ImmLOmKnCzpmbcs6bm5LOWQi" \
        "Czlk4gs55uSLOibpCzplqQs6ZeULOmZnCzkuqIs5LyJLOWnrizlq6Ys5be3LOaBkizm" \
        "ipcs5p2tLOahgSzmsoYs5rivLOe8uCzogpss6IiqLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLO+oiCzvqIks6aCFLOS6pSzlgZUs5ZKzLOWekyzlpZos5a2pL" \
        "OWusyzmh4gs5qW3LOa1tyzngKMs6J+5LOinoyzoqbIs6KunLOmCgizpp60s6aq4LOWK" \
        "vizmoLgs5YCWLOW5uCzmnY8s6I2HLOihjCzkuqss5ZCRLOWariznj6Ys6YSVLOmfvyz" \
        "ppIks6aWXLOmmmSzlmZMs5aKfLOiZmyzoqLEs5oayLOartiznjbss6LuSLOathyzpmq" \
        "os6amXLOWllSzniIAs6LWrLOmdqSzkv5Qs5bO0LOW8pizmh7gs5pmbLOazqyzngqss5" \
        "46ELOeOuSznj74s55ypLOedjSzntYMs57WiLOe4oyzoiLcs6KGSLO+oiizos6Is6YmJ" \
        "LOmhryzlrZEs56m0LOihgCzpoIEs5auMLOS/oCzljZQs5aS+LOWzvSzmjL4s5rW5LOe" \
        "LuSzohIUs6ISHLOiOoizpi48s6aCwLOS6qCzlhYQs5YiRLOWeiywsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCzlvaIs5rOCLOa7jizngIUs54GQLOeCryznhpIs" \
        "54+pLOeRqSzojYos6J6iLOihoSzpgIgs6YKiLOmOoyzppqgs5YWuLOW9lyzmg6As5oW" \
        "nLOaasyzolZks6LmKLOmGryzpnoss5LmOLOS6kizlkbws5aOVLOWjuizlpb0s5bK1LO" \
        "W8pyzmiLYs5omILOaYiizmmacs5q+rLOa1qSzmt48s5rmWLOa7uCzmvpQs5r+gLOa/q" \
        "SzngZ0s54uQLOeQpSznkZos55OgLOeakyznpZws57OKLOe4nizog6Es6IqmLOiRqyzo" \
        "kr8s6JmOLOiZnyzonbQs6K23LOixqizpjqws6aCALOmhpSzmg5Es5oiWLOmFtyzlqZo" \
        "s5piPLOa3tyzmuL4s55C/LOmtgizlv70s5oOaLOesjyzlk4Qs5byYLOaxnizms5Ms5r" \
        "SqLOeDmCzntIUs6Jm5LOiojCzptLss5YyWLOWSjCzlrIUs5qi6LOeBqyznlbUsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws56aNLOemvizoirEs6I+vLOipsSz" \
        "orYEs6LKoLOmdtCzvqIss5pO0LOaUqyznoros56K7LOepqyzkuLgs5ZaaLOWlkCzlrq" \
        "Ys5bm7LOaCoyzmj5ss5q2hLOaZpSzmoZMs5riZLOeFpSznkrAs57SILOmChCzpqaks6" \
        "bClLOa0uyzmu5Es54y+LOixgSzpl4os5YewLOW5jCzlvqgs5oGNLOaDtizmhLAs5oWM" \
        "LOaZgyzmmYQs5qalLOazgSzmuZ8s5ruJLOa9oiznhYws55KcLOeahyznr4Es57CnLOi" \
        "NkizonZcs6YGRLOmajSzpu4Ms5YyvLOWbnizlu7ss5b6KLOaBoizmgpQs5oe3LOaZpi" \
        "zmnIMs5qqcLOa3rizmvq4s54GwLOeNqiznuaos6Ia+LOiMtCzom5Qs6KqoLOizhCzli" \
        "oMs542yLOWulizmqass6ZCELOWTrizlmoYs5a2dLOaViCzmloUs5puJLOainyzmto0s" \
        "5reGLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLOeIuyzogrQs6YW1LO" \
        "mpjSzkvq8s5YCZLOWOmizlkI4s5ZC8LOWWiSzll4Us5bi/LOW+jCzmnL0s54WmLOePn" \
        "SzpgIUs5YubLOWLsyzloaQs5aOOLOeEhCznho8s54e7LOiWsCzoqJMs5pqILOiWqCzl" \
        "lqcs5pqELOeFiizokLEs5Y2JLOWWmSzmr4Es5b2ZLOW+vSzmj64s5pqJLOeFhyzoq7E" \
        "s6LydLOm6vizkvJEs5pC6LOeDiyznlaYs6JmnLOaBpCzorY4s6be4LOWFhyzlh7Ys5Y" \
        "yILOa0tizog7gs6buRLOaYlSzmrKMs54KYLOeXlSzlkIMs5bG5LOe0hyzoqJYs5qygL" \
        "OasvSzmrYYs5ZC4LOaBsCzmtL0s57+VLOiIiCzlg5Ys5YeeLOWWnCzlmass5ZuNLOWn" \
        "rCzlrIks5biMLOaGmSzmhpgs5oixLOaZnizmm6Ys54aZLOeGuSznhros54qnLOempyz" \
        "nqIAs576yLOipsA==" \
    );
    # '}'
    return (0);
}
# }}}
# {{{ (private)::acp::build_map_950_to_u8char
# '${__pp_comment:+'
#
# cp950
#
# ANSI/OEM Traditional Chinese (Taiwan; Hong Kong SAR, PRC); Chinese Traditional (Big5)
#
# [UNICODE-MAPPING]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
#
# [UNICODE-BESTFIT]
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit950.txt
#
# [MS-VBAL] 3.3.5.1.4 Traditional Chinese Identifiers
#
# VBA support for identifiers containing Traditional Chinese characters is based
# upon Windows Codepage 950 [UNICODE-BESTFIT]. Traditional Chinese characters are
# encoded as 16 bit double byte characters with code points beginning at %xA140.
# The Unicode equivalents of Windows Codepage 950 code points are specified by the
# file bestfit950.txt provided at [UNICODE-BESTFIT].
#
# A <CP950-initial-character> MAY be any Unicode character that corresponds to
# defined code points in the following ranges of Windows Codepage 950 code points:
# %xA2CF-A2FE; %xA340-F9DD.
#
# A <CP950-subsequent-character> is defined identically to <CP950-initial-character>
# with the addition of code point %xA1C5 and code points in the range %xA2AF-A2B8.
#
# '}'
function \
__acp__build_map_950_to_u8char() {
    # cp950 charactor mappings
    # '${__pp__enable_multibyte:+'
    __acp__decode_charmap(acp__S_charmap, \
        "44CALO+8jCzjgIEs44CCLO+8jizigKcs77ybLO+8mizvvJ8s77yBLO+4sCzigKYs4oC" \
        "lLO+5kCzvuZEs77mSLMK3LO+5lCzvuZUs77mWLO+5lyzvvZws4oCTLO+4sSzigJQs77" \
        "izLOKVtCzvuLQs77mPLO+8iCzvvIks77i1LO+4tizvvZss772dLO+4tyzvuLgs44CUL" \
        "OOAlSzvuLks77i6LOOAkCzjgJEs77i7LO+4vCzjgIos44CLLO+4vSzvuL4s44CILOOA" \
        "iSzvuL8s77mALOOAjCzjgI0s77mBLO+5gizjgI4s44CPLO+5gyzvuYQs77mZLO+5miz" \
        "vuZss77mcLO+5nSzvuZ4s4oCYLOKAmSzigJws4oCdLOOAnSzjgJ4s4oC1LOKAsizvvI" \
        "Ms77yGLO+8iizigLsswqcs44CDLOKXiyzil48s4pazLOKWsizil44s4piGLOKYhSzil" \
        "4cs4peGLOKWoSzilqAs4pa9LOKWvCzjiqMs4oSFLMKvLO+/oyzvvL8sy40s77mJLO+5" \
        "iizvuY0s77mOLO+5iyzvuYws77mfLO+5oCzvuaEs77yLLO+8jSzDlyzDtyzCsSziiJo" \
        "s77ycLO+8nizvvJ0s4ommLOKJpyziiaAs4oieLOKJkiziiaEs77miLO+5oyzvuaQs77" \
        "mlLO+5pizvvZ4s4oipLOKIqiziiqUs4oigLOKInyziir8s44+SLOOPkSziiKss4oiuL" \
        "OKItSziiLQs4pmALOKZgiziipUs4oqZLOKGkSzihpMs4oaQLOKGkizihpYs4oaXLOKG" \
        "mSzihpgs4oilLOKIoyzvvI8s77y8LOKIlSzvuags77yELO+/pSzjgJIs77+gLO+/oSz" \
        "vvIUs77ygLOKEgyzihIks77mpLO+5qizvuass44+VLOOOnCzjjp0s446eLOOPjizjjq" \
        "Es446OLOOOjyzjj4QswrAs5YWZLOWFmyzlhZ4s5YWdLOWFoSzlhaMs5ZenLOeTqSzns" \
        "44s4paBLOKWgiziloMs4paELOKWhSziloYs4paHLOKWiCzilo8s4paOLOKWjSzilows" \
        "4paLLOKWiiziloks4pS8LOKUtCzilKws4pSkLOKUnCzilpQs4pSALOKUgizilpUs4pS" \
        "MLOKUkCzilJQs4pSYLOKVrSzila4s4pWwLOKVryzilZAs4pWeLOKVqizilaEs4peiLO" \
        "KXoyzil6Us4pekLOKVsSzilbIs4pWzLO+8kCzvvJEs77ySLO+8kyzvvJQs77yVLO+8l" \
        "izvvJcs77yYLO+8mSzihaAs4oWhLOKFoizihaMs4oWkLOKFpSzihaYs4oWnLOKFqCzi" \
        "haks44ChLOOAoizjgKMs44CkLOOApSzjgKYs44CnLOOAqCzjgKks5Y2BLOWNhCzljYU" \
        "s77yhLO+8oizvvKMs77ykLO+8pSzvvKYs77ynLO+8qCzvvKks77yqLO+8qyzvvKws77" \
        "ytLO+8rizvvK8s77ywLO+8sSzvvLIs77yzLO+8tCzvvLUs77y2LO+8tyzvvLgs77y5L" \
        "O+8uizvvYEs772CLO+9gyzvvYQs772FLO+9hizvvYcs772ILO+9iSzvvYos772LLO+9" \
        "jCzvvY0s772OLO+9jyzvvZAs772RLO+9kizvvZMs772ULO+9lSzvvZYs772XLO+9mCz" \
        "vvZks772aLM6RLM6SLM6TLM6ULM6VLM6WLM6XLM6YLM6ZLM6aLM6bLM6cLM6dLM6eLM" \
        "6fLM6gLM6hLM6jLM6kLM6lLM6mLM6nLM6oLM6pLM6xLM6yLM6zLM60LM61LM62LM63L" \
        "M64LM65LM66LM67LM68LM69LM6+LM6/LM+ALM+BLM+DLM+ELM+FLM+GLM+HLM+ILM+J" \
        "LOOEhSzjhIYs44SHLOOEiCzjhIks44SKLOOEiyzjhIws44SNLOOEjizjhI8s44SQLOO" \
        "EkSzjhJIs44STLOOElCzjhJUs44SWLOOElyzjhJgs44SZLOOEmizjhJss44ScLOOEnS" \
        "zjhJ4s44SfLOOEoCzjhKEs44SiLOOEoyzjhKQs44SlLOOEpizjhKcs44SoLOOEqSzLm" \
        "SzLiSzLiizLhyzLiywsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzigqws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCzkuIAs5LmZLOS4gSzkuIMs5LmDLOS" \
        "5nSzkuoYs5LqMLOS6uizlhL8s5YWlLOWFqyzlh6As5YiALOWIgSzlipss5YyVLOWNgS" \
        "zljZws5Y+ILOS4iSzkuIss5LiILOS4iizkuKss5Li4LOWHoSzkuYUs5LmILOS5nyzku" \
        "Z4s5LqOLOS6oSzlhYAs5YiDLOWLuizljYMs5Y+JLOWPoyzlnJ8s5aOrLOWklSzlpKcs" \
        "5aWzLOWtkCzlrZEs5a2TLOWvuCzlsI8s5bCiLOWwuCzlsbEs5bedLOW3pSzlt7Es5be" \
        "yLOW3syzlt74s5bmyLOW7vizlvIss5byTLOaJjSzkuJEs5LiQLOS4jSzkuK0s5LiwLO" \
        "S4uSzkuYss5bC5LOS6iCzkupEs5LqVLOS6kizkupQs5LqiLOS7gSzku4As5LuDLOS7h" \
        "izku4cs5LuNLOS7iizku4ss5LuELOWFgyzlhYEs5YWnLOWFrSzlha4s5YWsLOWGlyzl" \
        "h7Ys5YiGLOWIhyzliIgs5Yu7LOWLvizli78s5YyWLOWMuSzljYgs5Y2HLOWNhSzljZ4" \
        "s5Y6ELOWPiyzlj4os5Y+NLOWjrCzlpKks5aSrLOWkqizlpK0s5a2ULOWwkSzlsKQs5b" \
        "C6LOWxryzlt7Qs5bm7LOW7vyzlvJQs5byVLOW/gyzmiIgs5oi2LOaJiyzmiY4s5pSvL" \
        "OaWhyzmlpcs5pakLOaWuSzml6Us5puwLOaciCzmnKgs5qygLOatoizmrbks5q+LLOav" \
        "lCzmr5ss5rCPLOawtCzngass54iqLOeItizniLss54mHLOeJmSzniZss54qsLOeOiyz" \
        "kuJks5LiWLOS4lSzkuJQs5LiYLOS4uyzkuY0s5LmPLOS5jizku6Us5LuYLOS7lCzku5" \
        "Us5LuWLOS7lyzku6Ms5LukLOS7mSzku54s5YWFLOWFhCzlhoks5YaKLOWGrCzlh7ks5" \
        "Ye6LOWHuCzliIos5YqgLOWKnyzljIUs5YyGLOWMlyzljJ0s5LufLOWNiizljYks5Y2h" \
        "LOWNoCzlja8s5Y2uLOWOuyzlj68s5Y+kLOWPsyzlj6ws5Y+uLOWPqSzlj6gs5Y+8LOW" \
        "PuCzlj7Us5Y+rLOWPpizlj6os5Y+yLOWPsSzlj7As5Y+lLOWPrSzlj7ss5ZubLOWbmi" \
        "zlpJYs5aSuLOWksSzlpbQs5aW2LOWtlSzlroMs5bC8LOW3qCzlt6cs5bemLOW4gizlu" \
        "IMs5bmzLOW5vCzlvIEs5byYLOW8lyzlv4Us5oiKLOaJkyzmiZQs5omSLOaJkSzmlqUs" \
        "5pemLOacrizmnKws5pyqLOacqyzmnK0s5q2jLOavjSzmsJEs5rCQLOawuCzmsYEs5rG" \
        "ALOawvizniq8s546ELOeOiSznk5ws55OmLOeUmCznlJ8s55SoLOeUqSznlLAs55SxLO" \
        "eUsiznlLMs55aLLOeZvSznmq4s55q/LOebriznn5ss55+iLOefsyznpLos56a+LOept" \
        "Cznq4ss5LieLOS4nyzkuZIs5LmTLOS5qSzkupks5LqkLOS6pizkuqUs5Lu/LOS8iSzk" \
        "vJks5LyKLOS8lSzkvI0s5LyQLOS8kSzkvI8s5LuyLOS7tizku7ss5LuwLOS7syzku70" \
        "s5LyBLOS8iyzlhYks5YWHLOWFhizlhYgs5YWoLOWFsSzlho0s5YawLOWIlyzliJEs5Y" \
        "iSLOWIjizliJYs5YqjLOWMiCzljKEs5YygLOWNsCzljbEs5ZCJLOWQjyzlkIws5ZCKL" \
        "OWQkCzlkIEs5ZCLLOWQhCzlkJEs5ZCNLOWQiCzlkIMs5ZCOLOWQhizlkJIs5ZugLOWb" \
        "nizlm50s5ZyzLOWcsCzlnKgs5ZytLOWcrCzlnK8s5ZypLOWkmSzlpJos5aS3LOWkuCz" \
        "lpoQs5aW4LOWmgyzlpb0s5aW5LOWmgizlpoEs5a2XLOWtmCzlrocs5a6ILOWuhSzlro" \
        "ks5a+6LOWwlizlsbks5beeLOW4hizlubYs5bm0LOW8jyzlvJss5b+ZLOW/lizmiI4s5" \
        "oiMLOaIjSzmiJAs5omjLOaJmyzmiZgs5pS2LOaXqSzml6gs5pesLOaXrSzmm7Is5puz" \
        "LOaciSzmnL0s5py0LOacsSzmnLUs5qyhLOatpCzmrbss5rCWLOaxnSzmsZcs5rGZLOa" \
        "xnyzmsaAs5rGQLOaxlSzmsaEs5rGbLOaxjSzmsY4s54GwLOeJnyzniZ0s55m+LOeruS" \
        "znsbMs57O4LOe8tiznvoos5769LOiAgSzogIMs6ICMLOiAkizogLMs6IG/LOiCiSzog" \
        "oss6IKMLOiHoyzoh6os6IezLOiHvCzoiIws6IibLOiInyzoia4s6ImyLOiJvizomass" \
        "6KGALOihjCzooaMs6KW/LOmYoSzkuLIs5LqoLOS9jSzkvY8s5L2HLOS9lyzkvZ4s5Ly" \
        "0LOS9myzkvZUs5LywLOS9kCzkvZEs5Ly9LOS8uizkvLgs5L2DLOS9lCzkvLws5L2GLO" \
        "S9oyzkvZws5L2gLOS8ryzkvY4s5Ly2LOS9mSzkvZ0s5L2ILOS9mizlhYws5YWLLOWFj" \
        "SzlhbUs5Ya2LOWGtyzliKUs5YikLOWIqSzliKos5YioLOWKqyzliqks5YqqLOWKrCzl" \
        "jKMs5Y2zLOWNtSzlkJ0s5ZCtLOWQnizlkL4s5ZCmLOWRjizlkKcs5ZGGLOWRgyzlkLM" \
        "s5ZGILOWRgizlkJss5ZCpLOWRiizlkLks5ZC7LOWQuCzlkK4s5ZC1LOWQtizlkKAs5Z" \
        "C8LOWRgCzlkLEs5ZCrLOWQnyzlkKws5ZuqLOWbsCzlm6Qs5ZurLOWdiizlnZEs5Z2AL" \
        "OWdjSzlnYcs5Z2OLOWcvizlnZAs5Z2PLOWcuyzlo68s5aS+LOWmnSzlppIs5aaoLOWm" \
        "nizlpqMs5aaZLOWmlizlpo0s5aakLOWmkyzlpoos5aalLOWtnSzlrZws5a2aLOWtmyz" \
        "lrows5a6LLOWujyzlsKws5bGALOWxgSzlsL8s5bC+LOWykCzlspEs5bKULOWyjCzlt6" \
        "ss5biMLOW6jyzluocs5bqKLOW7tyzlvIQs5byfLOW9pCzlvaIs5b23LOW9uSzlv5gs5" \
        "b+MLOW/lyzlv40s5b+xLOW/qyzlv7gs5b+qLOaIkizmiJEs5oqELOaKlyzmipYs5oqA" \
        "LOaJtizmioks5omtLOaKiizmibws5om+LOaJuSzmibMs5oqSLOaJryzmipgs5omuLOa" \
        "KlSzmipMs5oqRLOaKhizmlLks5pS7LOaUuCzml7Es5pu0LOadnyzmnY4s5p2PLOadkC" \
        "zmnZEs5p2cLOadlizmnZ4s5p2JLOadhizmnaAs5p2TLOadlyzmraUs5q+PLOaxgizms" \
        "Z4s5rKZLOaygSzmsogs5rKJLOayhSzmspss5rGqLOaxuizmspAs5rGwLOayjCzmsags" \
        "5rKWLOaykizmsb0s5rKDLOaxsizmsb4s5rG0LOayhizmsbYs5rKNLOaylCzmspgs5rK" \
        "CLOeBtizngbws54G9LOeBuCzniaIs54mhLOeJoCzni4Qs54uCLOeOliznlKws55SrLO" \
        "eUtyznlLgs55qCLOebryznn6Ms56eBLOengCznpr8s56m2LOezuyznvZUs6IKWLOiCk" \
        "yzogp0s6IKYLOiCmyzogpos6IKyLOiJryzoipIs6IqLLOiKjSzoposs6KeSLOiogCzo" \
        "sLcs6LGGLOixlSzosp0s6LWkLOi1sCzotrMs6LqrLOi7iizovpss6L6wLOi/gizov4Y" \
        "s6L+FLOi/hCzlt6Es6YKRLOmCoizpgqos6YKmLOmCoyzphYks6YeGLOmHjCzpmLIs6Z" \
        "iuLOmYsSzpmKos6ZisLOS4pizkuZYs5LmzLOS6iyzkupss5LqeLOS6qyzkuqws5L2vL" \
        "OS+nSzkvo0s5L2zLOS9vyzkvaws5L6bLOS+iyzkvoYs5L6DLOS9sCzkvbUs5L6ILOS9" \
        "qSzkvbss5L6WLOS9vizkvo8s5L6RLOS9uizlhZQs5YWSLOWFlSzlhaks5YW3LOWFtiz" \
        "lhbgs5Ya9LOWHvSzliLss5Yi4LOWItyzliLos5YiwLOWIrizliLYs5YmBLOWKvizlir" \
        "ss5Y2SLOWNlCzljZMs5Y2RLOWNpizljbcs5Y24LOWNuSzlj5Ys5Y+ULOWPlyzlkbMs5" \
        "ZG1LOWSlizlkbgs5ZKVLOWSgCzlkbss5ZG3LOWShCzlkpIs5ZKGLOWRvCzlkpAs5ZGx" \
        "LOWRtizlkows5ZKaLOWRoizlkags5ZKLLOWRvSzlko4s5Zu6LOWegyzlnbcs5Z2qLOW" \
        "dqSzlnaEs5Z2mLOWdpCzlnbws5aScLOWliSzlpYcs5aWILOWlhCzlpZQs5aa+LOWmuy" \
        "zlp5Qs5aa5LOWmrizlp5Es5aeGLOWnkCzlp40s5aeLLOWnkyzlp4os5aavLOWmsyzlp" \
        "5Is5aeFLOWtnyzlraQs5a2jLOWulyzlrpos5a6YLOWunCzlrpks5a6bLOWwmizlsYgs" \
        "5bGFLOWxhizlsrcs5bKhLOWyuCzlsqks5bKrLOWysSzlsrMs5biYLOW4mizluJYs5bi" \
        "VLOW4myzluJEs5bm4LOW6mizlupcs5bqcLOW6lSzlupYs5bu2LOW8pizlvKcs5bypLO" \
        "W+gCzlvoEs5b2/LOW9vCzlv50s5b+gLOW/vSzlv7Us5b+/LOaAjyzmgJQs5oCvLOaAt" \
        "SzmgJYs5oCqLOaAlSzmgKEs5oCnLOaAqSzmgKss5oCbLOaIlizmiJUs5oi/LOaIvizm" \
        "iYAs5om/LOaLiSzmi4ws5ouELOaKvyzmi4Is5oq5LOaLkizmi5ss5oqrLOaLkyzmi5Q" \
        "s5ouLLOaLiCzmiqgs5oq9LOaKvCzmi5As5ouZLOaLhyzmi40s5oq1LOaLmizmirEs5o" \
        "uYLOaLlizmi5cs5ouGLOaKrCzmi44s5pS+LOaWpyzmlrws5pe6LOaYlCzmmJMs5piML" \
        "OaYhizmmIIs5piOLOaYgCzmmI8s5piVLOaYiizmmIcs5pyNLOaciyzmna0s5p6LLOae" \
        "lSzmnbEs5p6cLOadsyzmnbcs5p6HLOaenSzmnpcs5p2vLOadsCzmnb8s5p6JLOadviz" \
        "mnpAs5p21LOaemizmnpMs5p28LOadqizmnbIs5qyjLOatpizmracs5q2/LOawkyzmsJ" \
        "ss5rOjLOazqCzms7Ms5rKxLOazjCzms6Us5rKzLOayvSzmsr4s5rK8LOazoizmsqss5" \
        "rOVLOazkyzmsrgs5rOELOayuSzms4Es5rKuLOazlyzms4Us5rOxLOayvyzmsrss5rOh" \
        "LOazmyzms4os5rKsLOazryzms5ws5rOWLOazoCzngpUs54KOLOeCkizngoos54KZLOe" \
        "IrCzniK0s54i4LOeJiCzniacs54mpLOeLgCzni44s54uZLOeLlyzni5As546pLOeOqC" \
        "znjp8s546rLOeOpSznlL0s55adLOeWmSznlpos55qELOebgiznm7Is55u0LOefpSznn" \
        "70s56S+LOelgCznpYEs56eJLOeniCznqbos56m5LOeruizns74s572ULOe+jCznvoss" \
        "6ICFLOiCuizogqUs6IKiLOiCsSzogqEs6IKrLOiCqSzogrQs6IKqLOiCryzoh6Us6Ie" \
        "+LOiIjSzoirMs6IqdLOiKmSzoiq0s6Iq9LOiKnyzoirks6IqxLOiKrCzoiqUs6IqvLO" \
        "iKuCzoiqMs6IqwLOiKvizoircs6JmOLOiZsSzliJ0s6KGoLOi7iyzov44s6L+ULOi/k" \
        "SzpgrUs6YK4LOmCsSzpgrYs6YeHLOmHkSzplbcs6ZaALOmYnCzpmYAs6Zi/LOmYuyzp" \
        "mYQs6ZmCLOmauSzpm6gs6Z2SLOmdnizkup8s5LqtLOS6rizkv6Es5L61LOS+ryzkvr8" \
        "s5L+gLOS/kSzkv48s5L+dLOS/gyzkvrYs5L+YLOS/nyzkv4os5L+XLOS+rizkv5As5L" \
        "+ELOS/gizkv5os5L+OLOS/nizkvrcs5YWXLOWGkizlhpEs5YagLOWJjizliYMs5YmKL" \
        "OWJjSzliYws5YmLLOWJhyzli4cs5YuJLOWLgyzli4Es5YyNLOWNlyzljbss5Y6aLOWP" \
        "myzlkqws5ZOALOWSqCzlk44s5ZOJLOWSuCzlkqYs5ZKzLOWThyzlk4Is5ZK9LOWSqiz" \
        "lk4Es5ZOELOWTiCzlkq8s5ZKrLOWSsSzlkrss5ZKpLOWSpyzlkr8s5Zu/LOWegizlno" \
        "ss5Z6gLOWeoyzlnqIs5Z+OLOWerizlnpMs5aWVLOWlkSzlpY8s5aWOLOWlkCzlp5ws5" \
        "aeYLOWnvyzlp6Ms5aeoLOWogyzlp6Us5aeqLOWnmizlp6Ys5aiBLOWnuyzlraks5a6j" \
        "LOWupizlrqQs5a6iLOWupSzlsIEs5bGOLOWxjyzlsY0s5bGLLOWzmSzls5Is5be3LOW" \
        "4nSzluKUs5bifLOW5vSzluqAs5bqmLOW7uizlvIgs5bytLOW9pSzlvogs5b6FLOW+ii" \
        "zlvoss5b6HLOW+jCzlvoks5oCSLOaAnSzmgKAs5oClLOaAjizmgKgs5oGNLOaBsCzmg" \
        "ags5oGiLOaBhizmgYMs5oGsLOaBqyzmgaos5oGkLOaJgSzmi5ws5oyWLOaMiSzmi7ws" \
        "5outLOaMgSzmi64s5ou9LOaMhyzmi7Es5ou3LOaLryzmi6ws5ou+LOaLtCzmjJEs5oy" \
        "CLOaUvyzmlYUs5parLOaWvSzml6Is5pilLOaYrSzmmKAs5pinLOaYryzmmJ8s5pioLO" \
        "aYsSzmmKQs5pu3LOafvyzmn5Ms5p+xLOaflCzmn5As5p+sLOaetizmnq8s5p+1LOafq" \
        "Szmn68s5p+ELOafkSzmnrQs5p+aLOafpSzmnrgs5p+PLOafnizmn7Ms5p6wLOafmSzm" \
        "n6Is5p+dLOafkizmraos5q6DLOauhizmrrUs5q+SLOavlyzmsJ8s5rOJLOa0iyzmtLI" \
        "s5rSqLOa1gSzmtKUs5rSMLOa0sSzmtJ4s5rSXLOa0uyzmtL0s5rS+LOa0tizmtJss5r" \
        "O1LOa0uSzmtKcs5rS4LOa0qSzmtK4s5rS1LOa0jizmtKss54KrLOeCuizngrMs54KsL" \
        "OeCryzngq0s54K4LOeCrizngqQs54iwLOeJsiznia8s54m0LOeLqSzni6As54uhLOeO" \
        "tyznj4os5467LOeOsiznj40s54+ALOeOsyznlJos55StLOeVjyznlYws55WOLOeViyz" \
        "nlqss55akLOeWpSznlqIs55ajLOeZuCznmoYs55qHLOeaiCznm4gs55uGLOebgyznm4" \
        "Us55yBLOebuSznm7gs55yJLOeciyznm74s55u8LOechyznn5ws56CCLOeglCznoIws5" \
        "6CNLOelhiznpYks56WILOelhyznprks56a6LOenkSznp5Is56eLLOepvyznqoEs56u/" \
        "LOervSznsb0s57SCLOe0hSzntIAs57SJLOe0hyzntIQs57SGLOe8uCznvo4s576/LOi" \
        "AhCzogJAs6ICNLOiAkSzogLYs6IOWLOiDpSzog5os6IODLOiDhCzog4ws6IOhLOiDmy" \
        "zog44s6IOeLOiDpCzog50s6Ie0LOiIoizoi6cs6IyDLOiMhSzoi6Ms6IubLOiLpizoj" \
        "IQs6IulLOiMgizojIks6IuSLOiLlyzoi7Es6IyBLOiLnCzoi5Qs6IuRLOiLnizoi5Ms" \
        "6IufLOiLryzojIYs6JmQLOiZuSzombss6Jm6LOihjSzooass6KaBLOinlCzoqIgs6Ki" \
        "CLOiogyzosp4s6LKgLOi1tCzotbMs6La0LOi7jSzou4ws6L+wLOi/pizov6Is6L+qLO" \
        "i/pSzov60s6L+rLOi/pCzov6gs6YOKLOmDjizpg4Es6YODLOmFiyzphYos6YeNLOmWg" \
        "izpmZAs6ZmLLOmZjCzpmY0s6Z2iLOmdqSzpn4ss6Z+tLOmfsyzpoIEs6aKoLOmjmyzp" \
        "o58s6aaWLOmmmSzkuZgs5LqzLOWAjCzlgI0s5YCjLOS/ryzlgKYs5YClLOS/uCzlgKk" \
        "s5YCWLOWAhizlgLws5YCfLOWAmizlgJIs5YCRLOS/uizlgIAs5YCULOWAqCzkv7Es5Y" \
        "ChLOWAiyzlgJks5YCYLOS/syzkv64s5YCtLOWAqizkv74s5YCrLOWAiSzlhbws5YakL" \
        "OWGpSzlhqIs5YeNLOWHjCzlh4Ys5YeLLOWJlizliZws5YmULOWJmyzliZ0s5YyqLOWN" \
        "vyzljp8s5Y6dLOWPnyzlk6gs5ZSQLOWUgSzllLcs5ZO8LOWTpSzlk7Is5ZSGLOWTuiz" \
        "llJQs5ZOpLOWTrSzlk6Es5ZSJLOWTrizlk6os5ZOmLOWUpyzllIcs5ZO9LOWUjyzlnI" \
        "Ms5ZyELOWfgizln5Qs5Z+LLOWfgyzloIks5aSPLOWllyzlpZgs5aWaLOWokSzlqJgs5" \
        "aicLOWonyzlqJss5aiTLOWnrCzlqKAs5aijLOWoqSzlqKUs5aiMLOWoiSzlrass5bGY" \
        "LOWusCzlrrMs5a62LOWutCzlrq4s5a61LOWuuSzlrrgs5bCELOWxkSzlsZUs5bGQLOW" \
        "zrSzls70s5bO7LOWzqizls6gs5bOwLOWztizltIEs5bO0LOW3rizluK0s5birLOW6qy" \
        "zluq0s5bqnLOW8sSzlvpIs5b6RLOW+kCzmgZks5oGjLOaBpSzmgZAs5oGVLOaBrSzmg" \
        "aks5oGvLOaChCzmgp8s5oKaLOaCjSzmgpQs5oKMLOaChSzmgpYs5omHLOaLsyzmjIgs" \
        "5ou/LOaNjizmjL4s5oyvLOaNlSzmjYIs5o2GLOaNjyzmjYks5oy6LOaNkCzmjL0s5oy" \
        "qLOaMqyzmjKgs5o2NLOaNjCzmlYgs5pWJLOaWmSzml4Es5peFLOaZgizmmYks5pmPLO" \
        "aZgyzmmZIs5pmMLOaZhSzmmYEs5pu4LOaclCzmnJUs5pyXLOagoSzmoLgs5qGILOahh" \
        "izmoZMs5qC5LOahgizmoZQs5qCpLOaisyzmoJcs5qGMLOahkSzmoL0s5p+0LOahkCzm" \
        "oYAs5qC8LOahgyzmoKos5qGFLOagkyzmoJgs5qGBLOauiizmroks5q63LOawoyzmsKc" \
        "s5rCoLOawpizmsKQs5rOwLOa1qizmtpUs5raILOa2hyzmtaYs5rW4LOa1tyzmtZks5r" \
        "aTLOa1rCzmtoks5rWuLOa1mizmtbQs5rWpLOa2jCzmtoos5rW5LOa2hSzmtaUs5raUL" \
        "OeDiizng5gs54OkLOeDmSzng4gs54OPLOeIuSznibks54u8LOeLuSzni70s54u4LOeL" \
        "tyznjoYs54+tLOeQiSznj64s54+gLOePqiznj54s55WULOeVnSznlZws55WaLOeVmSz" \
        "nlr4s55eFLOeXhyznlrIs55azLOeWvSznlrws55a5LOeXgiznlrgs55qLLOeasCznm4" \
        "os55uNLOebjiznnKks55yfLOecoCznnKgs55+pLOegsCznoKcs56C4LOegnSznoLQs5" \
        "6C3LOegpSznoK0s56CgLOegnyznoLIs56WVLOelkCznpaAs56WfLOelliznpZ4s56Wd" \
        "LOellyznpZos56ekLOenoyznp6cs56efLOenpiznp6ks56eYLOeqhCznqogs56uZLOe" \
        "shiznrJEs57KJLOe0oSzntJcs57SLLOe0iizntKAs57SiLOe0lCzntJAs57SVLOe0mi" \
        "zntJws57SNLOe0mSzntJss57y6LOe9nyznvpQs57+FLOe/gSzogIYs6ICYLOiAlSzog" \
        "Jks6ICXLOiAvSzogL8s6IOxLOiEgizog7As6ISFLOiDrSzog7Qs6ISGLOiDuCzog7Ms" \
        "6ISILOiDvSzohIos6IO8LOiDryzoh60s6IesLOiIgCzoiJAs6IiqLOiIqyzoiKgs6Ii" \
        "sLOiKuyzojKss6I2SLOiNlCzojYos6Iy4LOiNkCzojYks6Iy1LOiMtCzojY8s6IyyLO" \
        "iMuSzojLYs6IyXLOiNgCzojLEs6IyoLOiNgyzomZQs6JqKLOiaqizompMs6JqkLOiaq" \
        "Szomows6JqjLOianCzoobAs6KG3LOiigSzoooIs6KG9LOihuSzoqJgs6KiQLOiojizo" \
        "qIws6KiVLOioiizoqJcs6KiTLOiolizoqI8s6KiRLOixiCzosbos6LG5LOiyoSzosqI" \
        "s6LW3LOi6rCzou5Is6LuULOi7jyzovrEs6YCBLOmAhizov7cs6YCALOi/uizov7Qs6Y" \
        "CDLOi/vSzpgIUs6L+4LOmClSzpg6Es6YOdLOmDoizphZIs6YWNLOmFjCzph5gs6YedL" \
        "OmHlyzph5ws6YeZLOmWgyzpmaIs6ZmjLOmZoSzpmZss6ZmdLOmZpCzpmZgs6ZmeLOma" \
        "uyzpo6Is6aasLOmqqCzpq5gs6aylLOmssizprLws5Lm+LOWBuizlgb0s5YGcLOWBhyz" \
        "lgYMs5YGMLOWBmizlgYks5YGlLOWBtizlgY4s5YGVLOWBtSzlgbQs5YG3LOWBjyzlgI" \
        "8s5YGvLOWBrSzlhZws5YaVLOWHsCzliaos5YmvLOWLkizli5ks5YuYLOWLlSzljJAs5" \
        "YyPLOWMmSzljL8s5Y2ALOWMvizlj4Ms5pu8LOWVhizllaos5ZWmLOWVhCzllZ4s5ZWh" \
        "LOWVgyzllYos5ZSxLOWVlizllY8s5ZWVLOWUryzllaQs5ZS4LOWUrizllZws5ZSsLOW" \
        "VoyzllLMs5ZWBLOWVlyzlnIgs5ZyLLOWciSzln58s5aCFLOWgiizloIYs5Z+gLOWfpC" \
        "zln7os5aCCLOWgtSzln7cs5Z+5LOWkoCzlpaIs5ai2LOWpgSzlqYks5ammLOWpqizlq" \
        "YAs5ai8LOWpoizlqZos5amGLOWpiizlrbAs5a+HLOWvhSzlr4Qs5a+CLOWuvyzlr4Ys" \
        "5bCJLOWwiCzlsIcs5bGgLOWxnCzlsZ0s5bSHLOW0hizltI4s5bSbLOW0lizltKIs5bS" \
        "RLOW0qSzltJQs5bSZLOW0pCzltKcs5bSXLOW3oizluLgs5bi2LOW4syzluLcs5bq3LO" \
        "W6uCzlurYs5bq1LOW6vizlvLUs5by3LOW9lyzlvaws5b2pLOW9qyzlvpcs5b6ZLOW+n" \
        "izlvpgs5b6hLOW+oCzlvpws5oG/LOaCoyzmgoks5oKgLOaCqCzmg4ss5oK0LOaDpizm" \
        "gr0s5oOFLOaCuyzmgrUs5oOcLOaCvCzmg5gs5oOVLOaDhizmg58s5oK4LOaDmizmg4c" \
        "s5oiaLOaImyzmiYgs5o6gLOaOpyzmjbIs5o6WLOaOoizmjqUs5o23LOaNpyzmjpgs5o" \
        "6qLOaNsSzmjqks5o6JLOaOgyzmjpss5o2rLOaOqCzmjoQs5o6ILOaOmSzmjqEs5o6sL" \
        "OaOkizmjo8s5o6ALOaNuyzmjaks5o2oLOaNuizmlZ0s5pWWLOaVkSzmlZks5pWXLOWV" \
        "nyzmlY8s5pWYLOaVlSzmlZQs5pacLOaWmyzmlqws5pePLOaXiyzml4ws5peOLOaZnSz" \
        "mmZos5pmkLOaZqCzmmaYs5pmeLOabuSzli5cs5pybLOaigSzmoq8s5qKiLOaikyzmor" \
        "Us5qG/LOahtizmorEs5qKnLOailyzmorAs5qKDLOajhCzmoq0s5qKGLOaihSzmopQs5" \
        "qKdLOaiqCzmop8s5qKhLOaigizmrLIs5q66LOavqyzmr6ws5rCrLOa2jizmtrws5rez" \
        "LOa3mSzmtrIs5rehLOa3jCzmt6Qs5re7LOa3uizmuIUs5reHLOa3iyzmtq8s5reRLOa" \
        "2rizmt54s5re5LOa2uCzmt7cs5re1LOa3hSzmt5Is5riaLOa2tSzmt5os5rerLOa3mC" \
        "zmt6os5rexLOa3rizmt6gs5reGLOa3hCzmtqos5resLOa2vyzmt6Ys54O5LOeEiSznh" \
        "Ios54O9LOeDryzniL0s54m9LOeKgSznjJws54ybLOeMliznjJMs54yZLOeOhyznkIUs" \
        "55CKLOeQgyznkIYs54++LOeQjSznk6As55O2LOeTtyznlJws55SiLOeVpSznlaYs55W" \
        "iLOeVsCznlo8s55eULOeXlSznlrUs55eKLOeXjSznmo4s55uULOebkiznm5ss55y3LO" \
        "ecviznnLws55y2LOecuCznnLos56GrLOehgyznoY4s56WlLOelqCznpa0s56e7LOeqk" \
        "iznqpUs56ygLOesqCznrJss56ysLOespiznrJks56yeLOesriznspIs57KXLOeylSzn" \
        "tYYs57WDLOe1sSzntK4s57S5LOe0vCzntYAs57SwLOe0syzntYQs57SvLOe1gizntLI" \
        "s57SxLOe8vSznvp4s576aLOe/jCznv44s57+SLOiAnCzogYos6IGGLOiEryzohJYs6I" \
        "SjLOiEqyzohKks6ISwLOiEpCzoiIIs6Ii1LOiItyzoiLYs6Ii5LOiOjizojp4s6I6YL" \
        "OiNuCzojqIs6I6WLOiOvSzojqss6I6SLOiOiizojpMs6I6JLOiOoCzojbcs6I27LOiN" \
        "vCzojoYs6I6nLOiZlSzlvaos6JuHLOibgCzomrYs6JuELOiatSzom4Ys6JuLLOiasSz" \
        "omq8s6JuJLOihkyzoop4s6KKILOiiqyzoopIs6KKWLOiijSzoooss6KaTLOimjyzoqK" \
        "os6KidLOiooyzoqKUs6KixLOiorSzoqJ8s6KibLOiooizosYks6LGaLOiyqSzosqws6" \
        "LKrLOiyqCzosqos6LKnLOi1pyzotaYs6La+LOi2uizou5ss6LufLOmAmSzpgI0s6YCa" \
        "LOmAlyzpgKMs6YCfLOmAnSzpgJAs6YCVLOmAnizpgKAs6YCPLOmAoizpgJYs6YCbLOm" \
        "AlCzpg6gs6YOtLOmDvSzphZcs6YeOLOmHtSzph6Ys6YejLOmHpyzph60s6YepLOmWiS" \
        "zpmaos6Zm1LOmZsyzpmbgs6ZmwLOmZtCzpmbYs6Zm3LOmZrCzpm4As6ZuqLOmbqSznq" \
        "6As56ufLOmggizpoIMs6a2aLOmzpSzpubUs6bm/LOm6pSzpurss5YKiLOWCjSzlgoUs" \
        "5YKZLOWCkSzlgoAs5YKWLOWCmCzlgpos5pyALOWHsSzlibIs5Ym0LOWJtSzliaks5Yu" \
        "eLOWLnSzli5ss5Y2aLOWOpSzllbss5ZaALOWWpyzllbws5ZaKLOWWnSzllpgs5ZaCLO" \
        "WWnCzllqos5ZaULOWWhyzlloss5ZaDLOWWsyzllq4s5ZafLOWUvizllrIs5ZaaLOWWu" \
        "yzllqws5ZaxLOWVvizlloks5ZarLOWWmSzlnI0s5aCvLOWgqizloLQs5aCkLOWgsCzl" \
        "oLEs5aChLOWgnSzloKAs5aO5LOWjuizlpaAs5am3LOWqmizlqb8s5aqSLOWqmyzlqqc" \
        "s5a2zLOWtsSzlr5Is5a+MLOWvkyzlr5As5bCKLOWwiyzlsLEs5bWMLOW1kCzltLQs5b" \
        "WHLOW3vSzluYUs5bi9LOW5gCzluYMs5bm+LOW7iizlu4Es5buCLOW7hCzlvLws5b2tL" \
        "OW+qSzlvqos5b6oLOaDkSzmg6Es5oKyLOaCtizmg6As5oScLOaEoyzmg7os5oSVLOaD" \
        "sCzmg7ss5oO0LOaFqCzmg7Es5oSOLOaDtizmhIks5oSALOaEkizmiJ8s5omJLOaOoyz" \
        "mjows5o+PLOaPgCzmj6ks5o+JLOaPhizmj40s5o+SLOaPoyzmj5As5o+hLOaPlizmj6" \
        "0s5o+uLOaNtizmj7Qs5o+qLOaPmyzmkZIs5o+aLOaPuSzmlZ4s5pWmLOaVoizmlaMs5" \
        "paRLOaWkCzmlq8s5pmuLOaZsCzmmbQs5pm2LOaZryzmmpEs5pm6LOaZvizmmbcs5pu+" \
        "LOabvyzmnJ8s5pydLOajuizmo5Us5qOgLOajmCzmo5cs5qSFLOajnyzmo7Us5qOuLOa" \
        "jpyzmo7ks5qOSLOajsizmo6Ms5qOLLOajjSzmpI0s5qSSLOakjizmo4ks5qOaLOalri" \
        "zmo7ss5qy+LOasuizmrL0s5q6YLOaulizmrrws5q+vLOawrizmsK8s5rCsLOa4ryzmu" \
        "Lgs5rmULOa4oSzmuLIs5rmnLOa5iizmuKAs5rilLOa4oyzmuJss5rmbLOa5mCzmuKQs" \
        "5rmWLOa5rizmuK0s5rimLOa5ryzmuLQs5rmNLOa4uizmuKws5rmDLOa4nSzmuL4s5ru" \
        "LLOa6iSzmuJks5rmOLOa5oyzmuYQs5rmyLOa5qSzmuZ8s54SZLOeEmiznhKYs54SwLO" \
        "eEoSznhLYs54WuLOeEnCzniYws54qELOeKgCznjLYs54ylLOeMtCznjKks55C6LOeQq" \
        "iznkLMs55CiLOeQpSznkLUs55C2LOeQtCznkK8s55CbLOeQpiznkKgs55SlLOeUpizn" \
        "lass55WqLOeXoiznl5ss55ejLOeXmSznl5gs55eeLOeXoCznmbss55m8LOealiznmpM" \
        "s55q0LOebnCznnY8s55+tLOehnSznoaws56GvLOeojSznqIgs56iLLOeohSznqIAs56" \
        "qYLOeqlyznqpYs56ulLOeroyznrYks562WLOethiznrZAs562SLOetlCznrY0s562LL" \
        "OetjyznrZEs57KfLOeypSzntZ4s57WQLOe1qCzntZUs57SrLOe1rizntbIs57WhLOe1" \
        "pizntaIs57WwLOe1syzlloQs57+ULOe/lSzogIss6IGSLOiChSzohZUs6IWULOiFiyz" \
        "ohZEs6IWOLOiEuSzohYYs6IS+LOiFjCzohZMs6IW0LOiIkizoiJws6I+pLOiQgyzoj7" \
        "gs6JCNLOiPoCzoj4Us6JCLLOiPgSzoj68s6I+xLOiPtCzokZcs6JCKLOiPsCzokIws6" \
        "I+MLOiPvSzoj7Is6I+KLOiQuCzokI4s6JCELOiPnCzokIcs6I+ULOiPnyzomZss6Juf" \
        "LOibmSzom60s6JuULOibmyzom6Qs6JuQLOibnizooZcs6KOBLOijgizoorEs6KaDLOi" \
        "mlizoqLss6KmgLOiplSzoqZ4s6Ki8LOipgSzoqZQs6KmbLOipkCzoqYYs6Ki0LOioui" \
        "zoqLYs6KmWLOixoSzosoIs6LKvLOiyvCzosrMs6LK9LOizgSzosrss6LOALOiytCzos" \
        "rcs6LK2LOiyvyzosrgs6LaKLOi2hSzotoEs6LeOLOi3nSzot4ss6LeaLOi3kSzot4ws" \
        "6LebLOi3hizou7ss6Lu4LOi7vCzovpws6YCuLOmAtSzpgLEs6YC4LOmAsizpgLYs6YS" \
        "CLOmDtSzphIks6YO+LOmFoyzphaUs6YePLOmIlCzpiJUs6YijLOmIiSzpiJ4s6YiNLO" \
        "mIkCzpiIcs6YiRLOmWlCzplo8s6ZaLLOmWkSzplpMs6ZaSLOmWjizpmoos6ZqOLOmai" \
        "yzpmb0s6ZqFLOmahizpmo0s6ZmyLOmahCzpm4Es6ZuFLOmbhCzpm4Ys6ZuHLOmbryzp" \
        "m7Is6Z+MLOmghSzpoIYs6aCILOmjpyzpo6os6aOvLOmjqSzpo7Is6aOtLOmmrizppq0" \
        "s6buDLOm7jSzpu5Es5LqCLOWCrSzlgrUs5YKyLOWCsyzlg4Us5YK+LOWCrCzlgrcs5Y" \
        "K7LOWCryzlg4cs5Ym/LOWJtyzlib0s5YufLOWLpizli6Qs5YuiLOWLoyzljK8s5ZefL" \
        "OWXqCzll5Ms5ZemLOWXjizll5ws5ZeHLOWXkSzll6Ms5ZekLOWXryzll5os5ZehLOWX" \
        "hSzll4Ys5ZelLOWXiSzlnJIs5ZyTLOWhnizloZEs5aGYLOWhlyzloZos5aGULOWhqyz" \
        "loYws5aGtLOWhiizloaIs5aGSLOWhiyzlpacs5auBLOWriSzlq4ws5aq+LOWqvSzlqr" \
        "ws5aqzLOWrgizlqrIs5bWpLOW1ryzluYws5bm5LOW7iSzlu4gs5bySLOW9mSzlvqws5" \
        "b6uLOaEmizmhI8s5oWILOaEnyzmg7Ms5oSbLOaDuSzmhIEs5oSILOaFjizmhYws5oWE" \
        "LOaFjSzmhL4s5oS0LOaEpyzmhI0s5oSGLOaEtyzmiKEs5oiiLOaQkyzmkL4s5pCeLOa" \
        "QqizmkK0s5pC9LOaQrCzmkI8s5pCcLOaQlCzmkI0s5pC2LOaQlizmkJcs5pCGLOaVrC" \
        "zmlp8s5pawLOaalyzmmoks5pqHLOaaiCzmmpYs5pqELOaamCzmmo0s5pyDLOamlCzmp" \
        "a0s5qWaLOaltyzmpaAs5qWULOaltSzmpLAs5qaCLOaliizmpags5qWrLOalnizmpZMs" \
        "5qW5LOamhizmpZ0s5qWjLOalmyzmrYcs5q2yLOavgCzmrr8s5q+TLOavvSzmuqIs5rq" \
        "vLOa7kyzmurYs5ruCLOa6kCzmup0s5ruHLOa7hSzmuqUs5rqYLOa6vCzmuros5rqrLO" \
        "a7kSzmupYs5rqcLOa7hCzmu5Qs5rqqLOa6pyzmurQs54WOLOeFmSznhaks54WkLOeFi" \
        "Sznhacs54WcLOeFrCznhaYs54WMLOeFpSznhZ4s54WGLOeFqCznhZYs54i6LOeJkizn" \
        "jLcs542FLOeMvyznjL4s55GvLOeRmiznkZUs55GfLOeRniznkYEs55C/LOeRmSznkZs" \
        "s55GcLOeVtiznlbgs55iALOeXsCznmIEs55eyLOeXsSznl7os55e/LOeXtCznl7Ms55" \
        "ueLOebnyznnZss552rLOedpiznnZ4s552jLOeduSznnaos552sLOednCznnaUs552oL" \
        "Oedoiznn64s56KOLOeisCznopcs56KYLOeijCznooks56G8LOeikSznopMs56G/LOel" \
        "uiznpb8s56aBLOiQrCznpr0s56icLOeomiznqKAs56iULOeonyznqJ4s56qfLOeqoCz" \
        "nrbcs56+ALOetoCznra4s562nLOeysSznsrMs57K1LOe2kyzntbks57aRLOe2gSznto" \
        "8s57WbLOe9riznvaks572qLOe9siznvqks576oLOe+pCzogZYs6IGYLOiChizogoQs6" \
        "IWxLOiFsCzohbgs6IWlLOiFrizohbMs6IWrLOiFuSzohbos6IWmLOiIhSzoiYcs6JKC" \
        "LOiRtyzokL0s6JCxLOiRtSzokaYs6JGrLOiRiSzokaws6JGbLOiQvCzokLUs6JGhLOi" \
        "Royzokaks6JGtLOiRhizomZ4s6JmcLOiZnyzom7ks6JyTLOiciCzonIcs6JyALOibvi" \
        "zom7ss6JyCLOicgyzonIYs6JyKLOihmSzoo58s6KOULOijmSzoo5ws6KOYLOijnSzoo" \
        "6Es6KOKLOijlSzoo5Is6KacLOinoyzoqass6KmyLOipsyzoqaYs6KmpLOipsCzoqocs" \
        "6Km8LOipoyzoqqAs6KmxLOiqhSzoqa0s6KmiLOiprizoqaws6Km5LOipuyzoqL4s6Km" \
        "oLOixoizosoos6LKJLOiziizos4cs6LOILOizhCzosrIs6LODLOizgizos4Us6LehLO" \
        "i3nyzot6gs6LevLOi3syzot7os6LeqLOi3pCzot6Ys6LqyLOi8gyzovIks6Lu+LOi8i" \
        "izovp8s6L6yLOmBiyzpgYos6YGTLOmBgizpgZQs6YC8LOmBlSzpgZAs6YGHLOmBjyzp" \
        "gY4s6YGNLOmBkSzpgL4s6YGBLOmEkizphJcs6YWsLOmFqizphaks6YeJLOmItyzpiZc" \
        "s6Yi4LOmIvSzpiYAs6Yi+LOmJmyzpiYss6YmkLOmJkSzpiLQs6YmJLOmJjSzpiYUs6Y" \
        "i5LOmIvyzpiZos6ZaYLOmamCzpmpQs6ZqVLOmbjSzpm4ss6ZuJLOmbiizpm7cs6Zu7L" \
        "OmbuSzpm7Ys6Z2WLOmdtCzpnbYs6aCQLOmgkSzpoJMs6aCKLOmgkizpoIws6aO8LOmj" \
        "tCzpo70s6aO+LOmmsyzpprEs6aa0LOmroSzps6ks6bqCLOm8jizpvJMs6bygLOWDpyz" \
        "lg64s5YOlLOWDlizlg60s5YOaLOWDlSzlg48s5YORLOWDsSzlg44s5YOpLOWFoizlh7" \
        "Ms5YqDLOWKgizljLEs5Y6tLOWXvizlmIAs5ZibLOWYlyzll70s5ZiULOWYhizlmIks5" \
        "ZiNLOWYjizll7cs5ZiWLOWYnyzlmIgs5ZiQLOWXtizlnJgs5ZyWLOWhtSzlob4s5aKD" \
        "LOWikyzlooos5aG5LOWihSzlob0s5aO9LOWkpSzlpKIs5aSkLOWlqizlpaks5auhLOW" \
        "rpizlq6ks5auXLOWrlizlq5gs5aujLOWttSzlr54s5a+nLOWvoSzlr6Us5a+mLOWvqC" \
        "zlr6Is5a+kLOWvnyzlsI0s5bGiLOW2hCzltocs5bmbLOW5oyzluZUs5bmXLOW5lCzlu" \
        "5Ms5buWLOW8iizlvYYs5b2wLOW+uSzmhYcs5oS/LOaFiyzmhbcs5oWiLOaFoyzmhZ8s" \
        "5oWaLOaFmCzmhbUs5oiqLOaShyzmkZgs5pGULOaSpCzmkbgs5pGfLOaRuizmkZEs5pG" \
        "nLOaQtCzmka0s5pG7LOaVsizmlqEs5peXLOaXlizmmqIs5pqoLOaanSzmppws5qaoLO" \
        "amlSzmp4Es5qauLOankyzmp4ss5qabLOamtyzmprss5qarLOamtCzmp5As5qeNLOamr" \
        "Szmp4ws5qamLOangyzmpqMs5q2JLOatjCzmsLMs5ryzLOa8lCzmu74s5ryTLOa7tCzm" \
        "vKks5ry+LOa8oCzmvKws5ryPLOa8gizmvKIs5ru/LOa7ryzmvIYs5ryxLOa8uCzmvLI" \
        "s5ryjLOa8lSzmvKss5ryvLOa+iCzmvKos5rusLOa8gSzmu7Is5ruMLOa7tyznhpQs54" \
        "aZLOeFvSznhoos54aELOeGkizniL4s54qSLOeKliznjYQs542QLOeRpCznkaMs55GqL" \
        "OeRsCznka0s55SELOeWkSznmKcs55iNLOeYiyznmIks55iTLOeboSznm6Ms556ELOed" \
        "vSznnb8s552hLOejgSznop8s56KnLOeisyznoqks56KjLOemjiznpo8s56aNLOeoriz" \
        "nqLEs56qqLOeqqSznq60s56uvLOeuoSznrpUs566LLOettSznrpcs566dLOeulCznro" \
        "8s5664LOeuhyznroQs57K5LOeyvSznsr4s57a7LOe2sCzntpws57a9LOe2vizntqAs5" \
        "7eKLOe2tCzntrIs57axLOe2uizntqIs57a/LOe2tSzntrgs57atLOe3kiznt4cs57as" \
        "LOe9sCznv6As57+hLOe/nyzogZ4s6IGaLOiChyzohZAs6IaALOiGjyzohogs6IaKLOi" \
        "FvyzohoIs6IenLOiHuizoiIcs6IiULOiInizoiYss6JOJLOiSvyzok4Ys6JOELOiSmS" \
        "zokp4s6JKyLOiSnCzok4ss6JK4LOiTgCzok5Ms6JKQLOiSvCzok5Es6JOKLOicvyzon" \
        "Jws6Jy7LOicoizonKUs6Jy0LOicmCzonZUs6Jy3LOicqSzoo7Ms6KSCLOijtCzoo7ks" \
        "6KO4LOijvSzoo6gs6KSaLOijryzoqqYs6KqMLOiqnizoqqMs6KqNLOiqoSzoqpMs6Kq" \
        "kLOiqqizoqqUs6KqoLOiqmCzoqpEs6KqaLOiqpyzosaos6LKNLOiyjCzos5Ms6LORLO" \
        "izkizotass6LaZLOi2lSzot7ws6LyULOi8kizovJUs6LyTLOi+oyzpgaAs6YGYLOmBn" \
        "CzpgaMs6YGZLOmBnizpgaIs6YGdLOmBmyzphJks6YSYLOmEnizphbUs6YW4LOmFtyzp" \
        "hbQs6Ym4LOmKgCzpioUs6YqYLOmKlizpibss6YqTLOmKnCzpiqgs6Ym8LOmKkSzplqE" \
        "s6ZaoLOmWqSzplqMs6ZalLOmWpCzpmpks6ZqcLOmamyzpm4ws6ZuSLOmcgCzpnbws6Z" \
        "6FLOmftizpoJcs6aCYLOmiryzporEs6aSDLOmkhSzppIws6aSJLOmngSzpqq8s6aqwL" \
        "OmrpizprYEs6a2CLOmztCzps7Ys6bOzLOm6vCzpvLss6b2KLOWEhCzlhIAs5YO7LOWD" \
        "tSzlg7ks5YSCLOWEiCzlhIks5YSFLOWHnCzliocs5YqILOWKiSzlio0s5YqKLOWLsCz" \
        "ljrIs5ZiuLOWYuyzlmLks5ZiyLOWYvyzlmLQs5ZipLOWZkyzlmY4s5ZmXLOWZtCzlmL" \
        "Ys5ZivLOWYsCzlooAs5aKfLOWinizlorMs5aKcLOWirizloqks5aKmLOWlrSzlrIks5" \
        "au7LOWsiyzlq7Us5ayMLOWsiCzlr64s5a+sLOWvqSzlr6ss5bGkLOWxpSzltp0s5baU" \
        "LOW5oizluZ8s5bmhLOW7oizlu5os5bufLOW7nSzlu6Ms5bugLOW9iCzlvbEs5b63LOW" \
        "+tSzmhbYs5oWnLOaFrizmhZ0s5oWVLOaGgizmhbws5oWwLOaFqyzmhb4s5oanLOaGkC" \
        "zmhqss5oaOLOaGrCzmhpos5oakLOaGlCzmhq4s5oiuLOaRqSzmka8s5pG5LOaSnizmk" \
        "rIs5pKILOaSkCzmkrAs5pKlLOaSkyzmkpUs5pKpLOaSkizmkq4s5pKtLOaSqyzmkpos" \
        "5pKsLOaSmSzmkqIs5pKzLOaVtSzmlbcs5pW4LOaarizmmqss5pq0LOaasSzmqKMs5qi" \
        "fLOanqCzmqIEs5qieLOaomSzmp70s5qihLOaokyzmqIos5qezLOaogizmqIUs5qetLO" \
        "aokSzmrZAs5q2OLOaupCzmr4Us5q+GLOa8vyzmvbws5r6ELOa9kSzmvaYs5r2ULOa+h" \
        "izmva0s5r2bLOa9uCzmva4s5r6OLOa9uizmvbAs5r2kLOa+lyzmvZgs5ruVLOa9ryzm" \
        "vaAs5r2fLOeGnyznhqws54axLOeGqCzniZYs54qbLOeNjiznjZcs55GpLOeSiyznkoM" \
        "s55G+LOeSgCznlb8s55igLOeYqSznmJ8s55ikLOeYpiznmKEs55iiLOeamiznmros55" \
        "ukLOeejiznnocs556MLOeekSznnoss56OLLOejhSznoros56OKLOeivizno5Us56K8L" \
        "OejkCznqL8s56i8LOepgCznqL0s56i3LOeouyznqq8s56quLOeurSznrrEs56+ELOeu" \
        "tCznr4Ys56+HLOevgSznrqAs56+MLOeziiznt6As57e0LOe3ryznt7ss57eYLOe3rCz" \
        "nt50s57eoLOe3oyznt5os57eeLOe3qSzntp4s57eZLOe3siznt7ks5721LOe9tyznvq" \
        "8s57+pLOiApizohpss6IacLOiGnSzohqAs6IaaLOiGmCzolJcs6JS9LOiUmizok64s6" \
        "JSsLOiUrSzolJMs6JSRLOiUoyzolKEs6JSULOiTrCzolKUs6JO/LOiUhizonoIs6J20" \
        "LOidtizonaAs6J2mLOiduCzonags6J2ZLOidlyzonYws6J2TLOihmyzooZ0s6KSQLOi" \
        "khyzopJIs6KSTLOiklSzopIos6Kq8LOirkizoq4cs6KuELOiqlSzoq4ss6Ku4LOiqsi" \
        "zoq4ks6KuCLOiqvyzoqrAs6KuWLOirjSzoqrYs6Kq5LOirmyzosYws6LGOLOixrCzos" \
        "6As6LOeLOizpizos6Qs6LOsLOizrSzos6Is6LOjLOiznCzos6os6LOhLOi1rSzotp8s" \
        "6LajLOi4qyzouJAs6LidLOi4oizouI8s6LipLOi4nyzouKEs6LieLOi6uizovJ0s6Ly" \
        "bLOi8nyzovKks6LymLOi8qizovJws6LyeLOi8pSzpgaks6YGuLOmBqCzpga0s6YG3LO" \
        "mEsCzphK0s6YSnLOmEsSzphocs6YaJLOmGiyzphoMs6YuFLOmKuyzpircs6YuqLOmKr" \
        "Czpi6Qs6YuBLOmKsyzpirws6YuSLOmLhyzpi7As6YqyLOmWrSzplrEs6ZyELOmchizp" \
        "nIcs6ZyJLOmdoCzpno0s6Z6LLOmejyzpoKEs6aCrLOmgnCzporMs6aSKLOmkkyzppJI" \
        "s6aSYLOmnnSzpp5As6aefLOmnmyzpp5Es6aeVLOmnkizpp5ks6aq3LOmrrizpq68s6a" \
        "ynLOmthSzprYQs6a23LOmtryzptIYs6bSJLOm0gyzpuqks6bq+LOm7jizloqgs6b2SL" \
        "OWEkizlhJgs5YSULOWEkCzlhJUs5YaALOWGqizlh50s5YqRLOWKkyzli7Ms5ZmZLOWZ" \
        "qyzlmbks5ZmpLOWZpCzlmbgs5ZmqLOWZqCzlmaUs5ZmxLOWZryzlmaws5ZmiLOWZtiz" \
        "lo4Es5aK+LOWjhyzlo4Us5aWuLOWsnSzlrLQs5a24LOWvsCzlsI4s5b2KLOaGsizmhp" \
        "Es5oapLOaGiizmh40s5oa2LOaGvizmh4os5oeILOaIsCzmk4Us5pOBLOaTiyzmkrss5" \
        "pK8LOaTmizmk4Qs5pOHLOaTgizmk40s5pK/LOaTkizmk5Qs5pK+LOaVtCzmm4Ys5puJ" \
        "LOaauSzmm4Qs5puHLOaauCzmqL0s5qi4LOaouizmqZks5qmrLOapmCzmqLks5qmELOa" \
        "poizmqaEs5qmLLOaphyzmqLUs5qmfLOapiCzmrZks5q23LOawhSzmv4Is5r6xLOa+oS" \
        "zmv4Ms5r6kLOa/gSzmvqcs5r6zLOa/gCzmvrks5r62LOa+pizmvqAs5r60LOeGviznh" \
        "4ks54eQLOeHkiznh4gs54eVLOeGuSznh44s54eZLOeHnCznh4Ms54eELOeNqCznkpws" \
        "55KjLOeSmCznkp8s55KeLOeToiznlIws55SNLOeYtCznmLgs55i6LOebpyznm6Us556" \
        "gLOeeniznnp8s556lLOejqCzno5os56OsLOejpyznpqYs56mNLOepjiznqYYs56mMLO" \
        "epiyznqros56+ZLOewkSznr4ks56+kLOevmyznr6Es56+pLOevpizns5Us57OWLOe4i" \
        "iznuJEs57iILOe4myznuKMs57ieLOe4nSznuIks57iQLOe9uSznvrIs57+wLOe/sSzn" \
        "v64s6ICoLOiGsyzohqks6IaoLOiHuyzoiIgs6ImYLOiJmSzolYos6JWZLOiViCzolag" \
        "s6JWpLOiVgyzolYks6JWtLOiVqizolZ4s6J6DLOienyzonp4s6J6iLOiejSzooaEs6K" \
        "SqLOiksizopKUs6KSrLOikoSzopqos6KamLOirpizoq7os6KurLOirsSzorIAs6KucL" \
        "Oirpyzoq64s6Ku+LOisgSzorIIs6Ku3LOirrSzoq7Ms6Ku2LOirvCzosass6LGtLOiy" \
        "kyzos7Qs6LmELOi4sSzouLQs6LmCLOi4uSzouLUs6Ly7LOi8ryzovLgs6LyzLOi+qCz" \
        "ovqYs6YG1LOmBtCzpgbgs6YGyLOmBvCzpgbos6YS0LOmGkizpjKAs6Yy2LOmLuCzpjL" \
        "Ms6YyvLOmMoizpi7ws6YyrLOmMhCzpjJos6YyQLOmMpizpjKEs6YyVLOmMrizpjJks6" \
        "Za7LOmapyzpmqgs6ZqqLOmblSzpnI4s6ZyRLOmclizpnI0s6ZyTLOmcjyzpnZss6Z2c" \
        "LOmdpizpnpgs6aCwLOmguCzpoLss6aC3LOmgrSzpoLks6aCkLOmkkCzppKgs6aSeLOm" \
        "kmyzppKEs6aSaLOmnrSzpp6Is6aexLOmquCzpqrws6au7LOmrrSzprKgs6a6RLOm0lS" \
        "zptKMs6bSmLOm0qCzptJIs6bSbLOm7mCzpu5Qs6b6NLOm+nCzlhKos5YSfLOWEoSzlh" \
        "LIs5Yu1LOWajizlmoAs5ZqQLOWahSzlmocs5ZqPLOWjlSzlo5Ms5aORLOWjjizlrLAs" \
        "5ayqLOWspCzlrbos5bC3LOWxqCzltrws5ba6LOW2vSzltrgs5bmrLOW9jCzlvr0s5oe" \
        "JLOaHgizmh4cs5oemLOaHiyzmiLIs5oi0LOaTjizmk4os5pOYLOaToCzmk7As5pOmLO" \
        "aTrCzmk7Es5pOiLOaTrSzmloIs5paDLOabmSzmm5Ys5qqALOaqlCzmqoQs5qqiLOaqn" \
        "Czmq5ss5qqjLOapvizmqpcs5qqQLOaqoCzmrZws5q6uLOavmizmsIgs5r+YLOa/sSzm" \
        "v58s5r+gLOa/myzmv6Qs5r+rLOa/ryzmvoAs5r+sLOa/oSzmv6ks5r+VLOa/rizmv7A" \
        "s54enLOeHnyznh64s54emLOeHpSznh60s54esLOeHtCznh6As54i1LOeJhiznjbAs54" \
        "2yLOeSqSznkrAs55KmLOeSqCznmYYs55mCLOeZjCznm6os556zLOeeqiznnrAs556sL" \
        "Oeepyznnq0s55+vLOejtyzno7os56O0LOejryznpIEs56anLOemqiznqZcs56q/LOew" \
        "hyznsI0s56++LOevtyznsIws56+gLOezoCzns5ws57OeLOezoizns58s57OZLOeznSz" \
        "nuK4s57i+LOe5hiznuLcs57iyLOe5gyznuKss57i9LOe4sSznuYUs57mBLOe4tCznuL" \
        "ks57mILOe4tSznuL8s57ivLOe9hCznv7Ms57+8LOiBsSzogbIs6IGwLOiBryzogbMs6" \
        "IeGLOiHgyzohros6IeCLOiHgCzohr8s6Ia9LOiHiSzohr4s6IeoLOiIiSzoibEs6Jaq" \
        "LOiWhCzolb4s6JacLOiWkSzolpQs6JavLOiWmyzolocs6JaoLOiWiizomacs6J+ALOi" \
        "fkSzonrMs6J+SLOifhizonqss6J67LOieuizon4gs6J+LLOikuyzopLYs6KWELOikuC" \
        "zopL0s6KasLOisjizorJcs6KyZLOismyzorIos6KygLOisnSzorIQs6KyQLOixgSzos" \
        "L8s6LGzLOizuizos70s6LO8LOizuCzos7ss6LaoLOi5iSzouYss6LmILOi5iizovYQs" \
        "6Ly+LOi9gizovYUs6Ly/LOmBvyzpgb0s6YKELOmCgSzpgoIs6YKALOmEuSzphqMs6Ya" \
        "eLOmGnCzpjY0s6Y6CLOmMqCzpjbUs6Y2KLOmNpSzpjYss6YyYLOmNvizpjaws6Y2bLO" \
        "mNsCzpjZos6Y2ULOmXiizpl4ss6ZeMLOmXiCzpl4Ys6ZqxLOmauCzpm5Ys6ZycLOmcn" \
        "izpnqAs6Z+TLOmhhizporYs6aS1LOmogSzpp78s6a6uLOmuqyzprqos6a6tLOm0uyzp" \
        "tL8s6bqLLOm7jyzpu54s6bucLOm7nSzpu5ss6by+LOm9iyzlj6Is5ZqVLOWarizlo5k" \
        "s5aOYLOWsuCzlvZ0s5oejLOaIsyzmk7Qs5pOyLOaTvizmlIYs5pO6LOaTuyzmk7cs5p" \
        "a3LOabnCzmnKYs5qqzLOaqrCzmq4Ms5qq7LOaquCzmq4Is5qquLOaqryzmrZ8s5q24L" \
        "OauryzngIks54CLLOa/vizngIYs5r+6LOeAkSzngI8s54e7LOeHvCznh74s54e4LOeN" \
        "tyznjbUs55KnLOeSvyznlJUs55mWLOeZmCznmZIs5569LOeevyznnrss5568LOekjiz" \
        "npq4s56mhLOepoiznqaAs56uELOerhSznsKss57CnLOewqiznsJ4s57CjLOewoSzns6" \
        "cs57mULOe5lSznuZ4s57maLOe5oSznuZIs57mZLOe9iCznv7ks57+7LOiBtyzogbYs6" \
        "IeNLOiHjyzoiIos6JePLOiWqSzol40s6JeQLOiXiSzolrAs6Ja6LOiWuSzolqYs6J+v" \
        "LOifrCzon7Is6J+gLOimhizoprIs6Ke0LOisqCzorLks6KysLOisqyzosZAs6LSFLOi" \
        "5mSzouaMs6LmmLOi5pCzouZ8s6LmVLOi7gCzovYks6L2NLOmChyzpgoMs6YKILOmGqy" \
        "zphqws6YeQLOmOlCzpjoos6Y6WLOmOoizpjrMs6Y6uLOmOrCzpjrAs6Y6YLOmOmizpj" \
        "pcs6ZeULOmXlizpl5As6ZeVLOmboizpm5ws6ZuZLOmbmyzpm54s6ZykLOmeoyzpnqYs" \
        "6Z6tLOmfuSzpoY0s6aGPLOmhjCzpoY4s6aGTLOmiuizppL4s6aS/LOmkvSzppK4s6aa" \
        "lLOmojizpq4Es6ayDLOmshizprY8s6a2OLOmtjSzpr4os6a+JLOmvvSzpr4gs6a+ALO" \
        "m1kSzptZ0s6bWgLOm7oCzpvJUs6bysLOWEsyzlmqUs5aOeLOWjnyzlo6Is5a+1LOm+k" \
        "Czlu6ws5oeyLOaHtyzmh7Ys5oe1LOaUgCzmlI8s5pugLOabnSzmq6Us5qudLOarmizm" \
        "q5Ms54CbLOeAnyzngKgs54CaLOeAnSzngJUs54CYLOeIhizniI0s54mYLOeKoiznjbg" \
        "s5426LOeSvSznk4os55OjLOeWhyznloYs55mfLOeZoSznn4cs56SZLOemsSznqass56" \
        "mpLOewviznsL8s57C4LOewvSznsLcs57GALOe5qyznua0s57m5LOe5qSznuaos576FL" \
        "Oe5syznvrYs5765LOe+uCzoh5gs6JepLOiXnSzol6os6JeVLOiXpCzol6Us6Je3LOif" \
        "uyzooIUs6KCNLOifuSzon74s6KWgLOilnyzopZYs6KWeLOitgSzorZws6K2YLOitiSz" \
        "orZos6K2OLOitjyzorYYs6K2ZLOi0iCzotIos6Lm8LOi5sizouocs6Lm2LOi5rCzoub" \
        "os6Lm0LOi9lCzovY4s6L6tLOmCiizpgoss6YaxLOmGrizpj6Es6Y+RLOmPnyzpj4Ms6" \
        "Y+ILOmPnCzpj50s6Y+WLOmPoizpj40s6Y+YLOmPpCzpj5cs6Y+oLOmXnCzpmrQs6Zuj" \
        "LOmcqizpnKcs6Z2hLOmfnCzpn7ss6aGeLOmhmCzpoZss6aK8LOmlhSzppYks6aiWLOm" \
        "omSzprI0s6a+oLOmvpyzpr5Ys6a+bLOm2iSzptaEs6bWyLOm1qizptaws6bqSLOm6ly" \
        "zpupMs6bq0LOWLuCzlmqgs5Zq3LOWatizlmrQs5Zq8LOWjpCzlrYAs5a2DLOWtvSzlr" \
        "7Ys5beJLOaHuCzmh7os5pSYLOaUlCzmlJks5pumLOacpyzmq6ws54C+LOeAsCzngLIs" \
        "54iQLOeNuyznk48s55miLOeZpSznpKYs56SqLOekrCznpKss56uHLOertiznsYws57G" \
        "DLOexjSzns68s57OwLOi+riznub0s57m8LOe6giznvYws6ICALOiHmizoiaYs6Je7LO" \
        "iXuSzomJEs6Je6LOiYhizomIss6JiHLOiYiizooJQs6KCVLOilpCzopros6Ke4LOits" \
        "Czoraws6K2mLOitryzorZ8s6K2rLOi0jyzotI0s6LqJLOi6gSzouoUs6LqCLOmGtCzp" \
        "h4ss6ZCYLOmQgyzpj70s6ZehLOmcsCzpo4Qs6aWSLOmlkSzppqgs6airLOmosCzpqLc" \
        "s6ai1LOmwkyzpsI0s6bm5LOm6tSzpu6gs6byvLOm9nyzpvaMs6b2hLOWEtyzlhLgs5Z" \
        "uBLOWbgCzlm4Is5aSULOWxrCzlt40s5oe8LOaHvizmlJ0s5pScLOaWlSzmm6ks5qu7L" \
        "OashCzmq7os5q6yLOeBjCzniJss54qnLOeTliznk5Qs55mpLOefkyznsZAs57qPLOe6" \
        "jCznvrws6JiXLOiYrSzomJos6KCjLOigoizooKEs6KCfLOilqizopaws6Ka9LOittCz" \
        "orbcs6K29LOi0kyzouoos6LqNLOi6iyzovZ8s6L6vLOmGuizpkK4s6ZCzLOmQtSzpkL" \
        "os6ZC4LOmQsizpkKss6ZeiLOmcuCzpnLks6ZyyLOmfvyzpoacs6aGlLOmllyzpqYUs6" \
        "amDLOmpgCzpqL4s6auPLOmtlCzprZEs6bCtLOmwpSzptq8s6ba0LOm3gizptrgs6bqd" \
        "LOm7ryzpvJks6b2cLOm9pizpvacs5YS8LOWEuyzlm4gs5ZuKLOWbiSzlrb8s5beULOW" \
        "3kizlvY4s5oe/LOaUpCzmrIos5q2hLOeBkSzngZgs546ALOeTpCznloos55muLOeZrC" \
        "znprMs57GgLOexnyzogb4s6IG9LOiHnyzopbIs6KWvLOinvCzoroAs6LSWLOi0lyzou" \
        "pEs6LqTLOi9oSzphYgs6ZGELOmRkSzpkZIs6Zy9LOmcvizpn4Ms6Z+BLOmhqyzppZUs" \
        "6amVLOmpjSzpq5Is6ayaLOmxiSzpsLEs6bC+LOmwuyzpt5Ms6beXLOm8tCzpvaws6b2" \
        "qLOm+lCzlm4ws5beWLOaIgCzmlKMs5pSrLOaUqizmm6ws5qyQLOeTmiznq4os57GkLO" \
        "exoyznsaUs57qTLOe6liznupQs6IeiLOiYuCzomL8s6KCxLOiuiizpgpAs6YKPLOmRo" \
        "yzpkaAs6ZGkLOmdqCzpoa8s6aWcLOmpmizpqZss6amXLOmrkyzpq5Qs6auRLOmxlCzp" \
        "sZcs6bGWLOm3pSzpup8s6bu0LOWbkSzlo6ks5pSsLOeBniznmbEs55myLOeflyznvZA" \
        "s576ILOigtizooLks6KGiLOiukyzorpIs6K6WLOiJtyzotJss6YeALOmRqizpnYIs6Z" \
        "2ILOmdhCzpn4Ys6aGwLOmpnyzprKIs6a2YLOmxnyzpt7ks6be6LOm5vCzpub0s6byHL" \
        "Om9tyzpvbIs5buzLOaslizngaMs57GsLOexrizooLss6KeALOi6oSzph4Es6ZGyLOmR" \
        "sCzpobEs6aWeLOmrlizprKMs6buMLOeBpCznn5os6K6aLOmRtyzpn4ks6amiLOmppSz" \
        "nupws6K6cLOi6qizph4Us6ZG9LOmRvizpkbws6bG3LOmxuCzpu7cs6LGULOmRvyzpuJ" \
        "os54ioLOmpqizprLEs6bibLOm4niznsbIsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL" \
        "CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws" \
        "LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCw" \
        "sLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLC" \
        "wsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCws5LmCLOS5nCzlh7Us5YyaLOWOg" \
        "izkuIcs5LiMLOS5hyzkuo0s5ZuXLO+ojCzlsa4s5b2zLOS4jyzlhocs5LiOLOS4rizk" \
        "upMs5LuCLOS7iSzku4gs5YaYLOWLvCzljaws5Y65LOWcoCzlpIMs5aSsLOWwkCzlt78" \
        "s5pehLOausyzmr4ws5rCULOeIvyzkuLEs5Li8LOS7qCzku5ws5LupLOS7oSzku50s5L" \
        "uaLOWIjCzljJws5Y2MLOWcoizlnKMs5aSXLOWkryzlroEs5a6ELOWwkizlsLss5bG0L" \
        "OWxsyzluIQs5bqALOW6gizlv4ks5oiJLOaJkCzmsJUs5rC2LOaxgyzmsL8s5rC7LOeK" \
        "riznirAs546KLOemuCzogoos6ZieLOS8jizkvJgs5LysLOS7tSzkvJQs5LuxLOS8gCz" \
        "ku7cs5LyILOS8nSzkvIIs5LyFLOS8oizkvJMs5LyELOS7tCzkvJIs5YaxLOWIkyzliI" \
        "ks5YiQLOWKpizljKIs5YyfLOWNjSzljoos5ZCHLOWboSzlm58s5ZyuLOWcqizlnLQs5" \
        "aS8LOWmgCzlpbws5aaFLOWluyzlpb4s5aW3LOWlvyzlrZYs5bCVLOWwpSzlsbws5bG6" \
        "LOWxuyzlsb4s5befLOW5tSzluoQs5byCLOW8mizlvbQs5b+VLOW/lCzlv48s5omcLOa" \
        "JnizmiaQs5omhLOaJpizmiaIs5omZLOaJoCzmiZos5omlLOaXryzml64s5py+LOacuS" \
        "zmnLgs5py7LOacuizmnL8s5py8LOacsyzmsJgs5rGGLOaxkizmsZws5rGPLOaxiizms" \
        "ZQs5rGLLOaxjCzngbEs54meLOeKtCznirUs546OLOeUqiznmb8s56m1LOe9kSzoibgs" \
        "6Im8LOiKgCzoib0s6Im/LOiZjSzopb4s6YKZLOmClyzpgpgs6YKbLOmClCzpmKIs6Zi" \
        "kLOmYoCzpmKMs5L2WLOS8uyzkvaIs5L2JLOS9kyzkvaQs5Ly+LOS9pyzkvZIs5L2fLO" \
        "S9gSzkvZgs5LytLOS8syzkvL8s5L2hLOWGjyzlhrks5YicLOWInizliKEs5YqtLOWKr" \
        "izljIks5Y2jLOWNsizljo4s5Y6PLOWQsCzlkLcs5ZCqLOWRlCzlkYUs5ZCZLOWQnCzl" \
        "kKUs5ZCYLOWQvSzlkY8s5ZGBLOWQqCzlkKQs5ZGHLOWbrizlm6cs5ZulLOWdgSzlnYU" \
        "s5Z2MLOWdiSzlnYss5Z2SLOWkhizlpYAs5aamLOWmmCzlpqAs5aaXLOWmjizlpqIs5a" \
        "aQLOWmjyzlpqcs5aahLOWujizlrpIs5bCoLOWwqizlso0s5bKPLOWyiCzlsoss5bKJL" \
        "OWykizlsoos5bKGLOWykyzlspUs5begLOW4iizluI4s5bqLLOW6iSzluows5bqILOW6" \
        "jSzlvIUs5bydLOW9uCzlvbYs5b+SLOW/kSzlv5As5b+tLOW/qCzlv64s5b+zLOW/oSz" \
        "lv6Qs5b+jLOW/uizlv68s5b+3LOW/uyzmgIAs5b+0LOaIuizmioMs5oqMLOaKjizmio" \
        "8s5oqULOaKhyzmibEs5om7LOaJuizmibAs5oqBLOaKiCzmibcs5om9LOaJsizmibQs5" \
        "pS3LOaXsCzml7Qs5pezLOaXsizml7Us5p2FLOadhyzmnZks5p2VLOadjCzmnYgs5p2d" \
        "LOadjSzmnZos5p2LLOavkCzmsJks5rCaLOaxuCzmsacs5rGrLOayhCzmsoss5rKPLOa" \
        "xsSzmsa8s5rGpLOaymizmsa0s5rKHLOaylSzmspws5rGmLOaxsyzmsaUs5rG7LOayji" \
        "zngbQs54G6LOeJoyznir8s54q9LOeLgyzni4Ys54uBLOeKuizni4Us546VLOeOlyznj" \
        "pMs546ULOeOkiznlLos55S5LOeWlCznlpUs55qBLOekvSzogLQs6IKVLOiCmSzogpAs" \
        "6IKSLOiCnCzoipAs6IqPLOiKhSzoio4s6IqRLOiKkyzoioos6IqDLOiKhCzosbgs6L+" \
        "JLOi+vyzpgp8s6YKhLOmCpSzpgp4s6YKnLOmCoCzpmLAs6ZioLOmYryzpmK0s5LizLO" \
        "S+mCzkvbws5L6FLOS9vSzkvoAs5L6HLOS9tizkvbQs5L6JLOS+hCzkvbcs5L2MLOS+l" \
        "yzkvaos5L6aLOS9uSzkvoEs5L24LOS+kCzkvpws5L6ULOS+nizkvpIs5L6CLOS+lSzk" \
        "vass5L2uLOWGnizlhrws5Ya+LOWItSzliLIs5YizLOWJhizliLEs5Yq8LOWMiizljIs" \
        "s5Yy8LOWOkizljpQs5ZKHLOWRvyzlkoEs5ZKRLOWSgizlkogs5ZGrLOWRuizlkb4s5Z" \
        "GlLOWRrCzlkbQs5ZGmLOWSjSzlka8s5ZGhLOWRoCzlkpgs5ZGjLOWRpyzlkaQs5Zu3L" \
        "OWbuSzlna8s5Z2yLOWdrSzlnass5Z2xLOWdsCzlnbYs5Z6ALOWdtSzlnbss5Z2zLOWd" \
        "tCzlnaIs5Z2oLOWdvSzlpIws5aWFLOWmtSzlpros5aePLOWnjizlprIs5aeMLOWngSz" \
        "lprYs5aa8LOWngyzlp5Ys5aaxLOWmvSzlp4As5aeILOWmtCzlp4cs5a2iLOWtpSzlrp" \
        "Ms5a6VLOWxhCzlsYcs5bKuLOWypCzlsqAs5bK1LOWyryzlsqgs5bKsLOWynyzlsqMs5" \
        "bKtLOWyoizlsqos5bKnLOWynSzlsqUs5bK2LOWysCzlsqYs5biXLOW4lCzluJks5byo" \
        "LOW8oizlvKMs5bykLOW9lCzlvoIs5b2+LOW9vSzlv54s5b+lLOaArSzmgKYs5oCZLOa" \
        "AsizmgIss5oC0LOaAiizmgJcs5oCzLOaAmizmgJ4s5oCsLOaAoizmgI0s5oCQLOaAri" \
        "zmgJMs5oCRLOaAjCzmgIks5oCcLOaIlCzmiL0s5oqtLOaKtCzmi5Es5oq+LOaKqizmi" \
        "rYs5ouKLOaKrizmirMs5oqvLOaKuyzmiqks5oqwLOaKuCzmlL0s5paoLOaWuyzmmIks" \
        "5pe8LOaYhCzmmJIs5piILOaXuyzmmIMs5piLLOaYjSzmmIUs5pe9LOaYkSzmmJAs5pu" \
        "2LOaciizmnoUs5p2sLOaejizmnpIs5p22LOaduyzmnpgs5p6GLOaehCzmnbQs5p6NLO" \
        "aejCzmnbos5p6fLOaekSzmnpks5p6DLOadvSzmnoEs5p24LOaduSzmnpQs5qylLOaug" \
        "Czmrb4s5q+eLOawnSzmspMs5rOsLOazqyzms64s5rOZLOaytizms5Qs5rKtLOazpyzm" \
        "srcs5rOQLOazgizmsros5rODLOazhizms60s5rOyLOazkizms50s5rK0LOayiizmsp0" \
        "s5rKALOaznizms4As5rSwLOazjSzms4cs5rKwLOazuSzms48s5rOpLOazkSzngpQs54" \
        "KYLOeChSzngpMs54KGLOeChCzngpEs54KWLOeCgizngpos54KDLOeJqizni5Ys54uLL" \
        "OeLmCzni4ks54ucLOeLkizni5Qs54uaLOeLjCzni5Es546kLOeOoSznjq0s546mLOeO" \
        "oiznjqAs546sLOeOnSznk50s55OoLOeUvyznlYAs55S+LOeWjCznlpgs55qvLOebsyz" \
        "nm7Es55uwLOebtSznn7gs55+8LOefuSznn7ss55+6LOeftyznpYIs56S/LOenhSznqb" \
        "gs56m7LOeruyznsbUs57O9LOiAtSzogo8s6IKuLOiCoyzogrgs6IK1LOiCrSzoiKAs6" \
        "IqgLOiLgCzoiqss6IqaLOiKmCzoipss6Iq1LOiKpyzoiq4s6Iq8LOiKnizoiros6Iq0" \
        "LOiKqCzoiqEs6IqpLOiLgizoiqQs6IuDLOiKtizoiqIs6JmwLOiZryzoma0s6JmuLOi" \
        "xlizov5Is6L+LLOi/kyzov40s6L+WLOi/lSzov5cs6YKyLOmCtCzpgq8s6YKzLOmCsC" \
        "zpmLks6Zi9LOmYvCzpmLos6ZmDLOS/jSzkv4Us5L+TLOS+sizkv4ks5L+LLOS/gSzkv" \
        "5Qs5L+cLOS/mSzkvrss5L6zLOS/myzkv4cs5L+WLOS+uizkv4As5L65LOS/rCzliYQs" \
        "5YmJLOWLgCzli4Is5Yy9LOWNvCzljpcs5Y6WLOWOmSzljpgs5ZK6LOWSoSzlkq0s5ZK" \
        "lLOWTjyzlk4Ms6IyNLOWStyzlkq4s5ZOWLOWStizlk4Us5ZOGLOWSoCzlkbAs5ZK8LO" \
        "WSoizlkr4s5ZGyLOWTnizlkrAs5Z61LOWenizlnp8s5Z6kLOWejCzlnpcs5Z6dLOWem" \
        "yzlnpQs5Z6YLOWejyzlnpks5Z6lLOWemizlnpUs5aO0LOWkjSzlpZMs5aehLOWnnizl" \
        "p64s5aiALOWnsSzlp50s5ae6LOWnvSzlp7ws5ae2LOWnpCzlp7Is5ae3LOWnmyzlp6k" \
        "s5aezLOWntSzlp6As5ae+LOWntCzlp60s5a6oLOWxjCzls5As5bOYLOWzjCzls5cs5b" \
        "OLLOWzmyzls54s5bOaLOWziSzls4cs5bOKLOWzlizls5Ms5bOULOWzjyzls4gs5bOGL" \
        "OWzjizls58s5bO4LOW3uSzluKEs5biiLOW4oyzluKAs5bikLOW6sCzluqQs5bqiLOW6" \
        "myzluqMs5bqlLOW8hyzlvK4s5b2WLOW+hizmgLcs5oC5LOaBlCzmgbIs5oGeLOaBhSz" \
        "mgZMs5oGHLOaBiSzmgZss5oGMLOaBgCzmgYIs5oGfLOaApCzmgYQs5oGYLOaBpizmga" \
        "4s5omCLOaJgyzmi48s5oyNLOaMiyzmi7Us5oyOLOaMgyzmi6ss5ou5LOaMjyzmjIws5" \
        "ou4LOaLtizmjIAs5oyTLOaMlCzmi7os5oyVLOaLuyzmi7As5pWBLOaVgyzmlqos5pa/" \
        "LOaYtizmmKEs5piyLOaYtSzmmJws5pimLOaYoizmmLMs5pirLOaYuizmmJ0s5pi0LOa" \
        "YuSzmmK4s5pyPLOackCzmn4Es5p+yLOafiCzmnros5p+cLOaeuyzmn7gs5p+YLOafgC" \
        "zmnrcs5p+FLOafqyzmn6Qs5p+fLOaetSzmn40s5p6zLOaftyzmn7Ys5p+uLOafoyzmn" \
        "4Is5p65LOafjizmn6cs5p+wLOaesizmn7ws5p+GLOafrSzmn4ws5p6uLOafpizmn5ss" \
        "5p+6LOafiSzmn4os5p+DLOafqizmn4ss5qyoLOaugizmroQs5q62LOavlizmr5gs5q+" \
        "gLOawoCzmsKEs5rSoLOa0tCzmtK0s5rSfLOa0vCzmtL8s5rSSLOa0iizms5os5rSzLO" \
        "a0hCzmtJks5rS6LOa0mizmtJEs5rSALOa0nSzmtYIs5rSBLOa0mCzmtLcs5rSDLOa0j" \
        "yzmtYAs5rSHLOa0oCzmtKws5rSILOa0oizmtIks5rSQLOeCtyzngp8s54K+LOeCsSzn" \
        "grAs54KhLOeCtCzngrUs54KpLOeJgSzniYks54mKLOeJrCznibAs54mzLOeJrizni4o" \
        "s54ukLOeLqCzni6ss54ufLOeLqizni6Ys54ujLOeOhSznj4ws54+CLOePiCznj4Us54" \
        "65LOeOtiznjrUs5460LOePqyznjr8s54+HLOeOviznj4Ms54+GLOeOuCznj4ss55OsL" \
        "OeTriznlK4s55WHLOeViCznlqcs55aqLOeZuSznm4Qs55yILOecgyznnIQs55yFLOec" \
        "iiznm7cs55u7LOebuiznn6cs55+oLOeghiznoJEs56CSLOeghSznoJAs56CPLOegjiz" \
        "noIks56CDLOegkyznpYos56WMLOeliyznpYUs56WELOenlSznp40s56ePLOenliznp4" \
        "4s56qALOepviznq5Es56yALOesgSznsbos57G4LOexuSznsb8s57KALOeygSzntIMs5" \
        "7SILOe0gSznvZgs576RLOe+jSznvr4s6ICHLOiAjizogI8s6ICULOiAtyzog5gs6IOH" \
        "LOiDoCzog5Es6IOILOiDgizog5As6IOFLOiDoyzog5ks6IOcLOiDiizog5Us6IOJLOi" \
        "Djyzog5cs6IOmLOiDjSzoh78s6IihLOiKlCzoi5ks6Iu+LOiLuSzojIcs6IuoLOiMgC" \
        "zoi5Us6Iy6LOiLqyzoi5Ys6Iu0LOiLrCzoi6Es6IuyLOiLtSzojIws6Iu7LOiLtizoi" \
        "7As6IuqLOiLpCzoi6As6Iu6LOiLsyzoi60s6Jm3LOiZtCzombws6JmzLOihgSzooY4s" \
        "6KGnLOihqizooaks6KeTLOiohCzoqIcs6LWyLOi/oyzov6Es6L+uLOi/oCzpg7Es6YK" \
        "9LOmCvyzpg5Us6YOFLOmCvizpg4cs6YOLLOmDiCzph5Qs6YeTLOmZlCzpmY8s6ZmRLO" \
        "mZkyzpmYos6ZmOLOWAnizlgIUs5YCHLOWAkyzlgKIs5YCwLOWAmyzkv7Us5L+0LOWAs" \
        "yzlgLcs5YCsLOS/tizkv7cs5YCXLOWAnCzlgKAs5YCnLOWAtSzlgK8s5YCxLOWAjizl" \
        "hZos5YaULOWGkyzlh4os5YeELOWHhSzlh4gs5YeOLOWJoSzliZos5YmSLOWJnizliZ8" \
        "s5YmVLOWJoizli40s5YyOLOWOnizllKYs5ZOiLOWUlyzllJIs5ZOnLOWTsyzlk6Qs5Z" \
        "SaLOWTvyzllIQs5ZSILOWTqyzllJEs5ZSFLOWTsSzllIos5ZO7LOWTtyzlk7gs5ZOgL" \
        "OWUjizllIMs5ZSLLOWcgSzlnIIs5Z+MLOWgsizln5Us5Z+SLOWeuizln4Ys5Z69LOWe" \
        "vCzlnrgs5Z62LOWevyzln4cs5Z+QLOWeuSzln4Es5aSOLOWliizlqJks5aiWLOWorSz" \
        "lqK4s5aiVLOWojyzlqJcs5aiKLOWonizlqLMs5a2sLOWupyzlrq0s5a6sLOWwgyzlsZ" \
        "Ys5bGULOWzrCzls78s5bOuLOWzsSzls7cs5bSALOWzuSzluKks5bioLOW6qCzluq4s5" \
        "bqqLOW6rCzlvLMs5bywLOW9pyzmgZ0s5oGaLOaBpyzmgYEs5oKiLOaCiCzmgoAs5oKS" \
        "LOaCgSzmgp0s5oKDLOaClSzmgpss5oKXLOaChyzmgpws5oKOLOaImSzmiYYs5ouyLOa" \
        "MkCzmjZYs5oysLOaNhCzmjYUs5oy2LOaNgyzmj6Qs5oy5LOaNiyzmjYos5oy8LOaMqS" \
        "zmjYEs5oy0LOaNmCzmjZQs5o2ZLOaMrSzmjYcs5oyzLOaNmizmjZEs5oy4LOaNlyzmj" \
        "YAs5o2ILOaViizmlYYs5peGLOaXgyzml4Qs5peCLOaZiizmmZ8s5pmHLOaZkSzmnJIs" \
        "5pyTLOagnyzmoJos5qGJLOagsizmoLMs5qC7LOahiyzmoY8s5qCWLOagsSzmoJws5qC" \
        "1LOagqyzmoK0s5qCvLOahjizmoYQs5qC0LOagnSzmoJIs5qCULOagpizmoKgs5qCuLO" \
        "ahjSzmoLos5qClLOagoCzmrKws5qyvLOasrSzmrLEs5qy0LOatrSzogoIs5q6ILOavp" \
        "izmr6Qs5q+oLOavoyzmr6Is5q+nLOawpSzmtbos5rWjLOa1pCzmtbYs5rSNLOa1oSzm" \
        "tpIs5rWYLOa1oizmta0s5rWvLOa2kSzmto0s5revLOa1vyzmtoYs5rWeLOa1pyzmtaA" \
        "s5raXLOa1sCzmtbws5rWfLOa2gizmtpgs5rSvLOa1qCzmtoss5rW+LOa2gCzmtoQs5r" \
        "SWLOa2gyzmtbss5rW9LOa1tSzmtpAs54OcLOeDkyzng5Es54OdLOeDiyznvLks54OiL" \
        "OeDlyzng5Is54OeLOeDoCzng5Qs54ONLOeDhSzng4Ys54OHLOeDmizng44s54OhLOeJ" \
        "giznibgs54m3LOeJtiznjIAs54u6LOeLtCzni74s54u2LOeLsyzni7ss54yBLOePkyz" \
        "nj5ks54+lLOePliznjrws54+nLOePoyznj6ks54+cLOePkiznj5ss54+ULOePnSznj5" \
        "os54+XLOePmCznj6gs55OeLOeTnyznk7Qs55O1LOeUoSznlZss55WfLOeWsCznl4Es5" \
        "5a7LOeXhCznl4As55a/LOeWtiznlros55qKLOebiSznnJ0s55ybLOeckCznnJMs55yS" \
        "LOecoyznnJEs55yVLOecmSznnJos55yiLOecpyznoKMs56CsLOegoiznoLUs56CvLOe" \
        "gqCznoK4s56CrLOegoSznoKks56CzLOegqiznoLEs56WULOelmyznpY8s56WcLOelky" \
        "znpZIs56WRLOenqyznp6ws56egLOenriznp60s56eqLOennCznp54s56edLOeqhiznq" \
        "oks56qFLOeqiyznqows56qKLOeqhyznq5gs56yQLOeshCznrJMs56yFLOesjyznrIgs" \
        "56yKLOesjiznrIks56ySLOeyhCznspEs57KKLOeyjCznsogs57KNLOeyhSzntJ4s57S" \
        "dLOe0kSzntI4s57SYLOe0lizntJMs57SfLOe0kizntI8s57SMLOe9nCznvaEs572eLO" \
        "e9oCznvZ0s572bLOe+liznvpIs57+DLOe/giznv4As6ICWLOiAvizogLks6IO6LOiDs" \
        "izog7ks6IO1LOiEgSzog7ss6ISALOiIgSzoiK8s6IilLOiMsyzojK0s6I2ELOiMmSzo" \
        "jZEs6IylLOiNlizojL8s6I2BLOiMpizojJws6IyiLOiNgizojY4s6IybLOiMqizojIg" \
        "s6Iy8LOiNjSzojJYs6IykLOiMoCzojLcs6IyvLOiMqSzojYcs6I2FLOiNjCzojZMs6I" \
        "yeLOiMrCzojYss6IynLOiNiCzomZMs6JmSLOiaoizomqgs6JqWLOiajSzompEs6JqeL" \
        "Oiahyzompcs6JqGLOiaiyzompos6JqFLOiapSzompks6JqhLOiapyzompUs6JqYLOia" \
        "jizomp0s6JqQLOialCzooYMs6KGELOihrSzoobUs6KG2LOihsizoooAs6KGxLOihvyz" \
        "ooa8s6KKDLOihvizoobQs6KG8LOiokizosYcs6LGXLOixuyzosqQs6LKjLOi1tizotb" \
        "gs6La1LOi2tyzotrYs6LuRLOi7kyzov74s6L+1LOmAgizov78s6L+7LOmAhCzov7ws6" \
        "L+2LOmDlizpg6As6YOZLOmDmizpg6Ms6YOfLOmDpSzpg5gs6YObLOmDlyzpg5ws6YOk" \
        "LOmFkCzphY4s6YWPLOmHlSzph6Is6YeaLOmZnCzpmZ8s6Zq8LOmjoyzpq58s6ayvLOS" \
        "5vyzlgbAs5YGqLOWBoSzlgZ4s5YGgLOWBkyzlgYss5YGdLOWBsizlgYgs5YGNLOWBgS" \
        "zlgZss5YGKLOWBoizlgJUs5YGFLOWBnyzlgaks5YGrLOWBoyzlgaQs5YGGLOWBgCzlg" \
        "a4s5YGzLOWBlyzlgZEs5YeQLOWJqyzlia0s5YmsLOWJrizli5Ys5YuTLOWMrSzljpws" \
        "5ZW1LOWVtizllLws5ZWNLOWVkCzllLQs5ZSqLOWVkSzllaIs5ZS2LOWUtSzllLAs5ZW" \
        "SLOWVhSzllIws5ZSyLOWVpSzllY4s5ZS5LOWViCzllK0s5ZS7LOWVgCzllYss5ZyKLO" \
        "Wchyzln7ss5aCULOWfoizln7Ys5Z+cLOWftCzloIAs5Z+tLOWfvSzloIgs5Z+4LOWgi" \
        "yzln7Ms5Z+PLOWghyzln64s5Z+jLOWfsizln6Us5Z+sLOWfoSzloI4s5Z+8LOWgkCzl" \
        "n6cs5aCBLOWgjCzln7Es5Z+pLOWfsCzloI0s5aCELOWlnCzlqaAs5amYLOWplSzlqac" \
        "s5ameLOWouCzlqLUs5amtLOWpkCzlqZ8s5amlLOWprCzlqZMs5amkLOWplyzlqYMs5a" \
        "mdLOWpkizlqYQs5ambLOWpiCzlqo4s5ai+LOWpjSzlqLks5amMLOWpsCzlqaks5amHL" \
        "OWpkSzlqZYs5amCLOWpnCzlrbIs5a2uLOWvgSzlr4As5bGZLOW0nizltIss5bSdLOW0" \
        "mizltKAs5bSMLOW0qCzltI0s5bSmLOW0pSzltI8s5bSwLOW0kizltKMs5bSfLOW0riz" \
        "luL4s5bi0LOW6sSzlurQs5bq5LOW6sizlurMs5by2LOW8uCzlvpss5b6WLOW+nyzmgo" \
        "os5oKQLOaChizmgr4s5oKwLOaCuizmg5Ms5oOULOaDjyzmg6Qs5oOZLOaDnSzmg4gs5" \
        "oKxLOaDmyzmgrcs5oOKLOaCvyzmg4Ms5oONLOaDgCzmjLIs5o2lLOaOiizmjoIs5o29" \
        "LOaOvSzmjp4s5o6tLOaOnSzmjpcs5o6rLOaOjizmja8s5o6HLOaOkCzmja4s5o6vLOa" \
        "NtSzmjpws5o2tLOaOrizmjbws5o6kLOaMuyzmjp8s5o24LOaOhSzmjoEs5o6RLOaOjS" \
        "zmjbAs5pWTLOaXjSzmmaUs5pmhLOaZmyzmmZks5pmcLOaZoizmnJgs5qG5LOaihyzmo" \
        "pAs5qKcLOahrSzmoa4s5qKuLOaiqyzmpZYs5qGvLOaioyzmoqws5qKpLOahtSzmobQs" \
        "5qKyLOaijyzmobcs5qKSLOahvCzmoass5qGyLOaiqizmooAs5qGxLOahvizmopss5qK" \
        "WLOaiiyzmoqAs5qKJLOaipCzmobgs5qG7LOaikSzmoows5qKKLOahvSzmrLYs5qyzLO" \
        "astyzmrLgs5q6RLOaujyzmro0s5q6OLOaujCzmsKos5reALOa2qyzmtrQs5razLOa5t" \
        "Czmtqws5repLOa3oizmtrcs5re2LOa3lCzmuIAs5reILOa3oCzmt58s5reWLOa2vizm" \
        "t6Us5recLOa3nSzmt5ss5re0LOa3iizmtr0s5retLOa3sCzmtros5reVLOa3gizmt48" \
        "s5reJLOa3kCzmt7Is5reTLOa3vSzmt5cs5reNLOa3oyzmtrss54O6LOeEjSzng7cs54" \
        "SXLOeDtCznhIws54OwLOeEhCzng7Ms54SQLOeDvCzng78s54SGLOeEkyznhIAs54O4L" \
        "OeDtiznhIss54SCLOeEjiznib4s54m7LOeJvCznib8s54ydLOeMlyznjIcs54yRLOeM" \
        "mCznjIos54yILOeLvyznjI8s54yeLOeOiCznj7Ys54+4LOePtSznkIQs55CBLOePvSz" \
        "nkIcs55CALOePuiznj7ws54+/LOeQjCznkIss54+0LOeQiCznlaQs55WjLOeXjiznl5" \
        "Is55ePLOeXiyznl4ws55eRLOeXkCznmo8s55qJLOebkyznnLks55yvLOecrSznnLEs5" \
        "5yyLOectCznnLMs55y9LOecpSznnLss55y1LOehiCznoZIs56GJLOehjSznoYos56GM" \
        "LOegpiznoYUs56GQLOelpCznpacs56WpLOelqiznpaMs56WrLOeloSznprss56e6LOe" \
        "nuCznp7Ys56e3LOeqjyznqpQs56qQLOestSznrYcs56y0LOespSznrLAs56yiLOespC" \
        "znrLMs56yYLOesqiznrJ0s56yxLOesqyznrK0s56yvLOessiznrLgs56yaLOesoyzns" \
        "pQs57KYLOeyliznsqMs57S1LOe0vSzntLgs57S2LOe0uizntYUs57SsLOe0qSzntYEs" \
        "57WHLOe0vizntL8s57WKLOe0uyzntKgs572jLOe+lSznvpws576dLOe+myznv4os57+" \
        "LLOe/jSznv5As57+RLOe/hyznv48s57+JLOiAnyzogJ4s6ICbLOiBhyzogYMs6IGILO" \
        "iEmCzohKUs6ISZLOiEmyzohK0s6ISfLOiErCzohJ4s6IShLOiElSzohKcs6ISdLOiEo" \
        "izoiJEs6Ii4LOiIsyzoiLos6Ii0LOiIsizoibQs6I6QLOiOoyzojqgs6I6NLOiNuizo" \
        "jbMs6I6kLOiNtCzojo8s6I6BLOiOlSzojpks6I21LOiOlCzojqks6I29LOiOgyzojow" \
        "s6I6dLOiOmyzojqos6I6LLOiNvizojqUs6I6vLOiOiCzojpcs6I6wLOiNvyzojqYs6I" \
        "6HLOiOrizojbYs6I6aLOiZmSzomZYs6Jq/LOiatyzom4Is6JuBLOibhSzomros6JqwL" \
        "OibiCzomrks6JqzLOiauCzom4ws6Jq0LOiauyzomrws6JuDLOiavSzomr4s6KGSLOii" \
        "iSzoopUs6KKoLOiioizooqos6KKaLOiikSzooqEs6KKfLOiimCzooqcs6KKZLOiimyz" \
        "oopcs6KKkLOiirCzooows6KKTLOiijizopoIs6KeWLOinmSzop5Us6KiwLOiopyzoqK" \
        "ws6KieLOiwuSzosLss6LGcLOixnSzosb0s6LKlLOi1vSzotbss6LW5LOi2vCzot4Is6" \
        "La5LOi2vyzot4Es6LuYLOi7nizou50s6LucLOi7lyzou6As6LuhLOmApCzpgIss6YCR" \
        "LOmAnCzpgIws6YChLOmDryzpg6os6YOwLOmDtCzpg7Is6YOzLOmDlCzpg6ss6YOsLOm" \
        "DqSzphZYs6YWYLOmFmizphZMs6YWVLOmHrCzph7Qs6YexLOmHsyzph7gs6YekLOmHuS" \
        "zph6os6YerLOmHtyzph6gs6YeuLOmVuizploYs6ZaILOmZvCzpma0s6ZmrLOmZsSzpm" \
        "a8s6Zq/LOmdqizpoIQs6aOlLOmmlyzlgpss5YKVLOWClCzlgp4s5YKLLOWCoyzlgoMs" \
        "5YKMLOWCjizlgp0s5YGoLOWCnCzlgpIs5YKCLOWChyzlhZ8s5YeULOWMkizljJEs5Y6" \
        "kLOWOpyzllpEs5ZaoLOWWpSzllq0s5ZW3LOWZhSzllqIs5ZaTLOWWiCzllo8s5Za1LO" \
        "WWgSzllqMs5ZaSLOWWpCzllb0s5ZaMLOWWpizllb8s5ZaVLOWWoSzllo4s5ZyMLOWgq" \
        "SzloLcs5aCZLOWgnizloKcs5aCjLOWgqCzln7Us5aGILOWgpSzloJws5aCbLOWgsyzl" \
        "oL8s5aC2LOWgrizloLks5aC4LOWgrSzloKws5aC7LOWloSzlqq8s5aqULOWqnyzlqbo" \
        "s5aqiLOWqnizlqbgs5aqmLOWpvCzlqqUs5aqsLOWqlSzlqq4s5ai3LOWqhCzlqoos5a" \
        "qXLOWqgyzlqoss5aqpLOWpuyzlqb0s5aqMLOWqnCzlqo8s5aqTLOWqnSzlr6os5a+NL" \
        "OWviyzlr5Qs5a+RLOWviizlr44s5bCMLOWwsCzltLcs5bWDLOW1qyzltYEs5bWLLOW0" \
        "vyzltLUs5bWRLOW1jizltZUs5bSzLOW0uizltZIs5bS9LOW0sSzltZks5bWCLOW0uSz" \
        "ltYks5bS4LOW0vCzltLIs5bS2LOW1gCzltYUs5bmELOW5gSzlvZgs5b6mLOW+pSzlvq" \
        "ss5oOJLOaCuSzmg4ws5oOiLOaDjizmg4Qs5oSULOaDsizmhIos5oSWLOaEhSzmg7Us5" \
        "oSTLOaDuCzmg7ws5oO+LOaDgSzmhIMs5oSYLOaEnSzmhJAs5oO/LOaEhCzmhIss5omK" \
        "LOaOlCzmjrEs5o6wLOaPjizmj6Us5o+oLOaPryzmj4Ms5pKdLOaPsyzmj4os5o+gLOa" \
        "Ptizmj5Us5o+yLOaPtSzmkaEs5o+fLOaOvizmj50s5o+cLOaPhCzmj5gs5o+TLOaPgi" \
        "zmj4cs5o+MLOaPiyzmj4gs5o+wLOaPlyzmj5ks5pSyLOaVpyzmlaos5pWkLOaVnCzml" \
        "ags5pWlLOaWjCzmlp0s5paeLOaWrizml5As5peSLOaZvCzmmaws5pm7LOaagCzmmbEs" \
        "5pm5LOaZqizmmbIs5pyBLOakjCzmo5Ms5qSELOajnCzmpKos5qOsLOajqizmo7Es5qS" \
        "PLOajlizmo7cs5qOrLOajpCzmo7Ys5qSTLOakkCzmo7Ms5qOhLOakhyzmo4ws5qSILO" \
        "alsCzmorQs5qSRLOajryzmo4Ys5qSULOajuCzmo5As5qO9LOajvCzmo6gs5qSLLOaki" \
        "izmpJcs5qOOLOajiCzmo50s5qOeLOajpizmo7Qs5qORLOakhizmo5Qs5qOpLOaklSzm" \
        "pKUs5qOHLOasuSzmrLss5qy/LOasvCzmrpQs5q6XLOaumSzmrpUs5q69LOavsCzmr7I" \
        "s5q+zLOawsCzmt7ws5rmGLOa5hyzmuJ8s5rmJLOa6iCzmuLws5ri9LOa5hSzmuaIs5r" \
        "irLOa4vyzmuYEs5rmdLOa5syzmuJws5rizLOa5iyzmuYAs5rmRLOa4uyzmuIMs5riuL" \
        "Oa5nizmuags5rmcLOa5oSzmuLEs5rioLOa5oCzmubEs5rmrLOa4uSzmuKIs5riwLOa5" \
        "kyzmuaUs5rinLOa5uCzmuaQs5rm3LOa5lSzmubks5rmSLOa5pizmuLUs5ri2LOa5miz" \
        "nhKAs54SeLOeEryzng7ss54SuLOeEsSznhKMs54SlLOeEoiznhLIs54SfLOeEqCznhL" \
        "os54SbLOeJiyzniZos54qILOeKiSznioYs54qFLOeKiyznjJIs54yLLOeMsCznjKIs5" \
        "4yxLOeMsyznjKcs54yyLOeMrSznjKYs54yjLOeMtSznjIws55CuLOeQrCznkLAs55Cr" \
        "LOeQliznkJos55ChLOeQrSznkLEs55CkLOeQoyznkJ0s55CpLOeQoCznkLIs55O7LOe" \
        "Uryznla8s55WsLOeXpyznl5os55ehLOeXpiznl50s55efLOeXpCznl5cs55qVLOeaki" \
        "znm5os552GLOedhyznnYQs552NLOedhSznnYos552OLOediyznnYws55+eLOefrCzno" \
        "aAs56GkLOehpSznoZws56GtLOehsSznoaos56GuLOehsCznoaks56GoLOehniznoaIs" \
        "56W0LOelsyznpbIs56WwLOeogiznqIos56iDLOeojCznqIQs56qZLOerpiznq6Qs562" \
        "KLOesuyznrYQs562ILOetjCznrY4s562ALOetmCznrYUs57KiLOeyniznsqgs57KhLO" \
        "e1mCznta8s57WjLOe1kyzntZYs57WnLOe1qizntY8s57WtLOe1nCzntass57WSLOe1l" \
        "Czntaks57WRLOe1nyzntY4s57y+LOe8vyznvaUs572mLOe+oiznvqAs576hLOe/lyzo" \
        "gZEs6IGPLOiBkCzog74s6IOULOiFgyzohYos6IWSLOiFjyzohYcs6IS9LOiFjSzohLo" \
        "s6IemLOiHrizoh7cs6Ie4LOiHuSzoiIQs6Ii8LOiIvSzoiL8s6Im1LOiMuyzoj48s6I" \
        "+5LOiQoyzoj4As6I+oLOiQkizoj6cs6I+kLOiPvCzoj7Ys6JCQLOiPhizoj4gs6I+rL" \
        "OiPoyzojr8s6JCBLOiPnSzoj6Us6I+YLOiPvyzoj6Es6I+LLOiPjizoj5Ys6I+1LOiP" \
        "iSzokIks6JCPLOiPnizokJEs6JCGLOiPgizoj7Ms6I+VLOiPuizoj4cs6I+RLOiPqiz" \
        "okJMs6I+DLOiPrCzoj64s6I+ELOiPuyzoj5cs6I+iLOiQmyzoj5ss6I++LOibmCzom6" \
        "Is6JumLOibkyzom6Ms6JuaLOibqizom50s6JurLOibnCzom6ws6JupLOiblyzom6gs6" \
        "JuRLOihiCzooZYs6KGVLOiiuizoo5cs6KK5LOiiuCzoo4As6KK+LOiitizoorws6KK3" \
        "LOiivSzoorIs6KSBLOijiSzoppUs6KaYLOimlyzop50s6KeaLOinmyzoqY4s6KmNLOi" \
        "ouSzoqZks6KmALOiplyzoqZgs6KmELOiphSzoqZIs6KmILOipkSzoqYos6KmMLOipjy" \
        "zosZ8s6LKBLOiygCzosros6LK+LOiysCzosrks6LK1LOi2hCzotoAs6LaJLOi3mCzot" \
        "5Ms6LeNLOi3hyzot5Ys6LecLOi3jyzot5Us6LeZLOi3iCzot5cs6LeFLOi7ryzou7cs" \
        "6Lu6LOi7uSzou6Ys6LuuLOi7pSzou7Us6LunLOi7qCzou7Ys6LurLOi7sSzou6ws6Lu" \
        "0LOi7qSzpgK0s6YC0LOmAryzphIYs6YSsLOmEhCzpg78s6YO8LOmEiCzpg7ks6YO7LO" \
        "mEgSzphIAs6YSHLOmEhSzphIMs6YWhLOmFpCzphZ8s6YWiLOmFoCzpiIEs6YiKLOmIp" \
        "SzpiIMs6YiaLOmIpizpiI8s6YiMLOmIgCzpiJIs6Ye/LOmHvSzpiIYs6YiELOmIpyzp" \
        "iIIs6YicLOmIpCzpiJks6YiXLOmIhSzpiJYs6ZW7LOmWjSzplows6ZaQLOmahyzpmb4" \
        "s6ZqILOmaiSzpmoMs6ZqALOmbgizpm4gs6ZuDLOmbsSzpm7As6Z2sLOmdsCzpna4s6a" \
        "CHLOmiqSzpo6ss6bOmLOm7uSzkuoMs5LqELOS6tizlgr0s5YK/LOWDhizlgq4s5YOEL" \
        "OWDiizlgrQs5YOILOWDgizlgrAs5YOBLOWCuizlgrEs5YOLLOWDiSzlgrYs5YK4LOWH" \
        "lyzlibos5Ym4LOWJuyzlibws5ZeDLOWXmyzll4ws5ZeQLOWXiyzll4os5ZedLOWXgCz" \
        "ll5Qs5ZeELOWXqSzllr8s5ZeSLOWWjSzll48s5ZeVLOWXoizll5Ys5ZeILOWXsizll4" \
        "0s5ZeZLOWXgizlnJQs5aGTLOWhqCzloaQs5aGPLOWhjSzloYks5aGvLOWhlSzloY4s5" \
        "aGdLOWhmSzloaUs5aGbLOWgvSzloaMs5aGxLOWjvCzlq4cs5auELOWriyzlqros5aq4" \
        "LOWqsSzlqrUs5aqwLOWqvyzlq4gs5aq7LOWrhizlqrcs5auALOWriizlqrQs5aq2LOW" \
        "rjSzlqrks5aqQLOWvlizlr5gs5a+ZLOWwnyzlsLMs5bWxLOW1oyzltYos5bWlLOW1si" \
        "zltaws5bWeLOW1qCzltacs5bWiLOW3sCzluY8s5bmOLOW5iizluY0s5bmLLOW7hSzlu" \
        "4ws5buGLOW7iyzlu4cs5b2ALOW+ryzlvq0s5oO3LOaFiSzmhYos5oSrLOaFhSzmhLYs" \
        "5oSyLOaErizmhYYs5oSvLOaFjyzmhKks5oWALOaIoCzphags5oijLOaIpSzmiKQs5o+" \
        "FLOaPsSzmj6ss5pCQLOaQkizmkIks5pCgLOaQpCzmkLMs5pGDLOaQnyzmkJUs5pCYLO" \
        "aQuSzmkLcs5pCiLOaQoyzmkIws5pCmLOaQsCzmkKgs5pGBLOaQtSzmkK8s5pCKLOaQm" \
        "izmkYAs5pClLOaQpyzmkIss5o+nLOaQmyzmkK4s5pChLOaQjizmla8s5paSLOaXkyzm" \
        "moYs5pqMLOaalSzmmpAs5pqLLOaaiizmmpks5pqULOaZuCzmnKAs5qWmLOalnyzmpLg" \
        "s5qWOLOaloizmpbEs5qS/LOalhSzmpaos5qS5LOalgizmpZcs5qWZLOaluizmpYgs5q" \
        "WJLOaktSzmpaws5qSzLOakvSzmpaUs5qOwLOaluCzmpLQs5qWpLOalgCzmpa8s5qWEL" \
        "OaltizmpZgs5qWBLOaltCzmpYws5qS7LOaliyzmpLcs5qWcLOaljyzmpZEs5qSyLOal" \
        "kizmpK8s5qW7LOakvCzmrYYs5q2FLOatgyzmrYIs5q2ILOatgSzmrpss76iNLOavuyz" \
        "mr7ws5q+5LOavtyzmr7gs5rqbLOa7lizmu4gs5rqPLOa7gCzmup8s5rqTLOa6lCzmuq" \
        "As5rqxLOa6uSzmu4Ys5ruSLOa6vSzmu4Es5rqeLOa7iSzmurcs5rqwLOa7jSzmuqYs5" \
        "ruPLOa6sizmur4s5ruDLOa7nCzmu5gs5rqZLOa6kizmuo4s5rqNLOa6pCzmuqEs5rq/" \
        "LOa6syzmu5As5ruKLOa6lyzmuq4s5rqjLOeFhyznhZQs54WSLOeFoyznhaAs54WBLOe" \
        "FnSznhaIs54WyLOeFuCznhaos54WhLOeFgiznhZgs54WDLOeFiyznhbAs54WfLOeFkC" \
        "znhZMs54WELOeFjSznhZos54mPLOeKjSzniows54qRLOeKkCznio4s54y8LOeNgiznj" \
        "Lss54y6LOeNgCznjYos542JLOeRhCznkYos55GLLOeRkiznkZEs55GXLOeRgCznkY8s" \
        "55GQLOeRjiznkYIs55GGLOeRjSznkZQs55OhLOeTvyznk74s55O9LOeUnSznlbks55W" \
        "3LOamgyznl68s55iPLOeYgyznl7cs55e+LOeXvCznl7ks55e4LOeYkCznl7ss55e2LO" \
        "eXrSznl7Us55e9LOeamSznmrUs55udLOedlSznnZ8s552gLOedkiznnZYs552aLOedq" \
        "Sznnacs552ULOedmSznna0s55+gLOeihyznopos56KULOeijyznooQs56KVLOeihSzn" \
        "ooYs56KhLOeigyznobks56KZLOeigCznopYs56G7LOelvCznpoIs56W9LOeluSznqJE" \
        "s56iYLOeomSznqJIs56iXLOeolSznqKIs56iTLOeomyznqJAs56qjLOeqoiznqp4s56" \
        "urLOetpiznraQs562tLOettCznraks562yLOetpSznrbMs562xLOetsCznraEs5624L" \
        "OettiznraMs57KyLOeytCznsq8s57aILOe2hizntoAs57aNLOe1vyzntoUs57W6LOe2" \
        "jizntbss57aDLOe1vCzntows57aULOe2hCzntb0s57aSLOe9rSznvass572nLOe9qCz" \
        "nvaws576mLOe+pSznvqcs57+bLOe/nCzogKEs6IWkLOiFoCzohbcs6IWcLOiFqSzohZ" \
        "ss6IWiLOiFsizmnKEs6IWeLOiFtizohacs6IWvLOiFhCzohaEs6IidLOiJiSzoiYQs6" \
        "ImALOiJgizoiYUs6JOxLOiQvyzokZYs6JG2LOiRuSzoko8s6JKNLOiRpSzokZEs6JGA" \
        "LOiShizokacs6JCwLOiRjSzokb0s6JGaLOiRmSzokbQs6JGzLOiRnSzolIcs6JGeLOi" \
        "QtyzokLos6JC0LOiRuizokYMs6JG4LOiQsizokYUs6JCpLOiPmSzokYss6JCvLOiRgi" \
        "zokK0s6JGfLOiRsCzokLks6JGOLOiRjCzokZIs6JGvLOiThSzoko4s6JC7LOiRhyzok" \
        "LYs6JCzLOiRqCzokb4s6JGELOiQqyzokaAs6JGULOiRrizokZAs6JyLLOichCzom7cs" \
        "6JyMLOibuizom5Ys6Ju1LOidjSzom7gs6JyOLOiciSzonIEs6Ju2LOicjSzonIUs6KO" \
        "WLOijiyzoo40s6KOOLOijnizoo5ss6KOaLOijjCzoo5As6KaFLOimmyzop58s6KelLO" \
        "inpCzop6Es6KegLOinoizop5ws6KemLOiptizoqoYs6Km/LOipoSzoqL8s6Km3LOiqg" \
        "izoqoQs6Km1LOiqgyzoqoEs6Km0LOipuizosLws6LGLLOixiizosaUs6LGkLOixpizo" \
        "soYs6LKELOiyhSzos4ws6LWoLOi1qSzotpEs6LaMLOi2jizoto8s6LaNLOi2kyzotpQ" \
        "s6LaQLOi2kizot7As6LegLOi3rCzot7Es6LeuLOi3kCzot6ks6LejLOi3oizot6cs6L" \
        "eyLOi3qyzot7Qs6LyGLOi7vyzovIEs6LyALOi8hSzovIcs6LyILOi8gizovIss6YGSL" \
        "OmAvyzpgYQs6YGJLOmAvSzphJAs6YSNLOmEjyzphJEs6YSWLOmElCzphIss6YSOLOmF" \
        "rizpha8s6YmILOmJkizpiLAs6Yi6LOmJpizpiLMs6YmlLOmJnizpioMs6YiuLOmJiiz" \
        "piYYs6YmtLOmJrCzpiY8s6YmgLOmJpyzpia8s6Yi2LOmJoSzpibAs6YixLOmJlCzpia" \
        "Ms6YmQLOmJsizpiY4s6YmTLOmJjCzpiZYs6YiyLOmWnyzplpws6ZaeLOmWmyzpmpIs6" \
        "ZqTLOmakSzpmpcs6ZuOLOmbuizpm70s6Zu4LOmbtSzpnbMs6Z23LOmduCzpnbIs6aCP" \
        "LOmgjSzpoI4s6aKsLOmjtizpo7ks6aavLOmmsizpprAs6aa1LOmqrSzpqqss6a2bLOm" \
        "zqizps60s6bOnLOm6gCzpu70s5YOmLOWDlCzlg5cs5YOoLOWDsyzlg5ss5YOqLOWDnS" \
        "zlg6Qs5YOTLOWDrCzlg7As5YOvLOWDoyzlg6As5YeYLOWKgCzlioEs5YupLOWLqyzlj" \
        "LAs5Y6sLOWYpyzlmJUs5ZiMLOWYkizll7ws5ZiPLOWYnCzlmIEs5ZiTLOWYgizll7os" \
        "5ZidLOWYhCzll78s5Ze5LOWiiSzlobws5aKQLOWimCzlooYs5aKBLOWhvyzlobQs5aK" \
        "LLOWhuizloocs5aKRLOWijizlobYs5aKCLOWiiCzlobss5aKULOWijyzlo74s5aWrLO" \
        "WrnCzlq64s5aulLOWrlSzlq6os5auaLOWrrSzlq6ss5auzLOWroizlq6As5aubLOWrr" \
        "Czlq54s5audLOWrmSzlq6gs5aufLOWttyzlr6As5a+jLOWxoyzltoIs5baALOW1vSzl" \
        "toYs5bW6LOW2gSzltbcs5baKLOW2iSzltogs5bW+LOW1vCzlto0s5bW5LOW1vyzluZg" \
        "s5bmZLOW5kyzlu5gs5buRLOW7lyzlu44s5bucLOW7lSzlu5ks5buSLOW7lCzlvYQs5b" \
        "2DLOW9ryzlvrYs5oSsLOaEqCzmhYEs5oWeLOaFsSzmhbMs5oWSLOaFkyzmhbIs5oWsL" \
        "OaGgCzmhbQs5oWULOaFuizmhZss5oWlLOaEuyzmhaos5oWhLOaFlizmiKks5oinLOaI" \
        "qyzmkKss5pGNLOaRmyzmkZ0s5pG0LOaRtizmkbIs5pGzLOaRvSzmkbUs5pGmLOaSpiz" \
        "mkY4s5pKCLOaRnizmkZws5pGLLOaRkyzmkaAs5pGQLOaRvyzmkL8s5pGsLOaRqyzmkZ" \
        "ks5pGlLOaRtyzmlbMs5pagLOaaoSzmmqAs5pqfLOachSzmnIQs5pyiLOamsSzmprYs5" \
        "qeJLOamoCzmp44s5qaWLOamsCzmpqws5qa8LOamkSzmppks5qaOLOampyzmpo0s5qap" \
        "LOamvizmpq8s5qa/LOanhCzmpr0s5qakLOanlCzmprks5qeKLOammizmp48s5qazLOa" \
        "mkyzmpqos5qahLOamnizmp5ks5qaXLOamkCzmp4Is5qa1LOampSzmp4Ys5q2KLOatjS" \
        "zmrYss5q6eLOaunyzmrqAs5q+DLOavhCzmr74s5ruOLOa7tSzmu7Es5ryDLOa8pSzmu" \
        "7gs5ry3LOa7uyzmvK4s5ryJLOa9jizmvJks5ryaLOa8pyzmvJgs5ry7LOa8kizmu60s" \
        "5ryKLOa8tizmvbMs5ru5LOa7rizmvK0s5r2ALOa8sCzmvLws5ry1LOa7qyzmvIcs5ry" \
        "OLOa9gyzmvIUs5ru9LOa7tizmvLks5rycLOa7vCzmvLos5ryfLOa8jSzmvJ4s5ryILO" \
        "a8oSznhocs54aQLOeGiSznhoAs54aFLOeGgiznho8s54W7LOeGhiznhoEs54aXLOeJh" \
        "CzniZMs54qXLOeKlSznipMs542DLOeNjSznjZEs542MLOeRoiznkbMs55GxLOeRtSzn" \
        "kbIs55GnLOeRriznlIAs55SCLOeUgyznlb0s55aQLOeYliznmIgs55iMLOeYlSznmJE" \
        "s55iKLOeYlCznmrgs556BLOedvCznnoUs556CLOedriznnoAs552vLOedviznnoMs56" \
        "KyLOeiqiznorQs56KtLOeiqCznob4s56KrLOeiniznoqUs56KgLOeirCznoqIs56KkL" \
        "OemmCznpoos56aLLOemliznppUs56aULOemkyznppcs56aILOemkiznppAs56irLOep" \
        "iiznqLAs56ivLOeoqCznqKYs56qoLOeqqyznqqws56uuLOeuiCznrpws566KLOeukSz" \
        "nrpAs566WLOeujSznrows566bLOeujiznroUs566YLOWKhCznrpks566kLOeugiznsr" \
        "ss57K/LOeyvCznsros57anLOe2tyznt4Is57ajLOe2qiznt4Es57eALOe3hSzntp0s5" \
        "7eOLOe3hCznt4Ys57eLLOe3jCzntq8s57a5LOe2lizntrws57afLOe2pizntq4s57ap" \
        "LOe2oSznt4ks572zLOe/oiznv6Ms57+lLOe/nizogKQs6IGdLOiBnCzohoks6IaGLOi" \
        "Ggyzohocs6IaNLOiGjCzohoss6IiVLOiSlyzokqQs6JKhLOiSnyzokros6JOOLOiTgi" \
        "zokqws6JKuLOiSqyzokrks6JK0LOiTgSzok40s6JKqLOiSmizokrEs6JOQLOiSnSzok" \
        "qcs6JK7LOiSoizokpQs6JOHLOiTjCzokpss6JKpLOiSryzokqgs6JOWLOiSmCzokrYs" \
        "6JOPLOiSoCzok5cs6JOULOiTkizok5ss6JKwLOiSkSzomaEs6JyzLOicoyzonKgs6J2" \
        "rLOidgCzonK4s6JyeLOicoSzonJks6JybLOidgyzonKws6J2BLOicvizonYYs6JygLO" \
        "icsizonKos6JytLOicvCzonJIs6Jy6LOicsSzonLUs6J2CLOicpizonKcs6Jy4LOicp" \
        "CzonJos6JywLOickSzoo7cs6KOnLOijsSzoo7Is6KO6LOijvizoo64s6KO8LOijtizo" \
        "o7ss6KOwLOijrCzoo6ss6KadLOimoSzopp8s6KaeLOinqSzop6ss6KeoLOiqqyzoqpk" \
        "s6KqLLOiqkizoqo8s6KqWLOiwvSzosags6LGpLOizlSzos48s6LOXLOi2lizouIks6L" \
        "iCLOi3vyzouI0s6Le9LOi4iizouIMs6LiHLOi4hizouIUs6Le+LOi4gCzouIQs6LyQL" \
        "Oi8kSzovI4s6LyNLOmEoyzphJws6YSgLOmEoizphJ8s6YSdLOmEmizphKQs6YShLOmE" \
        "myzphbos6YWyLOmFuSzphbMs6YqlLOmKpCzpibYs6YqbLOmJuizpiqAs6YqULOmKqiz" \
        "pio0s6YqmLOmKmizpiqss6Ym5LOmKlyzpib8s6YqjLOmLrizpio4s6YqCLOmKlSzpiq" \
        "Is6Ym9LOmKiCzpiqEs6YqKLOmKhizpiows6YqZLOmKpyzpib4s6YqHLOmKqSzpip0s6" \
        "YqLLOmIrSzpmp4s6ZqhLOmbvyzpnZgs6Z29LOmduizpnb4s6Z6DLOmegCzpnoIs6Z27" \
        "LOmehCzpnoEs6Z2/LOmfjizpn40s6aCWLOmirSzpoq4s6aSCLOmkgCzppIcs6aadLOm" \
        "mnCzpp4Ms6aa5LOmmuyzppros6aeCLOmmvSzpp4cs6aqxLOmroyzpq6cs6ay+LOmsvy" \
        "zpraAs6a2hLOmtnyzps7Es6bOyLOmztSzpuqcs5YO/LOWEgyzlhLAs5YO4LOWEhizlh" \
        "Ics5YO2LOWDvizlhIss5YSMLOWDvSzlhIos5YqLLOWKjCzli7Es5YuvLOWZiCzlmYIs" \
        "5ZmMLOWYtSzlmYEs5ZmKLOWZiSzlmYYs5ZmYLOWZmizlmYAs5ZizLOWYvSzlmKws5Zi" \
        "+LOWYuCzlmKos5Zi6LOWcmizloqss5aKdLOWisSzloqAs5aKjLOWiryzloqws5aKlLO" \
        "WioSzlo78s5au/LOWrtCzlq70s5au3LOWrtizlrIMs5au4LOWsgizlq7ks5ayBLOWsh" \
        "yzlrIUs5ayPLOWxpyzltpks5baXLOW2nyzltpIs5baiLOW2kyzltpUs5bagLOW2nCzl" \
        "tqEs5baaLOW2nizluaks5bmdLOW5oCzluZws57ezLOW7myzlu54s5buhLOW9iSzlvrI" \
        "s5oaLLOaGgyzmhbks5oaxLOaGsCzmhqIs5oaJLOaGmyzmhpMs5oavLOaGrSzmhp8s5o" \
        "aSLOaGqizmhqEs5oaNLOaFpizmhrMs5oitLOaRrizmkbAs5pKWLOaSoCzmkoUs5pKXL" \
        "OaSnCzmko8s5pKLLOaSiizmkows5pKjLOaSnyzmkags5pKxLOaSmCzmlbYs5pW6LOaV" \
        "uSzmlbss5payLOaWsyzmmrUs5pqwLOaaqSzmmrIs5pq3LOaaqizmmq8s5qiALOaohiz" \
        "mqJcs5qelLOanuCzmqJUs5qexLOanpCzmqKAs5qe/LOanrCzmp6Is5qibLOaonSzmp7" \
        "4s5qinLOansizmp64s5qiULOantyzmp6cs5qmALOaoiCzmp6Ys5qe7LOaojSzmp7ws5" \
        "qerLOaoiSzmqIQs5qiYLOaopSzmqI8s5qe2LOaopizmqIcs5qe0LOaolizmrZEs5q6l" \
        "LOauoyzmrqIs5q6mLOawgSzmsIAs5q+/LOawgizmvYEs5rymLOa9vizmvocs5r+GLOa" \
        "+kizmvo0s5r6JLOa+jCzmvaIs5r2PLOa+hSzmvZos5r6WLOa9tizmvaws5r6CLOa9lS" \
        "zmvbIs5r2SLOa9kCzmvZcs5r6ULOa+kyzmvZ0s5ryALOa9oSzmvass5r29LOa9pyzmv" \
        "pAs5r2TLOa+iyzmvaks5r2/LOa+lSzmvaMs5r23LOa9qizmvbss54ayLOeGryznhpss" \
        "54awLOeGoCznhpos54apLOeGtSznhp0s54alLOeGniznhqQs54ahLOeGqiznhpws54a" \
        "nLOeGsyznipgs54qaLOeNmCznjZIs542eLOeNnyznjaAs542dLOeNmyznjaEs542aLO" \
        "eNmSznjaIs55KHLOeSiSznkoos55KGLOeSgSznkb0s55KFLOeSiCznkbws55G5LOeUi" \
        "CznlIcs55W+LOeYpSznmJ4s55iZLOeYnSznmJws55ijLOeYmiznmKgs55ibLOeanCzn" \
        "mp0s55qeLOeamyznno0s556PLOeeiSznnogs56ONLOeiuyzno48s56OMLOejkSzno44" \
        "s56OULOejiCzno4Ms56OELOejiSznppos56ahLOemoCznppws56aiLOemmyzmrbYs56" \
        "i5LOeqsiznqrQs56qzLOeutyznr4ss566+LOeurCznr44s566vLOeuuSznr4os5661L" \
        "OezhSzns4gs57OMLOeziyznt7cs57ebLOe3qiznt6cs57eXLOe3oSznuIMs57e6LOe3" \
        "piznt7Ys57exLOe3sCznt64s57efLOe9tiznvqws576wLOe+rSznv60s57+rLOe/qiz" \
        "nv6ws57+mLOe/qCzogaQs6IGnLOiGoyzohp8s6IaeLOiGlSzohqIs6IaZLOiGlyzoiJ" \
        "Ys6ImPLOiJkyzoiZIs6ImQLOiJjizoiZEs6JSkLOiUuyzolI8s6JSALOiUqSzolI4s6" \
        "JSJLOiUjSzolJ8s6JSKLOiUpyzolJws6JO7LOiUqyzok7os6JSILOiUjCzok7Qs6JSq" \
        "LOiTsizolJUs6JO3LOiTqyzok7Ms6JO8LOiUkizok6os6JOpLOiUlizok74s6JSoLOi" \
        "UnSzolK4s6JSCLOiTvSzolJ4s6JO2LOiUsSzolKYs6JOnLOiTqCzok7As6JOvLOiTuS" \
        "zolJgs6JSgLOiUsCzolIss6JSZLOiUryzomaIs6J2WLOidoyzonaQs6J23LOifoSzon" \
        "bMs6J2YLOidlCzonZss6J2SLOidoSzonZos6J2RLOidnizona0s6J2qLOidkCzonY4s" \
        "6J2fLOidnSzona8s6J2sLOiduizona4s6J2cLOidpSzonY8s6J27LOidtSzonaIs6J2" \
        "nLOidqSzooZos6KSFLOikjCzopJQs6KSLLOiklyzopJgs6KSZLOikhizopJYs6KSRLO" \
        "ikjizopIks6KaiLOimpCzopqMs6KetLOinsCzop6ws6KuPLOirhizoqrgs6KuTLOirk" \
        "Szoq5Qs6KuVLOiquyzoq5cs6Kq+LOirgCzoq4Us6KuYLOirgyzoqros6Kq9LOirmSzo" \
        "sL4s6LGNLOiyjyzos6Us6LOfLOizmSzos6gs6LOaLOiznSzos6cs6LagLOi2nCzotqE" \
        "s6LabLOi4oCzouKMs6LilLOi4pCzouK4s6LiVLOi4myzouJYs6LiRLOi4mSzouKYs6L" \
        "inLOi4lCzouJIs6LiYLOi4kyzouJws6LiXLOi4mizovKws6LykLOi8mCzovJos6LygL" \
        "Oi8oyzovJYs6LyXLOmBsyzpgbAs6YGvLOmBpyzpgass6YSvLOmEqyzphKks6YSqLOmE" \
        "sizphKYs6YSuLOmGhSzphoYs6YaKLOmGgSzphoIs6YaELOmGgCzpi5As6YuDLOmLhCz" \
        "pi4As6YuZLOmKtizpi48s6YuxLOmLnyzpi5gs6YupLOmLlyzpi50s6YuMLOmLryzpi4" \
        "Is6YuoLOmLiizpi4gs6YuOLOmLpizpi40s6YuVLOmLiSzpi6As6YueLOmLpyzpi5Es6" \
        "YuTLOmKtSzpi6Es6YuGLOmKtCzplbws6ZasLOmWqyzplq4s6ZawLOmapCzpmqIs6ZuT" \
        "LOmchSzpnIgs6ZyCLOmdmizpnoos6Z6OLOmeiCzpn5As6Z+PLOmgnizpoJ0s6aCmLOm" \
        "gqSzpoKgs6aCgLOmgmyzpoKcs6aKyLOmkiCzpo7os6aSRLOmklCzppJYs6aSXLOmklS" \
        "zpp5ws6aeNLOmnjyzpp5Ms6aeULOmnjizpp4ks6aeWLOmnmCzpp4ss6aeXLOmnjCzpq" \
        "rMs6ausLOmrqyzpq7Ms6auyLOmrsSzprYYs6a2DLOmtpyzprbQs6a2xLOmtpizprbYs" \
        "6a21LOmtsCzprags6a2kLOmtrCzps7ws6bO6LOmzvSzps78s6bO3LOm0hyzptIAs6bO" \
        "5LOmzuyzptIgs6bSFLOm0hCzpuoMs6buTLOm8jyzpvJAs5YScLOWEkyzlhJcs5YSaLO" \
        "WEkSzlh54s5Yy0LOWPoSzlmbAs5ZmgLOWZrizlmbMs5ZmmLOWZoyzlma0s5ZmyLOWZn" \
        "izlmbcs5ZycLOWcmyzlo4gs5aK9LOWjiSzlor8s5aK6LOWjgizlorws5aOGLOWslyzl" \
        "rJks5aybLOWsoSzlrJQs5ayTLOWskCzlrJYs5ayoLOWsmizlrKAs5ayeLOWvryzltqw" \
        "s5baxLOW2qSzltqcs5ba1LOW2sCzltq4s5baqLOW2qCzltrIs5batLOW2ryzltrQs5b" \
        "mnLOW5qCzluaYs5bmvLOW7qSzlu6cs5bumLOW7qCzlu6Us5b2LLOW+vCzmhp0s5oaoL" \
        "OaGlizmh4Us5oa0LOaHhizmh4Es5oeMLOaGuizmhr8s5oa4LOaGjCzmk5cs5pOWLOaT" \
        "kCzmk48s5pOJLOaSvSzmkoks5pODLOaTmyzmk7Ms5pOZLOaUsyzmlb8s5pW8LOaWoiz" \
        "mm4gs5pq+LOabgCzmm4os5puLLOabjyzmmr0s5pq7LOaauizmm4ws5pyjLOaotCzmqa" \
        "Ys5qmJLOappyzmqLIs5qmoLOaovizmqZ0s5qmtLOaptizmqZss5qmRLOaoqCzmqZos5" \
        "qi7LOaovyzmqYEs5qmqLOappCzmqZAs5qmPLOaplCzmqa8s5qmpLOapoCzmqLws5qme" \
        "LOaplizmqZUs5qmNLOapjizmqYYs5q2VLOatlCzmrZYs5q6nLOauqizmrqss5q+ILOa" \
        "vhyzmsIQs5rCDLOawhizmvq0s5r+LLOa+oyzmv4cs5r68LOa/jizmv4gs5r2eLOa/hC" \
        "zmvr0s5r6eLOa/iizmvqgs54CELOa+pSzmvq4s5r66LOa+rCzmvqos5r+PLOa+vyzmv" \
        "rgs5r6iLOa/iSzmvqss5r+NLOa+ryzmvrIs5r6wLOeHhSznh4Is54a/LOeGuCznh5Ys" \
        "54eALOeHgSznh4ss54eULOeHiiznh4cs54ePLOeGvSznh5gs54a8LOeHhiznh5os54e" \
        "bLOeKnSznip4s542pLOeNpiznjacs542sLOeNpSznjass542qLOeRvyznkpos55KgLO" \
        "eSlCznkpIs55KVLOeSoSznlIss55aALOeYryznmK0s55ixLOeYvSznmLMs55i8LOeYt" \
        "SznmLIs55iwLOeauyznm6Ys556aLOeenSznnqEs556cLOeemyznnqIs556jLOeelSzn" \
        "npks556XLOejnSzno6ks56OlLOejqizno54s56OjLOejmyzno6Es56OiLOejrSzno58" \
        "s56OgLOempCznqYQs56mILOephyznqrYs56q4LOeqtSznqrEs56q3LOevniznr6Ms56" \
        "+nLOevnSznr5Us56+lLOevmiznr6gs56+5LOevlCznr6os56+iLOevnCznr6ss56+YL" \
        "Oevnyzns5Is57OULOezlyzns5As57ORLOe4kiznuKEs57iXLOe4jCznuJ8s57igLOe4" \
        "kyznuI4s57icLOe4lSznuJos57iiLOe4iyznuI8s57iWLOe4jSznuJQs57ilLOe4pCz" \
        "nvYMs5727LOe9vCznvbos576xLOe/ryzogKos6ICpLOiBrCzohrEs6IamLOiGrizohr" \
        "ks6Ia1LOiGqyzohrAs6IasLOiGtCzohrIs6Ia3LOiGpyzoh7Is6ImVLOiJlizoiZcs6" \
        "JWWLOiVhSzolass6JWNLOiVkyzolaEs6JWYLOiVgCzolYYs6JWkLOiVgSzolaIs6JWE" \
        "LOiVkSzolYcs6JWjLOiUvizolZss6JWxLOiVjizola4s6JW1LOiVlSzolacs6JWgLOi" \
        "WjCzolaYs6JWdLOiVlCzolaUs6JWsLOiZoyzomaUs6JmkLOiemyzono8s6J6XLOieky" \
        "zonpIs6J6ILOiegSzonpYs6J6YLOiduSzonocs6J6jLOiehSzonpAs6J6RLOienSzon" \
        "oQs6J6ULOienCzonpos6J6JLOiknizopKYs6KSwLOikrSzopK4s6KSnLOiksSzopKIs" \
        "6KSpLOikoyzopK8s6KSsLOiknyzop7Es6KugLOiroizoq7Is6Ku0LOirtSzoq50s6Ky" \
        "ULOirpCzoq58s6KuwLOiriCzoq54s6KuhLOirqCzoq78s6KuvLOiruyzospEs6LKSLO" \
        "iykCzos7Us6LOuLOizsSzos7As6LOzLOi1rCzota4s6LalLOi2pyzouLMs6Li+LOi4u" \
        "CzouYAs6LmFLOi4tizouLws6Li9LOi5gSzouLAs6Li/LOi6vSzovLYs6LyuLOi8tSzo" \
        "vLIs6Ly5LOi8tyzovLQs6YG2LOmBuSzpgbss6YKGLOmDuizphLMs6YS1LOmEtizphpM" \
        "s6YaQLOmGkSzpho0s6YaPLOmMpyzpjJ4s6YyILOmMnyzpjIYs6YyPLOmNuizpjLgs6Y" \
        "y8LOmMmyzpjKMs6YySLOmMgSzpjYYs6YytLOmMjizpjI0s6YuLLOmMnSzpi7os6YylL" \
        "OmMkyzpi7ks6Yu3LOmMtCzpjIIs6YykLOmLvyzpjKks6Yy5LOmMtSzpjKos6YyULOmM" \
        "jCzpjIss6Yu+LOmMiSzpjIAs6Yu7LOmMlizplrws6ZeNLOmWvizplrks6Za6LOmWtiz" \
        "plr8s6Za1LOmWvSzpmqks6ZuULOmciyzpnJIs6ZyQLOmemSzpnpcs6Z6ULOmfsCzpn7" \
        "gs6aC1LOmgryzpoLIs6aSkLOmknyzppKcs6aSpLOmmnizpp64s6aesLOmnpSzpp6Qs6" \
        "aewLOmnoyzpp6os6aepLOmnpyzpqrks6aq/LOmqtCzpqrss6au2LOmruizpq7ks6au3" \
        "LOmssyzproAs6a6FLOmuhyzprbws6a2+LOmtuyzproIs6a6TLOmukizprpAs6a26LOm" \
        "ulSzprb0s6a6ILOm0pSzptJcs6bSgLOm0nizptJQs6bSpLOm0nSzptJgs6bSiLOm0kC" \
        "zptJks6bSfLOm6iCzpuoYs6bqHLOm6rizpuq0s6buVLOm7lizpu7os6bySLOm8vSzlh" \
        "KYs5YSlLOWEoizlhKQs5YSgLOWEqSzli7Qs5ZqTLOWajCzlmo0s5ZqGLOWahCzlmoMs" \
        "5Zm+LOWagizlmb8s5ZqBLOWjlizlo5Qs5aOPLOWjkizlrK0s5aylLOWssizlrKMs5ay" \
        "sLOWspyzlrKYs5ayvLOWsrizlrbss5a+xLOWvsizltrcs5bmsLOW5qizlvr4s5b67LO" \
        "aHgyzmhrUs5oa8LOaHpyzmh6As5oelLOaHpCzmh6gs5oeeLOaTryzmk6ks5pOjLOaTq" \
        "yzmk6Qs5pOoLOaWgSzmloAs5pa2LOaXmizmm5Is5qqNLOaqlizmqoEs5qqlLOaqiSzm" \
        "qp8s5qqbLOaqoSzmqp4s5qqHLOaqkyzmqo4s5qqVLOaqgyzmqqgs5qqkLOaqkSzmqb8" \
        "s5qqmLOaqmizmqoUs5qqMLOaqkizmrZss5q6tLOawiSzmv4ws5r6pLOa/tCzmv5Qs5r" \
        "+jLOa/nCzmv60s5r+nLOa/pizmv54s5r+yLOa/nSzmv6Is5r+oLOeHoSznh7Es54eoL" \
        "OeHsiznh6Qs54ewLOeHoiznjbMs542uLOeNryznkpcs55KyLOeSqyznkpAs55KqLOeS" \
        "rSznkrEs55KlLOeSryznlJAs55SRLOeUkiznlI8s55aELOeZgyznmYgs55mJLOeZhyz" \
        "nmqQs55upLOeetSznnqss556yLOeetyznnrYs5560LOeesSznnqgs55+wLOejsyzno7" \
        "0s56SCLOejuyzno7ws56OyLOekhSzno7ks56O+LOekhCznpqss56aoLOepnCznqZss5" \
        "6mWLOepmCznqZQs56maLOeqviznq4As56uBLOewhSznsI8s56+yLOewgCznr78s56+7" \
        "LOewjiznr7Qs57CLLOevsyznsIIs57CJLOewgyznsIEs56+4LOevvSznsIYs56+wLOe" \
        "vsSznsJAs57CKLOezqCznuK0s57i8LOe5giznuLMs6aGILOe4uCznuKos57mJLOe5gC" \
        "znuYcs57ipLOe5jCznuLAs57i7LOe4tiznuYQs57i6LOe9hSznvb8s572+LOe9vSznv" \
        "7Qs57+yLOiArCzohrss6IeELOiHjCzoh4os6IeFLOiHhyzohrws6IepLOiJmyzoiZos" \
        "6ImcLOiWgyzoloAs6JaPLOiWpyzolpUs6JagLOiWiyzolqMs6JW7LOiWpCzolpos6Ja" \
        "eLOiVtyzolbws6JaJLOiWoSzolbos6JW4LOiVlyzolo4s6JaWLOiWhizolo0s6JaZLO" \
        "iWnSzoloEs6JaiLOiWgizologs6JaFLOiVuSzolbYs6JaYLOiWkCzolp8s6JmoLOiev" \
        "izonqos6J6tLOifhSzonrAs6J6sLOieuSzonrUs6J68LOierizon4ks6J+DLOifgizo" \
        "n4ws6J63LOieryzon4Qs6J+KLOietCzonrYs6J6/LOieuCzonr0s6J+eLOiesizopLU" \
        "s6KSzLOikvCzopL4s6KWBLOilkizopLcs6KWCLOimrSzopq8s6KauLOinsizop7Ms6K" \
        "yeLOismCzorJYs6KyRLOishSzorIss6KyiLOisjyzorJIs6KyVLOishyzorI0s6KyIL" \
        "OishizorJws6KyTLOismizosY8s6LGwLOixsizosbEs6LGvLOiylSzospQs6LO5LOi1" \
        "ryzouY4s6LmNLOi5kyzouZAs6LmMLOi5hyzovYMs6L2ALOmChSzpgb4s6YS4LOmGmiz" \
        "phqIs6YabLOmGmSzphp8s6YahLOmGnSzphqAs6Y6hLOmOgyzpjq8s6Y2kLOmNlizpjY" \
        "cs6Y28LOmNmCzpjZws6Y22LOmNiSzpjZAs6Y2RLOmNoCzpja0s6Y6PLOmNjCzpjaos6" \
        "Y25LOmNlyzpjZUs6Y2SLOmNjyzpjbEs6Y23LOmNuyzpjaEs6Y2eLOmNoyzpjacs6Y6A" \
        "LOmNjizpjZks6ZeHLOmXgCzpl4ks6ZeDLOmXhSzplrcs6ZquLOmasCzpmqws6ZygLOm" \
        "cnyzpnJgs6ZydLOmcmSzpnpos6Z6hLOmenCzpnp4s6Z6dLOmflSzpn5Qs6Z+xLOmhgS" \
        "zpoYQs6aGKLOmhiSzpoYUs6aGDLOmkpSzppKss6aSsLOmkqizppLMs6aSyLOmkryzpp" \
        "K0s6aSxLOmksCzpppgs6aajLOmmoSzpqIIs6ae6LOmntCzpp7cs6ae5LOmnuCzpp7Ys" \
        "6ae7LOmnvSzpp74s6ae8LOmogyzpqr4s6au+LOmrvSzprIEs6au8LOmtiCzprpos6a6" \
        "oLOmunizprpss6a6mLOmuoSzprqUs6a6kLOmuhizprqIs6a6gLOmuryzptLMs6bWBLO" \
        "m1pyzptLYs6bSuLOm0ryzptLEs6bS4LOm0sCzptYUs6bWCLOm1gyzptL4s6bS3LOm1g" \
        "CzptL0s57+1LOm0rSzpuoos6bqJLOm6jSzpurAs6buILOm7mizpu7ss6bu/LOm8pCzp" \
        "vKMs6byiLOm9lCzpvqAs5YSxLOWErSzlhK4s5ZqYLOWanCzlmpcs5ZqaLOWanSzlmpk" \
        "s5aWwLOWsvCzlsaks5bGqLOW3gCzlua0s5bmuLOaHmCzmh58s5oetLOaHrizmh7Es5o" \
        "eqLOaHsCzmh6ss5oeWLOaHqSzmk78s5pSELOaTvSzmk7gs5pSBLOaUgyzmk7ws5paUL" \
        "OaXmyzmm5os5pubLOabmCzmq4Us5qq5LOaqvSzmq6Es5quGLOaquizmqrYs5qq3LOar" \
        "hyzmqrQs5qqtLOatnizmr4ks5rCLLOeAhyzngIws54CNLOeAgSzngIUs54CULOeAjiz" \
        "mv78s54CALOa/uyzngKYs5r+8LOa/tyzngIos54iBLOeHvyznh7ks54iDLOeHvSznjb" \
        "Ys55K4LOeTgCznkrUs55OBLOeSviznkrYs55K7LOeTgiznlJQs55STLOeZnCznmaQs5" \
        "5mZLOeZkCznmZMs55mXLOeZmiznmqYs55q9LOebrCznn4Is5566LOejvyznpIws56ST" \
        "LOeklCznpIks56SQLOekkiznpJEs56atLOemrCznqZ8s57CcLOewqSznsJks57CgLOe" \
        "wnyznsK0s57CdLOewpiznsKgs57CiLOewpSznsLAs57mcLOe5kCznuZYs57mjLOe5mC" \
        "znuaIs57mfLOe5kSznuaAs57mXLOe5kyznvrUs576zLOe/tyznv7gs6IG1LOiHkSzoh" \
        "5Is6IeQLOiJnyzoiZ4s6Ja0LOiXhizol4As6JeDLOiXgizolrMs6Ja1LOiWvSzol4cs" \
        "6JeELOiWvyzol4ss6JeOLOiXiCzol4Us6JaxLOiWtizol5Is6JikLOiWuCzolrcs6Ja" \
        "+LOiZqSzon6cs6J+mLOifoizon5ss6J+rLOifqizon6Us6J+fLOifsyzon6Qs6J+ULO" \
        "ifnCzon5Ms6J+tLOifmCzon6Ms6J6kLOiflyzon5ks6KCBLOiftCzon6gs6J+dLOilk" \
        "yzopYss6KWPLOiljCzopYYs6KWQLOilkSzopYks6KyqLOispyzorKMs6KyzLOissCzo" \
        "rLUs6K2HLOisryzorLws6Ky+LOissSzorKUs6Ky3LOispizorLYs6KyuLOispCzorLs" \
        "s6Ky9LOisuizosYIs6LG1LOiymSzospgs6LKXLOizvizotIQs6LSCLOi0gCzouZws6L" \
        "miLOi5oCzouZcs6LmWLOi5nizouaUs6LmnLOi5myzouZos6LmhLOi5nSzouaks6LmUL" \
        "Oi9hizovYcs6L2ILOi9iyzphKgs6YS6LOmEuyzphL4s6YaoLOmGpSzphqcs6YavLOmG" \
        "qizpjrUs6Y6MLOmOkizpjrcs6Y6bLOmOnSzpjoks6Y6nLOmOjizpjqos6Y6eLOmOpiz" \
        "pjpUs6Y6ILOmOmSzpjp8s6Y6NLOmOsSzpjpEs6Y6yLOmOpCzpjqgs6Y60LOmOoyzpjq" \
        "Us6ZeSLOmXkyzpl5Es6ZqzLOmblyzpm5os5beCLOmbnyzpm5gs6ZudLOmcoyzpnKIs6" \
        "ZylLOmerCzpnq4s6Z6oLOmeqyzpnqQs6Z6qLOmeoizpnqUs6Z+XLOmfmSzpn5Ys6Z+Y" \
        "LOmfuizpoZAs6aGRLOmhkizporgs6aWBLOmkvCzppLos6aiPLOmoiyzpqIks6aiNLOm" \
        "ohCzpqJEs6aiKLOmohSzpqIcs6aiGLOmrgCzpq5ws6ayILOmshCzprIUs6aypLOmstS" \
        "zprYos6a2MLOmtiyzpr4cs6a+GLOmvgyzprr8s6a+BLOmutSzprrgs6a+TLOmutizpr" \
        "4Qs6a65LOmuvSzptZws6bWTLOm1jyzptYos6bWbLOm1iyzptZks6bWWLOm1jCzptZcs" \
        "6bWSLOm1lCzptZ8s6bWYLOm1mizpuo4s6bqMLOm7nyzpvIEs6byALOm8lizpvKUs6by" \
        "rLOm8qizpvKks6byoLOm9jCzpvZUs5YS0LOWEtSzlipYs5Yu3LOWOtCzlmqss5ZqtLO" \
        "Wapizlmqcs5ZqqLOWarCzlo5os5aOdLOWjmyzlpJIs5ay9LOWsvizlrL8s5beDLOW5s" \
        "Czlvr8s5oe7LOaUhyzmlJAs5pSNLOaUiSzmlIws5pSOLOaWhCzml54s5pedLOabnizm" \
        "q6cs5qugLOarjCzmq5Es5quZLOariyzmq58s5qucLOarkCzmq6ss5quPLOarjSzmq54" \
        "s5q2gLOausCzmsIws54CZLOeApyzngKAs54CWLOeAqyzngKEs54CiLOeAoyzngKks54" \
        "CXLOeApCzngJws54CqLOeIjCzniIos54iHLOeIgizniIUs54qlLOeKpizniqQs54qjL" \
        "OeKoSznk4ss55OFLOeStyznk4Ms55SWLOeZoCznn4ks55+KLOefhCznn7Es56SdLOek" \
        "myznpKEs56ScLOeklyznpJ4s56awLOeppyznqags57CzLOewvCznsLks57CsLOewuyz" \
        "ns6ws57OqLOe5tiznubUs57m4LOe5sCznubcs57mvLOe5uiznubIs57m0LOe5qCznvY" \
        "ss572KLOe+gyznvoYs5763LOe/vSznv74s6IG4LOiHlyzoh5Us6ImkLOiJoSzoiaMs6" \
        "JerLOiXsSzol60s6JeZLOiXoSzol6gs6JeaLOiXlyzol6ws6JeyLOiXuCzol5gs6Jef" \
        "LOiXoyzol5ws6JeRLOiXsCzol6Ys6JevLOiXnizol6Is6KCALOifuizooIMs6J+2LOi" \
        "ftyzooIks6KCMLOigiyzooIYs6J+8LOigiCzon78s6KCKLOiggizopaIs6KWaLOilmy" \
        "zopZcs6KWhLOilnCzopZgs6KWdLOilmSzopogs6Ka3LOimtizop7Ys6K2QLOitiCzor" \
        "Yos6K2ALOitkyzorZYs6K2ULOitiyzorZUs6K2RLOitgizorZIs6K2XLOixgyzosbcs" \
        "6LG2LOiymizotIYs6LSHLOi0iSzotqws6LaqLOi2rSzotqss6LmtLOi5uCzoubMs6Lm" \
        "qLOi5ryzoubss6LuCLOi9kizovZEs6L2PLOi9kCzovZMs6L60LOmFgCzphL8s6YawLO" \
        "mGrSzpj54s6Y+HLOmPjyzpj4Is6Y+aLOmPkCzpj7ks6Y+sLOmPjCzpj5ks6Y6pLOmPp" \
        "izpj4os6Y+ULOmPrizpj6Ms6Y+VLOmPhCzpj44s6Y+ALOmPkizpj6cs6ZW9LOmXmizp" \
        "l5ss6ZuhLOmcqSzpnKss6ZysLOmcqCzpnKYs6Z6zLOmetyzpnrYs6Z+dLOmfnizpn58" \
        "s6aGcLOmhmSzpoZ0s6aGXLOmivyzpor0s6aK7LOmivizppYgs6aWHLOmlgyzppqYs6a" \
        "anLOmomizpqJUs6ailLOmonSzpqKQs6aibLOmooizpqKAs6ainLOmooyzpqJ4s6aicL" \
        "OmolCzpq4Is6ayLLOmsiizprI4s6ayMLOmstyzpr6os6a+rLOmvoCzpr54s6a+kLOmv" \
        "pizpr6Is6a+wLOmvlCzpr5cs6a+sLOmvnCzpr5ks6a+lLOmvlSzpr6Es6a+aLOm1tyz" \
        "ptoEs6baKLOm2hCzptogs6bWxLOm2gCzptbgs6baGLOm2iyzptows6bW9LOm1qyzptb" \
        "Qs6bW1LOm1sCzptaks6baFLOm1syzptbss6baCLOm1ryzptbks6bW/LOm2hyzptags6" \
        "bqULOm6kSzpu4As6bu8LOm8rSzpvYAs6b2BLOm9jSzpvZYs6b2XLOm9mCzljLcs5Zqy" \
        "LOWatSzlmrMs5aOjLOWthSzlt4Ys5beHLOW7rizlu68s5b+ALOW/gSzmh7ks5pSXLOa" \
        "UlizmlJUs5pSTLOaXnyzmm6gs5pujLOabpCzmq7Ms5quwLOarqizmq6gs5qu5LOarsS" \
        "zmq64s5quvLOeAvCzngLUs54CvLOeAtyzngLQs54CxLOeBgizngLgs54C/LOeAuizng" \
        "Lks54GALOeAuyzngLMs54GBLOeIkyzniJQs54qoLOeNvSznjbws55K6LOeaqyznmqos" \
        "55q+LOebrSznn4ws55+OLOefjyznn40s55+yLOekpSznpKMs56SnLOekqCznpKQs56S" \
        "pLOemsiznqa4s56msLOeprSznq7cs57GJLOexiCznsYos57GHLOexhSzns64s57m7LO" \
        "e5viznuoEs57qALOe+uiznv78s6IG5LOiHmyzoh5ks6IiLLOiJqCzoiaks6JiiLOiXv" \
        "yzomIEs6Je+LOiYmyzomIAs6Je2LOiYhCzomIks6JiFLOiYjCzol70s6KCZLOigkCzo" \
        "oJEs6KCXLOigkyzooJYs6KWjLOilpizoprks6Ke3LOitoCzoraos6K2dLOitqCzoraM" \
        "s6K2lLOitpyzora0s6LauLOi6hizouogs6LqELOi9mSzovZYs6L2XLOi9lSzovZgs6L" \
        "2aLOmCjSzphYMs6YWBLOmGtyzphrUs6YayLOmGsyzpkIss6ZCTLOmPuyzpkKAs6ZCPL" \
        "OmQlCzpj74s6ZCVLOmQkCzpkKgs6ZCZLOmQjSzpj7Us6ZCALOmPtyzpkIcs6ZCOLOmQ" \
        "lizpkJIs6Y+6LOmQiSzpj7gs6ZCKLOmPvyzpj7ws6ZCMLOmPtizpkJEs6ZCGLOmXniz" \
        "pl6As6ZefLOmcrizpnK8s6Z65LOmeuyzpn70s6Z++LOmhoCzpoaIs6aGjLOmhnyzpo4" \
        "Es6aOCLOmlkCzppY4s6aWZLOmljCzppYss6aWTLOmosizpqLQs6aixLOmorCzpqKos6" \
        "ai2LOmoqSzpqK4s6ai4LOmorSzpq4cs6auKLOmrhizprJAs6aySLOmskSzpsIss6bCI" \
        "LOmvtyzpsIUs6bCSLOmvuCzpsYAs6bCHLOmwjizpsIYs6bCXLOmwlCzpsIks6bafLOm" \
        "2mSzptqQs6badLOm2kizptpgs6baQLOm2myzptqAs6baULOm2nCzptqos6baXLOm2oS" \
        "zptpos6baiLOm2qCzptp4s6bajLOm2vyzptqks6baWLOm2pizptqcs6bqZLOm6myzpu" \
        "pos6bulLOm7pCzpu6cs6bumLOm8sCzpvK4s6b2bLOm9oCzpvZ4s6b2dLOm9mSzpvpEs" \
        "5YS6LOWEuSzlipgs5YqXLOWbgyzlmr0s5Zq+LOWtiCzlrYcs5beLLOW3jyzlu7Es5oe" \
        "9LOaUmyzmrIIs5qu8LOasgyzmq7gs5qyALOeBgyzngYQs54GKLOeBiCzngYks54GFLO" \
        "eBhizniJ0s54iaLOeImSznjb4s55SXLOeZqiznn5As56StLOeksSznpK8s57GULOexk" \
        "yzns7Is57qKLOe6hyznuogs57qLLOe6hiznuo0s572NLOe+uyzogLAs6IedLOiYmCzo" \
        "mKos6JimLOiYnyzomKMs6JicLOiYmSzomKcs6JiuLOiYoSzomKAs6JipLOiYnizomKU" \
        "s6KCpLOignSzooJss6KCgLOigpCzooJws6KCrLOihiizopa0s6KWpLOilrizopass6K" \
        "e6LOituSzorbgs6K2FLOituizorbss6LSQLOi0lCzotq8s6LqOLOi6jCzovZ4s6L2bL" \
        "Oi9nSzphYYs6YWELOmFhSzphrks6ZC/LOmQuyzpkLYs6ZCpLOmQvSzpkLws6ZCwLOmQ" \
        "uSzpkKos6ZC3LOmQrCzpkYAs6ZCxLOmXpSzpl6Qs6ZejLOmctSzpnLos6Z6/LOmfoSz" \
        "poaQs6aOJLOmjhizpo4As6aWYLOmllizpqLks6ai9LOmphizpqYQs6amCLOmpgSzpqL" \
        "os6ai/LOmrjSzprJUs6ayXLOmsmCzprJYs6ay6LOmtkizpsKss6bCdLOmwnCzpsKws6" \
        "bCjLOmwqCzpsKks6bCkLOmwoSzptrcs6ba2LOm2vCzpt4Es6beHLOm3iizpt48s6ba+" \
        "LOm3hSzpt4Ms6ba7LOm2tSzpt44s6ba5LOm2uizptqws6beILOm2sSzptq0s6beMLOm" \
        "2syzpt40s6bayLOm5uizpupws6burLOm7rizpu60s6bybLOm8mCzpvJos6byxLOm9ji" \
        "zpvaUs6b2kLOm+kizkurks5ZuGLOWbhSzlm4ss5aWxLOWtiyzlrYws5beVLOW3kSzlu" \
        "7Is5pShLOaUoCzmlKYs5pSiLOasiyzmrIgs5qyJLOawjSzngZUs54GWLOeBlyzngZIs" \
        "54ieLOeInyzniqks542/LOeTmCznk5Us55OZLOeTlyznma0s55qtLOektSznprQs56m" \
        "wLOepsSznsZcs57GcLOexmSznsZss57GaLOeztCzns7Es57qRLOe9jyznvocs6IeeLO" \
        "iJqyzomLQs6Ji1LOiYsyzomKws6JiyLOiYtizooKws6KCoLOigpizooKos6KClLOils" \
        "Szopr8s6Ka+LOinuyzorb4s6K6ELOiugizoroYs6K6FLOitvyzotJUs6LqVLOi6lCzo" \
        "upos6LqSLOi6kCzoupYs6LqXLOi9oCzovaIs6YWHLOmRjCzpkZAs6ZGKLOmRiyzpkY8" \
        "s6ZGHLOmRhSzpkYgs6ZGJLOmRhizpnL8s6Z+jLOmhqizpoaks6aOLLOmllCzppZss6a" \
        "mOLOmpkyzpqZQs6amMLOmpjyzpqYgs6amKLOmpiSzpqZIs6amQLOmrkCzprJks6ayrL" \
        "OmsuyzprZYs6a2VLOmxhizpsYgs6bC/LOmxhCzpsLks6bCzLOmxgSzpsLws6bC3LOmw" \
        "tCzpsLIs6bC9LOmwtizpt5ss6beSLOm3nizpt5os6beLLOm3kCzpt5ws6beRLOm3nyz" \
        "pt6ks6beZLOm3mCzpt5Ys6be1LOm3lSzpt50s6bq2LOm7sCzpvLUs6byzLOm8sizpvY" \
        "Is6b2rLOm+lSzpvqIs5YS9LOWKmSzlo6gs5aOnLOWlsizlrY0s5beYLOigryzlvY8s5" \
        "oiBLOaIgyzmiIQs5pSpLOaUpSzmlpYs5purLOaskSzmrJIs5qyPLOaviizngZss54Ga" \
        "LOeIoiznjoIs546BLOeOgyznmbAs55+ULOexpyznsaYs57qVLOiJrCzomLos6JmALOi" \
        "YuSzomLws6JixLOiYuyzomL4s6KCwLOigsizooK4s6KCzLOiltizopbQs6KWzLOinvi" \
        "zorows6K6OLOiuiyzorogs6LGFLOi0mSzoupgs6L2kLOi9oyzphrws6ZGiLOmRlSzpk" \
        "Z0s6ZGXLOmRnizpn4Qs6Z+FLOmggCzpqZYs6amZLOmsnizprJ8s6aygLOmxkizpsZgs" \
        "6bGQLOmxiizpsY0s6bGLLOmxlSzpsZks6bGMLOmxjizpt7ss6be3LOm3ryzpt6Ms6be" \
        "rLOm3uCzpt6Qs6be2LOm3oSzpt64s6bemLOm3sizpt7As6beiLOm3rCzpt7Qs6bezLO" \
        "m3qCzpt60s6buCLOm7kCzpu7Is6buzLOm8hizpvJws6by4LOm8tyzpvLYs6b2DLOm9j" \
        "yzpvbEs6b2wLOm9rizpva8s5ZuTLOWbjSzlrY4s5bGtLOaUrSzmm60s5puuLOaskyzn" \
        "gZ8s54GhLOeBnSzngaAs54ijLOeTmyznk6Us55+VLOekuCznprcs56a2LOexqiznupc" \
        "s576JLOiJrSzomYMs6KC4LOigtyzooLUs6KGLLOiulCzorpUs6LqeLOi6nyzouqAs6L" \
        "qdLOmGvizphr0s6YeCLOmRqyzpkags6ZGpLOmbpSzpnYYs6Z2DLOmdhyzpn4cs6Z+lL" \
        "Ompnizpq5Us6a2ZLOmxoyzpsacs6bGmLOmxoizpsZ4s6bGgLOm4gizpt74s6biHLOm4" \
        "gyzpuIYs6biFLOm4gCzpuIEs6biJLOm3vyzpt70s6biELOm6oCzpvJ4s6b2GLOm9tCz" \
        "pvbUs6b22LOWblCzmlK4s5pa4LOasmCzmrJks5qyXLOasmizngaIs54imLOeKqiznn5" \
        "gs55+ZLOekuSznsaks57GrLOeztiznupos57qYLOe6myznupks6IegLOiHoSzomYYs6" \
        "JmHLOiZiCzopbks6KW6LOilvCzopbss6Ke/LOiumCzorpks6LqlLOi6pCzouqMs6ZGu" \
        "LOmRrSzpka8s6ZGxLOmRsyzpnYks6aGyLOmlnyzpsags6bGuLOmxrSzpuIss6biNLOm" \
        "4kCzpuI8s6biSLOm4kSzpuqEs6bu1LOm8iSzpvYcs6b24LOm9uyzpvbos6b25LOWcni" \
        "zngaYs57GvLOigvCzotrIs6LqmLOmHgyzpkbQs6ZG4LOmRtizpkbUs6amgLOmxtCzps" \
        "bMs6bGxLOmxtSzpuJQs6biTLOm7tizpvIos6b6kLOeBqCzngaUs57O3LOiZqizooL4s" \
        "6KC9LOigvyzorp4s6LKcLOi6qSzou4ks6Z2LLOmhsyzpobQs6aOMLOmloSzppqss6am" \
        "kLOmppizpqacs6aykLOm4lSzpuJcs6b2ILOaIhyzmrJ4s54inLOiZjCzouqgs6ZKCLO" \
        "mSgCzpkoEs6ampLOmpqCzprK4s6biZLOeIqSzomYss6K6fLOmSgyzpsbks6bq3LOeZt" \
        "Szpqass6bG6LOm4nSzngaks54GqLOm6pCzpvb4s6b2JLOm+mCznooEs6Yq5LOijjyzl" \
        "orss5oGSLOeypyzlq7os4pWULOKVpizilZcs4pWgLOKVrCzilaMs4pWaLOKVqSzilZ0" \
        "s4pWSLOKVpCzilZUs4pWeLOKVqizilaEs4pWYLOKVpyzilZss4pWTLOKVpSzilZYs4p" \
        "WfLOKVqyzilaIs4pWZLOKVqCzilZws4pWRLOKVkCzila0s4pWuLOKVsCzila8s4paT" \
    );
    # '}'
    return (0);
}
# }}}
# {{{ (private)::acp::build_map_1250_to_u8char
# cp1250
#
# ANSI Central European; Central European (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1250.TXT
#
function \
__acp__build_map_1250_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 ? \342\200\236 \342\200\246 \342\200\240 " \
        "\342\200\241 ? \342\200\260 \305\240 \342\200\271 \305\232 " \
        "\305\244 \305\275 \305\271 ? \342\200\230 \342\200\231 " \
        "\342\200\234 \342\200\235 \342\200\242 \342\200\223 \342\200\224 " \
        "? \342\204\242 \305\241 \342\200\272 \305\233 \305\245 " \
        "\305\276 \305\272 \302\240 \313\207 \313\230 " \
        "\305\201 \302\244 \304\204 \302\246 \302\247 " \
        "\302\250 \302\251 \305\236 \302\253 \302\254 " \
        "\302\255 \302\256 \305\273 \302\260 \302\261 " \
        "\313\233 \305\202 \302\264 \302\265 \302\266 " \
        "\302\267 \302\270 \304\205 \305\237 \302\273 " \
        "\304\275 \313\235 \304\276 \305\274 \305\224 " \
        "\303\201 \303\202 \304\202 \303\204 \304\271 " \
        "\304\206 \303\207 \304\214 \303\211 \304\230 " \
        "\303\213 \304\232 \303\215 \303\216 \304\216 " \
        "\304\220 \305\203 \305\207 \303\223 \303\224 " \
        "\305\220 \303\226 \303\227 \305\230 \305\256 " \
        "\303\232 \305\260 \303\234 \303\235 \305\242 " \
        "\303\237 \305\225 \303\241 \303\242 \304\203 " \
        "\303\244 \304\272 \304\207 \303\247 \304\215 " \
        "\303\251 \304\231 \303\253 \304\233 \303\255 " \
        "\303\256 \304\217 \304\221 \305\204 \305\210 " \
        "\303\263 \303\264 \305\221 \303\266 \303\267 " \
        "\305\231 \305\257 \303\272 \305\261 \303\274 " \
        "\303\275 \305\243 \313\231 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1251_to_u8char
# cp1251
#
# ANSI Cyrillic; Cyrillic (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1251.TXT
#
function \
__acp__build_map_1251_to_u8char() {
    split( \
        "\320\202 \320\203 \342\200\232 \321\223 \342\200\236 " \
        "\342\200\246 \342\200\240 \342\200\241 \342\202\254 \342\200\260 " \
        "\320\211 \342\200\271 \320\212 \320\214 \320\213 " \
        "\320\217 \321\222 \342\200\230 \342\200\231 \342\200\234 " \
        "\342\200\235 \342\200\242 \342\200\223 \342\200\224 ? \342\204\242 " \
        "\321\231 \342\200\272 \321\232 \321\234 \321\233 " \
        "\321\237 \302\240 \320\216 \321\236 \320\210 " \
        "\302\244 \322\220 \302\246 \302\247 \320\201 " \
        "\302\251 \320\204 \302\253 \302\254 \302\255 " \
        "\302\256 \320\207 \302\260 \302\261 \320\206 " \
        "\321\226 \322\221 \302\265 \302\266 \302\267 " \
        "\321\221 \342\204\226 \321\224 \302\273 \321\230 " \
        "\320\205 \321\225 \321\227 \320\220 \320\221 " \
        "\320\222 \320\223 \320\224 \320\225 \320\226 " \
        "\320\227 \320\230 \320\231 \320\232 \320\233 " \
        "\320\234 \320\235 \320\236 \320\237 \320\240 " \
        "\320\241 \320\242 \320\243 \320\244 \320\245 " \
        "\320\246 \320\247 \320\250 \320\251 \320\252 " \
        "\320\253 \320\254 \320\255 \320\256 \320\257 " \
        "\320\260 \320\261 \320\262 \320\263 \320\264 " \
        "\320\265 \320\266 \320\267 \320\270 \320\271 " \
        "\320\272 \320\273 \320\274 \320\275 \320\276 " \
        "\320\277 \321\200 \321\201 \321\202 \321\203 " \
        "\321\204 \321\205 \321\206 \321\207 \321\210 " \
        "\321\211 \321\212 \321\213 \321\214 \321\215 " \
        "\321\216 \321\217 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1252_to_u8char
# cp1252
#
# ANSI Latin 1; Western European (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT
#
function \
__acp__build_map_1252_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 \306\222 \342\200\236 \342\200\246 " \
        "\342\200\240 \342\200\241 \313\206 \342\200\260 \305\240 " \
        "\342\200\271 \305\222 ? \305\275 ? ? \342\200\230 \342\200\231 " \
        "\342\200\234 \342\200\235 \342\200\242 \342\200\223 \342\200\224 " \
        "\313\234 \342\204\242 \305\241 \342\200\272 \305\223 " \
        " \305\276 \305\270 \302\240 \302\241 \302\242 " \
        "\302\243 \302\244 \302\245 \302\246 \302\247 " \
        "\302\250 \302\251 \302\252 \302\253 \302\254 " \
        "\302\255 \302\256 \302\257 \302\260 \302\261 " \
        "\302\262 \302\263 \302\264 \302\265 \302\266 " \
        "\302\267 \302\270 \302\271 \302\272 \302\273 " \
        "\302\274 \302\275 \302\276 \302\277 \303\200 " \
        "\303\201 \303\202 \303\203 \303\204 \303\205 " \
        "\303\206 \303\207 \303\210 \303\211 \303\212 " \
        "\303\213 \303\214 \303\215 \303\216 \303\217 " \
        "\303\220 \303\221 \303\222 \303\223 \303\224 " \
        "\303\225 \303\226 \303\227 \303\230 \303\231 " \
        "\303\232 \303\233 \303\234 \303\235 \303\236 " \
        "\303\237 \303\240 \303\241 \303\242 \303\243 " \
        "\303\244 \303\245 \303\246 \303\247 \303\250 " \
        "\303\251 \303\252 \303\253 \303\254 \303\255 " \
        "\303\256 \303\257 \303\260 \303\261 \303\262 " \
        "\303\263 \303\264 \303\265 \303\266 \303\267 " \
        "\303\270 \303\271 \303\272 \303\273 \303\274 " \
        "\303\275 \303\276 \303\277 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1253_to_u8char
# cp1253
#
# ANSI Greek; Greek (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1253.TXT
#
function \
__acp__build_map_1253_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 \306\222 \342\200\236 \342\200\246 " \
        "\342\200\240 \342\200\241 ? \342\200\260 ? \342\200\271 ? ? ? ? ? \342\200\230 " \
        "\342\200\231 \342\200\234 \342\200\235 \342\200\242 \342\200\223 " \
        "\342\200\224 ? \342\204\242 ? \342\200\272 ? ? ? ? \302\240 \316\205 " \
        "\316\206 \302\243 \302\244 \302\245 \302\246 " \
        "\302\247 \302\250 \302\251 ? \302\253 \302\254 " \
        "\302\255 \302\256 \342\200\225 \302\260 \302\261 " \
        "\302\262 \302\263 \316\204 \302\265 \302\266 " \
        "\302\267 \316\210 \316\211 \316\212 \302\273 " \
        "\316\214 \302\275 \316\216 \316\217 \316\220 " \
        "\316\221 \316\222 \316\223 \316\224 \316\225 " \
        "\316\226 \316\227 \316\230 \316\231 \316\232 " \
        "\316\233 \316\234 \316\235 \316\236 \316\237 " \
        "\316\240 \316\241 ? \316\243 \316\244 \316\245 " \
        "\316\246 \316\247 \316\250 \316\251 \316\252 " \
        "\316\253 \316\254 \316\255 \316\256 \316\257 " \
        "\316\260 \316\261 \316\262 \316\263 \316\264 " \
        "\316\265 \316\266 \316\267 \316\270 \316\271 " \
        "\316\272 \316\273 \316\274 \316\275 \316\276 " \
        "\316\277 \317\200 \317\201 \317\202 \317\203 " \
        "\317\204 \317\205 \317\206 \317\207 \317\210 " \
        "\317\211 \317\212 \317\213 \317\214 \317\215 " \
        "\317\216 ? ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1254_to_u8char
#
# cp1254
#
# ANSI Turkish; Turkish (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1254.TXT
#
function \
__acp__build_map_1254_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 \306\222 \342\200\236 \342\200\246 " \
        "\342\200\240 \342\200\241 \313\206 \342\200\260 \305\240 " \
        "\342\200\271 \305\222 ? ? ? ? \342\200\230 \342\200\231 \342\200\234 " \
        "\342\200\235 \342\200\242 \342\200\223 \342\200\224 \313\234 " \
        "\342\204\242 \305\241 \342\200\272 \305\223 ? ? \305\270 " \
        "\302\240 \302\241 \302\242 \302\243 \302\244 " \
        "\302\245 \302\246 \302\247 \302\250 \302\251 " \
        "\302\252 \302\253 \302\254 \302\255 \302\256 " \
        "\302\257 \302\260 \302\261 \302\262 \302\263 " \
        "\302\264 \302\265 \302\266 \302\267 \302\270 " \
        "\302\271 \302\272 \302\273 \302\274 \302\275 " \
        "\302\276 \302\277 \303\200 \303\201 \303\202 " \
        "\303\203 \303\204 \303\205 \303\206 \303\207 " \
        "\303\210 \303\211 \303\212 \303\213 \303\214 " \
        "\303\215 \303\216 \303\217 \304\236 \303\221 " \
        "\303\222 \303\223 \303\224 \303\225 \303\226 " \
        "\303\227 \303\230 \303\231 \303\232 \303\233 " \
        "\303\234 \304\260 \305\236 \303\237 \303\240 " \
        "\303\241 \303\242 \303\243 \303\244 \303\245 " \
        "\303\246 \303\247 \303\250 \303\251 \303\252 " \
        "\303\253 \303\254 \303\255 \303\256 \303\257 " \
        "\304\237 \303\261 \303\262 \303\263 \303\264 " \
        "\303\265 \303\266 \303\267 \303\270 \303\271 " \
        "\303\272 \303\273 \303\274 \304\261 \305\237 " \
        "\303\277 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1255_to_u8char
# cp1255
#
# ANSI Hebrew; Hebrew (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1255.TXT
#
function \
__acp__build_map_1255_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 \306\222 \342\200\236 \342\200\246 " \
        "\342\200\240 \342\200\241 \313\206 \342\200\260 ? \342\200\271 " \
        "? ? ? ? ? \342\200\230 \342\200\231 \342\200\234 \342\200\235 \342\200\242 " \
        "\342\200\223 \342\200\224 \313\234 \342\204\242 ? \342\200\272 " \
        "? ? ? ? \302\240 \302\241 \302\242 \302\243 \342\202\252 " \
        "\302\245 \302\246 \302\247 \302\250 \302\251 " \
        "\303\227 \302\253 \302\254 \302\255 \302\256 " \
        "\302\257 \302\260 \302\261 \302\262 \302\263 " \
        "\302\264 \302\265 \302\266 \302\267 \302\270 " \
        "\302\271 \303\267 \302\273 \302\274 \302\275 " \
        "\302\276 \302\277 \326\260 \326\261 \326\262 " \
        "\326\263 \326\264 \326\265 \326\266 \326\267 " \
        "\326\270 \326\271 ? \326\273 \326\274 \326\275 " \
        "\326\276 \326\277 \327\200 \327\201 \327\202 " \
        "\327\203 \327\260 \327\261 \327\262 \327\263 " \
        "\327\264 ? ? ? ? ? ? ? \327\220 \327\221 \327\222 \327\223 " \
        "\327\224 \327\225 \327\226 \327\227 \327\230 " \
        "\327\231 \327\232 \327\233 \327\234 \327\235 " \
        "\327\236 \327\237 \327\240 \327\241 \327\242 " \
        "\327\243 \327\244 \327\245 \327\246 \327\247 " \
        "\327\250 \327\251 \327\252 ? ? \342\200\216 \342\200\217 " \
        "? ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1256_to_u8char
# cp1256
#
# ANSI Arabic; Arabic (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1256.TXT
#
function \
__acp__build_map_1256_to_u8char() {
    split( \
        "\342\202\254 \331\276 \342\200\232 \306\222 \342\200\236 " \
        "\342\200\246 \342\200\240 \342\200\241 \313\206 \342\200\260 " \
        "\331\271 \342\200\271 \305\222 \332\206 \332\230 " \
        "\332\210 \332\257 \342\200\230 \342\200\231 \342\200\234 " \
        "\342\200\235 \342\200\242 \342\200\223 \342\200\224 \332\251 " \
        "\342\204\242 \332\221 \342\200\272 \305\223 \342\200\214 " \
        "\342\200\215 \332\272 \302\240 \330\214 \302\242 " \
        "\302\243 \302\244 \302\245 \302\246 \302\247 " \
        "\302\250 \302\251 \332\276 \302\253 \302\254 " \
        "\302\255 \302\256 \302\257 \302\260 \302\261 " \
        "\302\262 \302\263 \302\264 \302\265 \302\266 " \
        "\302\267 \302\270 \302\271 \330\233 \302\273 " \
        "\302\274 \302\275 \302\276 \330\237 \333\201 " \
        "\330\241 \330\242 \330\243 \330\244 \330\245 " \
        "\330\246 \330\247 \330\250 \330\251 \330\252 " \
        "\330\253 \330\254 \330\255 \330\256 \330\257 " \
        "\330\260 \330\261 \330\262 \330\263 \330\264 " \
        "\330\265 \330\266 \303\227 \330\267 \330\270 " \
        "\330\271 \330\272 \331\200 \331\201 \331\202 " \
        "\331\203 \303\240 \331\204 \303\242 \331\205 " \
        "\331\206 \331\207 \331\210 \303\247 \303\250 " \
        "\303\251 \303\252 \303\253 \331\211 \331\212 " \
        "\303\256 \303\257 \331\213 \331\214 \331\215 " \
        "\331\216 \303\264 \331\217 \331\220 \303\267 " \
        "\331\221 \303\271 \331\222 \303\273 \303\274 " \
        "\342\200\216 \342\200\217 \333\222 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1257_to_u8char
# cp1257
#
# ANSI Baltic; Baltic (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1257.TXT
#
function \
__acp__build_map_1257_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 ? \342\200\236 \342\200\246 \342\200\240 " \
        "\342\200\241 ? \342\200\260 ? \342\200\271 ? \302\250 \313\207 " \
        "\302\270 ? \342\200\230 \342\200\231 \342\200\234 \342\200\235 " \
        "\342\200\242 \342\200\223 \342\200\224 ? \342\204\242 ? \342\200\272 " \
        "? \302\257 \313\233 ? \302\240 ? \302\242 \302\243 " \
        "\302\244 ? \302\246 \302\247 \303\230 \302\251 " \
        "\305\226 \302\253 \302\254 \302\255 \302\256 " \
        "\303\206 \302\260 \302\261 \302\262 \302\263 " \
        "\302\264 \302\265 \302\266 \302\267 \303\270 " \
        "\302\271 \305\227 \302\273 \302\274 \302\275 " \
        "\302\276 \303\246 \304\204 \304\256 \304\200 " \
        "\304\206 \303\204 \303\205 \304\230 \304\222 " \
        "\304\214 \303\211 \305\271 \304\226 \304\242 " \
        "\304\266 \304\252 \304\273 \305\240 \305\203 " \
        "\305\205 \303\223 \305\214 \303\225 \303\226 " \
        "\303\227 \305\262 \305\201 \305\232 \305\252 " \
        "\303\234 \305\273 \305\275 \303\237 \304\205 " \
        "\304\257 \304\201 \304\207 \303\244 \303\245 " \
        "\304\231 \304\223 \304\215 \303\251 \305\272 " \
        "\304\227 \304\243 \304\267 \304\253 \304\274 " \
        "\305\241 \305\204 \305\206 \303\263 \305\215 " \
        "\303\265 \303\266 \303\267 \305\263 \305\202 " \
        "\305\233 \305\253 \303\274 \305\274 \305\276 " \
        "\313\231 ", \
        acp__S_charmap, " ");
}
# }}}
# {{{ (private)::acp::build_map_1258_to_u8char
# cp1258
#
# ANSI/OEM Vietnamese; Vietnamese (Windows)
#
# https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1258.TXT
#
function \
__acp__build_map_1258_to_u8char() {
    split( \
        "\342\202\254 ? \342\200\232 \306\222 \342\200\236 \342\200\246 " \
        "\342\200\240 \342\200\241 \313\206 \342\200\260 ? \342\200\271 " \
        "\305\222 ? ? ? ? \342\200\230 \342\200\231 \342\200\234 \342\200\235 " \
        "\342\200\242 \342\200\223 \342\200\224 \313\234 \342\204\242 " \
        "? \342\200\272 \305\223 ? ? \305\270 \302\240 \302\241 " \
        "\302\242 \302\243 \302\244 \302\245 \302\246 " \
        "\302\247 \302\250 \302\251 \302\252 \302\253 " \
        "\302\254 \302\255 \302\256 \302\257 \302\260 " \
        "\302\261 \302\262 \302\263 \302\264 \302\265 " \
        "\302\266 \302\267 \302\270 \302\271 \302\272 " \
        "\302\273 \302\274 \302\275 \302\276 \302\277 " \
        "\303\200 \303\201 \303\202 \304\202 \303\204 " \
        "\303\205 \303\206 \303\207 \303\210 \303\211 " \
        "\303\212 \303\213 \314\200 \303\215 \303\216 " \
        "\303\217 \304\220 \303\221 \314\211 \303\223 " \
        "\303\224 \306\240 \303\226 \303\227 \303\230 " \
        "\303\231 \303\232 \303\233 \303\234 \306\257 " \
        "\314\203 \303\237 \303\240 \303\241 \303\242 " \
        "\304\203 \303\244 \303\245 \303\246 \303\247 " \
        "\303\250 \303\251 \303\252 \303\253 \314\201 " \
        "\303\255 \303\256 \303\257 \304\221 \303\261 " \
        "\314\243 \303\263 \303\264 \306\241 \303\266 " \
        "\303\267 \303\270 \303\271 \303\272 \303\273 " \
        "\303\274 \306\260 \342\202\253 \303\277 ", \
        acp__S_charmap, " ");
}
# }}}
# }}}
# {{{ @module zlib, functions for deflate/inflate algorithm
# {{{ zlib__ut
# '${__pp_ut__zlib__:+"$(cut -d\# -f3-<<<'
#=# function \
#=# zlib__ut( \
#=#     \
#=#     _status, _istream, _store, _ostream \
#=# ) {
#=#     print "[zlib::ut]"
#=#
#=#     _status = zlib__init();
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     printf "%s", "__zlib__deflate__ut__00 ... "
#=#     _status = __zlib__deflate__ut__00();
#=#     print (_status == 0 ? "OK": "NG");
#=#
#=#     printf "%s", "__zlib__inflate__ut__00 ... "
#=#     _status = __zlib__inflate__ut__00();
#=#     print (_status == 0 ? "OK": "NG");
#=#
#=#     return (0);
#=# }
# ')"}'
# }}}
# {{{ zlib__init
function \
zlib__init(    _i, _status) {
    if (__zlib__init_guard) {
        return (1);
    }

    # required modules
    _status = str__init();
    if (_status < 0) {
        return _status;
    }
    _status = stream__init();
    if (_status < 0) {
        return _status;
    }

    # Zip decoding: permuted ordering table
    split("16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15", \
          __zlib__C_PERMUTED_ORDERING, /, */);
    for (_i = 1; _i <= 19; ++_i) {
        __zlib__C_PERMUTED_ORDERING[_i] = \
            + __zlib__C_PERMUTED_ORDERING[_i];
    }

    # Zip decoding: fixed literal code lengths
    split( \
        "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8," \
        "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8," \
        "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8," \
        "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8," \
        "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9," \
        "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9," \
        "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9," \
        "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9," \
        "7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8", \
        __zlib__C_FIXED_LITERAL_CODE_LENGTHS, \
        "," \
    );
    # convert to zero-origin
    for (_i = 1; _i <= 288; ++_i) {
        __zlib__C_FIXED_LITERAL_CODE_LENGTHS[_i - 1] = \
            + __zlib__C_FIXED_LITERAL_CODE_LENGTHS[_i];
    }
    delete __zlib__C_FIXED_LITERAL_CODE_LENGTHS[_i];

    # Zip decoding: fixed distance code lengths
    split( \
        "5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5", \
        __zlib__C_FIXED_DISTANCE_CODE_LENGTHS, \
        "," \
    );
    # convert to zero-origin
    for (_i = 1; _i <= 32; ++_i) {
        __zlib__C_FIXED_DISTANCE_CODE_LENGTHS[_i - 1] = \
            + __zlib__C_FIXED_DISTANCE_CODE_LENGTHS[_i];
    }
    delete __zlib__C_FIXED_DISTANCE_CODE_LENGTHS[_i - 1];


    # Zip decoding: conversion table for code -> base length
    split("3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35," \
          "43,51,59,67,83,99,115,131,163,195,227,258", \
          __zlib__C_LZ77_LENGTH, /, */);
    for (_i = 1; _i <= 29; ++_i) {
        __zlib__C_LZ77_LENGTH[_i] = \
            + __zlib__C_LZ77_LENGTH[_i];
    }

    # Zip decoding: conversion table for code -> extend bits of length
    split("0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2," \
          "3,3,3,3,4,4,4,4,5,5,5,5,0", \
          __zlib__C_LZ77_LENGTH_EXTEND_BITS, /, */);
    for (_i = 1; _i <= 29; ++_i) {
        __zlib__C_LZ77_LENGTH_EXTEND_BITS[_i] = \
            + __zlib__C_LZ77_LENGTH_EXTEND_BITS[_i];
    }

    # Zip decoding: conversion table for code -> base distance
    split("1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193," \
          "257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577", \
          __zlib__C_DEFLATE_LZ77_DISTANCE, /, */);
    for (_i = 1; _i <= 30; ++_i) {
        __zlib__C_DEFLATE_LZ77_DISTANCE[_i] = \
            + __zlib__C_DEFLATE_LZ77_DISTANCE[_i];
    }

    # Zip decoding: conversion table for code -> extend bits of distance
    split("0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6," \
          "7,7,8,8,9,9,10,10,11,11,12,12,13,13", \
          __zlib__C_LZ77_DISTANCE_EXTEND_BITS, /, */);
    for (_i = 1; _i <= 30; ++_i) {
        __zlib__C_LZ77_DISTANCE_EXTEND_BITS[_i] = \
            + __zlib__C_LZ77_DISTANCE_EXTEND_BITS[_i];
    }

    __zlib__init_guard = 1;

    return (0);
}
# }}}
# {{{ zlib__deflate
# '${__pp_comment:+'
#
# '}'
function \
zlib__deflate( \
    istream, store, ostream, \
    \
    _status \
) {
    # BFINAL (1: final)
    stream__write_bits(ostream, 1, 1);

    # BTYPE (1: fixed)
    stream__write_bits(ostream, 2, 1);

    _status = __zlib__deflate__with_fixed_huffman(istream, ostream, store);
    if (_status < 0) {
        return _status;
    }

    return (0);
}
# '${__pp_ut__zlib__:+"$(cut -d\# -f3-<<<'
#=# function \
#=# __zlib__deflate__ut__00( \
#=#     \
#=#     _status, _istream, _store, _ostream, _size, _rstream, _test_str \
#=# ) {
#=#     _test_str = "\124\105\123\124\343\203\251\343" \
#=#                 "\203\274\346\262\271\157\153\056";
#=#     stream__new(_istream);
#=#     stream__new(_ostream);
#=#     stream__new(_rstream);
#=#
#=#     stream__write_string(_istream, _test_str);
#=#
#=#     _status = zlib__deflate(_istream, _store, _ostream);
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _status = zlib__inflate(_ostream, _store, _rstream);
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _size = stream__available_size(_rstream);
#=#     if (stream__read_raw_string(_rstream, _size) != _test_str) {
#=#         return (-1);
#=#     }
#=#
#=#     return (0);
#=# }
# ')"}'
# }}}
# {{{ zlib__inflate
# '${__pp_comment:+'
#
#   [APPNOTE.TXT] 4.3.8  File data
#
#      Immediately following the local header for a file
#      SHOULD be placed the compressed or stored data for the file.
#      If the file is encrypted, the encryption header for the file
#      SHOULD be placed after the local header and before the file
#      data. The series of [local file header][encryption header]
#      [file data][data descriptor] repeats for each file in the
#      .ZIP archive.
#
#      Zero-byte files, directories, and other file types that
#      contain no content MUST NOT include file data.
#
# '}'
function \
zlib__inflate( \
    istream, store, ostream, no, \
    \
    _store, _bfinal, \
    _btype, _status \
) {
    astore__fork(store, "Data Blocks/" no, _store);

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.3. Details of block format
    #
    # Each block of compressed data begins with 3 header bits
    # containing the following data:
    #
    #    first bit       BFINAL
    #    next 2 bits     BTYPE
    #
    # Note that the header bits do not necessarily begin on a byte
    # boundary, since a block does not necessarily occupy an integral
    # number of bytes.
    #
    # '}'
    _bfinal = stream__read_bits(istream, 1);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "BFINAL", _bfinal);
        if (_status < 0) {
            return _status;
        }
    }

    _btype = stream__read_bits(istream, 2);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "BTYPE", _btype);
        if (_status < 0) {
            return _status;
        }
    }

    #=# '${__pp_trace__zip_debug2+"$(cut -d\# -f3-<<<'
    #=#     TRACE("[zip] === START BLOCK ===\n");
    #=#     TRACE2("[zip] BFINAL: %d, BTYPE: %s\n", \
    #=#            _bfinal, num__rshift(_btype, 1) num__and(_btype, 1));
    #=# ')"}'

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.3. Details of block format
    #
    # BTYPE specifies how the data are compressed, as follows:
    #
    #    00 - no compression
    #    01 - compressed with fixed Huffman codes
    #    10 - compressed with dynamic Huffman codes
    #    11 - reserved (error)
    #
    # The only difference between the two compressed cases is how the
    # Huffman codes for the literal/length and distance alphabets are
    # defined.
    #
    # '}'
    if (_btype == 0) {  # uncompressed block

        _status = __zlib__inflate__uncompressed_block( \
            istream, \
            ostream, \
            _store);
        if (_status < 0) {
            return _status;
        }

    } else if (_btype == 1) {  # fixed huffman block

        _status = __zlib__inflate__fixed_huffman_block( \
            istream, \
            ostream, \
            _store);
        if (_status < 0) {
            return _status;
        }

    } else if (_btype == 2) {  # dynamic huffman block

        _status = __zlib__inflate__dynamic_huffman_block( \
            istream, \
            ostream, \
            _store);
        if (_status < 0) {
            return _status;
        }

    } else {  # _btype == 3
        E__message = sprintf( \
            "unexpected deflate btype %d.", _btype);
        return (-1);
    }

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.3. Details of block format
    #
    # BFINAL is set if and only if this is the last block of the data
    # set.
    #
    # '}'
    if (_bfinal == 1) {
        return (1);  # stop decoding
    }

    return (0);
}
# '${__pp_ut__zlib__:+"$(cut -d\# -f3-<<<'
#=# function \
#=# __zlib__inflate__ut__00( \
#=#     \
#=#     _status, _istream, _store, _ostream, _size \
#=# ) {
#=#     # echo -n test | gzip | LANG=C cut -b11- |
#=#     # perl -pe "s/(.)/sprintf(\"\\\\%03o\", ord(\$1))/ge"
#=#     stream__new_from_string( \
#=#         _istream, \
#=#         "\053\111\055\056\001\000\014\176\177\330\004\000\000\000" \
#=#     );
#=#
#=#     stream__new(_ostream);
#=#
#=#     _status = zlib__inflate(_istream, _store, _ostream);
#=#     if (_status < 0) {
#=#         return _status;
#=#     }
#=#
#=#     _size = stream__available_size(_ostream);
#=#     if (stream__read_raw_string(_ostream, _size) != "test") {
#=#         return (-1);
#=#     }
#=#
#=#     return (0);
#=# }
# ')"}'
# }}}
# {{{ __zlib__deflate__with_fixed_huffman
#
# [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
#
function \
__zlib__deflate__with_fixed_huffman( \
    istream, ostream, store, \
    \
    _code, _s, _hash, _pos, _bits, _distance, _extra, _length, _past, _predict \
) {
    for (_pos = 0; ! stream__is_end(istream); ) {
        # match
        _predict = stream__read_raw_string(istream, _length = 3);
        if ((_predict in _hash) && (_distance = _pos - _hash[_predict] - 4) < 32768) {
            while (! stream__is_end(istream) && _length <= 258) {
                _code = stream__read_uint8(istream);
                stream__rewind(istream, _distance + 1);
                _past = stream__read_uint8(istream);
                stream__skip(istream, _distance);
                if (_code == _past) {
                    ++_length;
                } else {
                    stream__rewind(istream, 1);
                    break;
                }
            }
            _pos += _length;

            # length
            #
            # [RFC 1951] 3.2.5. Compressed blocks (length and distance codes)
            #
            #                  Extra               Extra               Extra
            #    Code Bits Length(s) Code Bits Lengths   Code Bits Length(s)
            #    ---- ---- ------     ---- ---- -------   ---- ---- -------
            #     257   0     3       267   1   15,16     277   4   67-82
            #     258   0     4       268   1   17,18     278   4   83-98
            #     259   0     5       269   2   19-22     279   4   99-114
            #     260   0     6       270   2   23-26     280   4  115-130
            #     261   0     7       271   2   27-30     281   5  131-162
            #     262   0     8       272   2   31-34     282   5  163-194
            #     263   0     9       273   3   35-42     283   5  195-226
            #     264   0    10       274   3   43-50     284   5  227-257
            #     265   1  11,12      275   3   51-58     285   0    258
            #     266   1  13,14      276   3   59-66
            #

            if (_length < 11) {  # 3 - 10
                _code = 254 + _length;
                _extra = 0;
                _bits = 0;
            } else if (_length < 19) {  # 11 - 18
                _code = 265 + int((_length - 11) / 2);
                _extra = (_length - 11) % 2;
                _bits = 1;
            } else if (_length < 35) {  # 19 - 34
                _code = 269 + int((_length - 19) / 4);
                _extra = (_length - 19) % 4;
                _bits = 2;
            } else if (_length < 67) {  # 35 - 66
                _code = 273 + int((_length - 35) / 8);
                _extra = (_length - 35) % 8;
                _bits = 3;
            } else if (_length < 131) {  # 67 - 130
                _code = 277 + int((_length - 67) / 16);
                _extra = (_length - 67) % 16;
                _bits = 3;
            } else if (_length < 258) {  # 131 - 257
                _code = 281 + int((_length - 131) / 32);
                _extra = (_length - 131) % 32;
                _bits = 3;
            } else {  # 258
                _code = 285
                _extra = 0;
                _bits = 0;
            }

            # [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
            #
            #           Lit Value    Bits        Codes
            #           ---------    ----        -----
            #           256 - 279     7          0000000 through
            #                                    0010111
            #           280 - 287     8          11000000 through
            #                                    11000111
            if (_code < 280) {  # 257 - 279
                _code -= 256
                stream__write_bits(ostream, 7, num__reverse_bits(_code, 7));
            } else {  # 280 - 285
                _code -= 88
                stream__write_bits(ostream, 8, num__reverse_bits(_code, 8));
            }
            if (_bits > 0) {
                stream__write_bits(ostream, _bits, _extra);
            }

            # distance
            #
            #          Extra           Extra               Extra
            #     Code Bits Dist  Code Bits   Dist     Code Bits Distance
            #     ---- ---- ----  ---- ----  ------    ---- ---- --------
            #       0   0    1     10   4     33-48    20    9   1025-1536
            #       1   0    2     11   4     49-64    21    9   1537-2048
            #       2   0    3     12   5     65-96    22   10   2049-3072
            #       3   0    4     13   5     97-128   23   10   3073-4096
            #       4   1   5,6    14   6    129-192   24   11   4097-6144
            #       5   1   7,8    15   6    193-256   25   11   6145-8192
            #       6   2   9-12   16   7    257-384   26   12  8193-12288
            #       7   2  13-16   17   7    385-512   27   12 12289-16384
            #       8   3  17-24   18   8    513-768   28   13 16385-24576
            #       9   3  25-32   19   8   769-1024   29   13 24577-32768
            #
            if (_distance < 5) {  # 0 - 4
                _code = _distance - 1;
                _extra = 0;
                _bits = 0;
            } else if (_distance < 9) {  # 6 - 8
                _code = 4 + int((_distance - 5) / 2);
                _extra = (_distance - 5) % 2;
                _bits = 1;
            } else if (_distance < 17) {  # 9 - 16
                _code = 6 + int((_distance - 9) / 2);
                _extra = (_distance - 9) % 4;
                _bits = 2;
            } else if (_distance < 33) {  # 17 - 32
                _code = 8 + int((_distance - 17) / 2);
                _extra = (_distance - 17) % 8;
                _bits = 3;
            } else if (_distance < 65) {  # 33 - 64
                _code = 10 + int((_distance - 33) / 2);
                _extra = (_distance - 33) % 16;
                _bits = 4;
            } else if (_distance < 129) {  # 65 - 128
                _code = 12 + int((_distance - 65) / 2);
                _extra = (_distance - 65) % 32;
                _bits = 5;
            } else if (_distance < 257) {  # 129 - 256
                _code = 14 + int((_distance - 129) / 2);
                _extra = (_distance - 129) % 64;
                _bits = 6;
            } else if (_distance < 513) {  # 257 - 512
                _code = 16 + int((_distance - 257) / 2);
                _extra = (_distance - 257) % 128;
                _bits = 7;
            } else if (_distance < 1025) {  # 513 - 1024
                _code = 18 + int((_distance - 513) / 2);
                _extra = (_distance - 513) % 256;
                _bits = 8;
            } else if (_distance < 2049) {  # 1025 - 2048
                _code = 20 + int((_distance - 1025) / 2);
                _extra = (_distance - 1025) % 512;
                _bits = 9;
            } else if (_distance < 4097) {  # 2049 - 4096
                _code = 22 + int((_distance - 2049) / 2);
                _extra = (_distance - 2049) % 1024;
                _bits = 10;
            } else if (_distance < 8193) {  # 4097 - 8192
                _code = 24 + int((_distance - 4097) / 2);
                _extra = (_distance - 4097) % 2048;
                _bits = 11;
            } else if (_distance < 16385) {  # 8193 - 16384
                _code = 26 + int((_distance - 8193) / 2);
                _extra = (_distance - 8193) % 4096;
                _bits = 12;
            } else {  # 16385 - 32768
                _code = 28 + int((_distance - 16385) / 2);
                _extra = (_distance - 16385) % 8192;
                _bits = 13;
            }

            _code += 48;
            stream__write_bits(ostream, 8, num__reverse_bits(_code, 8));

            if (_bits > 0) {
                stream__write_bits(ostream, _bits, _extra);
            }

        } else {  # literal code
            #
            # [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
            #
            #           Lit Value    Bits        Codes
            #           ---------    ----        -----
            #             0 - 143     8          00110000 through
            #                                    10111111
            #           144 - 255     9          110010000 through
            #                                    11000111
            #
            stream__skip(istream, -3);
            _code = stream__read_uint8(istream);
            _s = substr(_s, 2) str__chr[_code];
            _hash[_s] = _pos++;
            if (_code <= 143) {
                _code += 48;
                stream__write_bits(ostream, 8, num__reverse_bits(_code, 8));
            } else {
                _code += 258;
                stream__write_bits(ostream, 9, num__reverse_bits(_code, 9));
            }
        }
    }

    # write an EOB (end-of-block) marker(256)
    stream__write_bits(ostream, 7, 0);

    return (0);
}
# }}}
# {{{ __zlib__inflate__uncompressed_block
# '${__pp_comment:+'
#
# [RFC 1951] 3.2.4. Non-compressed blocks (BTYPE=00)
#   Any bits of input up to the next byte boundary are ignored.
#   The rest of the block consists of the following information:
#
#         0   1   2   3   4...
#       +---+---+---+---+================================+
#       |  LEN  | NLEN  |... LEN bytes of literal data...|
#       +---+---+---+---+================================+
#
#   LEN is the number of data bytes in the block.  NLEN is the
#   one`s complement of LEN.
#
# '}'
function \
__zlib__inflate__uncompressed_block( \
    istream, ostream, store, \
    \
    _len, _nlen \
) {
    # align the seek position to a byte boundary
    stream__skip_to_align(istream, 1);

    _len = stream__read_uint16(istream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (astore__set(store, "LEN", _len) < 0) {
            return (-1);
        }
    }

    _nlen = stream__read_uint16(istream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (astore__set(store, "NLEN", _nlen) < 0) {
            return (-1);
        }
    }

    #=# '${__pp_trace__zip_debug2+"$(cut -d\# -f3-<<<'
    #=#     TRACE2("[zip] LEN: %d, NLEN: %d\n", _len, _nlen);
    #=# ')"}'

    stream__copy(istream, ostream, _len);

    #=# '${__pp_trace__zip_debug2+"$(cut -d\# -f3-<<<'
    #=#     TRACE("[zip] === END BLOCK ===\n\n");
    #=# ')"}'

    return (0);
}
# }}}
# {{{ __zlib__inflate__fixed_huffman_block
#
# [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
#
function \
__zlib__inflate__fixed_huffman_block( \
    istream, \
    ostream, \
    store, \
    \
    _literal_huffman_table, \
    _distance_huffman_table, \
    _status \
) {

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
    #
    # The Huffman codes for the two alphabets are fixed, and are not
    # represented explicitly in the data.  The Huffman code lengths
    # for the literal/length alphabet are:
    #
    #           Lit Value    Bits        Codes
    #           ---------    ----        -----
    #             0 - 143     8          00110000 through
    #                                    10111111
    #           144 - 255     9          110010000 through
    #                                    111111111
    #           256 - 279     7          0000000 through
    #                                    0010111
    #           280 - 287     8          11000000 through
    #                                    11000111
    #
    # '}'
    _status = __zlib__inflate__build_huffman_dictionary( \
        istream, \
        __zlib__C_FIXED_LITERAL_CODE_LENGTHS, \
        _literal_huffman_table \
    );
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.6. Compression with fixed Huffman codes (BTYPE=01)
    #
    # Distance codes 0-31 are represented by (fixed-length) 5-bit
    # codes, with possible additional bits as shown in the table
    # shown in Paragraph 3.2.5, above.  Note that distance codes 30-
    # 31 will never actually occur in the compressed data.
    #
    # '}'
    _status = __zlib__inflate__build_huffman_dictionary( \
        istream, \
        __zlib__C_FIXED_DISTANCE_CODE_LENGTHS, \
        _distance_huffman_table \
    );
    if (_status < 0) {
        return _status;
    }

    _status = __zlib__inflate__compressed_content( \
        istream, \
        _literal_huffman_table, \
        _distance_huffman_table, \
        ostream \
    );
    if (_status < 0) {
        return _status;
    }

    return (0);
}
# }}}
# {{{ __zlib__inflate__dynamic_huffman_block
#
# [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
#
function \
__zlib__inflate__dynamic_huffman_block( \
    istream, ostream, store, \
    \
    _status, _hlit, _hdist, _hclen, \
    _i, _p, _raw_code_lengths, _code_lengths, \
    _code_length_huffman_table, \
    _literal_code_lengths, \
    _literal_huffman_table, \
    _distance_code_lengths, \
    _distance_huffman_table \
) {
    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
    #
    #  We can now define the format of the block:
    #
    #    5 Bits: HLIT, # of Literal/Length codes - 257 (257 - 286)
    #    5 Bits: HDIST, # of Distance codes - 1        (1 - 32)
    #    4 Bits: HCLEN, # of Code Length codes - 4     (4 - 19)
    #
    # '}'
    _hlit = stream__read_bits(istream, 5);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (astore__set(store, "HLIT", _hlit) < 0) {
            return (-1);
        }
    }
    _hdist = stream__read_bits(istream, 5);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (astore__set(store, "HDIST", _hdist) < 0) {
            return (-1);
        }
    }
    _hclen = stream__read_bits(istream, 4);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (astore__set(store, "HCLEN", _hclen) < 0) {
            return (-1);
        }
    }

    #=# '${__pp_trace__zip_debug2+"$(cut -d\# -f3-<<<'
    #=# TRACE3("    HLIT: %d + %d = %d\n", _hlit, 257, _hlit + 257);
    #=# TRACE3("   HDIST: %d + %d = %d\n", _hdist, 1, _hdist + 1);
    #=# TRACE3("   HCLEN: %d + %d = %d\n", _hclen, 4, _hclen + 4);
    #=# ')"}'

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
    #
    # (HCLEN + 4) x 3 bits: code lengths for the code length
    # alphabet given just above, in the order: 16, 17, 18,
    # 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
    #
    # These code lengths are interpreted as 3-bit integers
    # (0-7); as above, a code length of 0 means the
    # corresponding symbol (literal/length or distance code
    # length) is not used.
    #
    # '}'
    for (_i = 0; _i < _hclen + 4; ++_i) {
        _raw_code_lengths[_i] = stream__read_bits(istream, 3);
    }

    for (_i = 0; _i <= 18; ++_i) {
        _code_lengths[_i] = 0;
    }

    for (_i = 0; _i < _hclen + 4; ++_i) {
        _p = __zlib__C_PERMUTED_ORDERING[_i + 1];
        if (_i in _raw_code_lengths) {
            _code_lengths[_p] = _raw_code_lengths[_i];
        }
    }

    # build huffman code table from a list of code lengths for code length
    _status = __zlib__inflate__build_huffman_dictionary( \
        istream, \
        _code_lengths, \
        _code_length_huffman_table \
    );
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # decode the list of length of literal huffman code
    #
    # [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
    #
    # HLIT + 257 code lengths for the literal/length alphabet,
    # encoded using the code length Huffman code
    #
    # '}'
    _status = __zlib__inflate__code_lengths_list( \
        istream, \
        _hlit + 257, \
        _code_length_huffman_table, \
        _literal_code_lengths \
    );
    if (_status < 0) {
        return _status;
    }

    _status = __zlib__inflate__build_huffman_dictionary( \
        istream, \
        _literal_code_lengths, \
        _literal_huffman_table \
    );
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # decode the list of length of distance huffman code
    #
    # [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
    #
    # HDIST + 1 code lengths for the distance alphabet,
    # encoded using the code length Huffman code
    #
    # '}'
    _status = __zlib__inflate__code_lengths_list( \
        istream, \
        _hdist + 1, \
        _code_length_huffman_table, \
        _distance_code_lengths \
    );
    if (_status < 0) {
        return _status;
    }

    _status = __zlib__inflate__build_huffman_dictionary( \
        istream, \
        _distance_code_lengths, \
        _distance_huffman_table \
    );
    if (_status < 0) {
        return _status;
    }

    _status = __zlib__inflate__compressed_content( \
        istream, \
        _literal_huffman_table, \
        _distance_huffman_table, \
        ostream \
    );
    if (_status < 0) {
        return _status;
    }

    return (0);
}
# }}}
# {{{ __zlib__inflate__code_lengths_list
#
# [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
#
function \
__zlib__inflate__code_lengths_list( \
    stream, \
    count, \
    huffman_table, \
    code_lengths, \
    \
    _num_of_code_lengths, \
    _code, \
    _repeat_count, \
    _i \
) {
    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.7. Compression with dynamic Huffman codes (BTYPE=10)
    #
    #    The Huffman codes for the two alphabets appear in the block
    #    immediately after the header bits and before the actual
    #    compressed data, first the literal/length code and then the
    #    distance code.  Each code is defined by a sequence of code
    #    lengths, as discussed in Paragraph 3.2.2, above.  For even
    #    greater compactness, the code length sequences themselves are
    #    compressed using a Huffman code.  The alphabet for code lengths
    #    is as follows:
    #
    #          0 - 15: Represent code lengths of 0 - 15
    #              16: Copy the previous code length 3 - 6 times.
    #                  The next 2 bits indicate repeat length
    #                        (0 = 3, ... , 3 = 6)
    #                     Example:  Codes 8, 16 (+2 bits 11),
    #                               16 (+2 bits 10) will expand to
    #                               12 code lengths of 8 (1 + 6 + 5)
    #              17: Repeat a code length of 0 for 3 - 10 times.
    #                  (3 bits of length)
    #              18: Repeat a code length of 0 for 11 - 138 times
    #                  (7 bits of length)
    #
    # '}'
    split("", code_lengths);

    _num_of_code_lengths = (-1);

    for (_num_of_code_lengths = (-1); _num_of_code_lengths < count - 1;) {
        _code = stream__decode_huffman(stream, huffman_table);
        if (_code < 0) {
            return (-1);
        } else if (_code <= 15) {
            code_lengths[++_num_of_code_lengths] = _code;
        } else if (_code == 16) {    # run length: repeat (0 - 3)
            _repeat_count = stream__read_bits(stream, 2) + 3;
            for (_i = 1; _i <= _repeat_count; ++_i) {
                _code = code_lengths[_num_of_code_lengths];
                code_lengths[++_num_of_code_lengths] = _code;
            }
        } else {
            if (_code == 17) {    # run length: repeat zero (3 - 10)
                _repeat_count = stream__read_bits(stream, 3) + 3;
            } else if (_code == 18) {    # run length: repeat zero (11 - 138)
                _repeat_count = stream__read_bits(stream, 7) + 11;
            } else {
                E__message = sprintf("Detected invalid symbol %d", _code);
                return (-1);
            }
            for (_i = 1; _i <= _repeat_count; ++_i) {
                code_lengths[++_num_of_code_lengths] = 0;
            }
        }
    }

    return (0);
}
# }}}
# {{{ __zlib__inflate__build_huffman_dictionary
# '${__pp_comment:+'
#
# [RFC 1951] 3.2.2. Use of Huffman coding in the "deflate" format
#
#    The Huffman codes used for each alphabet in the "deflate"
#    format have two additional rules:
#
#        * All codes of a given bit length have lexicographically
#          consecutive values, in the same order as the symbols
#          they represent;
#
#        * Shorter codes lexicographically precede longer codes.
#
#    We could recode the example above to follow this rule as
#    follows, assuming that the order of the alphabet is ABCD:
#
#       Symbol  Code
#       ------  ----
#       A       10
#       B       0
#       C       110
#       D       111
#
#    I.e., 0 precedes 10 which precedes 11x, and 110 and 111 are
#    lexicographically consecutive.
#
#    Given this rule, we can define the Huffman code for an alphabet
#    just by giving the bit lengths of the codes for each symbol of
#    the alphabet in order; this is sufficient to determine the
#    actual codes.  In our example, the code is completely defined
#    by the sequence of bit lengths (2, 1, 3, 3).  The following
#    algorithm generates the codes as integers, intended to be read
#    from most- to least-significant bit.  The code lengths are
#    initially in tree[I].Len; the codes are produced in
#    tree[I].Code.
#
# '}'
function \
__zlib__inflate__build_huffman_dictionary( \
    stream, code_lengths, huffman_table, \
    \
    _length, _bl_count, _code, _bits, \
    _n, _min_bits, _max_bits, _max_code, _next_code \
) {
    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.2. Use of Huffman coding in the "deflate" format
    #
    # 1)  Count the number of codes for each code length.  Let
    #     bl_count[N] be the number of codes of length N, N >= 1.
    #
    # '}'
    _min_bits = 0;
    _max_bits = 9;
    _max_code = (-1);
    for (_code in code_lengths) {
        _length = code_lengths[_code];
        if (_code + 0 > _max_code + 0) {
            _max_code = _code;
        }
        if (_length > _max_bits) {
            _max_bits = _length;
        } else if (_length < _min_bits) {
            _min_bits = _length;
        }
        if (_length > 0) {
            if (_length in _bl_count) {
                ++_bl_count[_length];
            } else {
                _bl_count[_length] = 1;
            }
        }
    }

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.2. Use of Huffman coding in the "deflate" format
    #
    # 2)  Find the numerical value of the smallest code for each
    #     code length:
    #
    #    code = 0;
    #    bl_count[0] = 0;
    #    for (bits = 1; bits <= MAX_BITS; bits++) {
    #        code = (code + bl_count[bits-1]) << 1;
    #        next_code[bits] = code;
    #    }
    #
    # '}'
    _code = 0
    for (_bits = _min_bits; _bits <= _max_bits; ++_bits) {
        _code *= 2;
        _next_code[_bits] = _code;
        if (_bits in _bl_count) {
            _code += _bl_count[_bits];
        }
    }

    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.2. Use of Huffman coding in the "deflate" format
    #
    # 3)  Assign numerical values to all codes, using consecutive
    #     values for all codes of the same length with the base
    #     values determined at step 2. Codes that are never used
    #     (which have a bit length of zero) must not be assigned a
    #     value.
    #
    #    for (n = 0;  n <= max_code; n++) {
    #        len = tree[n].Len;
    #        if (len != 0) {
    #            tree[n].Code = next_code[len];
    #            next_code[len]++;
    #        }
    #    }
    # '}'
    for (_n = _min_bits; _n <= _max_code + 1; ++_n) {
        if (_n in code_lengths) {
            _length = code_lengths[_n];
            if (_length != 0) {
                huffman_table[num__lshift(1, _length) + _next_code[_length]] = _n;
                ++_next_code[_length];
            }
        }
    }

    # '${__pp_comment:+'
    #
    # 3.2.2. Use of Huffman coding in the "deflate" format
    #
    # Example:
    #
    #    Consider the alphabet ABCDEFGH, with bit lengths (3, 3, 3, 3,
    #    3, 2, 4, 4).  After step 1, we have:
    #
    #       N      bl_count[N]
    #       -      -----------
    #       2      1
    #       3      5
    #       4      2
    #
    #    Step 2 computes the following next_code values:
    #
    #       N      next_code[N]
    #       -      ------------
    #       1      0
    #       2      0
    #       3      2
    #       4      14
    #
    #    Step 3 produces the following code values:
    #
    #       Symbol Length   Code
    #       ------ ------   ----
    #       A       3        010
    #       B       3        011
    #       C       3        100
    #       D       3        101
    #       E       3        110
    #       F       2         00
    #       G       4       1110
    #       H       4       1111
    #
    # '}'
    return (0);
}
# }}}
# {{{ __zlib__inflate__compressed_content
# '${__pp_comment:+'
#
# [RFC 1951]
# 3.2.3. Details of block format
# 3.2.5. Compressed blocks (length and distance codes)
#
# '}'
function \
__zlib__inflate__compressed_content( \
    istream, \
    literal_huffman_table, \
    distance_huffman_table, \
    ostream, \
    \
    _length, _distance, \
    _extra_distance, _extra_bits, \
    _code, _st \
) {
    # '${__pp_comment:+'
    #
    # [RFC 1951] 3.2.3. Details of block format
    #
    # In all cases, the decoding algorithm for the actual data is as
    # follows:
    #
    #     do
    #        read block header from input stream.
    #        if stored with no compression
    #           skip any remaining bits in current partially
    #              processed byte
    #           read LEN and NLEN (see next section)
    #           copy LEN bytes of data to output
    #        otherwise
    #           if compressed with dynamic Huffman codes
    #              read representation of code trees (see
    #                 subsection below)
    #           loop (until end of block code recognized)
    #              decode literal/length value from input stream
    #              if value < 256
    #                 copy value (literal byte) to output stream
    #              otherwise
    #                 if value = end of block (256)
    #                    break from loop
    #                 otherwise (value = 257..285)
    #                    decode distance from input stream
    #                    move backwards distance bytes in the output
    #                    stream, and copy length bytes from this
    #                    position to the output stream.
    #           end loop
    #     while not last block
    # '}'

    #=# '${__pp_trace__zip_debug3+"$(cut -d\# -f3-<<<'
    #=#     _st = 0;
    #=# ')"}'
    while (1) {
        _code = stream__decode_huffman(istream, literal_huffman_table);
        if (_code < 0) {
            return (-1);
        } else if (_code == 256) {
            #=# '${__pp_trace__zip_debug2+"$(cut -d\# -f3-<<<'
            #=#     TRACE("[zip] === END BLOCK ===\n\n");
            #=# ')"}'
            break;
        } else if (_code < 256) {
            stream__write_uint8(ostream, _code);
            #=# '${__pp_trace__zip_debug3+"$(cut -d\# -f3-<<<'
            #=#     if (_st == 0) {
            #=#         TRACE("[zip] <LITERAL>\n    ");
            #=#     }
            #=#     TRACE(str__debug_chr[_code]);
            #=#     if (++_st % 80 == 0) {;
            #=#         TRACE("\n    ");
            #=#     }
            #=# ')"}'
        } else {
            # '${__pp_comment:+'
            #
            # [RFC 1951] 3.2.5. Compressed blocks (length and distance codes)
            #
            # As noted above, encoded data blocks in the "deflate" format
            # consist of sequences of symbols drawn from three conceptually
            # distinct alphabets: either literal bytes, from the alphabet of
            # byte values (0..255), or <length, backward distance> pairs,
            # where the length is drawn from (3..258) and the distance is
            # drawn from (1..32,768).  In fact, the literal and length
            # alphabets are merged into a single alphabet (0..285), where
            # values 0..255 represent literal bytes, the value 256 indicates
            # end-of-block, and values 257..285 represent length codes
            # (possibly in conjunction with extra bits following the symbol
            # code) as follows:
            #
            #                  Extra               Extra               Extra
            #    Code Bits Length(s) Code Bits Lengths   Code Bits Length(s)
            #    ---- ---- ------     ---- ---- -------   ---- ---- -------
            #     257   0     3       267   1   15,16     277   4   67-82
            #     258   0     4       268   1   17,18     278   4   83-98
            #     259   0     5       269   2   19-22     279   4   99-114
            #     260   0     6       270   2   23-26     280   4  115-130
            #     261   0     7       271   2   27-30     281   5  131-162
            #     262   0     8       272   2   31-34     282   5  163-194
            #     263   0     9       273   3   35-42     283   5  195-226
            #     264   0    10       274   3   43-50     284   5  227-257
            #     265   1  11,12      275   3   51-58     285   0    258
            #     266   1  13,14      276   3   59-66
            #
            # The extra bits should be interpreted as a machine integer
            # stored with the most-significant bit first, e.g., bits 1110
            # represent the value 14.
            #
            #          Extra           Extra               Extra
            #     Code Bits Dist  Code Bits   Dist     Code Bits Distance
            #     ---- ---- ----  ---- ----  ------    ---- ---- --------
            #       0   0    1     10   4     33-48    20    9   1025-1536
            #       1   0    2     11   4     49-64    21    9   1537-2048
            #       2   0    3     12   5     65-96    22   10   2049-3072
            #       3   0    4     13   5     97-128   23   10   3073-4096
            #       4   1   5,6    14   6    129-192   24   11   4097-6144
            #       5   1   7,8    15   6    193-256   25   11   6145-8192
            #       6   2   9-12   16   7    257-384   26   12  8193-12288
            #       7   2  13-16   17   7    385-512   27   12 12289-16384
            #       8   3  17-24   18   8    513-768   28   13 16385-24576
            #       9   3  25-32   19   8   769-1024   29   13 24577-32768
            #
            # '}'
            _code -= 256;
            _length = __zlib__C_LZ77_LENGTH[_code];
            _extra_bits = __zlib__C_LZ77_LENGTH_EXTEND_BITS[_code];
            if (_extra_bits > 0) {
                _length += stream__read_bits(istream, _extra_bits);
            }

            # get distance
            _code = stream__decode_huffman(istream, distance_huffman_table);
            if (_code < 0) {
                return (-1);
            }
            _distance = __zlib__C_DEFLATE_LZ77_DISTANCE[_code + 1];
            _extra_bits = __zlib__C_LZ77_DISTANCE_EXTEND_BITS[_code + 1]
            if (_extra_bits > 0) {
                _distance += _extra_distance = stream__read_bits(istream, _extra_bits);
            }

            #=# '${__pp_trace__zip_debug3+"$(cut -d\# -f3-<<<'
            #=#     if (_st > 0) {
            #=#         TRACE("\n");
            #=#         _st = 0;
            #=#     }
            #=#     TRACE3("[zip] <COPY> code: %d, length: %d, distance: %d\n", \
            #=#            _code, _length, _distance);
            #=# ')"}'

            # slide window copy
            stream__lz77_copy(ostream, _distance, _length);
        }
    }

    return (0);
}
# }}}
# }}}
# {{{ @module zip, functions for zip container
# {{{ zip__init
function \
zip__init(    _status) {
    if (__zip__init_guard) {
        return (1);
    }

    # required modules
    _status = zlib__init();
    if (_status < 0) {
        return _status;
    }
    _status = stream__init();
    if (_status < 0) {
        return _status;
    }

    __zip__init_guard = 1;

    return (0);
}
# }}}
# {{{ zip__unpack_directories
function \
zip__unpack_directories( \
    stream, store, \
    \
    _store, _count, _status, _offset, _i, \
    _file_name \
) {
    if (stream__rsearch(stream, "PK\005\006") < 0) {
        E__message = "Zip: cannot find the end of central directory"
        return (-1);
    }

    #
    # [APPNOTE.TXT] 4.3.16  End of central directory record:
    #
    _status = __zip__unpack_end_of_central_directory_record(stream, store);
    if (_status < 0) {
        return _status;
    }

    # seek to the start of central directory header array
    _offset = astore__get( \
        store, \
        "End of central directory header/offset of " \
        "start of central directory");
    stream__iseek(stream, _offset);

    _count = astore__get( \
        store, \
        "End of central directory header/total number of " \
        "entries in the central directory");
    #
    # [APPNOTE.TXT] 4.3.12  Central directory structure
    #
    for (_i = 1; _i <= _count; ++_i) {
        astore__fork(store, "Central directory structure/" _i, _store);
        _status = __zip__unpack_central_header(stream, _store, 0);
        if (_status < 0) {
            return _status;
        }
        _file_name = astore__get(_store, "file name");
        if (astore__set( \
                store, \
                "@Files/" _file_name "/relative offset of local header", \
                astore__get(_store, "relative offset of local header")) < 0) {
            return (-1);
        }
    }

    return (0);
}
# }}}
# {{{ zip__unpack_file
function \
zip__unpack_file( \
    stream, store, filename, ostream, \
    \
    _store, _no, _size, _path, _status \
) {
    astore__fork(store, "@Files/" filename, _store);

    _path = "relative offset of local header";
    if (! astore__has(_store, _path)) {
        E__message = sprintf("Zip entry \"%s\" is not found.", filename);
        return (-1);
    }

    # seek to the start of local header of "xl/vbaProject.bin"
    stream__iseek(stream, astore__get(_store, _path));

    # [APPNOTE.TXT] 4.3.7  Local file header
    _status = __zip__unpack_local_file_header(stream, _store);
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    # TODO: we may have to check if encryption header exists,
    #       but OOXML spec says;
    #
    #   [ECMA-376 Part2] 7.3.6 ZIP package limitations
    #
    #       ZIP-based packages shall not include encryption as described in the
    #       ZIP Appnote.
    # '}'
    _size = astore__get(_store, "Local file header/uncompressed size");
    stream__new(ostream, _size);

    # [APPNOTE.TXT] 4.3.8  File data
    _no = 0;
    do {
        _status = zlib__inflate(stream, _store, ostream, ++_no);
        if (_status < 0) {
            return _status;
        }
    } while (_status == (0));

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return (0);
}
# }}}
# {{{ __zip__unpack_end_of_central_directory_record
# '${__pp_comment:+'
#
# [APPNOTE.TXT] 4.3.16  End of central directory record:
#
#     end of central dir signature    4 bytes  (0x06054b50)
#     number of this disk             2 bytes
#     number of the disk with the
#     start of the central directory  2 bytes
#     total number of entries in the
#     central directory on this disk  2 bytes
#     total number of entries in
#     the central directory           2 bytes
#     size of the central directory   4 bytes
#     offset of start of central
#     directory with respect to
#     the starting disk number        4 bytes
#     .ZIP file comment length        2 bytes
#     .ZIP file comment       (variable size)
#
# '}'
function \
__zip__unpack_end_of_central_directory_record( \
    stream, store, \
    \
    _store, _v, _status, _zip_file_comment_length \
) {

    astore__fork(store, "End of central directory header", _store);

    # central file header signature, must be PK\005\006
    _v = stream__read_hex_string(stream, 4);
    _status = astore__set(_store, "end of central dir signature::zipmagic," \
                                  "mustbe(504b0506)", _v);
    if (_status < 0) {
        return _status;
    }

    # number of this disk
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "number of this disk", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # number of this disk with the start of the central directory
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "number of this disk with the start of the central directory", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # total number of entries in the central directory on this disk
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "total number of entries in the central directory on this disk", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # total number of entries in the central directory
    _v = stream__read_uint16(stream);
    _status = astore__set(_store, "total number of entries in the central directory", _v);
    if (_status < 0) {
        return _status;
    }

    # size of the central directory
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "size of the central directory", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # offset of start of central directory with respect to the starting disk number
    _v = stream__read_uint32(stream);
    _status = astore__set(_store, "offset of start of central directory", _v);
    if (_status < 0) {
        return _status;
    }

    # .ZIP file comment length
    _v = _zip_file_comment_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "ZIP file comment length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # .ZIP file comment
    _v = stream__read_raw_string(stream, _zip_file_comment_length);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "ZIP file comment", _v);
        if (_status < 0) {
            return _status;
        }
    }

    return (0);
}
# }}}
# {{{ __zip__unpack_central_header
# '${__pp_comment:+'
#
# [APPNOTE.TXT] 4.3.12  Central directory structure
#
#     [central directory header 1]
#     .
#     .
#     .
#     [central directory header n]
#     [digital signature]
#
#     File header:
#
#       central file header signature   4 bytes  (0x02014b50)
#       version made by                 2 bytes
#       version needed to extract       2 bytes
#       general purpose bit flag        2 bytes
#       compression method              2 bytes
#       last mod file time              2 bytes
#       last mod file date              2 bytes
#       crc-32                          4 bytes
#       compressed size                 4 bytes
#       uncompressed size               4 bytes
#       file name length                2 bytes
#       extra field length              2 bytes
#       file comment length             2 bytes
#       disk number start               2 bytes
#       internal file attributes        2 bytes
#       external file attributes        4 bytes
#       relative offset of local header 4 bytes
#
#       file name (variable size)
#       extra field (variable size)
#       file comment (variable size)
#
# '}'
function \
__zip__unpack_central_header( \
    stream, store, no,   \
    \
    _v, _status, _file_name_length, \
    _extra_field_length, \
    _file_comment_length \
) {
    # central file header signature, must be PK\001\002
    _v = stream__read_hex_string(stream, 4);
    _status = astore__set(store, "central file header signature::zipmagic," \
                                 "mustbe(504b0102)", _v);
    if (_status < 0) {
        return _status;
    }

    # version made by
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "version made by", _v);
        if (_status < 0) {
            return _status;
        }
    }

    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "version needed to extract", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # general purpose bit flag
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "general purpose bit flag", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # compression method
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "compression method", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # last mod file time
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "last mod file time", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # last mod file date
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "last mod file date", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # crc-32
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "crc-32", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # compressed size
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "compressed size", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # uncompressed size
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "uncompressed size", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # file name length
    _v = _file_name_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "file name length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # extra field length
    _v = _extra_field_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "extra field length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # file comment length
    _v = _file_comment_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "file comment_length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # disk number start
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "disk number start", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # internal file attributes
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "internal file attributes", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # external file attributes
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "external file attributes", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # relative offset of local header
    _v = stream__read_uint32(stream);
    _status = astore__set(store, "relative offset of local header", _v);
    if (_status < 0) {
        return _status;
    }

    # file name
    _v = stream__read_raw_string(stream, _file_name_length);
    _status = astore__set(store, "file name", _v);
    if (_status < 0) {
        return _status;
    }

    # extra field
    _v = stream__read_hex_string(stream, _extra_field_length);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "extra field", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # extra field
    _v = stream__read_hex_string(stream, _file_comment_length);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(store, "file comment", _v);
        if (_status < 0) {
            return _status;
        }
    }

    return (0);
}
# }}}
# {{{ __zip__unpack_local_file_header
# '${__pp_comment:+'
#
# [APPNOTE.TXT] 4.3.7  Local file header:
#
#     local file header signature     4 bytes  (0x04034b50)
#     version needed to extract       2 bytes
#     general purpose bit flag        2 bytes
#     compression method              2 bytes
#     last mod file time              2 bytes
#     last mod file date              2 bytes
#     crc-32                          4 bytes
#     compressed size                 4 bytes
#     uncompressed size               4 bytes
#     file name length                2 bytes
#     extra field length              2 bytes
#
#     file name (variable size)
#     extra field (variable size)
#
# '}'
function \
__zip__unpack_local_file_header( \
    stream, store, \
    \
    _store, _v, _status, \
    _file_name_length, \
    _extra_field_length \
) {

    astore__fork(store, "Local file header", _store);

    # local file header signature
    _v = stream__read_hex_string(stream, 4);
    _status = astore__set(_store, \
                          "central file header signature::zipmagic," \
                          "mustbe(504b0304)", \
                          _v);
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    # version needed to extract
    #
    #     [APPNOTE.TXT] 4.4.3.2 Current minimum feature versions are as defined below:
    #
    #     1.0 - Default value
    #     1.1 - File is a volume label
    #     2.0 - File is a folder (directory)
    #     2.0 - File is compressed using Deflate compression
    #     2.0 - File is encrypted using traditional PKWARE encryption
    #     2.1 - File is compressed using Deflate64(tm)
    #     2.5 - File is compressed using PKWARE DCL Implode
    #     2.7 - File is a patch data set
    #     4.5 - File uses ZIP64 format extensions
    #     4.6 - File is compressed using BZIP2 compression*
    #     5.0 - File is encrypted using DES
    #     5.0 - File is encrypted using 3DES
    #     5.0 - File is encrypted using original RC2 encryption
    #     5.0 - File is encrypted using RC4 encryption
    #     5.1 - File is encrypted using AES encryption
    #     5.1 - File is encrypted using corrected RC2 encryption**
    #     5.2 - File is encrypted using corrected RC2-64 encryption**
    #     6.1 - File is encrypted using non-OAEP key wrapping***
    #     6.2 - Central directory encryption
    #     6.3 - File is compressed using LZMA
    #     6.3 - File is compressed using PPMd+
    #     6.3 - File is encrypted using Blowfish
    #     6.3 - File is encrypted using Twofish
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "version needed to extract::uint8,le(20)", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # general purpose bit flag
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "general purpose bit flag", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # '${__pp_comment:+'
    # compression method
    #
    #     4.4.5 compression method: (2 bytes)
    #
    #      0 - The file is stored (no compression)
    #      1 - The file is Shrunk
    #      2 - The file is Reduced with compression factor 1
    #      3 - The file is Reduced with compression factor 2
    #      4 - The file is Reduced with compression factor 3
    #      5 - The file is Reduced with compression factor 4
    #      6 - The file is Imploded
    #      7 - Reserved for Tokenizing compression algorithm
    #      8 - The file is Deflated
    #      9 - Enhanced Deflating using Deflate64(tm)
    #     10 - PKWARE Data Compression Library Imploding (old IBM TERSE)
    #     11 - Reserved by PKWARE
    #     12 - File is compressed using BZIP2 algorithm
    #     13 - Reserved by PKWARE
    #     14 - LZMA
    #     15 - Reserved by PKWARE
    #     16 - IBM z/OS CMPSC Compression
    #     17 - Reserved by PKWARE
    #     18 - File is compressed using IBM TERSE (new)
    #     19 - IBM LZ77 z Architecture
    #     20 - deprecated (use method 93 for zstd)
    #     93 - Zstandard (zstd) Compression
    #     94 - MP3 Compression
    #     95 - XZ Compression
    #     96 - JPEG variant
    #     97 - WavPack compressed data
    #     98 - PPMd version I, Rev 1
    #     99 - AE-x encryption marker (see APPENDIX E)
    #
    # [ECMA-376 Part2] 7.3.6 ZIP package limitations
    #
    # ZIP-based packages shall not use compression algorithms except DEFLATE,
    # as described in the ZIP Appnote.
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "compression method::uint16,mustbe(8)", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # last mod file time
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "last mod file time", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # last mod file date
    _v = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "last mod file date", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # crc-32
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "crc-32", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # compressed size
    _v = stream__read_uint32(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "compressed size", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # compressed size
    _v = stream__read_uint32(stream);
    _status = astore__set(_store, "uncompressed size", _v);
    if (_status < 0) {
        return _status;
    }

    # file name length
    _v = _file_name_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "file name length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # extra field length
    _v = _extra_field_length = stream__read_uint16(stream);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "extra field length", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # file name
    _v = stream__read_raw_string(stream, _file_name_length);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "file name", _v);
        if (_status < 0) {
            return _status;
        }
    }

    # extra field
    _v = stream__read_hex_string(stream, _extra_field_length);
    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        _status = astore__set(_store, "extra field", _v);
        if (_status < 0) {
            return _status;
        }
    }

    return (0);
}
# }}}
# }}}
# {{{ @module pcode, P-code analysis
# {{{ __pcode__pack2
function __pcode__pack2(arg1, arg2) {
    return arg1 + arg2 * 16;
}
# }}}
# {{{ __pcode__pack3
function __pcode__pack3(arg1, arg2, arg3) {
    return arg1 + arg2 * 16 + arg3 * 256;
}
# }}}
# {{{ __pcode__pack4
function __pcode__pack4(arg1, arg2, arg3, arg4) {
    return arg1 + arg2 * 16 + arg3 * 256 + arg3 * 4096;
}
# }}}
# {{{ pcode__init
function pcode__init(    _status) {

    if (__pcode__init_guard) {
        return (1);
    }

    _status = pcode__class_init();
    if (_status < 0) {
        return _status;
    }

    pcode__E_NOTIMPL      = -16385;
    pcode__E_FAIL         = -16389;
    pcode__E_ACCESSDENIED = -458757;
    pcode__E_UNEXPECTED   = -65535;
    pcode__S_OK           = 0;
    pcode__S_FALSE        = 1;

    __pcode__init_guard = 1;

    return (0);
}
# }}}
# {{{ pcode__class_init
function pcode__class_init(    _v, _store) {

    __pcode_M_vba_version        = 1;
    __pcode_M_is_64bit           = 2;
    __pcode_M_has_unicoderef     = 3;
    __pcode_M_has_unicodename    = 4;
    __pcode_M_has_nonunicodename = 5;
    __pcode_M_IDT_offset         = 6;
    __pcode_M_DCT_offset         = 7;
    __pcode_M_OBT_offset         = 8;
    __pcode_M_code_offset        = 9;
    __pcode_C_header_offset      = 9;

    # translated from pcodedump.py:338 opcodes
    __pcode__C_op_Imp                   =   1;
    __pcode__C_op_Eqv                   =   2;
    __pcode__C_op_Xor                   =   3;
    __pcode__C_op_Or                    =   4;
    __pcode__C_op_And                   =   5;
    __pcode__C_op_Eq                    =   6;
    __pcode__C_op_Ne                    =   7;
    __pcode__C_op_Le                    =   8;
    __pcode__C_op_Ge                    =   9;
    __pcode__C_op_Lt                    =  10;
    __pcode__C_op_Gt                    =  11;
    __pcode__C_op_Add                   =  12;
    __pcode__C_op_Sub                   =  13;
    __pcode__C_op_Mod                   =  14;
    __pcode__C_op_IDiv                  =  15;
    __pcode__C_op_Mul                   =  16;
    __pcode__C_op_Div                   =  17;
    __pcode__C_op_Concat                =  18;
    __pcode__C_op_Like                  =  19;
    __pcode__C_op_Pwr                   =  20;
    __pcode__C_op_Is                    =  21;
    __pcode__C_op_Not                   =  22;
    __pcode__C_op_UMi                   =  23;
    __pcode__C_op_FnAbs                 =  24;
    __pcode__C_op_FnFix                 =  25;
    __pcode__C_op_FnInt                 =  26;
    __pcode__C_op_FnSgn                 =  27;
    __pcode__C_op_FnLen                 =  28;
    __pcode__C_op_FnLenB                =  29;
    __pcode__C_op_Paren                 =  30;
    __pcode__C_op_Sharp                 =  31;
    __pcode__C_op_LdLHS                 =  32;
    __pcode__C_op_Ld                    =  33;
    __pcode__C_op_MemLd                 =  34;
    __pcode__C_op_DictLd                =  35;
    __pcode__C_op_IndexLd               =  36;
    __pcode__C_op_ArgsLd                =  37;
    __pcode__C_op_ArgsMemLd             =  38;
    __pcode__C_op_ArgsDictLd            =  39;
    __pcode__C_op_St                    =  40;
    __pcode__C_op_MemSt                 =  41;
    __pcode__C_op_DictSt                =  42;
    __pcode__C_op_IndexSt               =  43;
    __pcode__C_op_ArgsSt                =  44;
    __pcode__C_op_ArgsMemSt             =  45;
    __pcode__C_op_ArgsDictSt            =  46;
    __pcode__C_op_Set                   =  47;
    __pcode__C_op_Memset                =  48;
    __pcode__C_op_Dictset               =  49;
    __pcode__C_op_Indexset              =  50;
    __pcode__C_op_ArgsSet               =  51;
    __pcode__C_op_ArgsMemSet            =  52;
    __pcode__C_op_ArgsDictSet           =  53;
    __pcode__C_op_MemLdWith             =  54;
    __pcode__C_op_DictLdWith            =  55;
    __pcode__C_op_ArgsMemLdWith         =  56;
    __pcode__C_op_ArgsDictLdWith        =  57;
    __pcode__C_op_MemStWith             =  58;
    __pcode__C_op_DictStWith            =  59;
    __pcode__C_op_ArgsMemStWith         =  60;
    __pcode__C_op_ArgsDictStWith        =  61;
    __pcode__C_op_MemSetWith            =  62;
    __pcode__C_op_DictSetWith           =  63;
    __pcode__C_op_ArgsMemSetWith        =  64;
    __pcode__C_op_ArgsDictSetWith       =  65;
    __pcode__C_op_ArgsCall              =  66;
    __pcode__C_op_ArgsMemCall           =  67;
    __pcode__C_op_ArgsMemCallWith       =  68;
    __pcode__C_op_ArgsArray             =  69;
    __pcode__C_op_Assert                =  70;
    __pcode__C_op_BoS                   =  71;
    __pcode__C_op_BoSImplicit           =  72;
    __pcode__C_op_BoL                   =  73;
    __pcode__C_op_LdAddressOf           =  74;
    __pcode__C_op_MemAddressOf          =  75;
    __pcode__C_op_Case                  =  76;
    __pcode__C_op_CaseTo                =  77;
    __pcode__C_op_CaseGt                =  78;
    __pcode__C_op_CaseLt                =  79;
    __pcode__C_op_CaseGe                =  80;
    __pcode__C_op_CaseLe                =  81;
    __pcode__C_op_CaseNe                =  82;
    __pcode__C_op_CaseEq                =  83;
    __pcode__C_op_CaseElse              =  84;
    __pcode__C_op_CaseDone              =  85;
    __pcode__C_op_Circle                =  86;
    __pcode__C_op_Close                 =  87;
    __pcode__C_op_CloseAll              =  88;
    __pcode__C_op_Coerce                =  89;
    __pcode__C_op_CoerceVar             =  90;
    __pcode__C_op_Context               =  91;
    __pcode__C_op_Debug                 =  92;
    __pcode__C_op_DefType               =  93;
    __pcode__C_op_Dim                   =  94;
    __pcode__C_op_DimImplicit           =  95;
    __pcode__C_op_Do                    =  96;
    __pcode__C_op_DoEvents              =  97;
    __pcode__C_op_DoUnitil              =  98;
    __pcode__C_op_DoWhile               =  99;
    __pcode__C_op_Else                  = 100;
    __pcode__C_op_ElseBlock             = 101;
    __pcode__C_op_ElseIfBlock           = 102;
    __pcode__C_op_ElseIfTypeBlock       = 103;
    __pcode__C_op_End                   = 104;
    __pcode__C_op_EndContext            = 105;
    __pcode__C_op_EndFunc               = 106;
    __pcode__C_op_EndIf                 = 107;
    __pcode__C_op_EndIfBlock            = 108;
    __pcode__C_op_EndImmediate          = 109;
    __pcode__C_op_EndProp               = 110;
    __pcode__C_op_EndSelect             = 111;
    __pcode__C_op_EndSub                = 112;
    __pcode__C_op_EndType               = 113;
    __pcode__C_op_EndWith               = 114;
    __pcode__C_op_Erase                 = 115;
    __pcode__C_op_Error                 = 116;
    __pcode__C_op_EventDecl             = 117;
    __pcode__C_op_RaiseEvent            = 118;
    __pcode__C_op_ArgsMemRaiseEvent     = 119;
    __pcode__C_op_ArgsMemRaiseEventWith = 120;
    __pcode__C_op_ExitDo                = 121;
    __pcode__C_op_ExitFor               = 122;
    __pcode__C_op_ExitFunc              = 123;
    __pcode__C_op_ExitProp              = 124;
    __pcode__C_op_ExitSub               = 125;
    __pcode__C_op_FnCurDir              = 126;
    __pcode__C_op_FnDir                 = 127;
    __pcode__C_op_Empty1                = 127;
    __pcode__C_op_Empty2                = 128;
    __pcode__C_op_FnError               = 130;
    __pcode__C_op_FnFormat              = 131;
    __pcode__C_op_FnFreeFile            = 132;
    __pcode__C_op_FnInStr               = 133;
    __pcode__C_op_FnInStr4              = 133;
    __pcode__C_op_FnInStr5              = 134;
    __pcode__C_op_FnInStrB              = 136;
    __pcode__C_op_FnInStrB4             = 136;
    __pcode__C_op_FnInStrB5             = 137;
    __pcode__C_op_FnLBound              = 139;
    __pcode__C_op_FnMid                 = 140;
    __pcode__C_op_FnMidB                = 141;
    __pcode__C_op_FnStrComp             = 142;
    __pcode__C_op_FnStrComp4            = 142;
    __pcode__C_op_FnStringVar           = 144;
    __pcode__C_op_FnStringStr           = 145;
    __pcode__C_op_FnUBound              = 146;
    __pcode__C_op_For                   = 147;
    __pcode__C_op_ForEach               = 148;
    __pcode__C_op_ForEachAs             = 149;
    __pcode__C_op_ForStep               = 150;
    __pcode__C_op_FuncDefn              = 151;
    __pcode__C_op_FuncDefnSave          = 152;
    __pcode__C_op_GetRec                = 153;
    __pcode__C_op_GoSub                 = 154;
    __pcode__C_op_GoTo                  = 155;
    __pcode__C_op_If                    = 156;
    __pcode__C_op_IfBlock               = 157;
    __pcode__C_op_TypeOf                = 158;
    __pcode__C_op_IfTypeBlock           = 159;
    __pcode__C_op_Implements            = 160;
    __pcode__C_op_Input                 = 161;
    __pcode__C_op_InputDone             = 162;
    __pcode__C_op_InputItem             = 163;
    __pcode__C_op_Label                 = 164;
    __pcode__C_op_Let                   = 165;
    __pcode__C_op_Line                  = 166;
    __pcode__C_op_LineCont              = 167;
    __pcode__C_op_LineInput             = 168;
    __pcode__C_op_LineNum               = 169;
    __pcode__C_op_LitCy                 = 170;
    __pcode__C_op_LitDate               = 171;
    __pcode__C_op_LitDefault            = 172;
    __pcode__C_op_LitDI3                = 172;
    __pcode__C_op_LitDI5                = 173;
    __pcode__C_op_LitDI9                = 174;
    __pcode__C_op_LitHI3                = 175;
    __pcode__C_op_LitHI5                = 176;
    __pcode__C_op_LitHI9                = 177;
    __pcode__C_op_LitNothing            = 179;
    __pcode__C_op_LitOI3                = 179;
    __pcode__C_op_LitOI5                = 180;
    __pcode__C_op_LitOI9                = 181;
    __pcode__C_op_LitR5                 = 182;
    __pcode__C_op_LitR9                 = 183;
    __pcode__C_op_LitSmallI3            = 184;
    __pcode__C_op_LitStr                = 186;
    __pcode__C_op_LitVarSpecial         = 187;
    __pcode__C_op_Lock                  = 188;
    __pcode__C_op_Loop                  = 189;
    __pcode__C_op_LoopUntil             = 190;
    __pcode__C_op_LoopWhile             = 191;
    __pcode__C_op_LSet                  = 192;
    __pcode__C_op_Me                    = 193;
    __pcode__C_op_MeImplicit            = 194;
    __pcode__C_op_MemRedim              = 195;
    __pcode__C_op_MemRedimWith          = 196;
    __pcode__C_op_MemRedimAs            = 197;
    __pcode__C_op_MemRedimAsWith        = 198;
    __pcode__C_op_Mid                   = 199;
    __pcode__C_op_MidB                  = 200;
    __pcode__C_op_Name                  = 201;
    __pcode__C_op_New                   = 202;
    __pcode__C_op_Next                  = 203;
    __pcode__C_op_NextVar               = 204;
    __pcode__C_op_OnError               = 205;
    __pcode__C_op_OnGosub               = 206;
    __pcode__C_op_OnGoto                = 207;
    __pcode__C_op_Open                  = 208;
    __pcode__C_op_Option                = 209;
    __pcode__C_op_OptionBase            = 210;
    __pcode__C_op_ParamByVal            = 211;
    __pcode__C_op_ParamOmitted          = 212;
    __pcode__C_op_ParamNamed            = 213;
    __pcode__C_op_PrintChan             = 214;
    __pcode__C_op_PrintComma            = 215;
    __pcode__C_op_PrintEoS              = 216;
    __pcode__C_op_PrintItemComma        = 217;
    __pcode__C_op_PrintItemNL           = 218;
    __pcode__C_op_PrintItemSemi         = 219;
    __pcode__C_op_PrintNL               = 220;
    __pcode__C_op_PrintObj              = 221;
    __pcode__C_op_PrintSemi             = 222;
    __pcode__C_op_PrintSpc              = 223;
    __pcode__C_op_PrintTab              = 224;
    __pcode__C_op_PrintTabComma         = 225;
    __pcode__C_op_PSet                  = 226;
    __pcode__C_op_PutRec                = 227;
    __pcode__C_op_QuoteRem              = 228;
    __pcode__C_op_Redim                 = 229;
    __pcode__C_op_RedimAs               = 230;
    __pcode__C_op_Reparse               = 231;
    __pcode__C_op_Rem                   = 232;
    __pcode__C_op_Resume                = 233;
    __pcode__C_op_Return                = 234;
    __pcode__C_op_RSet                  = 235;
    __pcode__C_op_Scale                 = 236;
    __pcode__C_op_Seek                  = 237;
    __pcode__C_op_SelectCase            = 238;
    __pcode__C_op_SelectIs              = 239;
    __pcode__C_op_SelectType            = 240;
    __pcode__C_op_SetStmt               = 241;
    __pcode__C_op_Stack                 = 242;
    __pcode__C_op_Stop                  = 243;
    __pcode__C_op_Type                  = 244;
    __pcode__C_op_Unlock                = 245;
    __pcode__C_op_VarDefn               = 246;
    __pcode__C_op_Wend                  = 247;
    __pcode__C_op_While                 = 248;
    __pcode__C_op_With                  = 249;
    __pcode__C_op_WriteChan             = 250;
    __pcode__C_op_ConstFuncExpr         = 251;
    __pcode__C_op_LbConst               = 252;
    __pcode__C_op_LbIf                  = 253;
    __pcode__C_op_LbElse                = 254;
    __pcode__C_op_LbElseIf              = 255;
    __pcode__C_op_LbEndIf               = 256;
    __pcode__C_op_LbMark                = 257;
    __pcode__C_op_EndForVariable        = 258;
    __pcode__C_op_StartForVariable      = 259;
    __pcode__C_op_NewRedim              = 260;
    __pcode__C_op_StartWithExpr         = 261;
    __pcode__C_op_SetOrSt               = 262;
    __pcode__C_op_EndEnum               = 263;
    __pcode__C_op_Illegal               = 264;

    # mawk`s CY_SPLIT optimization
    split("0000000000000000000000000000000000000000000000000000000000000000" \
          "0000000000000000000000000000000000000000000000000000000000000000" \
          "0000000000000000000000000000000000000000000000000000000000000000" \
          "0000000000000000000000000000000000000000000000000000000000000000" \
          "00000000", \
          __pcode__C_op_mnemonic, \
          "");

    __pcode__C_op_mnemonic[__pcode__C_op_Imp]                   = "Imp";
    __pcode__C_op_mnemonic[__pcode__C_op_Eqv]                   = "Eqv";
    __pcode__C_op_mnemonic[__pcode__C_op_Xor]                   = "Xor";
    __pcode__C_op_mnemonic[__pcode__C_op_Or]                    = "Or";
    __pcode__C_op_mnemonic[__pcode__C_op_And]                   = "And";
    __pcode__C_op_mnemonic[__pcode__C_op_Eq]                    = "Eq";
    __pcode__C_op_mnemonic[__pcode__C_op_Ne]                    = "Ne";
    __pcode__C_op_mnemonic[__pcode__C_op_Le]                    = "Le";
    __pcode__C_op_mnemonic[__pcode__C_op_Ge]                    = "Ge";
    __pcode__C_op_mnemonic[__pcode__C_op_Lt]                    = "Lt";
    __pcode__C_op_mnemonic[__pcode__C_op_Gt]                    = "Gt";
    __pcode__C_op_mnemonic[__pcode__C_op_Add]                   = "Add";
    __pcode__C_op_mnemonic[__pcode__C_op_Sub]                   = "Sub";
    __pcode__C_op_mnemonic[__pcode__C_op_Mod]                   = "Mod";
    __pcode__C_op_mnemonic[__pcode__C_op_IDiv]                  = "IDiv";
    __pcode__C_op_mnemonic[__pcode__C_op_Mul]                   = "Mul";
    __pcode__C_op_mnemonic[__pcode__C_op_Div]                   = "Div";
    __pcode__C_op_mnemonic[__pcode__C_op_Concat]                = "Concat";
    __pcode__C_op_mnemonic[__pcode__C_op_Like]                  = "Like";
    __pcode__C_op_mnemonic[__pcode__C_op_Pwr]                   = "Pwr";
    __pcode__C_op_mnemonic[__pcode__C_op_Is]                    = "Is";
    __pcode__C_op_mnemonic[__pcode__C_op_Not]                   = "Not";
    __pcode__C_op_mnemonic[__pcode__C_op_UMi]                   = "UMi";
    __pcode__C_op_mnemonic[__pcode__C_op_FnAbs]                 = "FnAbs";
    __pcode__C_op_mnemonic[__pcode__C_op_FnFix]                 = "FnFix";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInt]                 = "FnInt";
    __pcode__C_op_mnemonic[__pcode__C_op_FnSgn]                 = "FnSgn";
    __pcode__C_op_mnemonic[__pcode__C_op_FnLen]                 = "FnLen";
    __pcode__C_op_mnemonic[__pcode__C_op_FnLenB]                = "FnLenB";
    __pcode__C_op_mnemonic[__pcode__C_op_Paren]                 = "Paren";
    __pcode__C_op_mnemonic[__pcode__C_op_Sharp]                 = "Sharp";
    __pcode__C_op_mnemonic[__pcode__C_op_LdLHS]                 = "LdLHS";
    __pcode__C_op_mnemonic[__pcode__C_op_Ld]                    = "Ld";
    __pcode__C_op_mnemonic[__pcode__C_op_MemLd]                 = "MemLd";
    __pcode__C_op_mnemonic[__pcode__C_op_DictLd]                = "DictLd";
    __pcode__C_op_mnemonic[__pcode__C_op_IndexLd]               = "IndexLd";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsLd]                = "ArgsLd";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemLd]             = "ArgsMemLd";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictLd]            = "ArgsDictLd";
    __pcode__C_op_mnemonic[__pcode__C_op_St]                    = "St";
    __pcode__C_op_mnemonic[__pcode__C_op_MemSt]                 = "MemSt";
    __pcode__C_op_mnemonic[__pcode__C_op_DictSt]                = "DictSt";
    __pcode__C_op_mnemonic[__pcode__C_op_IndexSt]               = "IndexSt";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsSt]                = "ArgsSt";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemSt]             = "ArgsMemSt";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictSt]            = "ArgsDictSt";
    __pcode__C_op_mnemonic[__pcode__C_op_Set]                   = "Set";
    __pcode__C_op_mnemonic[__pcode__C_op_Memset]                = "Memset";
    __pcode__C_op_mnemonic[__pcode__C_op_Dictset]               = "Dictset";
    __pcode__C_op_mnemonic[__pcode__C_op_Indexset]              = "Indexset";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsSet]               = "ArgsSet";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemSet]            = "ArgsMemSet";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictSet]           = "ArgsDictSet";
    __pcode__C_op_mnemonic[__pcode__C_op_MemLdWith]             = "MemLdWith";
    __pcode__C_op_mnemonic[__pcode__C_op_DictLdWith]            = "DictLdWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemLdWith]         = "ArgsMemLdWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictLdWith]        = "ArgsDictLdWith";
    __pcode__C_op_mnemonic[__pcode__C_op_MemStWith]             = "MemStWith";
    __pcode__C_op_mnemonic[__pcode__C_op_DictStWith]            = "DictStWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemStWith]         = "ArgsMemStWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictStWith]        = "ArgsDictStWith";
    __pcode__C_op_mnemonic[__pcode__C_op_MemSetWith]            = "MemSetWith";
    __pcode__C_op_mnemonic[__pcode__C_op_DictSetWith]           = "DictSetWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemSetWith]        = "ArgsMemSetWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsDictSetWith]       = "ArgsDictSetWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsCall]              = "ArgsCall";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemCall]           = "ArgsMemCall";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemCallWith]       = "ArgsMemCallWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsArray]             = "ArgsArray";
    __pcode__C_op_mnemonic[__pcode__C_op_Assert]                = "Assert";
    __pcode__C_op_mnemonic[__pcode__C_op_BoS]                   = "BoS";
    __pcode__C_op_mnemonic[__pcode__C_op_BoSImplicit]           = "BoSImplicit";
    __pcode__C_op_mnemonic[__pcode__C_op_BoL]                   = "BoL";
    __pcode__C_op_mnemonic[__pcode__C_op_LdAddressOf]           = "LdAddressOf";
    __pcode__C_op_mnemonic[__pcode__C_op_MemAddressOf]          = "MemAddressOf";
    __pcode__C_op_mnemonic[__pcode__C_op_Case]                  = "Case";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseTo]                = "CaseTo";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseGt]                = "CaseGt";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseLt]                = "CaseLt";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseGe]                = "CaseGe";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseLe]                = "CaseLe";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseNe]                = "CaseNe";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseEq]                = "CaseEq";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseElse]              = "CaseElse";
    __pcode__C_op_mnemonic[__pcode__C_op_CaseDone]              = "CaseDone";
    __pcode__C_op_mnemonic[__pcode__C_op_Circle]                = "Circle";
    __pcode__C_op_mnemonic[__pcode__C_op_Close]                 = "Close";
    __pcode__C_op_mnemonic[__pcode__C_op_CloseAll]              = "CloseAll";
    __pcode__C_op_mnemonic[__pcode__C_op_Coerce]                = "Coerce";
    __pcode__C_op_mnemonic[__pcode__C_op_CoerceVar]             = "CoerceVar";
    __pcode__C_op_mnemonic[__pcode__C_op_Context]               = "Context";
    __pcode__C_op_mnemonic[__pcode__C_op_Debug]                 = "Debug";
    __pcode__C_op_mnemonic[__pcode__C_op_DefType]               = "DefType";
    __pcode__C_op_mnemonic[__pcode__C_op_Dim]                   = "Dim";
    __pcode__C_op_mnemonic[__pcode__C_op_DimImplicit]           = "DimImplicit";
    __pcode__C_op_mnemonic[__pcode__C_op_Do]                    = "Do";
    __pcode__C_op_mnemonic[__pcode__C_op_DoEvents]              = "DoEvents";
    __pcode__C_op_mnemonic[__pcode__C_op_DoUnitil]              = "DoUnitil";
    __pcode__C_op_mnemonic[__pcode__C_op_DoWhile]               = "DoWhile";
    __pcode__C_op_mnemonic[__pcode__C_op_Else]                  = "Else";
    __pcode__C_op_mnemonic[__pcode__C_op_ElseBlock]             = "ElseBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_ElseIfBlock]           = "ElseIfBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_ElseIfTypeBlock]       = "ElseIfTypeBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_End]                   = "End";
    __pcode__C_op_mnemonic[__pcode__C_op_EndContext]            = "EndContext";
    __pcode__C_op_mnemonic[__pcode__C_op_EndFunc]               = "EndFunc";
    __pcode__C_op_mnemonic[__pcode__C_op_EndIf]                 = "EndIf";
    __pcode__C_op_mnemonic[__pcode__C_op_EndIfBlock]            = "EndIfBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_EndImmediate]          = "EndImmediate";
    __pcode__C_op_mnemonic[__pcode__C_op_EndProp]               = "EndProp";
    __pcode__C_op_mnemonic[__pcode__C_op_EndSelect]             = "EndSelect";
    __pcode__C_op_mnemonic[__pcode__C_op_EndSub]                = "EndSub";
    __pcode__C_op_mnemonic[__pcode__C_op_EndType]               = "EndType";
    __pcode__C_op_mnemonic[__pcode__C_op_EndWith]               = "EndWith";
    __pcode__C_op_mnemonic[__pcode__C_op_Erase]                 = "Erase";
    __pcode__C_op_mnemonic[__pcode__C_op_Error]                 = "Error";
    __pcode__C_op_mnemonic[__pcode__C_op_EventDecl]             = "EventDecl";
    __pcode__C_op_mnemonic[__pcode__C_op_RaiseEvent]            = "RaiseEvent";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemRaiseEvent]     = "ArgsMemRaiseEvent";
    __pcode__C_op_mnemonic[__pcode__C_op_ArgsMemRaiseEventWith] = "ArgsMemRaiseEventWith";
    __pcode__C_op_mnemonic[__pcode__C_op_ExitDo]                = "ExitDo";
    __pcode__C_op_mnemonic[__pcode__C_op_ExitFor]               = "ExitFor";
    __pcode__C_op_mnemonic[__pcode__C_op_ExitFunc]              = "ExitFunc";
    __pcode__C_op_mnemonic[__pcode__C_op_ExitProp]              = "ExitProp";
    __pcode__C_op_mnemonic[__pcode__C_op_ExitSub]               = "ExitSub";
    __pcode__C_op_mnemonic[__pcode__C_op_FnCurDir]              = "FnCurDir";
    __pcode__C_op_mnemonic[__pcode__C_op_FnDir]                 = "FnDir";
    __pcode__C_op_mnemonic[__pcode__C_op_Empty0]                = "Empty0";
    __pcode__C_op_mnemonic[__pcode__C_op_Empty1]                = "Empty1";
    __pcode__C_op_mnemonic[__pcode__C_op_FnError]               = "FnError";
    __pcode__C_op_mnemonic[__pcode__C_op_FnFormat]              = "FnFormat";
    __pcode__C_op_mnemonic[__pcode__C_op_FnFreeFile]            = "FnFreeFile";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStr]               = "FnInStr";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStr3]              = "FnInStr3";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStr4]              = "FnInStr4";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStrB]              = "FnInStrB";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStrB3]             = "FnInStrB3";
    __pcode__C_op_mnemonic[__pcode__C_op_FnInStrB4]             = "FnInStrB4";
    __pcode__C_op_mnemonic[__pcode__C_op_FnLBound]              = "FnLBound";
    __pcode__C_op_mnemonic[__pcode__C_op_FnMid]                 = "FnMid";
    __pcode__C_op_mnemonic[__pcode__C_op_FnMidB]                = "FnMidB";
    __pcode__C_op_mnemonic[__pcode__C_op_FnStrComp]             = "FnStrComp";
    __pcode__C_op_mnemonic[__pcode__C_op_FnStrComp3]            = "FnStrComp3";
    __pcode__C_op_mnemonic[__pcode__C_op_FnStringVar]           = "FnStringVar";
    __pcode__C_op_mnemonic[__pcode__C_op_FnStringStr]           = "FnStringStr";
    __pcode__C_op_mnemonic[__pcode__C_op_FnUBound]              = "FnUBound";
    __pcode__C_op_mnemonic[__pcode__C_op_For]                   = "For";
    __pcode__C_op_mnemonic[__pcode__C_op_ForEach]               = "ForEach";
    __pcode__C_op_mnemonic[__pcode__C_op_ForEachAs]             = "ForEachAs";
    __pcode__C_op_mnemonic[__pcode__C_op_ForStep]               = "ForStep";
    __pcode__C_op_mnemonic[__pcode__C_op_FuncDefn]              = "FuncDefn";
    __pcode__C_op_mnemonic[__pcode__C_op_FuncDefnSave]          = "FuncDefnSave";
    __pcode__C_op_mnemonic[__pcode__C_op_GetRec]                = "GetRec";
    __pcode__C_op_mnemonic[__pcode__C_op_GoSub]                 = "GoSub";
    __pcode__C_op_mnemonic[__pcode__C_op_GoTo]                  = "GoTo";
    __pcode__C_op_mnemonic[__pcode__C_op_If]                    = "If";
    __pcode__C_op_mnemonic[__pcode__C_op_IfBlock]               = "IfBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_TypeOf]                = "TypeOf";
    __pcode__C_op_mnemonic[__pcode__C_op_IfTypeBlock]           = "IfTypeBlock";
    __pcode__C_op_mnemonic[__pcode__C_op_Implements]            = "Implements";
    __pcode__C_op_mnemonic[__pcode__C_op_Input]                 = "Input";
    __pcode__C_op_mnemonic[__pcode__C_op_InputDone]             = "InputDone";
    __pcode__C_op_mnemonic[__pcode__C_op_InputItem]             = "InputItem";
    __pcode__C_op_mnemonic[__pcode__C_op_Label]                 = "Label";
    __pcode__C_op_mnemonic[__pcode__C_op_Let]                   = "Let";
    __pcode__C_op_mnemonic[__pcode__C_op_Line]                  = "Line";
    __pcode__C_op_mnemonic[__pcode__C_op_LineCont]              = "LineCont";
    __pcode__C_op_mnemonic[__pcode__C_op_LineInput]             = "LineInput";
    __pcode__C_op_mnemonic[__pcode__C_op_LineNum]               = "LineNum";
    __pcode__C_op_mnemonic[__pcode__C_op_LitCy]                 = "LitCy";
    __pcode__C_op_mnemonic[__pcode__C_op_LitDate]               = "LitDate";
    __pcode__C_op_mnemonic[__pcode__C_op_LitDefault]            = "LitDefault";
    __pcode__C_op_mnemonic[__pcode__C_op_LitDI2]                = "LitDI2";
    __pcode__C_op_mnemonic[__pcode__C_op_LitDI4]                = "LitDI4";
    __pcode__C_op_mnemonic[__pcode__C_op_LitDI8]                = "LitDI8";
    __pcode__C_op_mnemonic[__pcode__C_op_LitHI2]                = "LitHI2";
    __pcode__C_op_mnemonic[__pcode__C_op_LitHI4]                = "LitHI4";
    __pcode__C_op_mnemonic[__pcode__C_op_LitHI8]                = "LitHI8";
    __pcode__C_op_mnemonic[__pcode__C_op_LitNothing]            = "LitNothing";
    __pcode__C_op_mnemonic[__pcode__C_op_LitOI2]                = "LitOI2";
    __pcode__C_op_mnemonic[__pcode__C_op_LitOI4]                = "LitOI4";
    __pcode__C_op_mnemonic[__pcode__C_op_LitOI8]                = "LitOI8";
    __pcode__C_op_mnemonic[__pcode__C_op_LitR4]                 = "LitR4";
    __pcode__C_op_mnemonic[__pcode__C_op_LitR8]                 = "LitR8";
    __pcode__C_op_mnemonic[__pcode__C_op_LitSmallI2]            = "LitSmallI2";
    __pcode__C_op_mnemonic[__pcode__C_op_LitStr]                = "LitStr";
    __pcode__C_op_mnemonic[__pcode__C_op_LitVarSpecial]         = "LitVarSpecial";
    __pcode__C_op_mnemonic[__pcode__C_op_Lock]                  = "Lock";
    __pcode__C_op_mnemonic[__pcode__C_op_Loop]                  = "Loop";
    __pcode__C_op_mnemonic[__pcode__C_op_LoopUntil]             = "LoopUntil";
    __pcode__C_op_mnemonic[__pcode__C_op_LoopWhile]             = "LoopWhile";
    __pcode__C_op_mnemonic[__pcode__C_op_LSet]                  = "LSet";
    __pcode__C_op_mnemonic[__pcode__C_op_Me]                    = "Me";
    __pcode__C_op_mnemonic[__pcode__C_op_MeImplicit]            = "MeImplicit";
    __pcode__C_op_mnemonic[__pcode__C_op_MemRedim]              = "MemRedim";
    __pcode__C_op_mnemonic[__pcode__C_op_MemRedimWith]          = "MemRedimWith";
    __pcode__C_op_mnemonic[__pcode__C_op_MemRedimAs]            = "MemRedimAs";
    __pcode__C_op_mnemonic[__pcode__C_op_MemRedimAsWith]        = "MemRedimAsWith";
    __pcode__C_op_mnemonic[__pcode__C_op_Mid]                   = "Mid";
    __pcode__C_op_mnemonic[__pcode__C_op_MidB]                  = "MidB";
    __pcode__C_op_mnemonic[__pcode__C_op_Name]                  = "Name";
    __pcode__C_op_mnemonic[__pcode__C_op_New]                   = "New";
    __pcode__C_op_mnemonic[__pcode__C_op_Next]                  = "Next";
    __pcode__C_op_mnemonic[__pcode__C_op_NextVar]               = "NextVar";
    __pcode__C_op_mnemonic[__pcode__C_op_OnError]               = "OnError";
    __pcode__C_op_mnemonic[__pcode__C_op_OnGosub]               = "OnGosub";
    __pcode__C_op_mnemonic[__pcode__C_op_OnGoto]                = "OnGoto";
    __pcode__C_op_mnemonic[__pcode__C_op_Open]                  = "Open";
    __pcode__C_op_mnemonic[__pcode__C_op_Option]                = "Option";
    __pcode__C_op_mnemonic[__pcode__C_op_OptionBase]            = "OptionBase";
    __pcode__C_op_mnemonic[__pcode__C_op_ParamByVal]            = "ParamByVal";
    __pcode__C_op_mnemonic[__pcode__C_op_ParamOmitted]          = "ParamOmitted";
    __pcode__C_op_mnemonic[__pcode__C_op_ParamNamed]            = "ParamNamed";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintChan]             = "PrintChan";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintComma]            = "PrintComma";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintEoS]              = "PrintEoS";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintItemComma]        = "PrintItemComma";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintItemNL]           = "PrintItemNL";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintItemSemi]         = "PrintItemSemi";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintNL]               = "PrintNL";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintObj]              = "PrintObj";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintSemi]             = "PrintSemi";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintSpc]              = "PrintSpc";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintTab]              = "PrintTab";
    __pcode__C_op_mnemonic[__pcode__C_op_PrintTabComma]         = "PrintTabComma";
    __pcode__C_op_mnemonic[__pcode__C_op_PSet]                  = "PSet";
    __pcode__C_op_mnemonic[__pcode__C_op_PutRec]                = "PutRec";
    __pcode__C_op_mnemonic[__pcode__C_op_QuoteRem]              = "QuoteRem";
    __pcode__C_op_mnemonic[__pcode__C_op_Redim]                 = "Redim";
    __pcode__C_op_mnemonic[__pcode__C_op_RedimAs]               = "RedimAs";
    __pcode__C_op_mnemonic[__pcode__C_op_Reparse]               = "Reparse";
    __pcode__C_op_mnemonic[__pcode__C_op_Rem]                   = "Rem";
    __pcode__C_op_mnemonic[__pcode__C_op_Resume]                = "Resume";
    __pcode__C_op_mnemonic[__pcode__C_op_Return]                = "Return";
    __pcode__C_op_mnemonic[__pcode__C_op_RSet]                  = "RSet";
    __pcode__C_op_mnemonic[__pcode__C_op_Scale]                 = "Scale";
    __pcode__C_op_mnemonic[__pcode__C_op_Seek]                  = "Seek";
    __pcode__C_op_mnemonic[__pcode__C_op_SelectCase]            = "SelectCase";
    __pcode__C_op_mnemonic[__pcode__C_op_SelectIs]              = "SelectIs";
    __pcode__C_op_mnemonic[__pcode__C_op_SelectType]            = "SelectType";
    __pcode__C_op_mnemonic[__pcode__C_op_SetStmt]               = "SetStmt";
    __pcode__C_op_mnemonic[__pcode__C_op_Stack]                 = "Stack";
    __pcode__C_op_mnemonic[__pcode__C_op_Stop]                  = "Stop";
    __pcode__C_op_mnemonic[__pcode__C_op_Type]                  = "Type";
    __pcode__C_op_mnemonic[__pcode__C_op_Unlock]                = "Unlock";
    __pcode__C_op_mnemonic[__pcode__C_op_VarDefn]               = "VarDefn";
    __pcode__C_op_mnemonic[__pcode__C_op_Wend]                  = "Wend";
    __pcode__C_op_mnemonic[__pcode__C_op_While]                 = "While";
    __pcode__C_op_mnemonic[__pcode__C_op_With]                  = "With";
    __pcode__C_op_mnemonic[__pcode__C_op_WriteChan]             = "WriteChan";
    __pcode__C_op_mnemonic[__pcode__C_op_ConstFuncExpr]         = "ConstFuncExpr";
    __pcode__C_op_mnemonic[__pcode__C_op_LbConst]               = "LbConst";
    __pcode__C_op_mnemonic[__pcode__C_op_LbIf]                  = "LbIf";
    __pcode__C_op_mnemonic[__pcode__C_op_LbElse]                = "LbElse";
    __pcode__C_op_mnemonic[__pcode__C_op_LbElseIf]              = "LbElseIf";
    __pcode__C_op_mnemonic[__pcode__C_op_LbEndIf]               = "LbEndIf";
    __pcode__C_op_mnemonic[__pcode__C_op_LbMark]                = "LbMark";
    __pcode__C_op_mnemonic[__pcode__C_op_EndForVariable]        = "EndForVariable";
    __pcode__C_op_mnemonic[__pcode__C_op_StartForVariable]      = "StartForVariable";
    __pcode__C_op_mnemonic[__pcode__C_op_NewRedim]              = "NewRedim";
    __pcode__C_op_mnemonic[__pcode__C_op_StartWithExpr]         = "StartWithExpr";
    __pcode__C_op_mnemonic[__pcode__C_op_SetOrSt]               = "SetOrSt";
    __pcode__C_op_mnemonic[__pcode__C_op_EndEnum]               = "EndEnum";
    __pcode__C_op_mnemonic[__pcode__C_op_Illegal]               = "Illegal";

    AT_NAME      = 1;
    AT_IMMEDIATE = 2;
    AT_IMP       = 3;
    AT_FUNCTION  = 4;
    AT_VAR       = 5;
    AT_RECORD    = 6;
    AT_TYPE      = 7;
    AT_CONTEXT   = 8;
    AT_OPTION    = 9;
    AT_VARG      = 10;

    __pcode__C_op_args[__pcode__C_op_LdLHS]                 = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Ld]                    = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_MemLd]                 = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_DictLd]                = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_IndexLd]               = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_ArgsLd]                = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemLd]             = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictLd]            = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_St]                    = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_MemSt]                 = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_DictSt]                = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_IndexSt]               = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_ArgsSt]                = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemSt]             = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictSt]            = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_Set]                   = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Memset]                = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Dictset]               = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Indexset]              = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_ArgsSet]               = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemSet]            = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictSet]           = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_MemLdWith]             = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_DictLdWith]            = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_ArgsMemLdWith]         = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictLdWith]        = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_MemStWith]             = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_DictStWith]            = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_ArgsMemStWith]         = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictStWith]        = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_MemSetWith]            = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_DictSetWith]           = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_ArgsMemSetWith]        = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsDictSetWith]       = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsCall]              = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemCall]           = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemCallWith]       = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsArray]             = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_BoS]                   = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_LdAddressOf]           = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_MemAddressOf]          = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Circle]                = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_Close]                 = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_Context]               = AT_CONTEXT;
    __pcode__C_op_args[__pcode__C_op_DefType]               = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ElseIfTypeBlock]       = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_Erase]                 = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_EventDecl]             = AT_FUNCTION;
    __pcode__C_op_args[__pcode__C_op_RaiseEvent]            = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemRaiseEvent]     = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_ArgsMemRaiseEventWith] = __pcode__pack2(AT_NAME, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_FnLBound]              = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_FnUBound]              = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_ForEachAs]             = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_FuncDefn]              = AT_FUNCTION;
    __pcode__C_op_args[__pcode__C_op_FuncDefnSave]          = AT_FUNCTION;
    __pcode__C_op_args[__pcode__C_op_GoSub]                 = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_GoTo]                  = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_TypeOf]                = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_IfTypeBlock]           = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_Implements]            = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_Label]                 = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Line]                  = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_LineCont]              = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_LineNum]               = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_LitCy]                 = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitDate]               = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitDI2]                = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_LitDI4]                = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitDI8]                = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitHI2]                = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_LitHI4]                = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitHI8]                = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitOI2]                = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_LitOI4]                = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitOI8]                = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitR4]                 = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitR8]                 = __pcode__pack4(AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_LitStr]                = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_MemRedim]              = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_MemRedimWith]          = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_MemRedimAs]            = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_MemRedimAsWith]        = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_New]                   = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_OnError]               = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_OnGosub]               = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_OnGoto]                = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_Open]                  = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_Option]                = AT_OPTION;
    __pcode__C_op_args[__pcode__C_op_ParamNamed]            = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_PSet]                  = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_QuoteRem]              = __pcode__pack2(AT_IMMEDIATE, AT_VARG);
    __pcode__C_op_args[__pcode__C_op_Redim]                 = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_RedimAs]               = __pcode__pack3(AT_NAME, AT_IMMEDIATE, AT_TYPE);
    __pcode__C_op_args[__pcode__C_op_Rem]                   = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_Reparse]               = AT_VARG;
    __pcode__C_op_args[__pcode__C_op_Resume]                = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_Scale]                 = AT_IMMEDIATE;
    __pcode__C_op_args[__pcode__C_op_SelectIs]              = AT_IMP;
    __pcode__C_op_args[__pcode__C_op_Stack]                 = __pcode__pack2(AT_IMMEDIATE, AT_IMMEDIATE);
    __pcode__C_op_args[__pcode__C_op_Type]                  = AT_RECORD;
    __pcode__C_op_args[__pcode__C_op_VarDefn]               = AT_VAR;
    __pcode__C_op_args[__pcode__C_op_LbConst]               = AT_NAME;
    __pcode__C_op_args[__pcode__C_op_SetOrSt]               = AT_NAME;

    __pcode__C_options[1] = "Base 0";
    __pcode__C_options[2] = "Base 1";
    __pcode__C_options[3] = "Compare Text";
    __pcode__C_options[4] = "Compare Binary";
    __pcode__C_options[5] = "Explicit";
    __pcode__C_options[6] = "Private Module";

    __pcode__C_keywords[1] = "<crash>";
    __pcode__C_keywords[2] = "0";
    __pcode__C_keywords[3] = "Abs";
    __pcode__C_keywords[4] = "Access";
    __pcode__C_keywords[5] = "AddressOf";
    __pcode__C_keywords[6] = "Alias";
    __pcode__C_keywords[7] = "And";
    __pcode__C_keywords[8] = "Any";
    __pcode__C_keywords[9] = "Append";
    __pcode__C_keywords[10] = "Array";
    __pcode__C_keywords[11] = "As";
    __pcode__C_keywords[12] = "Assert";
    __pcode__C_keywords[13] = "B";
    __pcode__C_keywords[14] = "Base";
    __pcode__C_keywords[15] = "BF";
    __pcode__C_keywords[16] = "Binary";
    __pcode__C_keywords[17] = "Boolean";
    __pcode__C_keywords[18] = "ByRef";
    __pcode__C_keywords[19] = "Byte";
    __pcode__C_keywords[20] = "ByVal";
    __pcode__C_keywords[21] = "Call";
    __pcode__C_keywords[22] = "Case";
    __pcode__C_keywords[23] = "CBool";
    __pcode__C_keywords[24] = "CByte";
    __pcode__C_keywords[25] = "CCur";
    __pcode__C_keywords[26] = "CDate";
    __pcode__C_keywords[27] = "CDec";
    __pcode__C_keywords[28] = "CDbl";
    __pcode__C_keywords[29] = "CDecl";
    __pcode__C_keywords[30] = "ChDir";
    __pcode__C_keywords[31] = "CInt";
    __pcode__C_keywords[32] = "Circle";
    __pcode__C_keywords[33] = "CLng";
    __pcode__C_keywords[34] = "Close";
    __pcode__C_keywords[35] = "Compare";
    __pcode__C_keywords[36] = "Const";
    __pcode__C_keywords[37] = "CSng";
    __pcode__C_keywords[38] = "CStr";
    __pcode__C_keywords[39] = "CurDir";
    __pcode__C_keywords[40] = "CurDir$";
    __pcode__C_keywords[41] = "CVar";
    __pcode__C_keywords[42] = "CVDate";
    __pcode__C_keywords[43] = "CVErr";
    __pcode__C_keywords[44] = "Currency";
    __pcode__C_keywords[45] = "Database";
    __pcode__C_keywords[46] = "Date";
    __pcode__C_keywords[47] = "Date$";
    __pcode__C_keywords[48] = "Debug";
    __pcode__C_keywords[49] = "Decimal";
    __pcode__C_keywords[50] = "Declare";
    __pcode__C_keywords[51] = "DefBool";
    __pcode__C_keywords[52] = "DefByte";
    __pcode__C_keywords[53] = "DefCur";
    __pcode__C_keywords[54] = "DefDate";
    __pcode__C_keywords[55] = "DefDec";
    __pcode__C_keywords[56] = "DefDbl";
    __pcode__C_keywords[57] = "DefInt";
    __pcode__C_keywords[58] = "DefLng";
    __pcode__C_keywords[59] = "DefObj";
    __pcode__C_keywords[60] = "DefSng";
    __pcode__C_keywords[61] = "DefStr";
    __pcode__C_keywords[62] = "DefVar";
    __pcode__C_keywords[63] = "Dim";
    __pcode__C_keywords[64] = "Dir";
    __pcode__C_keywords[65] = "Dir$";
    __pcode__C_keywords[66] = "Do";
    __pcode__C_keywords[67] = "DoEvents";
    __pcode__C_keywords[68] = "Double";
    __pcode__C_keywords[69] = "Each";
    __pcode__C_keywords[70] = "Else";
    __pcode__C_keywords[71] = "ElseIf";
    __pcode__C_keywords[72] = "Empty";
    __pcode__C_keywords[73] = "End";
    __pcode__C_keywords[74] = "EndIf";
    __pcode__C_keywords[75] = "Enum";
    __pcode__C_keywords[76] = "Eqv";
    __pcode__C_keywords[77] = "Erase";
    __pcode__C_keywords[78] = "Error";
    __pcode__C_keywords[79] = "Error$";
    __pcode__C_keywords[80] = "Event";
    __pcode__C_keywords[81] = "WithEvents";
    __pcode__C_keywords[82] = "Explicit";
    __pcode__C_keywords[83] = "F";
    __pcode__C_keywords[84] = "False";
    __pcode__C_keywords[85] = "Fix";
    __pcode__C_keywords[86] = "For";
    __pcode__C_keywords[87] = "Format";
    __pcode__C_keywords[88] = "Format$";
    __pcode__C_keywords[89] = "FreeFile";
    __pcode__C_keywords[90] = "Friend";
    __pcode__C_keywords[91] = "Function";
    __pcode__C_keywords[92] = "Get";
    __pcode__C_keywords[93] = "Global";
    __pcode__C_keywords[94] = "Go";
    __pcode__C_keywords[95] = "GoSub";
    __pcode__C_keywords[96] = "Goto";
    __pcode__C_keywords[97] = "If";
    __pcode__C_keywords[98] = "Imp";
    __pcode__C_keywords[99] = "Implements";
    __pcode__C_keywords[100] = "In";
    __pcode__C_keywords[101] = "Input";
    __pcode__C_keywords[102] = "Input$";
    __pcode__C_keywords[103] = "InputB";
    __pcode__C_keywords[104] = "InputB";
    __pcode__C_keywords[105] = "InStr";
    __pcode__C_keywords[106] = "InputB$";
    __pcode__C_keywords[107] = "Int";
    __pcode__C_keywords[108] = "InStrB";
    __pcode__C_keywords[109] = "Is";
    __pcode__C_keywords[110] = "Integer";
    __pcode__C_keywords[111] = "Left";
    __pcode__C_keywords[112] = "LBound";
    __pcode__C_keywords[113] = "LenB";
    __pcode__C_keywords[114] = "Len";
    __pcode__C_keywords[115] = "Lib";
    __pcode__C_keywords[116] = "Let";
    __pcode__C_keywords[117] = "Line";
    __pcode__C_keywords[118] = "Like";
    __pcode__C_keywords[119] = "Load";
    __pcode__C_keywords[120] = "Local";
    __pcode__C_keywords[121] = "Lock";
    __pcode__C_keywords[122] = "Long";
    __pcode__C_keywords[123] = "Loop";
    __pcode__C_keywords[124] = "LSet";
    __pcode__C_keywords[125] = "Me";
    __pcode__C_keywords[126] = "Mid";
    __pcode__C_keywords[127] = "Mid$";
    __pcode__C_keywords[128] = "MidB";
    __pcode__C_keywords[129] = "MidB$";
    __pcode__C_keywords[130] = "Mod";
    __pcode__C_keywords[131] = "Module";
    __pcode__C_keywords[132] = "Name";
    __pcode__C_keywords[133] = "New";
    __pcode__C_keywords[134] = "Next";
    __pcode__C_keywords[135] = "Not";
    __pcode__C_keywords[136] = "Nothing";
    __pcode__C_keywords[137] = "Null";
    __pcode__C_keywords[138] = "Object";
    __pcode__C_keywords[139] = "On";
    __pcode__C_keywords[140] = "Open";
    __pcode__C_keywords[141] = "Option";
    __pcode__C_keywords[142] = "Optional";
    __pcode__C_keywords[143] = "Or";
    __pcode__C_keywords[144] = "Output";
    __pcode__C_keywords[145] = "ParamArray";
    __pcode__C_keywords[146] = "Preserve";
    __pcode__C_keywords[147] = "Print";
    __pcode__C_keywords[148] = "Private";
    __pcode__C_keywords[149] = "Property";
    __pcode__C_keywords[150] = "PSet";
    __pcode__C_keywords[151] = "Public";
    __pcode__C_keywords[152] = "Put";
    __pcode__C_keywords[153] = "RaiseEvent";
    __pcode__C_keywords[154] = "Random";
    __pcode__C_keywords[155] = "Randomize";
    __pcode__C_keywords[156] = "Read";
    __pcode__C_keywords[157] = "ReDim";
    __pcode__C_keywords[158] = "Rem";
    __pcode__C_keywords[159] = "Resume";
    __pcode__C_keywords[160] = "Return";
    __pcode__C_keywords[161] = "RGB";
    __pcode__C_keywords[162] = "RSet";
    __pcode__C_keywords[163] = "Scale";
    __pcode__C_keywords[164] = "Seek";
    __pcode__C_keywords[165] = "Select";
    __pcode__C_keywords[166] = "Set";
    __pcode__C_keywords[167] = "Sgn";
    __pcode__C_keywords[168] = "Shared";
    __pcode__C_keywords[169] = "Single";
    __pcode__C_keywords[170] = "Spc";
    __pcode__C_keywords[171] = "Static";
    __pcode__C_keywords[172] = "Step";
    __pcode__C_keywords[173] = "Stop";
    __pcode__C_keywords[174] = "StrComp";
    __pcode__C_keywords[175] = "String";
    __pcode__C_keywords[176] = "String$";
    __pcode__C_keywords[177] = "Sub";
    __pcode__C_keywords[178] = "Tab";
    __pcode__C_keywords[179] = "Text";
    __pcode__C_keywords[180] = "Then";
    __pcode__C_keywords[181] = "To";
    __pcode__C_keywords[182] = "True";
    __pcode__C_keywords[183] = "Type";
    __pcode__C_keywords[184] = "TypeOf";
    __pcode__C_keywords[185] = "UBound";
    __pcode__C_keywords[186] = "Unload";
    __pcode__C_keywords[187] = "Unlock";
    __pcode__C_keywords[188] = "Unknown";
    __pcode__C_keywords[189] = "Until";
    __pcode__C_keywords[190] = "Variant";
    __pcode__C_keywords[191] = "WEnd";
    __pcode__C_keywords[192] = "While";
    __pcode__C_keywords[193] = "Width";
    __pcode__C_keywords[194] = "With";
    __pcode__C_keywords[195] = "Write";
    __pcode__C_keywords[196] = "Xor";
    __pcode__C_keywords[197] = "#Const";
    __pcode__C_keywords[198] = "#Else";
    __pcode__C_keywords[199] = "#ElseIf";
    __pcode__C_keywords[200] = "#End";
    __pcode__C_keywords[201] = "#If";
    __pcode__C_keywords[202] = "Attribute";
    __pcode__C_keywords[203] = "VB_Base";
    __pcode__C_keywords[204] = "VB_Control";
    __pcode__C_keywords[205] = "VB_Creatable";
    __pcode__C_keywords[206] = "VB_Customizable";
    __pcode__C_keywords[207] = "VB_Description";
    __pcode__C_keywords[208] = "VB_Exposed";
    __pcode__C_keywords[209] = "VB_Ext_Key";
    __pcode__C_keywords[210] = "VB_HelpID";
    __pcode__C_keywords[211] = "VB_Invoke_Func";
    __pcode__C_keywords[212] = "VB_Invoke_Property";
    __pcode__C_keywords[213] = "VB_Invoke_PropertyPut";
    __pcode__C_keywords[214] = "VB_Invoke_PropertyPutRef";
    __pcode__C_keywords[215] = "VB_MemberFlags";
    __pcode__C_keywords[216] = "VB_Name";
    __pcode__C_keywords[217] = "VB_PredeclaredID";
    __pcode__C_keywords[218] = "VB_ProcData";
    __pcode__C_keywords[219] = "VB_TemplateDerived";
    __pcode__C_keywords[220] = "VB_VarDescription";
    __pcode__C_keywords[221] = "VB_VarHelpID";
    __pcode__C_keywords[222] = "VB_VarMemberFlags";
    __pcode__C_keywords[223] = "VB_VarProcData";
    __pcode__C_keywords[224] = "VB_UserMemID";
    __pcode__C_keywords[225] = "VB_VarUserMemID";
    __pcode__C_keywords[226] = "VB_GlobalNameSpace";
    __pcode__C_keywords[227] = ",";
    __pcode__C_keywords[228] = ".";
    __pcode__C_keywords[229] = "\"";
    __pcode__C_keywords[230] = "_";
    __pcode__C_keywords[231] = "!";
    __pcode__C_keywords[232] = "#";
    __pcode__C_keywords[233] = "&";
    __pcode__C_keywords[234] = "\047";
    __pcode__C_keywords[235] = "(";
    __pcode__C_keywords[236] = ")";
    __pcode__C_keywords[237] = "*";
    __pcode__C_keywords[238] = "+";
    __pcode__C_keywords[239] = "-";
    __pcode__C_keywords[240] = " /";
    __pcode__C_keywords[241] = ":";
    __pcode__C_keywords[242] = ";";
    __pcode__C_keywords[243] = "<";
    __pcode__C_keywords[244] = "<=";
    __pcode__C_keywords[245] = "<>";
    __pcode__C_keywords[246] = "=";
    __pcode__C_keywords[247] = "=<";
    __pcode__C_keywords[248] = "=>";
    __pcode__C_keywords[249] = ">";
    __pcode__C_keywords[250] = "><";
    __pcode__C_keywords[251] = ">=";
    __pcode__C_keywords[252] = "?";
    __pcode__C_keywords[253] = "\\";
    __pcode__C_keywords[254] = "^";
    __pcode__C_keywords[255] = ":=";

    __pcode__C_dimtypes[0] = "(Unknown Type)";
    __pcode__C_dimtypes[1] = "Null";
    __pcode__C_dimtypes[2] = "Integer";
    __pcode__C_dimtypes[3] = "Long";
    __pcode__C_dimtypes[4] = "Single";
    __pcode__C_dimtypes[5] = "Double";
    __pcode__C_dimtypes[6] = "Currency";
    __pcode__C_dimtypes[7] = "Date";
    __pcode__C_dimtypes[8] = "String";
    __pcode__C_dimtypes[9] = "Object";
    __pcode__C_dimtypes[10] = "Error";
    __pcode__C_dimtypes[11] = "Boolean";
    __pcode__C_dimtypes[12] = "Variant";
    __pcode__C_dimtypes[13] = "(Unknown Type)";
    __pcode__C_dimtypes[14] = "Decimal";
    __pcode__C_dimtypes[15] = "(Unknown Type)";
    __pcode__C_dimtypes[16] = "(Unknown Type)";
    __pcode__C_dimtypes[17] = "Byte";

    astore__new(_store);
    _v = astore__get(_store, "/_VBA_PROJECT/Version");

    __pcode__S_base_id = astore__get(_store, "/_VBA_PROJECT/*BaseID");
    return (0);
}
# }}}
# {{{ pcode__new
function pcode__new(pcode) {
    split("00000", pcode, "");

}
# }}}
# {{{ pcode__unpack_headers
# post constructor
function pcode__unpack_headers( \
    pcode, stream, store, \
    \
    _v, _n, _i, _blocksize, _count, _size, _version \
) {
    _v = astore__get(store, "/VBA/Project/InformationRecord/SysKindRecord/SysKind");
    pcode[__pcode_M_is_64bit] = _v == 3;

    _v = _version = astore__get(store, "/_VBA_PROJECT/Version");
    __pcode_S_unicoderef     = _v == 78 || (_v >= 91 && _v != 96 && _v != 98 && _v != 99);
    __pcode_S_unicodename    = _v == 78 || (_v >= 89 && _v != 96 && _v != 98 && _v != 99);
    __pcode_S_nonunicodename = (_v <= 89 && _v != 78) || (_v > 95 && _v < 107)
    if (_v < 107) {
        # Office 97 SR-1 -> 94(5e)
        pcode[__pcode_M_vba_version] = 5;

        # declaration table
        pcode[__pcode_M_DCT_offset] = 11;
        astore__set(store, "DCT offset", pcode[__pcode_M_DCT_offset]);

        _v = stream__read_hex_string(stream, 8);  # 2
        astore__set(store, "Unknown1", _v);
        _v = stream__read_uint32(stream);
        _v = stream__read_hex_string(stream, _v);
        _v = stream__read_hex_string(stream, 64);
        _v = stream__read_uint16(stream);
        _v = stream__read_hex_string(stream, _v * 16);
        _v = stream__read_uint32(stream);
        _v = stream__read_hex_string(stream, _v);
        _v = stream__read_hex_string(stream, 6);
        _v = stream__read_uint32(stream);
        _v = stream__read_hex_string(stream, _v);
        _v = stream__read_uint32(stream) + 138;
        pcode[__pcode_M_OBT_offset] = _v;
        astore__set(store, "OBT offset", _v);
        _v = stream__read_hex_string(stream, 4);
        astore__set(store, "Unknown2", _v);
        _v = stream__read_uint32(stream);
        astore__set(store, "Unknown3", _v);
        _v += 10;
        pcode[__pcode_M_IDT_offset] = _v;
        astore__set(store, "IDT offset", _v);
        _v = stream__read_hex_string(stream, 61);
    } else {
        # Office XP -> 115(73)
        # Office 365 (16.3) -> 178(b2)
        # Office 365 (16.3) -> 181(b5)
        pcode[__pcode_M_vba_version] = _v >= 151 ? 7: 6;

        # declaration table
        pcode[__pcode_M_DCT_offset] = pcode__is_64bit(pcode) ? 67: 63;
        astore__set(store, "DCT offset", pcode[__pcode_M_DCT_offset]);

        # Unknown1
        _v = stream__read_hex_string(stream, 3);  # 2
        astore__set(store, "Unknown1", _v);

        # object table
        _v = stream__read_uint32(stream);  # 5
        _v += 138;
        pcode[__pcode_M_OBT_offset] = _v;
        astore__set(store, "OBT offset", _v);

        # Unknown2
        _v = stream__read_uint32(stream);  # 9
        astore__set(store, "Unknown2", _v);

        # Unknown3
        _v = stream__read_hex_string(stream, 4);  # 13
        astore__set(store, "Unknown3", _v);

        # indirect table
        _v = stream__read_uint32(stream);  # 17
        _v += (pcode__is_64bit(pcode) ? 12: 10);
        pcode[__pcode_M_IDT_offset] = _v;
        astore__set(store, "IDT offset", _v);

    }
    _v = stream__read_uint32(stream);  #21
    astore__set(store, "Offset2::int32", _v);

    _v = pcode[__pcode_M_code_offset] = stream__read_uint32(stream);  #25
    astore__set(store, "Code Offset::int32", _v);

    _v = stream__read_hex_string(stream, pcode[__pcode_M_DCT_offset] - (stream[1] - 5));
    astore__set(store, "UnknownToDCT", _v);

    _v = stream__read_hex_string(stream, 16);
    astore__set(store, "Unknown7/", _v);

    _v = stream__read_guid_string(stream);
    astore__set(store, "GUID1/", _v);

    _v = stream__read_guid_string(stream);
    astore__set(store, "GUID2/", _v);

    _v = stream__read_hex_string(stream, 20);
    astore__set(store, "Unknown8/", _v);

    _v = stream__read_guid_string(stream);
    astore__set(store, "GUID3/", _v);

    _v = stream__read_hex_string(stream, 39);
    astore__set(store, "Unknown9/", _v);

    _v = stream__read_guid_string(stream);
    astore__set(store, "GUID4/", _v);

    _v = stream__read_guid_string(stream);
    astore__set(store, "GUID5/", _v);

    _blocksize = 32;
    _size = pcode[__pcode_M_OBT_offset] - (stream[1] - 5);
    for (_i = 0; _i < _size - _blocksize; _i += _blocksize) {
        _v = stream__read_hex_string(stream, _blocksize);
        astore__set(store, "UnknownToOBT/" _i, _v);
    }
    _v = stream__read_hex_string(stream, pcode[__pcode_M_OBT_offset] - (stream[1] - 5));
    astore__set(store, "UnknownToOBT/" _i, _v);
    # parse object table
    astore__set(store, "OBT Start::hexint32", pcode[__pcode_M_OBT_offset] + 4);
    _v = stream__read_uint32(stream);
    astore__set(store, "OBT Size::hexint32", _v);
    _count = _v / 10;
    astore__chdir(store, "OBT");
    for (_n = 1; _n <= _count; ++_n) {
        _v = stream__read_uint16(stream);
        astore__set(store, _n "/*ReferenceCount::uint16", _v);
        _v = stream__read_hex_string(stream, 2);
        astore__set(store, _n "/*Unknown2", _v);
        _v = stream__read_hex_string(stream, 2);
        astore__set(store, _n "/*Unknown3", _v);
        _v = stream__read_uint16(stream);
        astore__set(store, _n "/*ObjectID/@ModifiedValue::hexint16", _v);
        _v = pcode__getid(pcode, store, _v);
        astore__set(store, _n "/*ObjectID/@Identifier", _v);
        _v = stream__read_hex_string(stream, 2);
        astore__set(store, _n "/*Unknown4", _v);
    }
    astore__chdir(store, "..");

    _v = stream__read_hex_string(stream, _version < 107 ? 18: 10);
#    astore__set(store, "UnknownToIDT-head" , _v);
#
#    _v = stream__read_utf16le_string(stream, 80);
#    astore__set(store, "UnknownToIDT-string" , _v);
#    if (_version < 107) {
#        _v = stream__read_hex_string(stream, 7);
#        astore__set(store, "UnknownToIDT-head2" , _v);
#        _v = stream__read_uint16(stream);
#        astore__set(store, "UnknownToIDT-length" , _v);
#        _v = stream__read_utf16le_string(stream, _v);
#        astore__set(store, "UnknownToIDT-head3" , _v);
#        _v = stream__read_hex_string(stream, 1);
#        astore__set(store, "UnknownToIDT-head4" , _v);
#
#        _v = stream__read_utf16le_string(stream, 38);
#        astore__set(store, "UnknownToIDT-string2" , _v);
#    }

    _size = pcode[__pcode_M_IDT_offset] - (stream[1] - 5);
    for (_i = 0; _i < _size - _blocksize; _i += _blocksize) {
        _v = stream__read_hex_string(stream, _blocksize);
        astore__set(store, "UnknownToIDT/" _i, _v);
    }
    _v = stream__read_hex_string(stream, pcode[__pcode_M_IDT_offset] - (stream[1] - 5));
    astore__set(store, "UnknownToIDT/" _i, _v);

    astore__set(store, "@IDT Offset::hexint32", pcode[__pcode_M_IDT_offset]);

    _v = _size = stream__read_uint32(stream);
    astore__set(store, "IDT Size", _v);

    for (_i = 0; _i < _size - _blocksize; _i += _blocksize) {
        _v = stream__read_hex_string(stream, _blocksize);
        astore__set(store, "IDT/" _i, _v);
    }
    _v = stream__read_hex_string(stream, pcode[__pcode_M_IDT_offset] + _size - (stream[1] - 5));
    astore__set(store, "IDT/" _i, _v);

    _size = pcode[__pcode_M_code_offset] - (stream[1] - 5);
    for (_i = 0; _i < _size - _blocksize; _i += _blocksize) {
        _v = stream__read_hex_string(stream, _blocksize);
        astore__set(store, "UnknownToCode/" _i, _v);
    }
    _v = stream__read_hex_string(stream, pcode[__pcode_M_code_offset] - (stream[1] - 5));
    astore__set(store, "UnknownToCode/" _i, _v);

    return (0);
}
# }}}
# {{{ pcode__vba_version
function pcode__vba_version(pcode) {
    return pcode[__pcode_M_vba_version];
}
# }}}
# {{{ pcode__is_64bit
function pcode__is_64bit(pcode) {
    return pcode[__pcode_M_is_64bit];
}
# }}}
# {{{ pcode__get_idt_offset
function pcode__get_idt_offset(pcode) {
    return pcode[__pcode_M_IDT_offset];
}
# }}}
# {{{ pcode__get_obt_offset
function pcode__get_obt_offset(pcode) {
    return pcode[__pcode_M_OBT_offset];
}
# }}}
# {{{ pcode__get_code_offset
function pcode__get_code_offset(pcode) {
    return pcode[__pcode_M_code_offset];
}
# }}}
# {{{ pcode__translate_opcode
#
# [pcodedump]
# This function is derived from pcodedump.py:605 translateOpcode()
#
function pcode__translate_opcode(pcode, opcode,    _vba_version, _is_64bit) {
    _vba_version = pcode__vba_version(pcode);
    _is_64bit = pcode__is_64bit(pcode);
    if (_vba_version == 3) {
        if (opcode <= 67) {
            return opcode;
        } else if (opcode <=  70) {
            return opcode + 2;
        } else if (opcode <= 111) {
            return opcode + 4;
        } else if (opcode <= 150) {
            return opcode + 8;
        } else if (opcode <= 164) {
            return opcode + 9;
        } else if (opcode <= 166) {
            return opcode + 10;
        } else if (opcode <= 169) {
            return opcode + 11;
        } else if (opcode <= 238) {
            return opcode + 12;
        } else {
            return opcode + 24;
        }
    } else if (_vba_version == 5) {
        if (opcode <=  68) {
            return opcode;
        } else if (opcode <= 71) {
            return opcode + 1;
        } else if (opcode <= 112) {
            return opcode + 3;
        } else if (opcode <= 151) {
            return opcode + 7;
        } else if (opcode <= 165) {
            return opcode + 8;
        } else if (opcode <= 167) {
            return opcode + 9;
        } else if (opcode <= 170) {
            return opcode + 10;
        } else {
            return opcode + 11;
        }
    } else if (_is_64bit) {
        return opcode;
    }

    if (opcode <= 173) {
        return opcode
    } else if (opcode <= 175) {
        return opcode + 1;
    } else if (opcode <= 178) {
        return opcode + 2;
    }

    # <= 260
    return opcode + 3;
}
# }}}
# {{{ pcode__get_typename
function \
pcode__get_typename( \
    pcode, id, \
    \
    _type_name, _flags \
) {
    _flags = num__and(id, 224);
    id = num__and(id, 31);
    if (id < 17) {
        _type_name = __pcode__C_dimtypes[id];
    } else {
        _type_name = "(Unknown Type)";
    }
    if (num__and(_flags, 128)) {
        _type_name = _type_name "Ptr";
    }
    return _type_name
}
# }}}
# {{{ pcode__disasm_imp
function \
pcode__disasm_imp( \
    pcode, stream, store, word, optype, opcode, \
    \
    _v, \
    _jmp_buf_op \
) {
    if (opcode == __pcode__C_op_Open) {
        # TODO:
    } else {
        if (__pcode__C_op_args[opcode] == AT_IMP) {
            stream__setjmp(stream, _jmp_buf_op);
            stream__iseek(stream, pcode__get_obt_offset(pcode) + 4 + word);
            _v = pcode__getname(pcode, stream, store);
            stream__longjmp(stream, _jmp_buf_op);
        } else {
            _v = sprintf("&H%04X", word);
        }
    }
    return _v;
}
# }}}
# {{{ pcode__disasm_name
function \
pcode__disasm_name( \
    pcode, stream, store, offset, optype, opcode, \
    \
    _v, _op_type, _idt_offset, \
   _jmp_buf_op, _str_type, _var_name, _var_types \
) {
    _idt_offset = pcode__get_idt_offset(pcode);

    split("? % & ! # @ ? $ ? ? ? ? ?", _var_types, " ");
    _op_type = optype;

    astore__set(store, "Offset", offset);

    stream__setjmp(stream, _jmp_buf_op);
    stream__iseek(stream, _idt_offset + 4 + offset);

    _v = _var_name = pcode__getid(pcode, store, offset);
    stream__longjmp(stream, _jmp_buf_op);

    if (_op_type < 13) {
        _str_type = _var_types[_op_type]
    } else {
        _str_type = "";
        if (_op_type == 32) {
            _var_name = "[" + _var_name + "]";
        }
    }
    if (opcode == __pcode__C_op_OnError) {
        _str_type = "";
        if (_op_type == 1) {
            _var_name = "(Resume Next)";
        } else if (_op_type == 2) {
            _var_name = "(GoTo 0)";
        }
    } else if (opcode == __pcode__C_op_Resume) {
        _str_type = "";
        if (_op_type == 1) {
            _var_name = "(Next)";
        } else if (_op_type == 2) {
            _var_name = "(0)";
        }
    }
    astore__set(store, "VarName", _var_name);

    return _var_name + _str_type;
}
# }}}
# {{{ pcode__disasm_var
function \
pcode__disasm_var( \
    pcode, stream, store, dword, optype, opcode, \
    \
    _v, _jmp_buf_op, _text, _flag1, _flag2, _has_as, _has_new, \
    _offset, _typename, _varname \
) {
    stream__setjmp(stream, _jmp_buf_op);
    stream__iseek(stream, pcode__get_idt_offset(pcode) + 4 + dword);

    _v = _flag1 = stream__read_uint8(stream);
    astore__set(store, "Flag1::hexint8", _v);

    _v = _flag2 = stream__read_uint8(stream);
    astore__set(store, "Flag2::hexint8", _v);

    _has_as = num__and(_flag1, 32);
    _has_new = num__and(_flag2, 32);
    _v = _varname = pcode__getname(pcode, stream, store);
    astore__set(store, "Name", _v);

    _text = _v;
    if (_has_new) {
        _text = _text " New"
    }

    if (_has_as) {
        _offset = pcode__is_64bit(pcode) ? 12: 8;

        _v = stream__read_hex_string(stream, _offset);
        astore__set(store, "Unknown1", _v);

        _v = _typename = stream__read_uint16(stream);
        astore__set(store, "TypeID::hexint16", _v);

        _v = stream__read_uint16(stream);
        astore__set(store, "Flag::hexint16", _v);

        if (_v == 65535) {
            _v = pcode__get_typename(pcode, _typename);
            astore__set(store, "TypeName", _v);
            _text = _text " As " _v;
        } else {
            # notimpl
        }
    }

    stream__longjmp(stream, _jmp_buf_op);

    return _text;
}
# }}}
# {{{ pcode__disasm_vararg
function \
pcode__disasm_vararg( \
    pcode, stream, store, word, optype, opcode, \
    \
    _v, _i, _text \
) {
    _text = "";
    if (opcode == __pcode__C_op_OnGosub || \
        opcode == __pcode__C_op_OnGoto || \
        opcode == __pcode__C_op_LineCont) {
        _v = stream__available_size(stream);
        if (word < _v / 2) {
            for (_i = 1; _i <= word / 2; ++_i) {
                _v = pcode__getname(pcode, stream, store);
                _text = _text (_i == 1 ? "": ",") _v;
            }
        } else {
            _text = "<crash>";
        }
    } else {
        _v = stream__read_ansi_string(stream, word);
        _text = _text _v;
    }

    return _text;
}
# }}}
# {{{ pcode__disasm_function
function \
pcode__disasm_function( \
    pcode, stream, store, offset, optype, opcode, \
    \
    _v, _i, _store, _idt_offset, _jmp_buf_op, _arg_flags, _arg_name, \
    _arg_offset, _arg_opts, _arg_type, _arg_type_name, _as, \
    _c_options, _calltype, _decl, _decl_offset, _flags, _friend, \
    _funcname, _has_declare, _is_64bit, _new_flags, _optional, \
    _passingtype, _private, _public, _static, _text, _vba_version, \
    _jmp_buf_arg \
) {
    _idt_offset = pcode__get_idt_offset(pcode);
    _vba_version = pcode__vba_version(pcode);
    _is_64bit = pcode__is_64bit(pcode);
    _text = "";

    astore__set(store, "@*IDT Offset", offset);
    stream__setjmp(stream, _jmp_buf_op);
    stream__iseek(stream, _idt_offset + 4 + offset);

    # *Flags (2 bytes)
    _v = _flags = stream__read_uint16(stream);
    astore__set(store, "*Flags/Value::hexint16", _v);

    # *Identifier (2 bytes)
    _v = _funcname = pcode__getname(pcode, stream, store);

    # *Unknown1 (4 bytes)
    _v = stream__read_uint32(stream);
    astore__set(store, "*Unknown1::int32", _v);

    # *Unknown2 (2 bytes)
    _v = stream__read_uint16(stream);
    astore__set(store, "*Unknown2", _v);

    # *Unknown3 (26 or 30 bytes)
    _v = stream__read_hex_string(stream, _vba_version > 5 ? 30: 26);
    astore__set(store, "Unknown3", _v);

    if (_is_64bit) {
        _v = stream__read_uint32(stream);
        astore__set(store, "Unknown4::int32", _v);

        _v = stream__read_hex_string(stream, 12);
        astore__set(store, "Unknown5", _v);
    }

    _v = _arg_offset = stream__read_uint32(stream);
    astore__set(store, "ArgOffset::int32", _v);

    _v = stream__read_uint32(stream);
    astore__set(store, "ReturnType::int32", _v);

    _v = _decl_offset = stream__read_uint16(stream);
    astore__set(store, "DeclarationOffset/Value::int16", _v);

    _v = stream__read_uint16(stream);
    astore__set(store, "Unknown6::int16", _v);

    _v = stream__read_uint16(stream);
    astore__set(store, "Unknown7::int16", _v);

    _v = stream__read_uint16(stream);
    astore__set(store, "Unknown8::int16", _v);

    _v = _c_options = stream__read_uint8(stream);
    astore__set(store, "cOptions", _v);

    _v = stream__read_hex_string(stream, 2);
    astore__set(store, "Unknown9", _v);

    _v = _new_flags = stream__read_uint8(stream);
    astore__set(store, "NewFlags/Value", _v);

    if (_vba_version > 5) {
        if (num__and(_new_flags, 2) == 0 && _is_64bit) {
            astore__set(store, "fPrivate::bool", 1);
            _private = "Private ";
        }
        if (num__and(_new_flags, 4)) {
            astore__set(store, "fFriend::bool", 1);
            _friend = "Friend ";
        }
    } else {
        if (num__and(_flags, 8) == 0) {
            astore__set(store, "fPrivate::bool", 1);
            _private = "Private ";
        }
    }
    if (num__and(optype, 4)) {
        astore__set(store, "fPublic::bool", 1);
        _public = "Public ";
    }
    if (num__and(optype, 128)) {
        astore__set(store, "fStatic::bool", 1);
        _static = "Public ";
    }
    if (num__and(_flags, 128) && _vba_version > 5 && _is_64bit) {
        astore__set(store, "fStatic::bool", 1);
        _static = "Public ";
    }
    if (num__and(_c_options, 144) == 0) {
        if (! _is_64bit) {
            if (_decl_offset != 65535) {
                _has_declare = 1;
                astore__set(store, "DeclarationOffset/fDeclare::bool", 1);
            }
        }
    } else {
        _has_declare = 0;
    }
    if (num__and(_new_flags, 32)) {
        if (_vba_version > 5) {
            astore__set(store, "NewFlags/fPtrSafe::bool", 1);
        }
    }
    if (num__and(_flags, 32)) {
        astore__set(store, "fHasAs::bool", 1);
        if (num__and(_arg_type, 4294901760)) {  # 0xffff0000
            _v = pcode__get_typename(pcode, _arg_type % 256);
            astore__set(_store, "ReturnType", _v);
        } else {
            _v = pcode__getname(pcode, stream, _store);
            astore__set(_store, "ReturnTypeName", _v);
        }
    }
    if (num__and(_flags, 4096)) {
        if (optype == 2 || optype == 6) {
            _calltype = "Function ";
        } else {
            _calltype = "Sub ";
        }
        astore__set(store, "CallType", _calltype);
    }
    if (num__and(_flags, 8192)) {
        astore__set(store, "fPropertyGet::bool", 1);
    }
    if (num__and(_flags, 16384)) {
        astore__set(store, "fPropertyLet::bool", 1);
    }
    if (num__and(_flags, 32768)) {
        astore__set(store, "fPropertySet::bool", 1);
    }
    if (_has_declare) {
        #E__message = sprintf( \
        #    "unsupported flag value detected: %x.\n", _flags);
        #return (-1);
        _decl = "DECL ";
    } else {
        _decl = "";
    }
    _text = _text _decl _public _private _friend _static _calltype _funcname "(";

    _i = 0;
    while (_arg_offset != 4294967295 && _arg_offset != 0) {
        ++_i;
        stream__iseek(stream, _idt_offset + 4 + _arg_offset);

        astore__fork(store, "Args/" _i, _store);

        # ArgFlags (2 bytes)
        _v = _arg_flags = stream__read_uint16(stream);
        astore__set(_store, "ArgFlags/Value::hexint16", _v);

        # ArgName (2 bytes)
        _v = _arg_name = pcode__getname(pcode, stream, _store);
        astore__set(_store, "ArgName/Value", _v);
        if (_is_64bit) {
            _v = stream__read_hex_string(stream, 4);
            astore__set(_store, "Unknown1", _v);
        }

        # Unknown2 (4 bytes)
        _v = stream__read_hex_string(stream, 4);
        astore__set(_store, "Unknown2-1", _v);

        # Unknown2 (4 bytes)
        _v = stream__read_hex_string(stream, 4);
        astore__set(_store, "Unknown2-2", _v);


        # ArgType (4 bytes)
        _v = _arg_type = stream__read_uint32(stream);
        astore__set(_store, "ArgType::hexint32", _v);

        # Unknown3 (4 bytes)
        _v = stream__read_hex_string(stream, 4);
        astore__set(_store, "Unknown3", _v);

        # NextOffset (8 bytes)
        _v = _arg_offset = stream__read_uint32(stream);
        astore__set(_store, "NextOffset::int32", _v);

        # ArgOpts (4 bytes)
        _v = _arg_opts = stream__read_uint32(stream);
        astore__set(_store, "ArgOpts::int32", _v);

        if (num__and(_arg_opts, 4)) {
            astore__set(_store, "fByVal::bool", 1);
            _passingtype = "ByVal ";
        } else if (num__and(_arg_opts, 2)) {
            astore__set(_store, "fByRef::bool", 1);
            _passingtype = "ByRef ";
        }

        if (num__and(_arg_opts, 512)) {
            astore__set(_store, "fOptional::bool", 1);
            _optional = "Optional ";
        } else {
            _optional = "";
        }
        if (num__and(_arg_flags, 32)) {
            astore__set(_store, "fHasAs::bool", 1);
            _as = " As ";
            if (num__and(_arg_type, 4294901760)) {  # 0xffff0000
                _v = _arg_type % 256;
                astore__set(_store, "ArgType", _v);
                _arg_type_name = pcode__get_typename(pcode, _v);
            } else {
                astore__fork(_store, "ArgTypeName", _store);
                # 464 -> 104
                if (_arg_type % 2) {
                    _v = num__rshift(_arg_type, 4) + 1;
                    _arg_type_name = __pcode__C_keywords[_v] " " _arg_type " " _v;
                } else {
                    stream__setjmp(stream, _jmp_buf_arg);
                    #stream__iseek(stream, pcode[__pcode_M_OBT_offset] + 4 + (_arg_type - 680) / 4 + 6);
                    #_v = stream__read_uint16(stream);
#                    _v = pcode__getname(pcode, stream, _store);
#                    astore__set(_store, "Value", _v);
#                    _v = rshift(_arg_type, 5) + 8;
#                    astore__set(_store, "ModifiedValue", _v);
                    stream__longjmp(stream, _jmp_buf_arg);

                    _arg_type_name = astore__get(_store, "/_VBA_PROJECT/*Identifiers/" _v "/*Name") "(" _arg_type ")";
                }
            }
        }

        _text = _text (_i > 1 ? ", ": "") _passingtype _arg_name _as _arg_type_name;
    }

    _text = _text ")";

    stream__longjmp(stream, _jmp_buf_op);

    return _text;
}
# }}}
# {{{ pcode__getid
function \
pcode__getid( \
    pcode, store, id, \
    \
    _v, _path, _version \
) {
    _version = pcode__vba_version(pcode);
    _v = num__rshift(id, 1);
    if (_v >= 256) {
        _v -= __pcode__S_base_id;
        _path = "/_VBA_PROJECT/*Identifiers/" _v "/*Name";
        _v = astore__get(store, _path);
    } else {
        if (_version >= 7) {
            if (_v >= 195) {
                --_v;
            }
        }
        _v = __pcode__C_keywords[_v + 1];
    }

    return _v;
}
# }}}
# {{{ pcode__getname
function \
pcode__getname( \
    pcode, stream, store, \
    \
    _v \
) {
     _v = stream__read_uint16(stream);
     astore__set(store, "*Identifier/*ObjectID", _v);

     _v = pcode__getid(pcode, store, _v);
     astore__set(store, "*Identifier/*@Name", _v);

     return _v;
}
# }}}
# }}}
# {{{ @module ooxml, parsing Office Open XML (OOXML)
# {{{ ooxml::init
function \
ooxml__init(    _status) {
    if (__ooxml__init_guard) {
        return (1);
    }

    # required modules
    _status = zip__init();
    if (_status < 0) {
        return _status;
    }
    _status = xmlp__init();
    if (_status < 0) {
        return _status;
    }

    ooxml__E_NOTIMPL      = -16385;
    ooxml__E_FAIL         = -16389;
    ooxml__E_ACCESSDENIED = -458757;
    ooxml__E_UNEXPECTED   = -65535;
    ooxml__S_OK           = 0;
    ooxml__S_FALSE        = 1;

    # [ECMA-376 Part1] 11.3.10 Main Document Part
    ooxml__C_schema_OFFICEDOCUMENT = \
        "http://schemas.openxmlformats.org/officeDocument/2006/" \
        "relationships/officeDocument";

    ooxml__C_schema_VISIODOCUMENT = \
        "http://schemas.microsoft.com/visio/2010/" \
        "relationships/document"

    # [MS-OFFMACRO], [MS-OFFMACRO2]
    # 2.1 Macro-Enabled WordprocessingML Structures
    # 2.1.1.2 VBA Project
    # 2.2 Macro-Enabled SpreadsheetML Structures
    # 2.2.1.2 VBA Project
    # 2.3 Macro-Enabled PresentationML Structures
    # 2.3.1.2 VBA Project
    #
    # Content Type: application/vnd.ms-office.vbaProject
    # Root Namespace: Not applicable.
    # Source Relationship:
    # http://schemas.microsoft.com/office/2006/relationships/vbaProject
    #
    ooxml__C_schema_VBAPROJECT = \
        "http://schemas.microsoft.com/office/2006/relationships/" \
        "vbaProject";

    __ooxml__init_guard = 1;

    return (0);
}
# }}}
# {{{ ooxml::build_astore_from_xmlstream
function \
ooxml__parse( \
    store, stream, \
    \
    _ev, _begin, _end, \
    _xmlp, _counter, _elm, _attr, _val \
) {
    xmlp__new(_xmlp);

    while ((_ev = xmlp__parse(_xmlp, stream)) > 0) {
        if (_ev == xmlp__C_event_START_ELEMENT) {
            _end = xmlp__pop(_xmlp);
            _begin = xmlp__pop(_xmlp);
            _elm = str__binary_join_with_chr(stream, _begin, _end);
            astore__chdir(store, "@" ++_counter[_elm] "/" _elm);
        } else if (_ev == xmlp__C_event_ATTRIBUTE) {
            _end = xmlp__pop(_xmlp);
            _begin = xmlp__pop(_xmlp);
            _val = str__binary_join_with_chr(stream, _begin, _end);
            _end = xmlp__pop(_xmlp);
            _begin = xmlp__pop(_xmlp);
            _attr = str__binary_join_with_chr(stream, _begin, _end);
            if (astore__set(store, _attr, _val) < 0) {
                return (-1);
            }
        } else if (_ev == xmlp__C_event_END_ELEMENT) {
            astore__chdir(store, "../..");
        }
    }

    if (_ev != xmlp__C_event_END_DOCUMENT) {
        E__message = sprintf( \
            "xml parse error, position: %d.", \
            stream[__stream__M_iit]);
        return ooxml__E_UNEXPECTED;
    }

    return ooxml__S_OK;
}
# }}}
# {{{ cli::extract_vba
function \
cli__extract_vba( \
    stream, store, \
    \
    _status, _stream, _key, _type, _path, \
    _basedir, _relpath, _vbapath, _target \
) {
    astore__chdir(store, "/Zip");

    # '${__pp_comment:+'
    #
    # [MS-XLSB] 2.1.7.56 VBA Project
    #
    # [MS-OFFMACRO], [MS-OFFMACRO2]
    # 2.1 Macro-Enabled WordprocessingML Structures
    # 2.1.1.2 VBA Project
    # 2.2 Macro-Enabled SpreadsheetML Structures
    # 2.2.1.2 VBA Project
    # 2.3 Macro-Enabled PresentationML Structures
    # 2.3.1.2 VBA Project
    #
    # Content Type: application/vnd.ms-office.vbaProject
    # Root Namespace: Not applicable.
    # Source Relationship:
    # http://schemas.microsoft.com/office/2006/relationships/vbaProject
    #
    # This part is specified in [MS-OVBA].
    # A package MUST contain at most one VBA Project part,
    # which MUST be the target of an implicit relationship
    # from the presentation part (section 2.3.1.1).
    # A VBA Project part MUST NOT have implicit or explicit relationships
    # to any other part specified by this document or any part specified
    # in [ECMA-376]/[ISO/IEC29500-1:2016].
    #
    # * now we get the path to vbaProject.bin in the appropriate way.
    #
    #   step 1: read _rels of root directory to find path to officeDocument.
    #           (e.g. xl/workbook.xml)
    #
    #   step 2: read _rels at the same level as the officeDocument
    #           (e.g. xl/workbook.xml -> xl/_rels/workbook.xml.rels) to get
    #           path to vbaProject.bin.
    #
    # '}'

    # step 1: read _rels/.rels
    _path = "_rels/.rels";
    _status = zip__unpack_file(stream, store, _path, _stream);
    if (_status < 0) {
        return cli__E_UNEXPECTED;
    }

    # build a parse tree on astore
    astore__chdir(store, "/ooxml/" _path);
    if (ooxml__parse(store, _stream) < 0) {
        return cli__E_UNEXPECTED;
    }

    # walk the tree on astore, and find the document which has the following types:
    # "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"
    # "http://schemas.microsoft.com/visio/2010/relationships/document"
    astore__chdir(store, "@1/Relationships");
    astore__enum_reset(store);
    while (! astore__enum_end(store)) {
         _key = astore__enum_next(store);
         _type = astore__get(store, _key "/Relationship/Type");
         if (_type == ooxml__C_schema_OFFICEDOCUMENT || \
             _type == ooxml__C_schema_VISIODOCUMENT) {
             _target = astore__get(store, _key "/Relationship/Target");
             if (match(_target, /\/[^\/]*\.[^\.]+$/)) {  # *.xml or *.bin
                 _basedir = substr(_target, 1, RSTART);
                 _relpath = _basedir "_rels" substr(_target, RSTART) ".rels";
                 break;
             }
         }
    }
    if (! _relpath) {
        E__message = sprintf( \
            "Office document file (type: %s or %s) is not found.", \
            ooxml__C_schema_OFFICEDOCUMENT, \
            ooxml__C_schema_VISIODOCUMENT);
        return cli__E_ACCESSDENIED;
    }

    # step 2: read next _rels
    astore__chdir(store, "/Zip");
    _status = zip__unpack_file(stream, store, _relpath, _stream);
    if (_status < 0) {
        return cli__E_UNEXPECTED;
    }

    # read rels
    astore__chdir(store, "/ooxml/" _relpath);
    if (ooxml__parse(store, _stream) < 0) {
        return cli__E_UNEXPECTED;
    }

    # walk the tree on astore, and find the document which has the following type:
    # "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
    astore__chdir(store, "@1/Relationships");
    astore__enum_reset(store);
    while (! astore__enum_end(store)) {
         _key = astore__enum_next(store);
         _type = astore__get(store, _key "/Relationship/Type");
         if (_type == ooxml__C_schema_VBAPROJECT) {
             _target = astore__get(store, _key "/Relationship/Target");
             _vbapath = _basedir _target;  # VBA path
             break;
         }
    }

    if (! _vbapath) {
        E__message = "VBA file is not found.";
        return cli__E_ACCESSDENIED;
    }

    if (astore__set(store, "/ooxml/@VBA Path", _vbapath) < 0) {
        return cli__E_UNEXPECTED;
    }

    return cli__S_OK;
}
# }}}
# }}}
# {{{ @module cfb, parsing compound file binary format (CFBF, a.k.a "Structured Storage").
# {{{ cfb::init
function \
cfb__init(    _status) {
    if (__cfb__init_guard) {
        return (1);
    }

    # required modules
    _status = stream__init();
    if (_status < 0) {
        return _status;
    }
    _status = struct__init();
    if (_status < 0) {
        return _status;
    }

    cfb__E_NOTIMPL      = -16385;
    cfb__E_FAIL         = -16389;
    cfb__E_ACCESSDENIED = -458757;
    cfb__E_UNEXPECTED   = -65535;
    cfb__S_OK           = 0;
    cfb__S_FALSE        = 1;

    cfb__C_magic_CFB_STORAGE = "d0cf11e0a1b11ae1";

    # '${__pp_comment:+'
    #
    # [MS-CFB] 2.1 Compound File Sector Numbers and Types
    # Each sector, except for the header, is identified by a
    # nonnegative, 32-bit sector number. The following sector
    # numbers above 0xFFFFFFFA are reserved and MUST NOT be
    # used to identify the location of a sector in a compound file.
    #
    # +=================================================================================+
    # | Sector name    | Integer value           | Description                          |
    # +=================================================================================+
    # | REGSECT        | 0x00000000 - 0xFFFFFFF9 | Regular sector number.               |
    # | MAXREGSECT     | 0xFFFFFFFA              | Maximum regular sector number.       |
    # | Not applicable | 0xFFFFFFFB              | Reserved for future use.             |
    # | DIFSECT        | 0xFFFFFFFC              | Specifies a DIFAT sector in the FAT. |
    # | FATSECT        | 0xFFFFFFFD              | Specifies a FAT sector in the FAT.   |
    # | ENDOFCHAIN     | 0xFFFFFFFE              | End of a linked chain of sectors.    |
    # | FREESECT       | 0xFFFFFFFF              | Specifies an unallocated sector      |
    # |                |                         | in the FAT, Mini FAT, or DIFAT.      |
    # +----------------+-------------------------+--------------------------------------+
    #
    # '}'
    __cfb__C_sector_magic_MAXREGSECT    = 4294967290; # 0xfffffffa
    __cfb__C_sector_magic_DIFSECT       = 4294967291; # 0xfffffffb
    __cfb__C_sector_magic_FATSECT       = 4294967293; # 0xfffffffd
    __cfb__C_sector_magic_ENDOFCHAIN    = 4294967294; # 0xfffffffe
    __cfb__C_sector_magic_FREESECT      = 4294967295; # 0xffffffff

    __cfb__init_guard = 1;

    return (0);
}
# }}}
# {{{ cfb::unpack
function \
cfb__unpack( \
    stream, store, \
    \
    _r \
) {
    # load cfb header
    _r = __cfb__unpack_header(stream, store);
    if (_r < 0) {
        return _r;
    }

    # load FAT
    _r = __cfb__build_fat_chain(stream, store);
    if (_r < 0) {
        return _r;
    }

    # load directory sectors"
    _r = __cfb__unpack_directorysectors(stream, store, 0, "");
    if (_r < 0) {
        return cfb__E_FAIL;
    }

    # load Mini FAT
    _r = __cfb__build_minifat_chain(stream, store);
    if (_r < 0) {
        return _r;
    }

    return cfb__S_OK;
}
# }}}
# {{{ cfb::unpack_stream
function \
cfb__unpack_stream( \
    istream, store, path, ostream, \
    \
    _start_secno, _sector_no, _sector_size, \
    _mini_secsize, _mini_secno, _mini_stream_cutoff_size, \
    _body_offset, _stream_size, _minifat_per_fat, _id \
) {
    _id = astore__get(store, "/CFB/@FileID" path "/id");
    if (_id == "") {
        E__message = sprintf("CFB file ID for path \"%s\" is not found.", path);
        return cfb__E_UNEXPECTED;
    }
    _sector_size = num__lshift(1, astore__get(store, "/CFB/Header/Sector Shift"));
    _mini_secsize = num__lshift(1, astore__get(store, "/CFB/Header/Mini Sector Shift"));
    _mini_stream_cutoff_size = astore__get(store, "/CFB/Header/Mini Stream Cutoff Size");
    _minifat_per_fat = _sector_size / _mini_secsize;
    _start_secno = astore__get(store, "/CFB/Directory Entries/" _id "/Starting Sector Location");
    _stream_size = astore__get(store, "/CFB/Directory Entries/" _id "/Stream Size");
    if (_start_secno == "" || _stream_size == "") {
        E__message = sprintf("CFB Directory Entry \"%s\" is not found.", _id);
        return cfb__E_UNEXPECTED;
    }

    if (_stream_size + 0 > 2 ^ 36) {
        E__message = sprintf("Huge size stream (%s bytes) is detected.", _stream_size);
        return cfb__E_UNEXPECTED;
    }

    stream__new(ostream, _stream_size);

    if (_stream_size < _mini_stream_cutoff_size) {
        # if stream size < 4096, stored in Mini FAT sectors
        for (_mini_secno = _start_secno; _stream_size > 0; _stream_size -= _mini_secsize) {
            # retrieve FAT sector that contains current Mini FAT sector
            _sector_no = astore__get(store, "/CFB/MiniFAT/M2F/" _mini_secno);
            _body_offset = (1 + _sector_no) * _sector_size \
                         + _mini_secno % _minifat_per_fat * _mini_secsize;
            stream__iseek(istream, _body_offset);
            stream__copy(istream, ostream, \
                         _stream_size > _mini_secsize ? _mini_secsize: _stream_size);
            # search next Mini FAT chain
            _mini_secno = astore__get(store, "/CFB/MiniFAT/Chain/" _mini_secno);
        }
    } else {
        # if stream size >= 4096, stored in FAT sectors
        for (_sector_no = _start_secno; _stream_size > 0; _stream_size -= _sector_size) {
            _body_offset = (1 + _sector_no) * _sector_size;
            stream__iseek(istream, _body_offset);
            stream__copy(istream, ostream, \
                         _stream_size >= _sector_size ? _sector_size: _stream_size);
            # search next FAT chain
            _sector_no = astore__get(store, "/CFB/FAT/Chain/" _sector_no);
        }
    }

    return cfb__S_OK;
}
# }}}
# {{{ (private)::cfb::unpack_header
# '${__pp_comment:+'
#
# [MS-CFB] 2.2 Compound File Header
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Header Signature                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    Header CLSID (16 bytes)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |         Minor Version         |         Major Version         |
# +-------------------------------+-------------------------------+
# |          Byte Order           |         Sector Shift          |
# +-------------------------------+-------------------------------+
# |       Mini Sector Shift       |           Reserved            |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  Number of Directory Sectors                  |
# +---------------------------------------------------------------+
# |                     Number of FAT Sectors                     |
# +---------------------------------------------------------------+
# |                First Directory Sector Location                |
# +---------------------------------------------------------------+
# |                  Transaction Signature Number                 |
# +---------------------------------------------------------------+
# |                    Mini Stream Cutoff Size                    |
# +---------------------------------------------------------------+
# |                 First Mini FAT Sector Location                |
# +---------------------------------------------------------------+
# |                   Number of Mini FAT Sectors                  |
# +---------------------------------------------------------------+
# |                  First DIFAT Sector Location                  |
# +---------------------------------------------------------------+
# |                    Number of DIFAT Sectors                    |
# +---------------------------------------------------------------+
# |                       DIFAT (436 bytes)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__cfb__unpack_header( \
    stream, store, \
    \
    _store, _i, _v \
) {
    astore__fork(store, "Header", _store);

    # Header Signature
    _v = stream__read_hex_string(stream, 8);
    if (astore__set(_store, "Header Signature::HexString<8>," \
                            "mustbe(d0cf11e0a1b11ae1)", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Header CLSID (16 bytes)
    _v = stream__read_guid_string(stream);
    if (astore__set(_store, \
                    "Header CLSID," \
                    "mustbe(00000000-0000-0000-0000-000000000000)", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    # Minor Version (2 bytes)
    #
    # Version number for nonbreaking changes. This field SHOULD be set to
    # 0x003E if the major version field is either 0x0003 or 0x0004.
    #
    # +--------+----------------------------------------------------+
    # | Value  | Meaning                                            |
    # +--------+----------------------------------------------------+
    # | 0x003E | If major version field is either 0x0003 or 0x0004. |
    # +--------+----------------------------------------------------+
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Minor Version::hexint16,mustbe(62)", _v)) {
        return cfb__E_NOTIMPL;
    }

    # '${__pp_comment:+'
    # Major Version (2 bytes)
    #
    # Version number for breaking changes. This field MUST be set to either
    # 0x0003 (version 3) or 0x0004 (version 4).
    #
    # +-----------+--------+
    # | Name      | Value  |
    # +-----------+--------+
    # | version 3 | 0x0003 |
    # +-----------+--------+
    # | version 4 | 0x0004 |
    # +-----------+--------+
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Major Version::uint16,mustbe(3)", _v) < 0) {
        return cfb__E_NOTIMPL;
    }

    # '${__pp_comment:+'
    # Byte Order (2 bytes)
    #
    # This field MUST be set to 0xFFFE. This field is a byte order mark for all
    # integer fields, specifying little-endian byte order.
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Byte Order::hexint16,mustbe(65534)", _v) < 0) {
        return cfb__E_NOTIMPL;
    }

    # '${__pp_comment:+'
    # Sector Shift (2 bytes)
    #
    # This field MUST be set to 0x0009, or 0x000c, depending on the Major
    # Version field. This field specifies the sector size of the compound
    # file as a power of 2.
    # -  If Major Version is 3, the Sector Shift MUST be 0x0009,
    #    specifying a sector size of 512 bytes.
    # -  If Major Version is 4, the Sector Shift MUST be 0x000C,
    #    specifying a sector size of 4096 bytes.
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Sector Shift::uint16,mustbe(9)", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    # Mini Sector Shift (2 bytes)
    #
    # This field MUST be set to 0x0006. This field specifies the sector size
    # of the Mini Stream as a power of 2. The sector size of the Mini Stream
    # MUST be 64 bytes.
    #
    # '}'
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Mini Sector Shift::uint16,mustbe(6)", _v)) {
        return cfb__E_UNEXPECTED;
    }

    # Reserved (6 bytes)
    stream__skip(stream, 6);

    # Number of Directory Sectors (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Number of Directory Sectors::uint<32>," \
                            "mustbe(0)", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Number of FAT Sectors (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Number of FAT Sectors", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # First Directory Sector Location (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "First Directory Sector Location", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Transaction Signature Number (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Transaction Signature Number", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Mini Stream Cutoff Size (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Mini Stream Cutoff Size::uint<32>," \
                            "mustbe(4096)", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # First Mini FAT Sector Location (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "First Mini FAT Sector Location", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Number of Mini FAT Sectors (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Number of Mini FAT Sectors", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # First DIFAT Sector Location (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "First DIFAT Sector Location", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }
    if (_v != __cfb__C_sector_magic_ENDOFCHAIN) {
        # '${__pp_comment:+'
        #
        # TODO: support loading more than 109 DIFATs.
        #
        # reference:
        # [MS-CFB] 2.5 Compound File DIFAT Sectors
        #
        # '}'
        E__message = sprintf( \
            "number of DIFAT sectors = %d. " \
            "parsing VBA Project files larger than " \
            "6.875 MB is not yet supported.", \
            _v);

        return cfb__E_NOTIMPL;
    }

    # Number of DIFAT Sectors (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Number of DIFAT Sectors", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }
    if (_v != 0) {
        # '${__pp_comment:+'
        #
        # TODO: support loading more than 109 DIFATs.
        #
        # reference:
        # [MS-CFB] 2.5 Compound File DIFAT Sectors
        #
        # '}'
        E__message = sprintf( \
            "number of DIFAT sectors = %d. " \
            "parsing VBA Project files larger than " \
            "6.875 MB is not yet supported.", \
            _v);

        return cfb__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    # DIFAT (double-indirect file allocation table)
    # 109 x 4 = 436 bytes
    #
    # [MS-CFB] 2.5 Compound File DIFAT Sectors
    #
    # '}'
    for (_i = 0; _i < 109; ++_i) {
        _v = stream__read_uint32(stream);
        if (astore__set(_store, "DIFATS/" _i, _v) < 0) {
            return cfb__E_UNEXPECTED;
        }
    }

    return cfb__S_OK;
}
# }}}
# {{{ (private)::cfb::build_fat_chain
# '${__pp_comment:+'
#
# [MS-CFB] 2.3 Compound File FAT Sectors
#
# The FAT is the main allocator for space within a compound file. Every
# sector in the file is represented within the FAT in some fashion,
# including those sectors that are unallocated (free). The FAT is a
# sector chain that is made up of one or more FAT sectors.
#
# +---------------------------------------------------------------+
# |   FAT array size MUST be exact multiple of the sector size    |
# +---------------------------------------------------------------*
# +--------+ +--------+ +--------+ +--------+ +--------+ +--------+
# |        | |        | |        | |        | |        | |  ...   |
# | FAT[0] | | FAT[2] | | FAT[3] | | FAT[4] | | FAT[5] | | FAT[N] |
# | entry  | | entry  | | entry  | | entry  | | entry  | | entry  |
# |        | |        | |        | |        | |        | |  ...   |
# +--------+ +--------+ +--------+ +--------+ +--------+ +--------+
#
# The FAT is an array of sector numbers that represent the allocation of
# space within the file, grouped into FAT sectors. Each stream is
# represented in the FAT by a sector chain, in much the same fashion as
# a FAT file system.
# The set of FAT sectors can be considered together as a single array.
# Each entry in that array contains the sector number of the next sector
# in the chain, and this sector number can be used as an index into the
# FAT array to continue along the chain.
# Special values are reserved for chain terminators (ENDOFCHAIN =
# 0xFFFFFFFE), free sectors (FREESECT = 0xFFFFFFFF), and sectors that
# contain storage for FAT sectors (FATSECT = 0xFFFFFFFD) or DIFAT Sectors
# (DIFSECT = 0xFFFFFFC), which are not chained in the same way as the
# others.
# The locations of FAT sectors are read from the DIFAT. The FAT is
# represented in itself, but not by a chain. A special reserved sector
# number (FATSECT = 0xFFFFFFFD) is used to mark sectors that are allocated
# to the FAT.
# A sector number can be converted into a byte offset into the file by
# using the following formula:
# (sector number + 1) x Sector Size. This implies that sector #0 of the
# file begins at byte offset Sector Size, not at 0.
# The detailed FAT sector structure is specified below.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |               Next Sector in Chain (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__cfb__build_fat_chain( \
    stream, store, \
    \
    _difat, _sector_size, _sizeof_sector_no, \
    _i, _v, _j, _n \
) {
    _sector_size = num__lshift(1, astore__get(store, "Header/Sector Shift"));
    _sizeof_sector_no = 4;

    for (_i = 0; _i < 109; ++_i) {
        _difat = astore__get(store, "Header/DIFATS/" _i);
        if (_difat < __cfb__C_sector_magic_MAXREGSECT) { # != __cfb__C_sector_magic_ENDOFCHAIN
            # (sector number + 1) x Sector Size
            stream__iseek(stream, (_difat + 1) * _sector_size);
            for (_j = 0; _j < _sector_size / _sizeof_sector_no; ++_j) {
                # Next Sector in Chain (variable)
                _v = stream__read_uint32(stream);
                _n = _i * _sector_size / _sizeof_sector_no + _j;
                # save it to "/CFB/FAT/Chain/[n]"
                if (astore__set(store, "FAT/Chain/" _n, _v) < 0) {
                    return cfb__E_UNEXPECTED;
                }
            }
        }
    }

    #=# '${__pp_trace__cfb_debug1+"$(cut -d\# -f3-<<<'
    #=# TRACE("-------------------------------------------------------------------------------\n" \
    #=#       "[FAT sector chain]\n" \
    #=#       "-------------------------------------------------------------------------------");
    #=# for (_i = 0; _i <= _n; ++_i) {
    #=#     if (_i % 16 == 0) {
    #=#         TRACE1("\n%4x ", _i);
    #=#     }
    #=#     _v = astore__get(store, "FAT/Chain/" _i);
    #=#     if (_v == __cfb__C_sector_magic_FREESECT) {
    #=#         _s = "FREE";
    #=#     } else if (_v == __cfb__C_sector_magic_ENDOFCHAIN) {
    #=#         _s = "END";
    #=#     } else if (_v == __cfb__C_sector_magic_FATSECT) {
    #=#         _s = "FAT";
    #=#     } else if (_v == _i + 1) {
    #=#         _s = "->";
    #=#     } else {
    #=#         _s = sprintf("%x", _v);
    #=#     }
    #=#     TRACE1("%-4s ",  _s);
    #=# }
    #=# TRACE("\n\n");
    #=# ')"}'

    return cfb__S_OK;
}
# }}}
# {{{ (private)::cfb::build_minifat_chain
# '${__pp_comment:+'
#
# [MS-CFB] 2.4 Compound File Mini FAT Sectors
#
# The mini FAT is used to allocate space in the mini stream. The mini stream is
# divided into smaller, equal-length sectors, and the sector size that is used
# for the mini stream is specified from the Compound File Header (64 bytes).
#
# +------------------------------------------------------------------------+
# |         FAT array size MUST be exact multiple of the sector size       |
# +------------------------------------------------------------------------*
# +------------+ +------------+ +------------+ +------------+ +------------+
# |            | |            | |            | |            | |    ...     |
# | MiniFAT[0] | | MiniFAT[2] | | MiniFAT[3] | | MiniFAT[4] | | MiniFAT[N] |
# |   entry    | |   entry    | |   entry    | |  entry     | |   entry    |
# |            | |            | |            | |            | |    ...     |
# +------------+ +------------+ +------------+ +------------+ +------------+
#
# The locations for mini FAT sectors are stored in a standard chain in the FAT,
# with the beginning of the chain stored in the header (location of the first
# mini FAT starting sector). A mini FAT sector number can be converted into a
# byte offset into the mini stream by using the following formula: sector
# number x 64 bytes. This formula is different from the formula that is used
# to convert a sector number into a byte offset in the file, because no header
# is stored in the mini stream.
# The mini stream is chained within the FAT in exactly the same fashion as any
# normal stream. The mini stream`s starting sector is referenced in the first
# directory entry (root storage stream ID 0).
# If all of the user streams in the file are greater than the cutoff of 4,096
# bytes, the mini FAT and mini stream are not required. In this case, the
# location of the header`s first mini FAT starting sector can be set to
# ENDOFCHAIN, and the location of the root directory entry`s starting sector
# can be set to ENDOFCHAIN.
# The detailed mini FAT sector structure is specified below.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                FAT Sector Location (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  Next DIFAT Sector Location                   |
# +---------------------------------------------------------------+
#
# FAT Sector Location (variable):
#   This field specifies the FAT sector number in a DIFAT.
#   - If Header Major Version is 3, there MUST be 127 fields specified to
#     fill a 512-byte sector minus the "Next DIFAT Sector Location" field.
#   - If Header Major Version is 4, there MUST be 1,023
#

# '}'
function \
__cfb__build_minifat_chain( \
    stream, store, \
    \
    _sector_size, _sector_no, \
    _i, _j, _minifat_sectno, _v, _n, _minifat_per_fat, \
    _mini_sector_size, _minifat_start, _sizeof_sector_no \
) {
    _sector_size = num__lshift(1, astore__get(store, "Header/Sector Shift"));
    _minifat_start = astore__get(store, "Header/First Mini FAT Sector Location");
    _mini_sector_size = num__lshift(1, astore__get(store, "Header/Mini Sector Shift"));
    _sizeof_sector_no = 4;

    _n = 0;
    for (_minifat_sectno = _minifat_start; _minifat_sectno < __cfb__C_sector_magic_MAXREGSECT; ) {
        stream__iseek(stream, (_minifat_sectno + 1) * _sector_size);
        for (_i = 0; _i < _sector_size / _sizeof_sector_no; ++_i) {
            _v = stream__read_uint32(stream);
            if (astore__set(store, "MiniFAT/Chain/" _n, _v) < 0) {
                return cfb__E_UNEXPECTED;
            }
            _n++;
        }
        _minifat_sectno = astore__get(store, "FAT/Chain/" _minifat_sectno);
    }

    #=# '${__pp_trace__cfb_debug1+"$(cut -d\# -f3-<<<'
    #=# TRACE("-------------------------------------------------------------------------------\n" \
    #=#       "[MiniFAT sector chain]\n" \
    #=#       "-------------------------------------------------------------------------------");
    #=# for (_i = 0; _i < _n; ++_i) {
    #=#     if (_i % 16 == 0) {
    #=#         TRACE1("\n%4x ", _i);
    #=#     }
    #=#     _v = astore__get(store, "MiniFAT/Chain/" _i);
    #=#     if (_v == __cfb__C_sector_magic_FREESECT) {
    #=#         _s = "FREE"
    #=#     } else if (_v == __cfb__C_sector_magic_ENDOFCHAIN) {
    #=#         _s = "END"
    #=#     } else if (_v == _i + 1) {
    #=#         _s = "->"
    #=#     } else {
    #=#         _s = sprintf("%x", _v)
    #=#     }
    #=#     TRACE1("%-4s ",  _s);
    #=# }
    #=# TRACE("\n\n");
    #=# ')"}'

    # build MiniFAT sector no => FAT sector no direct access translation map (M2F)
    _sector_no = astore__get(store, "Directory Entries/0/Starting Sector Location");
    _minifat_per_fat = _sector_size / _mini_sector_size;  # 512 / 64 = 8
    for (_i = 0; _i < _n / _minifat_per_fat; ++_i) {
        for (_j = 0; _j < _minifat_per_fat; ++_j) {
            if (astore__set(store, "MiniFAT/M2F/" _i * _minifat_per_fat + _j, _sector_no) < 0) {
                return cfb__E_UNEXPECTED;
            }
        }
        _sector_no = astore__get(store, "FAT/Chain/" _sector_no);
    }

    return cfb__S_OK;
}
# }}}
# {{{ (private)::cfb::unpack_directorysectors
# '${__pp_comment:+'
#
# [MS-CFB]
# 2.6 Compound File Directory Sectors
# 2.6.1 Compound File Directory Entry
#
# '}'
function \
__cfb__unpack_directorysectors( \
    stream, store, id, basedir, \
    \
    _directory_entry_size, _i, \
    _sector_no, object_type, \
    _v, left_sibling, right_sibling, \
    _store, _r, _sector_size \
) {
    _v = astore__get(store, "Header/Sector Shift");
    _sector_size = 2 ^ _v;

    if (astore__has(store, "Directory Entries/" id)) {
        E__message = sprintf( \
             "directory entry recursion is detected. id = %d\n", \
             id);
        return cfb__E_FAIL;
    }

    _directory_entry_size = 128;

    _sector_no = astore__get(store, "Header/First Directory Sector Location");
    for (_i = id; _i >= 4; _i -= 4) {
        _sector_no = astore__get(store, "FAT/Chain/" _sector_no);
        if (_sector_no >= __cfb__C_sector_magic_MAXREGSECT) {
            E__message = sprintf( \
                 "unexpected first directory sector location 0x%08x\n", \
                 _sector_no);

            return cfb__E_UNEXPECTED;
        }
    }

    astore__fork(store, "Directory Entries", _store);
    astore__fork(_store, id, _store);

    _v = (_sector_no + 1) * _sector_size + _directory_entry_size * _i;
    stream__iseek(stream, _v);

    # Directory Entry Name (64 bytes)
    _v = stream__read_utf16le_string(stream, 64);
    if (astore__set(_store, "Directory Entry Name", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }
    if (astore__set(store, "@FileID" basedir "/" _v "/id", id) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Directory Entry Name Length (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(_store, "Directory Entry Name Length", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # Object Type (1 byte)
    #
    # 0x00: Unknown or unallocated
    # 0x01: Storage Object
    # 0x02: Stream Object
    # 0x05: Root Storage Object
    #
    # '}'
    _v = stream__read_uint8(stream);
    if (astore__set(_store, "Object Type", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Color Flag (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(_store, "Color Flag", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Left Sibling ID (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Left Sibling ID", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Right Sibling ID (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Right Sibling ID", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Child ID (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Child Sibling ID", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # CLSID (16 bytes)
    _v = stream__read_guid_string(stream);
    if (astore__set(_store, "CLSID", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # State Bits (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "State Bits", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Creation Time (8 bytes)
    _v = stream__read_timestamp(stream);
    if (astore__set(_store, "Creation Time", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Modified Time (8 bytes)
    _v = stream__read_timestamp(stream);
    if (astore__set(_store, "Modified Time", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Starting Sector Location (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(_store, "Starting Sector Location", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # Stream Size (8 bytes)
    _v = stream__read_uint64(stream);
    if (astore__set(_store, "Stream Size", _v) < 0) {
        return cfb__E_UNEXPECTED;
    }

    # call left/right/child leaf recursively
    _v = astore__get(_store, "Left Sibling ID");
    if (_v < __cfb__C_sector_magic_MAXREGSECT) {
        _r = __cfb__unpack_directorysectors(stream, store, _v, basedir);
        if (_r < 0) {
            return _r;
        }
    }

    _v = astore__get(_store, "Right Sibling ID");
    if (_v < __cfb__C_sector_magic_MAXREGSECT) {
        _r = __cfb__unpack_directorysectors(stream, store, _v, basedir);
        if (_r < 0) {
            return _r;
        }
    }

    _v = astore__get(_store, "Child Sibling ID");
    if (_v < __cfb__C_sector_magic_MAXREGSECT) {
        _r = __cfb__unpack_directorysectors( \
            stream, \
            store, \
            _v, \
            basedir "/" astore__get(_store, "Directory Entry Name"));
        if (_r < 0) {
            return _r;
        }
    }

    return cfb__S_OK;
}
# }}}
# }}}
# {{{ @module vba::lz77
# VBA compressed data decoding functions
# '${__pp_comment:+'
#
# [MS-OVBA]
# 2.4 Algorithms
#   2.4.1 Compression and Decompression
#     2.4.1.3 Algorithms
#     2.4.1.3.1 Decompression Algorithm
#     2.4.1.3.2 Decompressing a CompressedChunk
#
# '}'
# {{{ [MS-OVBA] 2.4.1.1.1 CompressedContainer
# '${__pp_comment:+'
#
# A CompressedContainer is an array of bytes holding the compressed data.
# The Decompression algorithm (section 2.4.1.3.1) processes a
# CompressedContainer to populate a DecompressedBuffer. The Compression
# algorithm (section 2.4.1.3.6) processes a DecompressedBuffer to produce a
# CompressedContainer.
#
# A CompressedContainer MUST be the last array of bytes in a stream.
# On read, the end of stream indicator determines when the entire
# CompressedContainer has been read.
#
# The CompressedContainer is a SignatureByte followed by array of
# CompressedChunk (section 2.4.1.1.4) structures.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | SignatureByte |                    Chunks                     |
# +---------------+-----------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
vba__lz77__init() {
    if (__vba__lz77__init_guard) {
        return (1);
    }

    vba__lz77__E_NOTIMPL      = -16385;
    vba__lz77__E_FAIL         = -16389;
    vba__lz77__E_ACCESSDENIED = -458757;
    vba__lz77__E_UNEXPECTED   = -65535;
    vba__lz77__S_OK           = 0;
    vba__lz77__S_FALSE        = 1;

    __vba__lz77__init_guard = 1;
}

function \
vba__lz77__unpack( \
    istream, store, ostream, \
    \
    _v, _store, _i, _r \
) {
    # SignatureByte (1 byte)
    _v = stream__read_uint8(istream);
    if (astore__set(store, "Id::VBAMagic::Compression,mustbe(1)", _v) < 0) {
        return vba__lz77__E_UNEXPECTED;
    }

    stream__new(ostream);

    # Chunks (variable)
    for (_i = 0; ! stream__is_end(istream); ++_i) {
        astore__fork(store, _i, _store);
        _r = __vba__lz77__unpack_compressed_chunk(istream, _store, ostream);
        if (_r < 0) {
            return _r;
        }
    }

    return vba__lz77__S_OK;
}

# '${__pp_comment:+'
#
# [MS-OVBA] 2.4.1.1.4 CompressedChunk
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |       CompressedHeader        |   CompressedData (variable)   |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__lz77__unpack_compressed_chunk( \
    istream, store, ostream, \
    \
    _chunk_size, _chunk_flag, _store, _r \
) {
    astore__fork(store, "CompressedHeader", _store);

    # CompressedHeader (2 bytes)
    _r = __vba__lz77__unpack_compressed_chunkheader(istream, _store, ostream);
    if (_r < 0) {
        return _r;
    }

    _chunk_size = astore__get(_store, "CompressedChunkSize");
    _chunk_flag = astore__get(_store, "CompressedChunkFlag");

    if (_chunk_flag == 1) {
        # compressed data
        _r = __vba__lz77__unpack_compressed_chunk_data(istream, ostream, _chunk_size + 1);
        if (_r < 0) {
            return _r;
        }
    } else {
        # uncompressed data
        stream__copy(istream, ostream, _chunk_size);
    }

    return vba__lz77__S_OK;
}

# '${__pp_comment:+'
#
# [MS-OVBA] 2.4.1.1.5 CompressedChunkHeader
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |  CompressedChunkSize  |  A  |B|
# +-----------------------+-----+-+
#
# '}'
function \
__vba__lz77__unpack_compressed_chunkheader( \
    istream, store, ostream, \
    \
    _v, _chunk_size, _chunk_signature, _chunk_flag \
) {
    # CompressedChunkSize (12 bits)
    _v = _chunk_size = stream__read_bits(istream, 12);
    if (astore__set(store, "CompressedChunkSize", _v) < 0) {
        return vba__lz77__E_UNEXPECTED;
    }

    # CompressedChunkSignature (3 bits)
    _v = _chunk_signature = stream__read_bits(istream, 3);
    if (astore__set(store, "CompressedChunkSignature,mustbe(3)", _v) < 0) {
        return vba__lz77__E_UNEXPECTED;
    }

    # CompressedChunkFlag (1 bit)
    _v = _chunk_flag = stream__read_bits(istream, 1);
    if (astore__set(store, "CompressedChunkFlag", _v) < 0) {
        return vba__lz77__E_UNEXPECTED;
    }

    #=# '${__pp_trace__vbalz_debug2+"$(cut -d\# -f3-<<<'
    #=# TRACE3( \
    #=#     "CompressedChunkSignature: 0x%1x, " \
    #=#     "CompressedChunkSize: %4d, " \
    #=#     "CompressedChunkFlag: %1d, ", \
    #=#     _chunk_signature, _chunk_size, _chunk_flag);
    #=# ')"}'

    stream__skip_to_align(istream, 1);

    return vba__lz77__S_OK;
}

# '${__pp_comment:+'
#
# [MS-OVBA] 2.4.1.1.6 CompressedChunkData
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Data (variable)                         |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# Data (variable): An array of bytes. Specifies an encoding of
# bytes from the DecompressedBuffer (section 2.4.1.1.2). The
# size of Data in bytes MUST be
# CompressedChunk.CompressedChunkHeader.CompressedChunkSize
# (section 2.4.1.1.4) plus 1. Bytes from the DecompressedChunk
# (section 2.4.1.1.3) are encoded and written to Data by the
# Compressing a DecompressedChunk (section 2.4.1.3.7) algorithm.
# Data is read from the CompressedChunk to be decoded and written
# to the DecompressedChunk by the Decompressing a CompressedChunk
# (section 2.4.1.3.2) algorithm.
#
# [MS-OVBA] 2.4.1.1.7 TokenSequence
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |   FlagByte    |             Tokens (variable)                 |
# +---------------+-----------------------------------------------+
#
# A TokenSequence is a FlagByte followed by an array of Tokens.
# The number of Tokens in the final TokenSequence MUST be greater
# than or equal to 1. The number of Tokens in the final
# TokenSequence MUST less than or equal to eight. All other
# TokenSequences in the CompressedChunkData MUST contain eight
# Tokens.
#
# '}'
function \
__vba__lz77__unpack_compressed_chunk_data( \
    istream, ostream, size, \
    \
    _i, _fbyte, _token, \
    _bits, _len, _offset, _diff, _it, _c, _st \
) {
    for (_diff = 0; size > 0; ) {
        #
        # [MS-OVBA] 2.4.1.1.7 TokenSequence
        #
        # FlagByte (1 byte)
        _fbyte = stream__read_uint8(istream);
        --size;
        #=# '${__pp_trace__vbalz_debug3+"$(cut -d\# -f3-<<<'
        #=# _st = 0;
        #=# ')"}'
        for (_i = 0; _i < 8 && size > 0; ++_i) {
            if (num__and(num__rshift(_fbyte, _i), 1) == 0) {
                stream__write_uint8(ostream, stream__read_uint8(istream));
                ++_diff;
                --size;

                #=# '${__pp_trace__vbalz_debug3+"$(cut -d\# -f3-<<<'
                #=# _it = istream[__stream__M_iit];
                #=# _c = istream[_it];
                #=# if (_st != 0) {
                #=#     TRACE("literal:");
                #=#     _st = 0;
                #=# }
                #=# TRACE1("  %s", str__debug_chr[_c]);
                #=# ')"}'

            } else {
                #
                # [MS-OVBA] 2.4.1.1.8 CopyToken
                #
                _token = stream__read_uint16(istream);  # copy token
                size -= 2;
                #
                # [MS-OVBA] 2.4.1.3.19 CopyToken Algorithms
                #
                for (_bits = 4; _bits < 12; ++_bits) {
                    if (_diff <= num__lshift(1, _bits)) {
                        break;
                    }
                }
                _len = num__and(_token, num__lshift(1, (16 - _bits)) - 1) + 3;
                _offset = num__rshift(_token, 16 - _bits) + 1;
                stream__lz77_copy(ostream, _offset, _len);

                #=# '${__pp_trace__vbalz_debug3+"$(cut -d\# -f3-<<<'
                #=# stream__rewind(ostream, _len);
                #=# if (_st == 0) {
                #=#     TRACE("\n");
                #=#     _st = 1;
                #=# }
                #=# TRACE3( \
                #=#     "  offset: %5d, len: %5d, string: %s", \
                #=#     _offset, _len, stream__read_escaped_string(ostream, _len));
                #=# ')"}'

                _diff += _len;
            }
        }
    }

    return vba__lz77__S_OK;
}
# }}}
# }}}
# {{{ @module vba::dirstream
# [MS-OVBA] 2.3.4.2 dir Stream: Version Independent Project Information
# {{{ vba__dirstream__init
function \
vba__dirstream__init(    _status) {
    if (__vba__dirstream__init_guard) {
        return (1);
    }

    # required modules
    _status = cfb__init();
    if (_status < 0) {
        return _status;
    }
    _status = vba__lz77__init();
    if (_status < 0) {
        return _status;
    }

    vba__dirstream__E_NOTIMPL      = -16385;
    vba__dirstream__E_FAIL         = -16389;
    vba__dirstream__E_ACCESSDENIED = -458757;
    vba__dirstream__E_UNEXPECTED   = -65535;
    vba__dirstream__S_OK           = 0;
    vba__dirstream__S_FALSE        = 1;

    # Signatures of VBA structures
    __vba__dirstream__C_magic_PROJECTSYSKIND       =     1; # 0x0001
    __vba__dirstream__C_magic_PROJECTCODEPAGE      =     3; # 0x0003
    __vba__dirstream__C_magic_PROJECTCOMPATVERSION =    74; # 0x004a
    __vba__dirstream__C_magic_PROJECTLCID          =     2; # 0x0002
    __vba__dirstream__C_magic_PROJECTLCIDINVOKE    =    20; # 0x0014
    __vba__dirstream__C_magic_PROJECTNAME          =     4; # 0x0004
    __vba__dirstream__C_magic_PROJECTDOCSTRING     =     5; # 0x0005
    __vba__dirstream__C_magic_PROJECTHELPFILE      =     6; # 0x0006
    __vba__dirstream__C_magic_PROJECTHELPCONTEXT   =     7; # 0x0007
    __vba__dirstream__C_magic_PROJECTCONSTANTS     =    12; # 0x000c
    __vba__dirstream__C_magic_PROJECTLIBFLAGS      =     8; # 0x0008
    __vba__dirstream__C_magic_PROJECTVERSION       =     9; # 0x0009
    __vba__dirstream__C_magic_REFERENCENAME        =    22; # 0x0016
    __vba__dirstream__C_magic_REFERENCECONTROL     =    47; # 0x002f
    __vba__dirstream__C_magic_REFERENCEORIGINAL    =    51; # 0x0033
    __vba__dirstream__C_magic_REFERENCEREGISTERED  =    13; # 0x000d
    __vba__dirstream__C_magic_REFERENCEPROJECT     =    14; # 0x000e
    __vba__dirstream__C_magic_PROJECTMODULES       =    15; # 0x000f
    __vba__dirstream__C_magic_PROJECTCOOKIE        =    19; # 0x0013
    __vba__dirstream__C_magic_MODULENAME           =    25; # 0x0019
    __vba__dirstream__C_magic_MODULENAMEUNICODE    =    71; # 0x0047
    __vba__dirstream__C_magic_MODULESTREAMNAME     =    26; # 0x001a
    __vba__dirstream__C_magic_MODULEDOCSTRING      =    28; # 0x001c
    __vba__dirstream__C_magic_MODULEOFFSET         =    49; # 0x0031
    __vba__dirstream__C_magic_MODULEHELPCONTEXT    =    30; # 0x001e
    __vba__dirstream__C_magic_MODULECOOKIE         =    44; # 0x002c
    __vba__dirstream__C_magic_MODULETYPE_PROCEDUAL =    33; # 0x0021
    __vba__dirstream__C_magic_MODULETYPE_NONPROC   =    34; # 0x0022
    __vba__dirstream__C_magic_MODULEREADONLY       =    37; # 0x0025
    __vba__dirstream__C_magic_MODULEPRIVATE        =    40; # 0x0028
    __vba__dirstream__C_magic_MODULETERMINATOR     =    43; # 0x002b
    __vba__dirstream__C_magic_PROJECTTERMINATOR    =    16; # 0x0010

    __vba__dirstream__init_guard = 1;
}
# }}}
# {{{ vba__dirstream__unpack
function \
vba__dirstream__unpack( \
    stream, store, \
    \
    _store, _path, _r, _istream, _ostream, _vbaroot, _vba \
) {
    _vbaroot = astore__get(store, "/@VBA Root Directory");
    _vba = astore__get(store, "/@VBA Directory");
    _path = _vbaroot "/" _vba "/dir";

    _r = cfb__unpack_stream(stream, store, _path, _istream);
    if (_r < 0) {
        return _r;
    }

    astore__fork(store, "@LZ77CompressedStream" _path, _store);
    _r = vba__lz77__unpack(_istream, _store, _ostream);
    if (_r < 0) {
        return _r;
    }

    astore__fork(store, "Project", _store);
    _r = __vba__dirstream__unpack_project(_ostream, _store);
    if (_r < 0) {
        return _r;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2 dir Stream: Version Independent Project Information
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                   InformationRecord (variable)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ReferenceRecord (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     ModulesRecord (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |     Terminator (2 bytes)      |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project( \
    stream, store, \
    \
    _v, _r, _store \
) {
    astore__fork(store, "InformationRecord::PROJECTINFORMATION", _store);
    _r = __vba__dirstream__unpack_project_information(stream, _store);
    if (_r < 0) {
        return _r;
    }

    astore__fork(store, "ReferenceRecord::PROJECTREFERENCES", _store);
    _r = __vba__dirstream__unpack_project_references(stream, _store);
    if (_r < 0) {
        return _r;
    }

    astore__fork(store, "ModulesRecord::PROJECTMODULES", _store);
    _r = __vba__dirstream__unpack_project_modules(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # read Terminator
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Terminator::hexint16,mustbe(16)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Reserved::hexint32,mustbe(0)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1 PROJECTINFORMATION Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                         SysKindRecord                         |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |                               |      CompatVersionRecord      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                          LcidRecord                           |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |              ...              |       LcidInvokeRecord        |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                         CodePageRecord                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     NameRecord (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   DocStringRecord (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  HelpFilePathRecord (variable)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  HelpContextRecord (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |              ...              |        LibFlagsRecord         |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                         VersionRecord                         |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        ConstantsRecord                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information( \
    stream, store, \
    \
    _store, _r \
) {
    # SysKindRecord
    astore__fork(store, "SysKindRecord::PROJECTSYSKIND", _store);
    _r = __vba__dirstream__unpack_project_information_syskind(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # CompatVersionRecord
    astore__fork(store, "CompatVersionRecord::PROJECTCOMPATVERSION", _store);
    _r = __vba__dirstream__unpack_project_information_compatversion(stream, store);
    if (_r < 0) {
        return _r;
    }

    # LcidRecord
    astore__fork(store, "LcidRecord::PROJECTLCID", _store);
    _r = __vba__dirstream__unpack_project_information_lcid(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # LcidInvokeRecord
    astore__fork(store, "LcidInvokeRecord::PROJECTLCIDINVOKE", _store);
    _r = __vba__dirstream__unpack_project_information_lcidinvoke(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # CodePageRecord
    astore__fork(store, "CodePageRecord::PROJECTCODEPAGE", _store);
    _r = __vba__dirstream__unpack_project_information_codepage(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # NameRecord
    astore__fork(store, "NameRecord::PROJECTNAME", _store);
    _r = __vba__dirstream__unpack_project_information_name(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DocStringRecord
    astore__fork(store, "DocStringRecord::PROJECTDOCSTRING", _store);
    _r = __vba__dirstream__unpack_project_information_docstring(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # HelpFilePathRecord
    astore__fork(store, "HelpFilePathRecord::PROJECTHELPFILEPATH", _store);
    _r = __vba__dirstream__unpack_project_information_helpfilepath(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # HelpContextRecord
    astore__fork(store, "HelpContextRecord::PROJECTHELPCONTEXT", _store);
    _r = __vba__dirstream__unpack_project_information_helpcontext(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # LibFlagsRecord
    astore__fork(store, "LibFlagsRecord::PROJECTLIBFLAGS", _store);
    _r = __vba__dirstream__unpack_project_information_libflags(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # VersionRecord
    astore__fork(store, "VersionRecord::PROJECTVERSION", _store);
    _r = __vba__dirstream__unpack_project_information_version(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ConstantsRecord
    astore__fork(store, "ConstantsRecord::PROJECTCONSTANTS", _store);
    _r = __vba__dirstream__unpack_project_information_constants(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_syskind
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.1 PROJECTSYSKIND Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |        Size (4 bytes)         |
# +-------------------------------+-------------------------------+
# |              ...              |       SysKind (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_syskind( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(1)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # SysKind (4 bytes):
    # 0x00000000 For 16-bit Windows Platforms.
    # 0x00000001 For 32-bit Windows Platforms.
    # 0x00000002 For Macintosh Platforms.
    # 0x00000003 For 64-bit Windows Platforms.
    #
    # oaidl.h
    #
    # typedef enum tagSYSKIND {
    #   SYS_WIN16 = 0,
    #   SYS_WIN32,
    #   SYS_MAC,
    #   SYS_WIN64
    # } SYSKIND;
    #
    # '}'
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SysKind::SysKind,a_kind_of(SysKind)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_compatversion
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.2 PROJECTCOMPATVERSION Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |        Size (4 bytes)         |
# +-------------------------------+-------------------------------+
# |              ...              |    CompatVersion (4 bytes)    |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_compatversion( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(74)", _v) < 0) {
        # This record is optional, so if the signatures do not match,
        # we should return S_FALSE instead of E_XXXX.
        stream__rewind(stream, 2);
        E__message = "";
        return vba__dirstream__S_FALSE;
    }

    # Size (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # CompatVersion (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "CompatVersion", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_lcid
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.3 PROJECTLCID Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |         Lcid (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# Lcid (4 bytes)
#
# [MS-DTYP] 2.3.6 LCID
# A language code identifier structure is stored as a DWORD.
# The lower word contains the language identifier, and the
# upper word contains both the sorting identifier (ID) and a
# reserved value. For additional details about the structure
# and possible values, see [MS-LCID].
#
# * This type is declared in WinNT.h as follows:
#
#    typedef DWORD LCID;
#
# '}'
function \
__vba__dirstream__unpack_project_information_lcid( \
    stream, store, \
    \
    _v, _size \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(2)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes)
    _v = _size = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # LCID (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Lcid::LCID,a_kind_of(LCID)", _v) < 0) {
        return vba__dirstream__E_NOTIMPL;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_lcidinvoke
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.4 PROJECTLCIDINVOKE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |      LcidInvoke (4 bytes)     |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# * VBA always uses 1033(0x00000409)
#
#   This value is thought to be used when VBA calls IDispatch::Invoke.
#   TODO: We need to test whether 1033 is really used using
#         Scripting.RegExp or something similar.
#
# '}'
function \
__vba__dirstream__unpack_project_information_lcidinvoke( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(20)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # LcidInvoke (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "LcidInvoke::LCID,a_kind_of(LCID)", _v) < 0) {
        return vba__dirstream__E_NOTIMPL;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_lcidinvoke
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.5 PROJECTCODEPAGE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |       Code Page (2 bytes)     |
# +-------------------------------+-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_codepage( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(3)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint<32>,mustbe(2)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # CodePage (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "CodePage::CodePage,a_kind_of(CodePage)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # build ANSI code page charmap
    if (acp__build_map_to_u8char(_v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_name
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.6 PROJECTNAME Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |     ProjectName (variable)    |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_name( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfProjectName (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,in_range(1,128)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ProjectName (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "ProjectName", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_docstring
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.7 PROJECTDOCSTRING Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |   SizeOfDocString (4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |      DocString (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |       Reserved (2 bytes)      |SizeOfDocStringUnicode(4 bytes)|
# +-------------------------------+-------------------------------+
# |              ...              |  DocStringUnicode (variable)  |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_docstring( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(5)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfDocString (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfDocString::uint32,le(2000)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # DocString (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "DocString", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    _v = stream__read_uint16(stream, 2);
    if (astore__set(store, "Reserved::hexint16,mustbe(64)", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfDocStringUnicode (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfDocStringUnicode::uint32,le(8000),multiple_of(2)", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # DocStringUnicode (variable)
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "DocStringUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_helpfilepath
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.8 PROJECTHELPFILEPATH Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |    SizeOfHelpFile (4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |      HelpFile1 (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |       Reserved (2 bytes)      |    SizeOfHelpFile2(4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |      HelpFile2 (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_helpfilepath( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(6)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfHelpFile1 (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfHelpFile1::uint32,le(260)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # HelpFile1 (variable):
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "HelpFile1", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    _v = stream__read_uint16(stream, 2);
    if (astore__set(store, "Reserved::hexint16,mustbe(61)", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfHelpFile2 (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfHelpFile2::uint32,le(260)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # HelpFile2 (variable):
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "HelpFile2", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_helpcontext
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.9 PROJECTHELPCONTEXT Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |      HelpContext (4 bytes)    |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_helpcontext( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(7)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # HelpContext (variable):
    #
    # An unsigned integer that specifies the Help topic identifier in the
    # Help file specified by PROJECTHELPFILEPATH (section 2.3.4.2.1.8).
    #
    _v = stream__read_uint32(stream);
    if (astore__set(store, "HelpContext", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_libflags_libflags
# '${__pp_comment:+'
#
# [MS-OAUT] 2.2.20 LIBFLAGS Type Library Feature Constants
#
# The LIBFLAGS enumeration values are used in the wLibFlags field of a
# TLIBATTR to specify the features of the automation scope of an ITypeLib
# server, as specified in section 2.2.45.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|                  Reserved (28 bits)                   |
# +-+-+-+-+-------------------------------------------------------+
#
# * The Type library feature constants are defined in the LIBFLAGS enumeration.
#
#     typedef [v1_enum] enum tagLIBFLAGS
#     {
#         LIBFLAG_FRESTRICTED = 0x01,
#         LIBFLAG_FCONTROL = 0x02,
#         LIBFLAG_FHIDDEN = 0x04,
#         LIBFLAG_FHASDISKIMAGE = 0x08
#     } LIBFLAGS;
#
# '}'
function \
__vba__dirstream__unpack_project_information_libflags_libflags( \
    stream, store, \
    \
    _v \
) {
    # A: LIBFLAG_FRESTRICTED (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "LIBFLAG_FRESTRICTED::bool", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # B: LIBFLAG_FCONTROL (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "LIBFLAG_FCONTROL::bool", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # C: LIBFLAG_FHIDDEN (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "LIBFLAG_FHIDDEN::bool", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # D: LIBFLAG_FHASDISKIMAGE (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "LIBFLAG_FHASDISKIMAGE::bool", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (28 bit)
    _v = stream__read_bits(stream, 28);
    if (astore__set(store, "Reserved::hexint32,mustbe(0)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_libflags
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.10 PROJECTLIBFLAGS Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |    ProjectLibFlags (4 bytes)  |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_libflags( \
    stream, store, \
    \
    _v, _r, _store \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(8)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ProjectLibFlags (4 bytes):
    astore__fork(store, "ProjectLibFlags", _store);
    _r = __vba__dirstream__unpack_project_information_libflags_libflags(stream, _store);
    if (_r < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_version
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.11 PROJECTVERSION Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |       Reserved (4 bytes)      |
# +-------------------------------+-------------------------------+
# |              ...              |     VersionMajor (4 bytes)    |
# +-------------------------------+-------------------------------+
# |              ...              |     VersionMinor (2 bytes)    |
# +-------------------------------+-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_version( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    # An unsigned integer that specifies the identifier for this record.
    # MUST be 0x0009.
    _v = stream__read_uint16(stream);
    if (astore__set(stream, "Id::VBAMagic,mustbe(9)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (4 bytes)
    # MUST be 0x00000004. MUST be ignored.
    _v = stream__read_uint32(stream);
    if (astore__set(stream, "Reserved::hexint16,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # VersionMajor (4 bytes):
    #
    # * This field is not a version number in the usual sense, but a
    #   timestamp in 32-bit seconds. It seems to change to a new value
    #   when the file is updated.
    #
    #   In versions up to Office2000, this timestamp is the number of
    #   seconds since January 1, 1970, 00:00:00, i.e. the UNIX epoch.
    #
    #   However, in Office XP (2001) and later, the beginning of this
    #   epoch seems to have changed to November 21, 1968, 00:00:00.
    #
    # * Why "November 21, 1968"?
    #
    #   1968 was when Paul Allen, Kent Evans and Bill Gates were attending
    #   Lakeside School, and according to Wikipedia, they started using
    #   a teletype terminal connected to a GE-635 in "Fall 1968" and
    #   connected to a PDP-10 at the Computer Center Corporation (CCC)
    #   in "November 1968".
    #
    #   This may have been around the time BillG wrote a tic-tac-toe program
    #   in BASIC. "November 21, 1968" may have been recognized as some kind
    #   of historical anniversary within Microsoft, and if you ask people
    #   involved in the specification, you might hear some interesting stories.
    #
    # '}'
    _v = stream__read_uint32(stream)
    if (astore__set(store, "VersionMajor", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # VersionMinor (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "VersionMinor", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_information_constants
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.1.12 PROJECTCONSTANTS Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |   SizeOfConstants (4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |      Constants (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |       Reserved (2 bytes)      |SizeOfConstantsUnicode(4 bytes)|
# +-------------------------------+-------------------------------+
# |              ...              |  ConstantsUnicode (variable)  |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_information_constants( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(12)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfConstants (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,le(1015)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Constants (variable)
    #
    # An array of SizeOfConstants bytes that specifies the compilation
    # constants for the VBA project. MUST contain MBCS characters encoded
    # using the code page specified in PROJECTCODEPAGE (section 2.3.4.2.1.5).
    # MUST NOT contain null characters.
    #
    # MUST conform to the following ABNF grammar:
    #
    #   Constants = Constant *( " : " Constant )
    #   Constant = ConstantName " = " ConstantValue
    #   ConstantName = VbaIdentifier
    #   ConstantValue = ["-"] 1*5DIGIT
    #
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "Constants", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved,mustbe(60)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfConstantsUnicode (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfConstantsUnicode::uint32," \
                           "le(4060),multiple_of(2)", _v)) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ConstantsUnicode (variable)
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "ConstantsUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references
#
# [MS-OVBA] 2.3.4.2.2 PROJECTREFERENCES Record
#
function \
__vba__dirstream__unpack_project_references( \
    stream, store, \
    \
    _id, _r, _store, _i \
) {

    for (_i = 0;;) {
        # Id (2 bytes):
        _id = stream__read_uint16(stream);
        stream__rewind(stream, 2);
        if (_id != __vba__dirstream__C_magic_REFERENCENAME) {
            break;
        }

        astore__fork(store, ++_i, _store);

        _r = __vba__dirstream__unpack_project_references_reference(stream, _store, _i);
        if (_r < 0) {
            return _r;
        }

        if (stream__is_end(stream)) {
            E__message = "Unexpected EOF in " \
                              "__vba__dirstream__unpack_project_references()";
            return vba__dirstream__E_UNEXPECTED;
        }
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference
#
# [MS-OVBA] 2.3.4.2.2.1 REFERENCE Record
#
function \
__vba__dirstream__unpack_project_references_reference( \
    stream, store, \
    \
    _id, _r \
) {

    _r = __vba__dirstream__unpack_project_references_reference_name(stream, store);
    if (_r < 0) {
        return _r;
    }

    # Id (2 bytes):
    _id = stream__read_uint16(stream);
    stream__rewind(stream, 2);

    if (_id == __vba__dirstream__C_magic_REFERENCECONTROL) {
        _r = __vba__dirstream__unpack_project_references_reference_control(stream, store);
        if (_r < 0) {
            return _r;
        }
    } else if (_id == __vba__dirstream__C_magic_REFERENCEORIGINAL) {
        _r = __vba__dirstream__unpack_project_references_reference_original(stream, store);
        if (_r < 0) {
            return _r;
        }
    } else if (_id == __vba__dirstream__C_magic_REFERENCEREGISTERED) {
        _r = __vba__dirstream__unpack_project_references_reference_registered(stream, store);
        if (_r < 0) {
            return _r;
        }
    } else if (_id == __vba__dirstream__C_magic_REFERENCEPROJECT) {
        _r = __vba__dirstream__unpack_project_references_reference_project(stream, store);
        if (_r < 0) {
            return _r;
        }
    } else {
        E__message = sprintf( \
            "invalid ReferenceRecord signature 0x%04x, " \
            "MUST be one of (0x%x, 0x%x, 0x%x, 0x%x)\n", \
            _id, \
            __vba__dirstream__C_magic_REFERENCECONTROL, \
            __vba__dirstream__C_magic_REFERENCEORIGINAL, \
            __vba__dirstream__C_magic_REFERENCEREGISTERED, \
            __vba__dirstream__C_magic_REFERENCEPROJECT);
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference_name
#
# [MS-OVBA] 2.3.4.2.2.2 REFERENCENAME Record
#
# Specifies the name of a referenced VBA project or Automation type library.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      SizeOfName (4 bytes)     |
# +-------------------------------+-------------------------------+
# |              ...              |         Name (variable)       |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |       Reserved (2 bytes)      |  SizeOfNameUnicode (4 bytes)  |
# +-------------------------------+-------------------------------+
# |              ...              |     NameUnicode (variable)    |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_references_reference_name( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(22)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfName (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, "SizeOfName::uint32,le(%)", _v, _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Name (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "Name", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved::uint16,mustbe(62)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfNameUnicode (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, "SizeOfNameUnicode::uint32," \
                           "multiple_of(2),le(%)", _v, _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # NameUnicode (variable)
    _v = stream__read_utf16le_string(stream, _v)
    if (astore__set(store, "NameUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference_control
#
# [MS-OVBA] 2.3.4.2.2.3 REFERENCECONTROL Record
#
function \
__vba__dirstream__unpack_project_references_reference_control( \
    stream, store, \
    \
    _id, _size, _store, _v \
) {

    if (astore__set(store, "Type", "REFERENCECONTROL") < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Id (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # SizeTwiddled (4 bytes):
    #
    # An unsigned integer that specifies the sum of the size in
    # bytes of SizeOfLibidTwiddled, LibidTwiddled, Reserved1,
    # and Reserved2. MUST be ignored on read.
    #
    # '}'
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeTwiddled", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfLibidTwiddled (4 bytes):
    _v = _size = stream__read_uint32(stream);
    if (astore__set(store, "SizeTwiddled", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # LibidTwiddled (variable):
    _v = stream__read_ansi_string(stream, _size);
    if (astore__set(store, "LibidTwiddled", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved1 (4 bytes):
    stream__skip(stream, 4);

    # Reserved2 (2 bytes):
    stream__skip(stream, 2);

    # NameRecordExtended
    _id = stream__read_uint16(stream);
    stream__rewind(stream, 2);

    astore__fork(store, "Extended", _store);

    if (_id == __vba__dirstream__C_magic_REFERENCENAME) {

        _id = stream__read_uint16(stream);

        # SizeOfName (4 bytes):
        _size = stream__read_uint32(stream);

        # Name (variable):
        if (astore__set(_store, "Name", stream__read_ansi_string(stream, _size)) < 0) {
            return vba__dirstream__E_UNEXPECTED;
        }

        # skip Reserved field (2 bytes):
        stream__skip(stream, 2);

        # SizeOfNameUnicode (4 bytes):
        _size = stream__read_uint32(stream);
        if (num__and(_size, 1) == 1) {
            E__message = sprintf( \
                "invalid extended SizeOfNameUnicode size %d, MUST be even", \
                _size);
            return vba__dirstream__E_FAIL;
        }

        # NameUnicode (variable)
        if (astore__set(_store, "NameUnicode", stream__read_utf16le_string(stream, _size)) < 0) {
            return vba__dirstream__E_UNEXPECTED;
        }
    }

    # Reserved3 (2 bytes):
    stream__skip(stream, 2);

    # SizeExtended (4 bytes):
    _v = _size = stream__read_uint32(stream);
    if (astore__set(store, "SizeExtended", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

#    # SizeOfLibidExtended (4 bytes)
#    _v = stream__read_uint32(stream);
#    astore__set(store, "SizeOfLibidExtended", _v);

    # '${__pp_comment:+'
    #
    # LibidExtended (variable)
    #
    # An array of SizeOfLibidExtended bytes that specifies the extended type
    # library`s identifier. MUST contain MBCS characters encoded using the code
    # page specified in PROJECTCODEPAGE (section 2.3.4.2.1.5). MUST NOT contain
    # null characters. MUST conform to the ABNF grammar in LibidReference
    # (section 2.1.1.8).
    #
    # '}'

    # skip extended fields
    # (SizeOfLibidExtended, LibidExtended, Reserved4, Reserved5, OriginalTypeLib, and Cookie)
    stream__skip(stream, _size);

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference_original
#
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.2.4 REFERENCEORIGINAL Record
#
# Specifies the identifier of an Automation type library and a related
# REFERENCECONTROL (section 2.3.4.2.2.3). The contained REFERENCECONTROL`s
# twiddled type library was generated from the Automation type library
# identifier specified.
#
# [MS-OVBA] 1.1 Glossary
# twiddled type library: A modified Automation type library in which all
# controls are marked as extensible. A twiddled type library is generated
# automatically by the Visual Basic Editor when a user adds one or more
# controls to a document.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         | SizeOfLibidOriginal (4 bytes) |
# +-------------------------------+-------------------------------+
# |              ...              |    LibidOriginal (variable)   |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       ReferenceRecord (variable)              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_references_reference_original( \
    stream, store, \
    \
    _v, _size, _r, _store, _left \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic::ReferenceType,mustbe(51)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfLibidOriginal (4 bytes)
    _v = _size = stream__read_uint32(stream);
    _left = stream__available_size(stream);
    if (astore__set(store, "SizeOfLibidOriginal::uint32,le(%)", _v, _left) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # LibidOriginal (variable)
    _v = stream__read_ansi_string(stream, _size);
    if (astore__set(store, "LibidOriginal", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ReferenceRecord (variable)
    astore__fork(store, "ReferenceRecord", _store);
    _r = __vba__dirstream__unpack_project_references_reference_control(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference_registered
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.2.5 REFERENCEREGISTERED Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |        Size (4 bytes)         |
# +-------------------------------+-------------------------------+
# |              ...              |     SizeOfLibid (4 bytes)     |
# +-------------------------------+-------------------------------+
# |              ...              |       Libid (variable)        |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       Reserved1 (4 bytes)                     |
# +-------------------------------+-------------------------------+
# |      Reserved2 (2 bytes)      |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_references_reference_registered( \
    stream, store, \
    \
    _v, _cbsize, _left \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic::ReferenceType,mustbe(13)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes)
    # An unsigned integer that specifies the total size in bytes of
    # SizeOfLibid, Libid, Reserved1, and Reserved2. MUST be ignored on read.
    _v = _cbsize = stream__read_uint32(stream);
    _left = stream__available_size(stream);
    if (astore__set(store, "Size::uint32,le(%)", _v, _left) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfLibid (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfLibid::uint32,le(%)", _v, _left - 4) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Libid (variable)
    # An array of SizeOfLibid bytes that specifies an Automation type library`s
    # identifier.  MUST contain MBCS characters encoded using the code page
    # specified in PROJECTCODEPAGE
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "Libid", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved1 (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Reserved1::hexint32,mustbe(0)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved2 (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved2::hexint16,mustbe(0)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # check current position
    if (stream__available_size(stream) != _left - _cbsize) {
        E__message = sprintf( \
            "Buffer overread or underread detected, " \
            "expected available size: %s, actual: %s.", \
            _left - _cbsize, \
            stream__available_size(stream));
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_references_reference_project
# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.2.2.6 REFERENCEPROJECT Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |        Size (4 bytes)         |
# +-------------------------------+-------------------------------+
# |              ...              | SizeOfLibidAbsolute (4 bytes) |
# +-------------------------------+-------------------------------+
# |              ...              |   LibidAbsolute (variable)    |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                 SizeOfLibidRelative (4 bytes)                 |
# +---------------------------------------------------------------+
# |                    LibidRelative (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     MajorVersion (4 bytes)                    |
# +-------------------------------+-------------------------------+
# |     MinorVersion (2 bytes)    |
# +-------------------------------+
#
# '}'
function \
__vba__dirstream__unpack_project_references_reference_project( \
    stream, store, \
    \
    _v, _cbsize, _left \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic::ReferenceType,mustbe(14)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # Size (4 bytes)
    #
    # An unsigned integer that specifies the total size in bytes of
    # SizeOfLibidAbsolute, LibidAbsolute, SizeOfLibidRelative. LibidRelative,
    # MajorVersion, and MinorVersion. MUST be ignored on read.
    #
    # '}'
    _v = _cbsize = stream__read_uint32(stream);
    _left = stream__available_size(stream);
    if (astore__set(store, "Size::uint32,le(%)", _v, _left) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfLibidAbsolute (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfLibidAbsolute::uint32,le(%)", _v, _cbsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # LibidAbsolute (variable)
    #
    # An array of SizeOfLibidAbsolute bytes that specifies the referenced
    # VBA project’s identifier with an absolute path, <ProjectPath>. MUST
    # contain MBCS characters encoded using the code page specified in
    # PROJECTCODEPAGE (section 2.3.4.2.1.5). MUST NOT contain null characters.
    # MUST conform to the ABNF grammar ProjectReference (section 2.1.1.12).
    #
    # '}'
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "LibidAbsolute", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfLibidRelative (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfLibidRelative::uint32,le(%)", _v, _cbsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # LibidRelative (variable)
    # An array of SizeOfLibidRelative bytes that specifies the referenced VBA
    # project’s identifier with a relative path, <ProjectPath>, that is
    # relative to the current VBA project. MUST contain MBCS characters encoded
    # using the code page specified in PROJECTCODEPAGE (section 2.3.4.2.1.5).
    # MUST NOT contain null characters. MUST conform to the ABNF grammar
    # ProjectReference (section 2.1.1.12).
    #
    # '}'
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "LibidRelative", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # MajorVersion (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "MajorVersion", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # MinorVersion (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "MinorVersion", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # check current position
    if (stream__available_size(stream) != _left - _cbsize) {
        E__message = sprintf( \
            "Buffer overread or underread detected, " \
            "expected available size: %s, actual: %s.", \
            _left - _cbsize, \
            stream__available_size(stream));
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules
#
# [MS-OVBA] 2.3.4.2.3 PROJECTMODULES Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |        Size (4 bytes)         |
# +-------------------------------+-------------------------------+
# |              ...              |        Count (2 bytes)        |
# +-------------------------------+-------------------------------+
# |                 ProjectCookieRecord (8 bytes)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      Modules (variable)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules( \
    stream, store, \
    \
    _v, _id, _r, _i, \
    _count, _store, _left \
) {
    # Id (2 bytes)
    _v = _id = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(15)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(2)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Count (2 bytes)
    _v = _count = stream__read_uint16(stream);
    _left = stream__available_size(stream);
    if (astore__set(store, "Count::uint32,le(%)", _v, _left) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ProjectCookieRecord
    astore__fork(store, "ProjectCookieRecord::PROJECTCOOKIE", _store);
    _r = __vba__dirstream__unpack_project_modules_cookie(stream, _store);
    if (_r < 0) {
        return _r;
    }

    for (_i = 1; _i <= _count; ++_i) {

        astore__fork(store, "Modules/" _i, _store);

        # Module (variable)
        _r = __vba__dirstream__unpack_project_modules_module(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_cookie
#
# [MS-OVBA] 2.3.4.2.3.1 PROJECTCOOKIE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |        Cookie (2 bytes)       |
# +-------------------------------+-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_cookie( \
    stream, store, \
    \
    _v, _id \
) {
    # Id (2 bytes)
    _v = _id = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(19)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(2)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Cookie (2 bytes)
    #
    # MUST be ignored on read. MUST be 0xFFFF on write.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Cookie::hexint16", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module
#
# [MS-OVBA] 2.3.4.2.3.2 MODULE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                     NameRecord (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  NameUnicodeRecord (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   StreamNameRecord (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   DocStringRecord (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    OffsetRecord (10 bytes)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |             ...               |  HelpContextRecord (10 bytes) |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    CookieRecord (8 bytes)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     TypeRecord (6 bytes)                      |
# +-------------------------------+-------------------------------+
# |                               |   ReadOnlyRecord (optional)   |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    PrivateRecord (optional)                   |
# +-------------------------------+-------------------------------+
# |             ...               |     Terminator (2 bytes)      |
# +-------------------------------+-------------------------------+
# |                       Reserved (4 bytes)                      |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module( \
    stream, store, \
    \
    _v, _r, _store \
) {
    # NameRecord (variable)
    astore__fork(store, "NameRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_name(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # NameUnicodeRecord (variable)
    astore__fork(store, "NameUnicodeRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_nameunicode(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # StreamNameRecord (variable)
    astore__fork(store, "StreamNameRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_streamname(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DocStringRecord (variable)
    astore__fork(store, "DocStringRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_docstring(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # OffsetRecord (10 bytes)
    astore__fork(store, "OffsetRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_offset(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # HelpContextRecord (10 bytes)
    astore__fork(store, "HelpContextRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_helpcontext(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # CookieRecord (8 bytes)
    astore__fork(store, "CookieRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_cookie(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # TypeRecord (6 bytes)
    astore__fork(store, "TypeRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_type(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ReadOnlyRecord (6 bytes, optional)
    astore__fork(store, "ReadOnlyRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_readonly(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # PrivateRecord (6 bytes, optional)
    astore__fork(store, "PrivateRecord", _store);
    _r = __vba__dirstream__unpack_project_modules_module_private(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # Terminator (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Terminator::VBAMagic,mustbe(43)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (4 bytes)
    stream__skip(stream, 4);

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module_name
#
# [MS-OVBA] 2.3.4.2.3.2.1 MODULENAME Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |   SizeOfModuleName (4 bytes)  |
# +-------------------------------+-------------------------------+
# |              ...              |     ModuleName (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_name( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(25)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfModuleName (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfModuleName::uint32,le(%)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ModuleName (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "ModuleName", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module_nameunicode
#
# [MS-OVBA] 2.3.4.2.3.2.2 MODULENAMEUNICODE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |    SizeOfModuleNameUnicode    |
# +-------------------------------+-------------------------------+
# |              ...              | ModuleNameUnicode (variable)  |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_nameunicode( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(71)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfModuleNameUnicode (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfModuleNameUnicode::uint32,le(%),multiple_of(2)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # ModuleNameUnicode (variable):
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "ModuleNameUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module_streamname
#
# [MS-OVBA] 2.3.4.2.3.2.3 MODULESTREAMNAME Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |  SizeOfStreamName (4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |     StreamName (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      Reserved (2 bytes)       |    SizeOfStreamNameUnicode    |
# +-------------------------------+-------------------------------+
# |              ...              |  StreamNameUnicode (variable) |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_streamname( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(26)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfStreamName (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfStreamName::uint32,le(%)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # StreamName (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "StreamName", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    #
    # MUST be 0x0032. MUST be ignored.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved,mustbe(50)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfStreamNameUnicode (4 bytes):
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfStreamNameUnicode::uint32,le(%),multiple_of(2)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # StreamNameUnicode (variable):
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "StreamNameUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module_docstring
#
# [MS-OVBA] 2.3.4.2.3.2.4 MODULEDOCSTRING Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |   SizeOfDocString (4 bytes)   |
# +-------------------------------+-------------------------------+
# |              ...              |      DocString (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      Reserved (2 bytes)       |    SizeOfDocStringUnicode     |
# +-------------------------------+-------------------------------+
# |              ...              |  DocStringUnicode (variable)  |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_docstring( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(28)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfDocString (4 bytes):
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfDocString::uint32,le(%)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # DocString (variable)
    _v = stream__read_ansi_string(stream, _v);
    if (astore__set(store, "DocString", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (2 bytes)
    #
    # MUST be 0x0048. MUST be ignored.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved,mustbe(72)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfDocStringUnicode (4 bytes):
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, \
                    "SizeOfDocStringUnicode::uint32,le(%),multiple_of(2)", \
                    _v, \
                    _maxsize) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # DocStringUnicode (variable):
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "DocStringUnicode", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ __vba__dirstream__unpack_project_modules_module_offset
#
# [MS-OVBA] 2.3.4.2.3.2.5 MODULEOFFSET Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |         Size (4 bytes)        |
# +-------------------------------+-------------------------------+
# |              ...              |      TextOffset (4 bytes)     |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_offset( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,mustbe(49)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # SizeOfOffset (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "SizeOfOffset::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # TextOffset (4 bytes)
    _v = stream__read_uint32(stream)
    if (astore__set(store, "TextOffset", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
#
# [MS-OVBA] 2.3.4.2.3.2.6 MODULEHELPCONTEXT Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |     HelpContext (4 bytes)     |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_helpcontext( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::uint16,mustbe(30)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(4)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # HelpContext (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "HelpContext::uint32", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}

# {{{ [MS-OVBA] 2.3.4.2.3.2.7 MODULECOOKIE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |       Cookie (2 bytes)        |
# +-------------------------------+-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_cookie( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::uint16,mustbe(44)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Size (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Size::uint32,mustbe(2)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Cookie (4 bytes)
    #
    # MUST be ignored on read. MUST be 0xFFFF on write.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Cookie::hexint16", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.4.2.3.2.8 MODULETYPE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_type( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes):
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Id::VBAMagic,one_of(33,34)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    # Reserved (4 bytes):
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Reserved,mustbe(0)", _v) < 0) {
        return vba__dirstream__E_UNEXPECTED;
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.4.2.3.2.9 MODULEREADONLY Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_readonly( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (_v == __vba__dirstream__C_magic_MODULEREADONLY) {
        # Reserved (4 bytes)
        stream__skip(stream, 4);
    } else {
        stream__rewind(stream, 2);
    }

    return vba__dirstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.4.2.3.2.10 MODULEPRIVATE Record
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |          Id (2 bytes)         |      Reserved (4 bytes)       |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
function \
__vba__dirstream__unpack_project_modules_module_private( \
    stream, store, \
    \
    _v \
) {
    # Id (2 bytes)
    _v = stream__read_uint16(stream);
    if (_v == __vba__dirstream__C_magic_MODULEPRIVATE) {
        # Reserved (4 bytes)
        _v = stream__read_uint32(stream, 4);
        if (astore__set(store, "Reserved::uint32,mustbe(0)", _v) < 0) {
            return vba__dirstream__E_UNEXPECTED;
        }
    } else {
        stream__rewind(stream, 2);
    }

    return vba__dirstream__S_OK;
}
# }}}
# }}}
# {{{ @module vba::projectstream
# {{{ vba__projectstream__init
function \
vba__projectstream__init(    _status) {
    if (__vba__projectstream__init_guard) {
        return (1);
    }

    # required modules
    _status = cfb__init();
    if (_status < 0) {
        return _status;
    }

    vba__projectstream__E_NOTIMPL      = -16385;
    vba__projectstream__E_FAIL         = -16389;
    vba__projectstream__E_ACCESSDENIED = -458757;
    vba__projectstream__E_UNEXPECTED   = -65535;
    vba__projectstream__S_OK           = 0;
    vba__projectstream__S_FALSE        = 1;

    __vba__projectstream__init_guard = 1;

    return (0);
}
# }}}

# {{{ [MS-OVBA] 2.3.1 PROJECT Stream: Project Information
# '${__pp_comment:+'
#
# The PROJECT stream specifies properties of the VBA project.
#
# This stream is an array of bytes that specifies properties
# of the VBA project. MUST contain MBCS characters encoded using
# the code page specified in PROJECTCODEPAGE (section 2.3.4.2.1.5).
#
#
# NOTE: This stream is plain text delimited by CRLF, but LFCR
#       delimiters are also allowed.
#
# [MS-OVBA] 2.1.1.10 NWLN
#
# ABNF syntax:
#
#    NWLN = (CR LF) / (LF CR)
#
# '}'
function \
vba__projectstream__unpack( \
    stream, store, \
    \
    _path, _store, _stream, _r \
) {
    _path = astore__get(store, "/@VBA Root Directory") "/PROJECT";

    _r = cfb__unpack_stream(stream, store, _path, _stream);
    if (_r < 0) {
        return _r;
    }

    astore__fork(store, "VBAPROJECTText", _store);
    _r = __vba__projectstream__unpack_projecttext(_stream, _store);
    if (_r < 0) {
        return _r;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1 PROJECT Stream: Project Information
# '${__pp_comment:+'
#
# ABNF syntax:
#
#   VBAPROJECTText = ProjectProperties NWLN
#                    HostExtenders
#                   [NWLN ProjectWorkspace]
#
# '}'
function \
__vba__projectstream__unpack_projecttext( \
    stream, store, \
    \
    _v, _r, _store \
) {
    # ProjectProperties
    astore__fork(_store, "ProjectProperties", _store);
    _r = __vba__projectstream__unpack_projectproperties(stream, store);
    if (_r < 0) {
        return _r;
    }

    # NWLN
    _v = stream__currentline(stream);
    if (_v != "") {
        E__message = sprintf("unexpected line: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    # HostExtenders
    astore__fork(_store, "HostExtenders", _store);
    _r = __vba__projectstream__unpack_hostextenders(stream, store);
    if (_r < 0) {
        return _r;
    }

    # ProjectWorkspace
    astore__fork(_store, "ProjectWorkspace", _store);
    _r = __vba__projectstream__unpack_projectworkspace(stream, store);
    if (_r < 0) {
        return _r;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.1 ProjectProperties
# '${__pp_comment:+'
#
# ABNF syntax:
#
#   ProjectProperties = ProjectId
#                      *ProjectItem
#                      [ProjectHelpFile]
#                      [ProjectExeName32]
#                       ProjectName
#                       ProjectHelpId
#                      [ProjectDescription]
#                      [ProjectVersionCompat32]
#                       ProjectProtectionState
#                       ProjectPassword
#                       ProjectVisibilityState
#                       ProjectItem = ( ProjectModule /
#                       ProjectPackage ) NWLN
#
# '}'
function \
__vba__projectstream__unpack_projectproperties( \
    stream, store, \
    \
    _r, _store, _i \
) {
    if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "ID=ProjectId", _store);
    _r = __vba__projectstream__unpack_projectid(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectId is required.";
        return vba__projectstream__E_FAIL;
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    for (_i = 0; ! stream__is_end(stream); ++_i) {
        astore__fork(store, "ProjectItem/" _i, _store);
        _r = __vba__projectstream__unpack_projectitem(stream, _store);
        if (_r < 0) {
            return _r;
        } else if (_r == vba__projectstream__S_FALSE) {
            break;
        } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
            return vba__projectstream__E_FAIL;
        }
    }

    astore__fork(store, "HelpFile::ProjectHelpFile", _store);
    _r = __vba__projectstream__unpack_projecthelpfile(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        # not matched, do nothing.
        ;
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "ExeName32::ProjectExeName32", _store);
    _r = __vba__projectstream__unpack_projectexename32(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        # not matched, do nothing.
        ;
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "Name::ProjectName", _store);
    _r = __vba__projectstream__unpack_projectname(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectName is required.";
        return vba__projectstream__E_FAIL;
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "HelpContextID::ProjectHelpId", _store);
    _r = __vba__projectstream__unpack_projecthelpid(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectHelpId is required.";
        return vba__projectstream__E_FAIL;
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "Description::ProjectDescription", _store);
    _r = __vba__projectstream__unpack_projectdescription(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        # not matched, do nothing.
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "VersionCompatible32::ProjectVersionCompat32", _store);
    _r = __vba__projectstream__unpack_projectversioncompat32(stream, _store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        # not matched, do nothing.
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "CMG::ProjectProtectionState", _store);
    _r = __vba__projectstream__unpack_projectprotectionstate(stream, store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectProtectionState is required.";
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "DPB::ProjectPassword", _store);
    _r = __vba__projectstream__unpack_projectpassword(stream, store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectPassword is required.";
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    astore__fork(store, "GC::ProjectVisibilityState", _store);
    _r = __vba__projectstream__unpack_projectvisibilitystate(stream, store);
    if (_r < 0) {
        return _r;
    } else if (_r == vba__projectstream__S_FALSE) {
        E__message = "ProjectProperties.ProjectVisibilityState is required.";
    } else if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.1 ProjectItem
# '${__pp_comment:+'
#
#   ABNF syntax:
#       ProjectItem = ( ProjectModule /
#                       ProjectPackage ) NWLN
#
# '}'
function \
__vba__projectstream__unpack_projectitem( \
    stream, store, \
    \
    _r \
) {
    _r = __vba__projectstream__unpack_projectmodule(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    _r = __vba__projectstream__unpack_projectpackage(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    return vba__projectstream__S_FALSE;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.2 ProjectId
# '${__pp_comment:+'
#
# Specifies the class identifier (CLSID) for the VBA project.
#
#   ABNF syntax:
#
#       ProjectId = "ID=" DQUOTE ProjectCLSID DQUOTE NWLN
#
#       ProjectCLSID = GUID
#
# <ProjectCLSID>: Specifies the class identifier (CLSID) of the
# VBA project`s Automation type library. MUST be
# "{00000000-0000-0000-0000-000000000000}" when ProjectPassword
# (section 2.3.1.16) specifies a password hash.
#
# '}'
function \
__vba__projectstream__unpack_projectid( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);

    if (_v !~ /^ID="\{[0-9A-F\-]+\}"$/) {
        E__message = sprintf( \
            "unexpected ProjectId value %s", \
            _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    _v = substr(_v, 5, length(_v) - 5);
    if (astore__set(store, "ProjectCLSID", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.3 ProjectModule
# '${__pp_comment:+'
#
#   ABNF syntax:
#
#       ProjectModule = ( ProjectDocModule /
#                         ProjectStdModule /
#                         ProjectClassModule /
#                         ProjectDesignerModule )
#
# '}'
function \
__vba__projectstream__unpack_projectmodule( \
    stream, store, \
    \
    _r \
) {
    # ProjectDocModule
    _r = __vba__projectstream__unpack_projectdocmodule(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    # ProjectStdModule
    _r = __vba__projectstream__unpack_projectstdmodule(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    # ProjectClassModule
    _r = __vba__projectstream__unpack_projectclassmodule(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    # ProjectDesignerModule
    _r = __vba__projectstream__unpack_projectdesignermodule(stream, store);
    if (_r != vba__projectstream__S_FALSE) {
        return _r;
    }

    return vba__projectstream__S_FALSE;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.4 ProjectDocModule
# '${__pp_comment:+'
#
#   ABNF syntax:
#
#       ProjectDocModule = "Document=" ModuleIdentifier %x2f DocTlibVer
#
#       DocTlibVer = HEXINT32
#
#  <DocTlibVer>: Specifies the document module`s Automation server version
#                as specified by [MS-OAUT].
#
# [MS-OVBA] 2.1.1.9 ModuleIdentifier
#
#   Specifies the name of a module. SHOULD be an identifier as specified by
#   [MS-VBAL] section 3.3.5. MAY<2> be any string of characters. MUST be
#   less than or equal to 31 characters long.
#
# [MS-OVBA] 2.1.1.6 HEXINT32
#
#    Specifies a hexadecimal-encoded signed integer. MUST be between
#    -2147483648 and 2147483647.
#
#   ABNF syntax:
#
#       HEXINT32 = "&H" 8HEXDIG
#
# '}'
function \
__vba__projectstream__unpack_projectdocmodule( \
    stream, store, \
    \
    _v, _ident, _ver \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^Document=.*\/&H[0-9A-F]*$/) {
        return vba__projectstream__S_FALSE;
    }

    if (! match(_v, /\/&H[0-9A-F]*$/)) {
        return vba__projectstream__E_UNEXPECTED;
    }

    _ident = substr(_v, 10, RSTART - 10);
    _ver = substr(_v, RSTART + 2);

    astore__chdir(store, "ProjectDocModule");

    if (astore__set(store, "ModuleIdentifier", _ident) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(store, "DocTlibVer::hexint32", _ver)) {
        return vba__projectstream__E_UNEXPECTED;
    }

    astore__chdir(store, "..");
    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.5 ProjectStdModule
# '${__pp_comment:+'
#
# Specifies a procedural module.
#
#   ABNF syntax:
#
#       ProjectStdModule = "Module=" ModuleIdentifier
#
# [MS-OVBA] 2.1.1.9 ModuleIdentifier
#
#   Specifies the name of a module. SHOULD be an identifier as specified by
#   [MS-VBAL] section 3.3.5. MAY<2> be any string of characters. MUST be
#   less than or equal to 31 characters long.
#
# '}'
function \
__vba__projectstream__unpack_projectstdmodule( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (index(_v, "Module=") != 1) {
        return vba__projectstream__S_FALSE;
    }

    astore__chdir(store, "ProjectStdModule");

    _v = substr(_v, 8);

    if (astore__set(store, "ModuleIdentifier", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    astore__chdir(store, "..");

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.6 ProjectClassModule
# '${__pp_comment:+'
#
# Specifies a class module.
#
#   ABNF syntax:
#
#       ProjectClassModule = "Class=" ModuleIdentifier
#
# [MS-OVBA] 2.1.1.9 ModuleIdentifier
#
#   Specifies the name of a module. SHOULD be an identifier as specified by
#   [MS-VBAL] section 3.3.5. MAY<2> be any string of characters. MUST be
#   less than or equal to 31 characters long.
#
# '}'
function \
__vba__projectstream__unpack_projectclassmodule( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (index(_v, "Class=") != 1) {
        return vba__projectstream__S_FALSE;
    }

    astore__chdir(store, "ProjectStdModule");

    _v = substr(_v, 7)

    if (astore__set(store, "ModuleIdentifier", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    astore__chdir(store, "..");

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.7 ProjectDesignerModule
# '${__pp_comment:+'
#
# Specifies a designer module.
#
#   ABNF syntax:
#
#       ProjectDesignerModule = "BaseClass=" ModuleIdentifier
#
# [MS-OVBA] 2.1.1.9 ModuleIdentifier
#
#   Specifies the name of a module. SHOULD be an identifier as specified by
#   [MS-VBAL] section 3.3.5. MAY<2> be any string of characters. MUST be
#   less than or equal to 31 characters long.
#
# '}'
function \
__vba__projectstream__unpack_projectdesignermodule( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (index(_v, "BaseClass=") != 1) {
        return vba__projectstream__S_FALSE;
    }

    astore__chdir(store, "ProjectDesignerModule");

    _v = substr(_v, 11);

    if (astore__set(store, "ModuleIdentifier", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    astore__chdir(store, "..");

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.8 ProjectPackage
# '${__pp_comment:+'
#
# Specifies the class identifier (CLSID) for a designer extended by one or more modules.
#
#   ABNF syntax:
#
#       ProjectPackage = "Package=" GUID
#
# [MS-OVBA] 2.1.1.5 GUID
#
# Specifies a GUID.
#
#   ABNF syntax:
#
#       GUID = "{" 8HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 4HEXDIG "-" 12HEXDIG "}"
#
# '}'
function \
__vba__projectstream__unpack_projectpackage( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (index(_v, "Package=") != 1) {
        return vba__projectstream__S_FALSE;
    }

    if (astore__set(store, "ProjectPackage/GUID", substr(_v, 9)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.9 ProjectHelpFile
# '${__pp_comment:+'
#
# Specifies a path to a Help file associated with this VBA project. MUST be the
# same value as specified in PROJECTHELPFILEPATH (section 2.3.4.2.1.8). MUST be
# present if PROJECTHELPFILEPATH specifies a value.
#
#   ABNF syntax:
#
#       ProjectHelpFile = "HelpFile==" PATH NWLN
#
#
# [MS-OVBA] 2.1.1.11 PATH
#
# An array of characters that specifies a path to a file. MUST be less than 260
# characters.
#
#   ABNF syntax:
#
#       PATH = DQUOTE *259QUOTEDCHAR DQUOTE
#
#
# [MS-OVBA] 2.1.1.13 QUOTEDCHAR
#
# Specifies a single character.
#
#   ABNF syntax:
#
#       QUOTEDCHAR = WSP / NQCHAR / ( DQUOTE DQUOTE )
#
#       NQCHAR = %x21 / %x23-FF
#
# '}'
function \
__vba__projectstream__unpack_projecthelpfile( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^HelpFile=/) {
        return vba__projectstream__S_FALSE;
    }

    if (astore__set(store, "PATH", substr(_v, 10)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.10 ProjectExeName32
# '${__pp_comment:+'
#
# Specifies a path. MUST be ignored.
#
#   ABNF syntax:
#
#       ProjectExeName32 = "ExeName32=" PATH NWLN
#
# '}'
function \
__vba__projectstream__unpack_projectexename32( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^ExeName32=/) {
        return vba__projectstream__S_FALSE;
    }

    _v = substr(_v, 11, length(_v) - 11);
    if (astore__set(store, "PATH", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.11 ProjectName
# '${__pp_comment:+'
#
# Specifies the short name of the VBA project.
#
#   ABNF syntax:
#
#       ProjectName = "Name=" DQUOTE ProjectIdentifier DQUOTE NWLN
#
#       ProjectIdentifier = 1*128QUOTEDCHAR
#
# <ProjectIdentifier>: Specifies the name of the VBA project. MUST
# be less than or equal to 128 characters long. MUST be the same
# value as specified in PROJECTNAME (section 2.3.4.2.1.6).  SHOULD be
# an identifier as specified by [MS-VBAL] section 3.3.5. MAY<3> be any
# string of characters.
#
# '}'
function \
__vba__projectstream__unpack_projectname( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^Name=/) {
        return vba__projectstream__S_FALSE;
    }

    _v = substr(_v, 6);
    if (astore__set(store, "ProjectIdentifier", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.12 ProjectHelpId
# '${__pp_comment:+'
#
# Specifies a Help topic identifier in ProjectHelpFile (section 2.3.1.9)
# associated with this VBA project.
#
#   ABNF syntax:
#
#       ProjectHelpId = "HelpContextID=" DQUOTE TopicId DQUOTE NWLN
#
#       TopicId = INT32
#
# <TopicId>: Specifies a Help topic identifier. MUST be the same value as
# specified in PROJECTHELPCONTEXT (section 2.3.4.2.1.9).
#
# [MS-OVBA] 2.1.1.7 INT32
#
# Specifies a signed integer. MUST be between -2147483648 and 2147483647.
#
#   ABNF syntax:
#
#   INT32 = ["-"] 1*DIGIT
#
# '}'
function \
__vba__projectstream__unpack_projecthelpid( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (match(_v, /^HelpContextID="-\?[0-9]+"/)) {
        return vba__projectstream__S_FALSE;
    }

    _v = substr(_v, 16, length(_v) - 16);
    if (astore__set(store, "TopicId::int32", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.13 ProjectDescription
# '${__pp_comment:+'
#
# Specifies the description of the VBA project.
#
#   ABNF syntax:
#
#       ProjectDescription = "Description=" DQUOTE DescriptionText DQUOTE NWLN
#
#       DescriptionText = *2000QUOTEDCHAR
#
# <DescriptionText>: MUST be the same value as specified in PROJECTDOCSTRING
# (section 2.3.4.2.1.7).
#
#
# 2.1.1.13 QUOTEDCHAR
#
# Specifies a single character.
#   ABNF syntax:
#
#       QUOTEDCHAR = WSP / NQCHAR / ( DQUOTE DQUOTE )
#
#       NQCHAR = %x21 / %x23-FF
#
# '}'
function \
__vba__projectstream__unpack_projectdescription( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^Description=/) {
        return vba__projectstream__S_FALSE;
    }

    substr(_v, 14, length(_v) - 14)

    if (astore__set(store, "DescriptionText::DescriptionText", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.14 ProjectVersionCompat32
# '${__pp_comment:+'
#
# Specifies the storage format version of the VBA project. MAY be missing<4>.
#
#   ABNF syntax:
#
#       ProjectVersionCompat32 = "VersionCompatible32=" DQUOTE "393222000" DQUOTE
#       NWLN
#
# [MS-OVBA] 1.1 Glossary
#     compat version: A 32-bit number that identifies the Office Model version
#                     used by a VBA project.
#
# '}'
function \
__vba__projectstream__unpack_projectversioncompat32( \
    stream, store, \
    \
    _v \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^VersionCompatible32=/) {
        return vba__projectstream__S_FALSE;
    }

    _v = substr(_v, 22, length(_v) - 22);

    if (astore__set(store, "Value::uint32,mustbe(393222000)", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.15 ProjectProtectionState
# '${__pp_comment:+'
#
# Specifies whether access to the VBA project was restricted by the user,
# the VBA host application, or the VBA project editor.
#
#   ABNF syntax:
#
#       ProjectProtectionState = "CMG=" DQUOTE EncryptedState DQUOTE NWLN
#
#       EncryptedState = 22*28HEXDIG
#
# <EncryptedState>: Specifies whether access to the VBA project was restricted
# by the user, the VBA host application, or the VBA project editor, obfuscated
# by Data Encryption (section 2.4.3.2).
# the data parameter for data encryption (section 2.4.3.2) should be four bytes
# that specify the protection state of the vba project. may<5> be 0x00000000.
# the length parameter for data encryption (section 2.4.3.2) must be 4.
#
# values for data are defined by the following bits:
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |a|b|c|                      reserved                           |
# +-+-+-+---------------------------------------------------------+
#
# '}'
function \
__vba__projectstream__unpack_projectprotectionstate( \
    stream, store, \
    \
    _v, _i, _r, _stream, _size, _store, _decrypted_stream \
) {
    _v = stream__currentline(stream);
    if (_v !~ /^CMG=/) {
        return vba__projectstream__S_FALSE;
    }

    _v = substr(_v, 6, length(_v) - 6);
    if (astore__set(store, "EncryptedState/RawValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # create encrypted data stream
    stream__new(_stream);
    _size = int(length(_v) / 2);
    for (_i = 0; _i < _size; ++_i) {
        stream__write_uint8(_stream, str__hexord[substr(_v, _i * 2 + 1, 2)]);
    }

    astore__fork(store, "EncryptedState/EncryptedData", _store);
    _r = vba__projectstream__unpack_encrypteddata(_stream, _store, _decrypted_stream);
    if (_r < 0) {
        return _r;
    }

    # A - fUserProtected (1 bit)
    _v = stream__read_bits(_decrypted_stream, 1);
    if (astore__set(store, "EncryptedState/fUserProtected", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # B - fHostProtected (1 bit)
    _v = stream__read_bits(_decrypted_stream, 1);
    if (astore__set(store, "EncryptedState/fHostProtected", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # C - fVBEProtected (1 bit)
    _v = stream__read_bits(_decrypted_stream, 1);
    if (astore__set(store, "EncryptedState/fVBEProtected", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.16 ProjectPassword
# '${__pp_comment:+'
#
# Specifies the password hash of the VBA project.
# The syntax of ProjectPassword is defined as follows.
#
#   ProjectPassword = "DPB=" DQUOTE EncryptedPassword DQUOTE NWLN
#
#   EncryptedPassword = 16*HEXDIG
#
# <EncryptedPassword>: Specifies the password protection for the VBA project.
#
# A VBA project without a password MUST use 0x00 for the Data parameter for
# Data Encryption (section 2.4.3.2) and the Length parameter MUST be 1.
#
# A VBA project with a password SHOULD specify the password hash of the VBA project,
# obfuscated by Data Encryption (section 2.4.3.2). The Data parameter for Data
# Encryption (section 2.4.3.2) MUST be an array of bytes that specifies a Hash
# Data Structure (section 2.4.4.1) and the Length parameter for Data Encryption
# MUST be 29. The Hash Data Structure (section 2.4.4.1) specifies a hash key and
# password hash encoded to remove null bytes as specified by section 2.4.4.
#
# A VBA project with a password MAY<6> specify the plain text password of the VBA
# project, obfuscated by Data Encryption (section 2.4.3.2). In this case, the Data
# parameter Data Encryption (section 2.4.3.2) MUST be an array of bytes that
# specifies a null terminated password string encoded using MBCS using the code
# page specified by PROJECTCODEPAGE (section 2.3.4.2.1.5), and a Length parameter
# equal to the number of bytes in the password string including the terminating null
# character.
#
# When the data specified by <EncryptedPassword> is a password hash,
# ProjectId.ProjectCLSID (section 2.3.1.2) MUST be "{00000000-0000-0000-0000-000000000000}".
#
# '}'
function \
__vba__projectstream__unpack_projectpassword( \
    stream, store, \
    \
    _v, _i, _size, _stream, _r, _decrypted_stream, \
    _decrypted_data, _store \
) {
    _v = stream__currentline(stream);
    if (index(_v, "DPB=\"") != 1) {
        return vba__projectstream__S_FALSE;
    }

    astore__chdir(store, "EncryptedPassword");

    _v = substr(_v, 6, length(_v) - 6);
    if (astore__set(store, "RawValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # create encrypted data stream
    stream__new(_stream);
    _size = int(length(_v) / 2);
    for (_i = 0; _i < _size; ++_i) {
        stream__write_uint8(_stream, str__hexord[substr(_v, _i * 2 + 1, 2)]);
    }

    astore__fork(store, "EncryptedData", _store);

    _r = vba__projectstream__unpack_encrypteddata(_stream, _store, _decrypted_stream);
    if (_r < 0) {
        return _r;
    }

    _v = stream__available_size(_decrypted_stream);
    _decrypted_data = stream__read_hex_string(_decrypted_stream, _v);
    stream__iseek(_decrypted_stream, 0);

    if (astore__set(store, "DecryptedPasswordHash", _decrypted_data) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    astore__fork(store, "PasswordHashData", _store);

    _r = vba__projectstream__unpack_passwordhashdata(_decrypted_stream, _store);
    if (_r < 0) {
        return _r;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.17 ProjectVisibilityState
# '${__pp_comment:+'
#
# Specifies whether the VBA project is visible.
#
#   ABNF syntax:
#
#       ProjectVisibilityState = "GC=" DQUOTE
#                                EncryptedProjectVisibility
#                                DQUOTE NWLN
#
#       EncryptedProjectVisibility = 16*22HEXDIG
#
# <EncryptedProjectVisibility>: Specifies whether the VBA
# project is visible, obfuscated by Data Encryption (section 2.4.3.2).
#
# The Data parameter for Data Encryption (section 2.4.3.2) is one
# byte that specifies the visibility state of the VBA project. The Length
# parameter for Data Encryption (section 2.4.3.2) MUST be 1.
#
# Values for Data are:
#
# +-------+-------------------------------------------------------+
# | Value | Meaning                                               |
# +-------+-------------------------------------------------------+
# | 0x00  | VBA project is NOT visible. <ProjectProtectionState>. |
# |       | fVBEProtected (section 2.3.1.15) MUST be TRUE.        |
# +-------+-------------------------------------------------------+
# | 0xFF  | VBA project is visible.                               |
# +-------+-------------------------------------------------------+
#
# '}'
function \
__vba__projectstream__unpack_projectvisibilitystate( \
    stream, store, \
    \
    _v, _i, _stream, _r, _size, \
    _decrypted_stream, _decrypted_data, _store \
) {
    _v = stream__currentline(stream);
    if (index(_v, "GC=\"") != 1) {
        return vba__projectstream__S_FALSE;
    }

    astore__fork(store, "EncryptedProjectVisibility", _store);

    _v = substr(_v, 5, length(_v) - 5);
    if (astore__set(_store, "RawValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # create encrypted data stream
    stream__new(_stream);
    _size = int(length(_v) / 2);
    for (_i = 0; _i < _size; ++_i) {
        stream__write_uint8(_stream, str__hexord[substr(_v, _i * 2 + 1, 2)]);
    }

    astore__chdir(_store, "EncryptedData");
    _r = vba__projectstream__unpack_encrypteddata(_stream, _store, _decrypted_stream);
    if (_r < 0) {
        return _r;
    }

    _decrypted_data = stream__read_uint8(_decrypted_stream);
    if (astore__set(_store, "DecryptedProjectVisibility", _decrypted_data) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.18 HostExtenders
# '${__pp_comment:+'
#
# Specifies a list of host extenders.
#
#   ABNF syntax:
#
#       HostExtenders = "[Host Extender Info]" NWLN
#                       *HostExtenderRef
#
#       HostExtenderRef = ExtenderIndex "=" ExtenderGuid ";"
#                         LibName ";" CreationFlags NWLN
#
#       ExtenderIndex = HEXINT32
#
#       ExtenderGuid = GUID
#
#       LibName = "VBE" / *(%x21-3A / %x3C-FF)
#
#       CreationFlags = HEXINT32
#
# <HostExtenderRef>: Specifies a reference to an aggregatable
#                    server`s Automation type library.
# <ExtenderIndex>: Specifies the index of the host extender entry.
#                  MUST be unique to the list of HostExtenders.
# <ExtenderGuid>: Specifies the GUID of the Automation type library to extend.
# <LibName>: Specifies a host-provided Automation type library name.
#            "VBE" specifies a built in name for the VBA Automation type library.
# <CreationFlags>: Specifies a host-provided flag as follows:
#
# +-------------+------------------------------------------------------+
# | Value       | Meaning                                              |
# +-------------+------------------------------------------------------+
# | 0x00000000  | MUST NOT create a new extended type library for the  |
# |             | aggregatable server if one is already available to   |
# |             | the VBA environment.                                 |
# +-------------+------------------------------------------------------+
# | 0x00000001  | MUST create a new extended type library for the      |
# |             | aggregatable server.                                 |
# +-------------+------------------------------------------------------+
#
# '}'
function \
__vba__projectstream__unpack_hostextenders( \
    stream, store, \
    \
    _v, _store, _i, _len \
) {
    if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__E_FAIL;
    }

    _v = stream__currentline(stream);
    if (_v != "[Host Extender Info]") {
        E__message = sprintf("unexpected line: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    for (_i = 0; ! stream__is_end(stream); ++_i) {

        astore__fork(store, "HostExtenderRef/" _i, _store);
        if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
            break;
        }

        # ExtenderIndex
        _v = stream__currentline(stream);
        if (_v == "") {
            break;
        }
        if (! match(_v, /^&H[0-9A-F]+=/)) {
            E__message = sprintf("unexpected ExtenderIndex: \"%s\"", _v);
            return vba__projectstream__E_UNEXPECTED;
        }

        if (astore__set(_store, "ExtenderIndex", substr(_v, 1, _len = RLENGTH - 1)) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
        _v = substr(_v, _len + 2);

        # ExtenderGuid
        if (! match(_v, /^\{[0-9A-F\\-]+\};/)) {
            E__message = sprintf("unexpected ExtenderGuid: \"%s\"", _v);
            return vba__projectstream__E_UNEXPECTED;
        }

        if (astore__set(_store, "ExtenderGuid", substr(_v, 1, _len = RLENGTH - 1)) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
        _v = substr(_v, _len + 2);

        # LibName
        if (! match(_v, /^(VBE|([!-:<-\177])+);/)) {
            E__message = sprintf("unexpected LibName: \"%s\"", _v);
            return vba__projectstream__E_UNEXPECTED;
        }

        if (astore__set(_store, "LibName", substr(_v, 1, _len = RLENGTH - 1)) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
        _v = substr(_v, _len + 2);

        # CreationFlags
        if (! match(_v, /^&H[0-9A-F]+$/)) {
            E__message = sprintf("unexpected LibName: \"%s\"", _v);
            return vba__projectstream__E_UNEXPECTED;
        }

        if (astore__set(_store, "CreationFlags", substr(_v, 1, _len = RLENGTH)) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
        _v = substr(_v, _len + 1);
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.19 ProjectWorkspace
# '${__pp_comment:+'
#
# Specifies a list of module editor window states.
#
#   ABNF syntax:
#
#       ProjectWorkspace = "[Workspace]" NWLN
#                          *ProjectWindowRecord
#
# '}'
function \
__vba__projectstream__unpack_projectworkspace( \
    stream, store, \
    \
    _v, _r, _i, _store \
) {
    if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
        return vba__projectstream__S_FALSE;
    }

    _v = stream__currentline(stream);
    if (_v != "[Workspace]") {
        E__message = sprintf("unexpected line: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    for (_i = 0; ! stream__is_end(stream); ++_i) {

        if (stream__read_ansi_string(stream, (-1), stream__C_NWLN) == (-1)) {
            break;
        }

        astore__fork(store, "ProjectWindowRecord/" _i, _store);

        # ProjectWindowRecord
        _r = __vba__projectstream__unpack_projectwindowrecord(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.3.1.20 ProjectWindowRecord
# '${__pp_comment:+'
#
# Specifies the coordinates and state of a module editor window.
#
#   ABNF syntax:
#
#       ProjectWindowRecord = ModuleIdentifier "=" ProjectWindowState NWLN
#
#       ProjectWindowState = CodeWindow [ ", " DesignerWindow ]
#
#       CodeWindow = ProjectWindow
#
#       DesignerWindow = ProjectWindow
#
#       ProjectWindow = WindowLeft ", "
#                       WindowTop ", "
#                       WindowRight ", "
#                       WindowBottom ", "
#                       WindowState
#
#       WindowLeft = INT32
#
#       WindowTop = INT32
#
#       WindowRight = INT32
#
#       WindowBottom = INT32
#
#       WindowState = ["C"] ["Z"] ["I"]
#
#
#   [MS-OVBA] 2.1.1.9 ModuleIdentifier
#
#   Specifies the name of a module. SHOULD be an identifier as specified by
#   [MS-VBAL] section 3.3.5. MAY<2> be any string of characters. MUST be
#   less than or equal to 31 characters long.
#
# '}'
function \
__vba__projectstream__unpack_projectwindowrecord( \
    stream, store, \
    \
    _v, _len, _store \
) {
    _v = stream__currentline(stream);
    if (! match(_v, /^[^=]+=/)) {
        E__message = sprintf("unexpected ModuleIdentifier: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(store, "ModuleIdentifier", substr(_v, 1, _len = RLENGTH - 1)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 2);

    astore__fork(store, "CodeWindow", _store);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected CodeWindow/ProjectWindow/WindowLeft: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowLeft", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected CodeWindow/ProjectWindow/WindowTop: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowTop", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected CodeWindow/ProjectWindow/WindowRight: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowRight", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected CodeWindow/ProjectWindow/WindowBottom: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowBottom", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^[CZI]?/)) {
        E__message = sprintf("unexpected CodeWindow/ProjectWindow/WindowState: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowState", substr(_v, 1, _len = RLENGTH)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 1);

    if (_v == "") {
        return vba__projectstream__S_OK;
    }

    astore__fork(store, "DesignWindow", _store);

    if (! match(_v, /^, -?[0-9]+, /)) {
        E__message = sprintf("unexpected DesignWindow/ProjectWindow/WindowLeft: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowLeft", substr(_v, 4, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected DesignWindow/ProjectWindow/WindowTop: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowTop", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected DesignWindow/ProjectWindow/WindowRight: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowRight", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^-?[0-9]+, /)) {
        E__message = sprintf("unexpected DesignWindow/ProjectWindow/WindowBottom: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowBottom", substr(_v, 1, _len = RLENGTH - 2)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len + 3);

    if (! match(_v, /^[CZI]*/)) {
        E__message = sprintf("unexpected DesignWindow/ProjectWindow/WindowState: \"%s\"", _v);
        return vba__projectstream__E_UNEXPECTED;
    }

    if (astore__set(_store, "ProjectWindow/WindowState", substr(_v, 1, _len = RLENGTH)) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }
    _v = substr(_v, _len);

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.4.3.1 Encrypted Data Structure
# '${__pp_comment:+'
#
# VBA uses a reversible encryption algorithm for selected data.
#
#   Conventions:
#   - XOR specifies a bit-wise exclusive OR operation.
#   - BAND specifies a bit-wise AND operation.
#   - All operations resulting in integer overflow MUST only store
#     low-order bits, resulting in high-order bit truncation.
#
# '}'
function \
vba__projectstream__unpack_encrypteddata( \
    stream, store, decrypted_stream, \
    \
    _v, _i, _seed, _versionenc, _projkeyenc, _projkey, \
    _unencrypted_byte1, _encrypted_byte1, _encrypted_byte2, \
    _byte_index, _temp_value, _byte, _byte_enc, \
    _length, _ignored_length \
) {
    # Seed (1 byte)
    _v = _seed = stream__read_uint8(stream);
    if (astore__set(store, "Seed", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # VersionEnc (1 byte):
    _v = _versionenc = stream__read_uint8(stream);
    if (astore__set(store, "VersionEnc/RawValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # Version is calculated using the following formula.
    #
    #   Version = Seed XOR VersionEnc
    #
    # Version MUST be 2.
    #
    # '}'
    _v = num__xor(_seed, _versionenc);
    if (astore__set(store, "VersionEnc/DecryptedValue,mustbe(2)", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # ProjKeyEnc (1 byte)
    _v = _projkeyenc = stream__read_uint8(stream);
    if (astore__set(store, "ProjKeyEnc/RawValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # ProjKey is calculated using the following formula.
    #
    #   ProjKey = Seed XOR ProjKeyEnc
    #
    # '}'
    _v = _projkey = num__xor(_seed, _projkeyenc)
    if (astore__set(store, "ProjKeyEnc/DecryptedValue", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # To initialize states for the rest of the encoding:
    #
    #   SET UnencryptedByte1 TO ProjKey.
    #   SET EncryptedByte1 TO ProjKeyEnc.
    #   SET EncryptedByte2 TO VersionEnc.
    #
    # '}'
    _unencrypted_byte1 = _projkey;
    _encrypted_byte1 = _projkeyenc;
    _encrypted_byte2 = _versionenc;

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # The length of IgnoredEnc is computed as follows.
    #
    #   IgnoredLength = (Seed BAND 6) / 2
    #
    # '}'
    _ignored_length = num__and(_seed, 6) / 2
    if (astore__set(store, "IgnoredLength", _ignored_length) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # Decrypting of IgnoredEnc MUST be as follows.
    #
    #   FOR each ByteEnc IN IgnoredEnc:
    #       SET Byte TO (ByteEnc XOR (EncryptedByte2 + UnencryptedByte1)).
    #       SET EncryptedByte2 TO EncryptedByte1.
    #       SET EncryptedByte1 TO ByteEnc.
    #       SET UnencryptedByte1 TO Byte.
    #   END FOR
    #
    # '}'
    for (_i = 0; _i < _ignored_length; ++_i) {
        # IgnoredEnc (variable)
        _v = _byte_enc = stream__read_uint8(stream);
        if (astore__set(store, "IgnoredEnc/" _i "/RawValue", _v) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }

        _byte = num__xor(_byte_enc, _encrypted_byte2 + _unencrypted_byte1) % 256;
        _encrypted_byte2 = _encrypted_byte1;
        _encrypted_byte1 = _byte_enc;
        _unencrypted_byte1 = _byte;
        if (astore__set(store, "IgnoredEnc/" _i "/DecryptedValue", _byte) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # Length is computed by the following pseudocode.
    #
    #   SET ByteIndex TO zero.
    #   FOR each ByteEnc IN DataLengthEnc:
    #       SET Byte TO (ByteEnc XOR (EncryptedByte2 + UnencryptedByte1)).
    #       SET TempValue TO 256 raised to the power of ByteIndex.
    #       MULTIPLY TempValue by Byte.
    #       ADD TempValue TO Length.
    #       SET EncryptedByte2 TO EncryptedByte1.
    #       SET EncryptedByte1 TO ByteEnc.
    #       SET UnencryptedByte1 TO Byte.
    #       INCREMENT ByteIndex
    #   END FOR
    #
    # Length is equal to the length of DataEnc.
    #
    # '}'
    _length = 0;
    for (_byte_index = 0; _byte_index < 4; ++_byte_index) {
        # DataLengthEnc (4 bytes)
        _byte_enc = stream__read_uint8(stream);
        if (astore__set(store, "DataLength/" _byte_index "/RawValue", _byte_enc) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }

        _byte = num__xor(_byte_enc, _encrypted_byte2 + _unencrypted_byte1) % 256;
        _temp_value = 256 ^ _byte_index;
        _temp_value *= _byte;
        _length += _temp_value;
        _encrypted_byte2 = _encrypted_byte1;
        _encrypted_byte1 = _byte_enc;
        _unencrypted_byte1 = _byte;
        if (astore__set(store, "DataLength/" _byte_index "/DecryptedValue", _byte) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
    }
    if (astore__set(store, "Length", _length) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # '${__pp_comment:+'
    #
    # [MS-OVBA] 2.4.3.3 Decryption
    #
    # Data is computed using the following pseudocode.
    #
    #   FOR each ByteEnc IN DataEnc:
    #       SET Byte TO (ByteEnc XOR (EncryptedByte2 + UnencryptedByte1)).
    #       APPEND Data WITH Byte.
    #       SET EncryptedByte2 TO EncryptedByte1.
    #       SET EncryptedByte1 TO ByteEnc.
    #       SET UnencryptedByte1 TO Byte.
    #   END FOR
    #
    # '}'
    stream__new(decrypted_stream);
    for (_i = 0; _i < _length; ++_i) {
        # IgnoredEnc (variable)
        _v = _byte_enc = stream__read_uint8(stream);
        if (astore__set(store, "DataEnc/" _i "/RawValue", _v) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }

        _byte = num__xor(_byte_enc, _encrypted_byte2 + _unencrypted_byte1) % 256;

        stream__write_uint8(decrypted_stream, _byte);

        _encrypted_byte2 = _encrypted_byte1;
        _encrypted_byte1 = _byte_enc;
        _unencrypted_byte1 = _byte;
        if (astore__set(store, "DataEnc/" _i "/DecryptedValue", _byte) < 0) {
            return vba__projectstream__E_UNEXPECTED;
        }
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.4.4.1 Password Hash Data Structure
# '${__pp_comment:+'
#
# The password data structure specifies a password hash and
# additional random byte data to obfuscate the hash.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |   Reserved    |GrbitKe|             GrbitHashNull             |
# +---------------+-------+---------------------------------------+
# |                          KeyNoNulls                           |
# +---------------------------------------------------------------+
# |                      PasswordHashNoNulls                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------+-----------------------------------------------+
# |  Terminator   |
# +---------------+
#
# '}'
function \
vba__projectstream__unpack_passwordhashdata( \
    stream, store, \
    \
    _v, _r, _ostream \
) {
    # Reserved (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "Reserved", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # GrbitKey (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "GrbitKey", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # GrbitHashNull (20 bits)
    _v = stream__read_bits(stream, 20);
    if (astore__set(store, "GrbitHashNull", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    stream__skip_to_align(stream, 1);

    # KeyNoNulls (4 bytes)
    _v = stream__read_hex_string(stream, 4);
    if (astore__set(store, "KeyNoNulls", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    # PasswordHashNoNulls (20 bytes)
    _v = stream__read_hex_string(stream, 20);
    if (astore__set(store, "PasswordHashNoNulls/EncodedBytes", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    stream__rewind(stream, 20);

    # decode nulls, get raw SHA1 hash
    _r = vba__projectstream__unpack_passwordhashdata_decodenulls(stream, store, _ostream);
    if (_r < 0) {
        return _r;
    }

    # Terminator (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "Terminator", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# {{{ [MS-OVBA] 2.4.4.3 Decode Nulls
# '${__pp_comment:+'
#
# The Password Hash stores Key and PasswordHash with null bytes removed
# as specified by Encode Nulls (section 2.4.4.2). The fields are decoded
# by reading bit-fields GrbitKey and GrbitHashNull, and replacing
# corresponding bytes in Key and PasswordHash with 0x00.
#
# This algorithm accepts the following as parameters:
#
#   EncodedBytes (variable): An input array of bytes to be encoded.
#
#   GrbitNull (variable): An input array of bits specifying null bytes in DecodedBytes.
#
#   DecodedBytes (variable): An output array of encoded bytes.
#
# Decoding is computed by the following pseudocode:
#
#   SET Index TO 0.
#       FOR each Bit IN GrbitNull:
#       IF Bit EQUALS FALSE THEN:
#           APPEND DecodedBytes WITH 0x00.
#       ELSE:
#           APPEND DecodedBytes WITH EncodedBytes[Index].
#       END IF
#       INCREMENT Index.
#   END FOR
#
# '}'
function \
vba__projectstream__unpack_passwordhashdata_decodenulls( \
    stream, store, ostream, \
    \
    _v, _grbithashnull, _i \
) {
    stream__new(ostream);

    _grbithashnull = astore__get(store, "GrbitHashNull");

    for (_i = 0; _i < 20; ++_i) {
        if (num__and(num__rshift(_grbithashnull, _i), 1)) {
            stream__write_uint8(ostream, stream__read_uint8(stream));
        } else {
            stream__write_uint8(ostream, 0);
        }
    }

    # We don`t know why, but for some reason everyone wants this string.
    _v = stream__read_hex_string(ostream, 20);
    _v = _v ":" astore__get(store, "KeyNoNulls");
    if (astore__set(store, "PasswordHashNoNulls/DecodedBytesWithSalt", _v) < 0) {
        return vba__projectstream__E_UNEXPECTED;
    }

    return vba__projectstream__S_OK;
}
# }}}
# }}}
# {{{ @module vba::vbaprojectstream
# analysis functions for _VBA_PROJECT stream
#
#
function \
vba__vbaprojectstream__init(    _status) {

    if (__vba__vbaprojectstream__init_guard) {
        return (1);
    }

    _status = cfb__init();
    if (_status < 0) {
        return _status;
    }

    __vba__vbaprojectstream__E_NOTIMPL      = -16385;
    __vba__vbaprojectstream__E_FAIL         = -16389;
    __vba__vbaprojectstream__E_ACCESSDENIED = -458757;
    __vba__vbaprojectstream__E_UNEXPECTED   = -65535;
    __vba__vbaprojectstream__S_OK           = 0;
    __vba__vbaprojectstream__S_FALSE        = 1;

    __vba__vbaprojectstream__init_guard = 1;

    return (0);
}

function \
vba__vbaprojectstream__unpack( \
    stream, store, \
    \
    _r, _stream, _path \
) {
    _path = astore__get(store, "/@VBA Root Directory") "/" \
            astore__get(store, "/@VBA Directory") "/_VBA_PROJECT";

    _r = cfb__unpack_stream(stream, store, _path, _stream);
    if (_r < 0) {
        return _r;
    }

    _r = __vba__vbaprojectstream__unpack_cache(_stream, store);
    if (_r < 0) {
        return _r;
    }

    return vba__projectstream__S_OK;
}

# '${__pp_comment:+'
#
# [MS-OVBA] 2.3.4.1 _VBA_PROJECT Stream: Version Dependent Project Information
#
# The _VBA_PROJECT stream contains the version-dependent description of a VBA
# project.
#
# The first seven bytes of the stream are version-independent and therefore can
# be read by any version.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |           Reserved            |           Version             |
# +---------------+---------------+---------------+---------------+
# |   Reserved2   |           Reserved3           |PerformanceCache
# |               |                               |   (variable)  |
# +---------------+-------------------------------+---------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
#
# The structure of the "PerformanceCache" is undocumented, but great analysis
# by security researchers reveals that it may have the following layout:
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |           Reserved            |           Version             |
# +---------------+---------------+---------------+---------------+
# |   Reserved2   |           Reserved3           |   *Unknown1   |
# |               |                               |   (5 bytes)   |
# +---------------+-------------------------------+---------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        *Lcid (4 bytes)                        |
# +-------------------------------+-------------------------------+
# |      *CodePage (2 bytes)      |      *Unknown2 (12 bytes)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |             ...               | *CountOfReferences (2 bytes)  |
# +-------------------------------+-------------------------------+
# |      *Unknown3 (2 bytes)      |    *References (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |*CountOfModuleTypeMap (2 bytes)|   *ModuleTypeMap (variable)   |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |*CountOfModuleTypeMap (2 bytes)|   *ModuleTypeMap (variable)   |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |     *Unknown5 (2 bytes)       |  *Unknown6 Length (2 bytes)   |
# +-------------------------------+-------------------------------+
# |                       *Unknown6 (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |  *Unknown7 Length (2 bytes)   |     *Unknown7 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |  *Unknown8 Length (2 bytes)   |     *Unknown8 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      *Unknown9 (100 bytes)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# .                              ...                              .
# .                              ...                              .
# .                              ...                              .
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |   *CountOfModules (2 bytes)   |      *Modules (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     *Unknown10 (6 bytes)                      |
# +-------------------------------+-------------------------------+
# |             ...               |  *Unknown11 Length (4 bytes)  |
# +-------------------------------+-------------------------------+
# |             ...               |     *Unknown11 (variable)     |
# +-------------------------------+-------------------------------+
# |                     *Unknown12 (6 bytes)                      |
# +-------------------------------+-------------------------------+
# |             ...               |      *Unknown13 (2 bytes)     |
# +-------------------------------+-------------------------------+
# |      *Unknown14 (2 bytes)     |      *Unknown15 (2 bytes)     |
# +-------------------------------+-------------------------------+
# |                     *Unknown16 (4 bytes)                      |
# +---------------------------------------------------------------+
# |                  *JunkIdentifiers (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    *Identifiers (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     *Unknown17 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# * The structure names beginning with "*" in the diagram above are our
#   tentative names.
#
# '}'
function \
__vba__vbaprojectstream__unpack_cache( \
    stream, store, \
    \
    _r, _v, _i, _store, \
    _base_id, _count_of_all_ids, \
    _count, _count_of_junk_ids, _count_of_ids, _max_id, _size \
) {
    # Reserved1 (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved::hexint16,mustbe(&H61CC)", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # Version (2 bytes)
    #
    # [MS-OVBA] 1.6 Versioning and Localization
    #
    # This file format contains performance caches that are not interoperable
    # between versions. A version identifier (_VBA_PROJECT_Stream.Version,
    # section 2.2.3) is defined to keep track of the exact version that saved
    # a VBA project. When this version number matches the version used by
    # Office, performance caches, specified by _VBA_PROJECT.PerformanceCache
    # (section 2.2.3), SRP Streams (section 2.2.6), and Module
    # Stream.PerformanceCache (section 2.3.4.3), will be used instead of the
    # interoperable representation within the file. To be interoperable, this
    # version number MUST be set to 0xFFFF so that performance caches are
    # ignored.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Version::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    pcode__S_unicoderef     = _v == 78 || (_v >= 91 && _v != 96 && _v != 98 && _v != 99);
    pcode__S_unicodename    = _v == 78 || (_v >= 89 && _v != 96 && _v != 98 && _v != 99);
    pcode__S_nonunicodename = (_v <= 89 && _v != 78) || (_v > 95 && _v < 107)

    # Reserved2 (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "Reserved2::hexint8", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # Reserved3 (2 byte)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Reserved3::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown1 (5 bytes)
    _v = stream__read_hex_string(stream, 5);
    if (astore__set(store, "*Unknown1", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Lcid (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "*Lcid", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *CodePage (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*CodePage", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown2 (12 bytes)
    _v = stream__read_hex_string(stream, 12);
    if (astore__set(store, "*Unknown2", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *CountOfReferences (2 bytes)
    _v = _count = stream__read_uint16(stream);
    if (astore__set(store, "*CountOfReferences::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown3 (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown3::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *References
    for (_i = 1; _i <= _count; ++_i) {
        astore__fork(store, "*References::CachedReferences/" _i, _store);
        _r = __vba__vbaprojectstream__unpack_cachedreference(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # *CountOfModuleTypeMap (2 bytes)
    _v = _count = stream__read_uint16(stream);
    if (astore__set(store, "*CountOfModuleTypeMap WORD Length", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *ModuleTypeMap (variable)
    astore__chdir(store, "*ModuleTypeMap");
    for (_i = 1; _i <= _count; ++_i) {
        _v = stream__read_uint16(stream);
        if (astore__set(store, _i "/ModuleType::hexint16", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }
    astore__chdir(store, "..");

    # *Unknown5 DWORD Length (2 bytes)
    _v = _count = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown5 DWORD Length", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown5 (variable)
    astore__chdir(store, "*Unknown5");
    for (_i = 1; _i <= _count; ++_i) {
        _v = stream__read_hex_string(stream, 4);
        if (astore__set(store, _i "/*Unknown1::hexint32", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }
    astore__chdir(store, "..");

    # *Unknown5 (2 bytes)
    _v = stream__read_hex_string(stream, 2);
    if (astore__set(store, "*Unknown6", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown6 Length (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown7 Length::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        # *Unknown6 (variable)
        _v = stream__read_hex_string(stream, _v);
        if (astore__set(store, "*Unknown7::BYTE[]", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    # Unknown7 Length
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*DocStringUnicode Length::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        # Unknown7
        _v = stream__read_utf16le_string(stream, _v);
        if (astore__set(store, "*DocStringUnicode", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    # HelpFile Length
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*HelpFile Length::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        # HelpFile
        _v = stream__read_utf16le_string(stream, _v);
        if (astore__set(store, "*HelpFile", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    # *HelpContext (100 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "*HelpContext", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown8 (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown8::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown9 (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown9", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *VersionMajor (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "*VersionMajor", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *VersionMinor (2 byte)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*VersionMinor", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_hex_string(stream, 16);
    if (astore__set(store, "*Unknown10", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown11::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_hex_string(stream, 28);
    if (astore__set(store, "*Unknown12", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown13::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_hex_string(stream, 16);
    if (astore__set(store, "*Unknown14", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_hex_string(stream, 20);
    if (astore__set(store, "*Unknown15", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *ProjectCookie (2 byte)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*ProjectCookie::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *CountOfModules (2 bytes)
    _v = _count = stream__read_uint16(stream);
    if (astore__set(store, "*CountOfModules", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Modules (2 bytes)
    for (_i = 1; _i <= _count; ++_i) {
        astore__fork(store, "*Modules::CachedModule[]/" _i, _store);
        _r = __vba__vbaprojectstream__unpack_cachedmodule(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # *Unknown14 (6 bytes)
    _v = stream__read_hex_string(stream, 6);
    if (astore__set(store, "*Unknown16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown15 Length (4 bytes)
    _v = _size = stream__read_uint32(stream);
    if (astore__set(store, "*Unknown17 Length", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown15 (variable)
    _v = stream__read_hex_string(stream, _size);
    if (astore__set(store, "*Unknown17", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown16 (6 bytes)
    _v = stream__read_hex_string(stream, 6);
    if (astore__set(store, "*Unknown18", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown16 (2 bytes)
    _v = _max_id = stream__read_uint16(stream);
    if (astore__set(store, "*MaxID::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *CountOfAllIdentifiers (2 bytes)
    _v = _count_of_all_ids = stream__read_uint16(stream);
    if (astore__set(store, "*CountOfAllIdentifiers::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *BaseID (2 bytes)
    _v = _base_id = stream__read_uint16(stream);
    if (astore__set(store, "*BaseID::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _count_of_junk_ids = _count_of_all_ids - (_max_id - _base_id);
    if (astore__set(store, "*@CountOfJunkIDs::uint16", _count_of_junk_ids) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _count_of_ids = _max_id - _base_id;
    if (astore__set(store, "*@CountOfIdentifiers::uint16", _count_of_ids) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *Unknown19 (4 bytes)
    _v = stream__read_hex_string(stream, 4);
    if (astore__set(store, "*Unknown19", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    for (_i = 1; _i <= _count_of_junk_ids; ++_i) {
        astore__fork(store, "*JunkIdentifiers::CachedJunkIdentifier/" _i, _store);
        _r = __vba__vbaprojectstream__unpack_cachedjunkidentifier(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    for (_i = 1; _i <= _count_of_ids; ++_i) {
        astore__fork(store, "*Identifiers::CachedIdentifier[]/" _i, _store);
        _r = __vba__vbaprojectstream__unpack_cachedidentifier(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # *Unknown20
    _v = stream__available_size(stream);
    _v = stream__read_hex_string(stream, _v);
    if (astore__set(store, "*Unknown20", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    return __vba__vbaprojectstream__S_OK;
}

# '${__pp_comment:+'
#
# This is the layout of the structure contained in the performance cache in
# _VBA_PROJECT, which we tentatively named "CachedReference". This layout is
# officially undocumented and is based on great work by [pcodedump].
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |       *Length (2 bytes)       |    *Reference (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  Unknown1 (6bytes, optional)                  |
# +-------------------------------+-------------------------------+
# |              ...              |     *Unknown2 (10 bytes)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |              ...              |        *Word (2 bytes)        |
# +-------------------------------+-------------------------------+
# |   *Unknown3 Length (2 bytes)  |      *Unknown3 (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      *Unknown4 (2 bytes)      | *Unknown5 (2 bytes, optional) |
# +-------------------------------+-------------------------------+
# |                      *Unknown6 (30 bytes)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |              ...              |
# +-------------------------------+
#
# * The structure names beginning with "*" in the diagram above are our
#   tentative names.
#
# '}'

function \
__vba__vbaprojectstream__unpack_cachedreference( \
    stream, store, \
    \
    _v \
) {
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Length::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }
    if (_v == 0) {
        _v = stream__read_hex_string(stream, 6);
        if (astore__set(store, "*Unknown1", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    } else {
        if ((__pcode_S_unicoderef && _v < 5) || (! __pcode_S_unicoderef && _v < 3)) {
            _v = stream__read_utf16le_string(stream, _v);
            if (astore__set(store, "*Reference", _v) < 0) {
                return __vba__vbaprojectstream__E_UNEXPECTED;
            }
        } else {
            _v = stream__read_utf16le_string(stream, _v);
            if (astore__set(store, "*Reference", _v) < 0) {
                return __vba__vbaprojectstream__E_UNEXPECTED;
            }
            _v = substr(_v, 2, 1);
            if (_v ~ /^..C/) {
                _v = stream__read_uint16(stream);
                if (astore__set(store, "*Unknown-3 Length::uint16", _v) < 0) {
                    return __vba__vbaprojectstream__E_UNEXPECTED;
                }
                _v = stream__read_hex_string(stream, _v);
                if (astore__set(store, "*Unknown-3", _v) < 0) {
                    return __vba__vbaprojectstream__E_UNEXPECTED;
                }
            }
        }
    }
    _v = stream__read_hex_string(stream, 10);
    if (astore__set(store, "*Unknown2", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Word", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }
    if (_v != 0) {
        _v = stream__read_uint16(stream);
        if (astore__set(store, "*Unknown3 Length", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
        _v = stream__read_utf16le_string(stream, _v);
        if (astore__set(store, "*Unknown3", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }

        _v = stream__read_uint16(stream);
        if (astore__set(store, "*Unknown4", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
        if (_v) {
            _v = stream__read_uint16(stream);
            if (astore__set(store, "*Unknown5", _v) < 0) {
                return __vba__vbaprojectstream__E_UNEXPECTED;
            }
        } else {
#            stream__rewind(stream, 2);
        }
        _v = stream__read_hex_string(stream, 30);
        if (astore__set(store, "*Unknown6", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    return __vba__vbaprojectstream__S_OK;
}

# '${__pp_comment:+'
#
# This is the layout of the structure contained in the performance cache in
# _VBA_PROJECT, which we tentatively named "CachedModule". This layout is
# officially undocumented and is based on great work by [pcodedump].
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |   ModuleNameLength (2 bytes)  |     ModuleName (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     *StreamTime (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |   *Unknown1 Length (2 bytes)  |     *Unknown1 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      *Unknown2 (2 bytes)      |   *Unknown3 Length (2 bytes)  |
# +-------------------------------+-------------------------------+
# |                      *Unknown3 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |   *Unknown4 Length (2 bytes)  |     *Unknown4 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      *Unknown5 (2 bytes)      |      *Unknown6 (4 bytes)      |
# +-------------------------------+-------------------------------+
# |             ...               |   *Unknown7 Length (2 bytes)  |
# +-------------------------------+-------------------------------+
# |                      *Unknown7 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      *Unknown8 (11 bytes)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-----------------------------------------------+---------------+
# |                              ...              |
# +-----------------------------------------------+
#
# * The structure names beginning with "*" in the diagram above are our
#   tentative names.
#
# '}'
function \
__vba__vbaprojectstream__unpack_cachedmodule( \
    stream, store, \
    \
    _v, _r, _store, _version \
) {
    # *ModuleNameLength
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*ModuleNameLength::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *ModuleName
    _v = stream__read_utf16le_string(stream, _v);
    if (astore__set(store, "*ModuleName", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # *StreamTime
    astore__fork(store, "*StreamTime::CachedStreamTime", _store);
    _r = __vba__vbaprojectstream__unpack_cachedstreamtime(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # *Unknown1 Length
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown1 Length::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        # *Unknown1
        _v = stream__read_hex_string(stream, _v);
        if (astore__set(store, "*Unknown1", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown2::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _version = astore__get(store, "/_VBA_PROJECT/Version");
    if (_version >= 107) {

        _v = stream__read_uint16(stream);
        if (astore__set(store, "*StreamName Length::uint16", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }

        if (_v != 65535) {
            _v = stream__read_utf16le_string(stream, _v);
            if (astore__set(store, "*StreamName", _v) < 0) {
                return __vba__vbaprojectstream__E_UNEXPECTED;
            }
        }

    }
    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown4 Length::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        _v = stream__read_hex_string(stream, _v);
        if (astore__set(store, "*Unknown4", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Cookie::hexint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint32(stream);
    if (astore__set(store, "*Unknown6::hexint32", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown7 Length::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    if (_v != 65535) {
        _v = stream__read_hex_string(stream, _v * 8);
        if (astore__set(store, "*Unknown7", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    _v = stream__read_hex_string(stream, 4);
    if (astore__set(store, "*Unknown8", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_hex_string(stream, 1);
    if (astore__set(store, "*Unknown9", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint32(stream);
    if (astore__set(store, "*TextOffset", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = stream__read_uint16(stream);
    if (astore__set(store, "*Unknown10::int16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    return __vba__vbaprojectstream__S_OK;
}

# '${__pp_comment:+'
#
# This is the layout of the structure contained in the performance cache in
# _VBA_PROJECT, which we tentatively named "CachedStreamTime". This layout
# is officially undocumented and is based on great work by [pcodedump].
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |    StreamLength (2 bytes)     |     StreamTime (variable)     |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__vbaprojectstream__unpack_cachedstreamtime( \
    stream, store, \
    \
    _v, _size \
) {
    _v = _size = stream__read_uint16(stream);
    if (astore__set(store, "*StreamTime/*Length::uint16", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    _v = astore__get(store, "/_VBA_PROJECT/Version");
    if (_v <= 94) {
        _v = stream__read_raw_string(stream, _size);
        if (astore__set(store, "*StreamTime/*String", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    } else {
        _v = stream__read_utf16le_string(stream, _size);
        if (astore__set(store, "*StreamTime/*String", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    return __vba__vbaprojectstream__S_OK;
}


# '${__pp_comment:+'
#
# This is the layout of the structure contained in the performance cache in
# _VBA_PROJECT, which we tentatively named "CachedJunkIdentifier". This layout
# is officially undocumented and is based on great work by [pcodedump].
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Unknown1 (4 bytes)                      |
# +---------------------------------------------------------------+
# |    TypeAndLength (2 bytes)    | Unknown2 (6 bytes, optional)  |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       Unknown3 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__vba__vbaprojectstream__unpack_cachedjunkidentifier( \
    stream, store, \
    \
    _v, _type_and_length \
) {
    # Unknown (4 bytes)
    _v = stream__read_hex_string(stream, 4);
    if (astore__set(store, "*Unknown1", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # TypeAndLength (2 bytes)
    _v = _type_and_length = stream__read_uint16(stream);
    if (astore__set(store, "*TypeAndLength", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    # the high byte of _type_and_length indicates the type
    if (_type_and_length > 32767) {  # type > 127
        # Unknown2 (6 bytes, optional)
        _v = stream__read_hex_string(stream, 6);
        if (astore__set(store, "*Unknown2", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    # Unknown3 (variable)
    # the low byte of _type_and_length indicates the length
    _v = stream__read_ansi_string(stream, num__and(_type_and_length, 255));
    if (astore__set(store, "*Name", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED;
    }

    return __vba__vbaprojectstream__S_OK;
}

# '${__pp_comment:+'
#
# This is the layout of the structure contained in the performance cache in
# _VBA_PROJECT, which we tentatively named "CachedIdentifier". This layout is
# officially undocumented and is based on great work by [pcodedump].
#
# [pcodedump] pcodedump.py:216 getTheIdentifiers()
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |   *TypeAndLength (2 bytes)    | *Unknown1 (2 bytes, optional) |
# +-------------------------------+-------------------------------+
# |     *KeywordTypeAndLength     |           *Unknown2           |
# |      (2 bytes, optional)      |      (6 bytes, optional)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |             ...               |       *Name (variable)        |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |   *Hash (2 bytes, optional)   | *Unknown3 (4 bytes, optional) |
# +-------------------------------+-------------------------------+
#
# '}'
function \
__vba__vbaprojectstream__unpack_cachedidentifier( \
    stream, store, \
    \
    _v, _type_and_length, _length, _is_keyword, _name \
) {
    _is_keyword = 0;

    # *TypeAndLength
    _v = _type_and_length = stream__read_uint16(stream);
    if (astore__set(store, "*TypeAndLength", _v) < 0) {
        return __vba__vbaprojectstream__E_UNEXPECTED
    }

    if (_type_and_length == 0) {
        # *Unknown1
        _v = stream__read_hex_string(stream, 2);
        if (astore__set(store, "*Unknown1", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
        # *KeywordTypeAndLength
        _v = _type_and_length = stream__read_uint16(stream);
        if (astore__set(store, "*KeywordTypeAndLength", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
        _is_keyword = 1;
    }

    # the high byte of _type_and_length indicates the type
    if (_type_and_length > 32767) {
        _v = stream__read_hex_string(stream, 6);
        if (astore__set(store, "*Unknown2", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    # the low byte of _type_and_length indicates the length
    if ((_length = _type_and_length % 256) != 0) {
        _v = _name = stream__read_ansi_string(stream, _length);
        if (astore__set(store, "*Name", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    if (!_is_keyword) {
        #
        # *Hash (optional)
        #
        # It has been confirmed that this is a 16-bit hash like djb2.
        # The original djb2 hash is a power of 33, but this appears to
        # be a power of 37.
        #
        # This prediction is supported by the following facts:
        #
        # The difference between the hash value of the string "b1", 0x5c90,
        # and the hash value of the string "a1", 0x5c6b, is 37.
        # And the difference between the hash value of the string "baa", 0x77de,
        # and the hash value of the string "aaa", 0x7285, is 1369(=37*37).
        #
        # We believe that the hash function is probably of the form below:
        #
        #     unsigned int hash(s) {
        #         unsigned int h = XXXX;
        #         int i;
        #         for (i = 0; i < strlen(s); ++i) {
        #             h = h * 37 + (s[i] + YY);
        #         }
        #         return h;
        #     }
        #
        _v = stream__read_hex_string(stream, 2);
        if (astore__set(store, "*Hash", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
        # Unknown3 (optional)
        _v = stream__read_hex_string(stream, 2);
        if (astore__set(store, "*Unknown3", _v) < 0) {
            return __vba__vbaprojectstream__E_UNEXPECTED;
        }
    }

    return __vba__vbaprojectstream__S_OK;
}
# }}}
# {{{ @module vba::modulestream
# {{{ vba__modulestream__init
function \
vba__modulestream__init(    _status) {

    if (__vba__modulestream__init_guard) {
        return (1);
    }

    vba__modulestream__E_NOTIMPL      = -16385;
    vba__modulestream__E_FAIL         = -16389;
    vba__modulestream__E_ACCESSDENIED = -458757;
    vba__modulestream__E_UNEXPECTED   = -65535;
    vba__modulestream__S_OK           = 0;
    vba__modulestream__S_FALSE        = 1;

    _status = vba__lz77__init();
    if (_status < 0) {
        return _status;
    }

    __vba__modulestream__init_guard = 1;

    return (0);
}
# }}}
# {{{ vba::modulestream::unpack
# [MS-OVBA] 2.3.4.3 Module Stream: Visual Basic Modules
#
# Specifies the source code for a module.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                   PerformanceCache (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                 CompressedSourceCode (variable)               |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
function \
vba__modulestream__unpack( \
    stream, \
    \
    _stream_name, _offset, \
    _entry_no, \
    _store, _path, _r, _src, \
    _istream, _ostream, _store_p, _vbaroot, _vba \
) {
    astore__new(_store, "/VBA/Project/ModulesRecord/Modules");

    if (num__and(__cli__S_opt_print, OPT_PRINT_PCD)) {
        pcode__init();
    }

    _vbaroot = astore__get(store, "/@VBA Root Directory");
    _vba = astore__get(store, "/@VBA Directory");

    while (! astore__enum_end(_store)) {
        _entry_no = astore__enum_next(_store);

        _stream_name = astore__get(_store, _entry_no "/StreamNameRecord/StreamName");
        # offset for skipping performance cache (P-CODE)
        _offset = astore__get(_store, _entry_no "/OffsetRecord/TextOffset");

        _path = _vbaroot "/" _vba "/" _stream_name;

        _r = cfb__unpack_stream(stream, _store, _path, _istream);
        if (_r < 0) {
            return _r;
        }

        print "-------------------------------------------------------------------------------";
        printf "[File \"%s\"]\n", _stream_name;

        if (num__and(__cli__S_opt_print, OPT_PRINT_PCD)) {
            astore__new(_store_p, "/P-code/" _stream_name);
            if (astore__set(_store_p, "Name", _stream_name) < 0) {
                return vba__modulestream__E_UNEXPECTED;
            }
            if (astore__set(_store_p, "Pcode Size", _offset) < 0) {
                return vba__modulestream__E_UNEXPECTED;
            }
            _r = vba__modulestream__unpack_pcode(_istream, _store_p);
            if (_r < 0) {
                return _r;
            }
            print "-------------------------------------------------------------------------------";
            astore__pretty_print(_store, "/P-code/" _stream_name);
        }

        if (num__and(__cli__S_opt_print, OPT_PRINT_SRC)) {
            stream__iseek(_istream, _offset);

            astore__new(_store_p, "/VBA/@LZ77CompressedStream" _path);
            _r = vba__lz77__unpack(_istream, _store_p, _ostream);
            if (_r < 0) {
                return _r;
            }
            _src = stream__read_ansi_string(_ostream, stream__available_size(_ostream));
            gsub(/\r\n/, "\n", _src);
            print "-------------------------------------------------------------------------------";
            print _src;
        }
    }

    return vba__modulestream__S_OK;
}
# }}}
# {{{ vba::modulestream::unpack_pcode
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |       Magic (2 bytes)         |                               |
# +-------------------------------+-------------------------------+
#
function \
vba__modulestream__unpack_pcode( \
    stream, store, \
    \
    _v, _i, _length, _opcount, _offset, _num_lines, _store, \
    _store_op, _jmp_buf_line, _pos, _arg, _args, _blocksize, _dword, \
    _k, _mnemonic, _opcode, _optype, _pcode, _store_args, _size, \
    _text, _visibility, _word, _jmp_buf_arg \
) {
    # Magic (2 bytes)
    _v = stream__read_uint16(stream);
    astore__set(store, "Magic::hexint16,mustbe(&H1601)", _v);

    pcode__new(_pcode);

    if (pcode__unpack_headers(_pcode, stream, store) < 0) {
        return vba__modulestream__E_UNEXPECTED
    }

    stream__iseek(stream, pcode__get_code_offset(_pcode));

    # Unknown4
    _v = stream__read_hex_string(stream, 60);
    astore__set(store, "Unknown4", _v);

    astore__set(store, "@Offset to CodeMagic::hexint32", pcode__get_code_offset(_pcode) + 60);

    # magic
    _v = stream__read_uint16(stream);
    if (astore__set(store, "magic::hexint16,mustbe(&HCAFE)", _v) < 0) {
        return vba__modulestream__E_UNEXPECTED
    }

    # Unknown5
    _v = stream__read_hex_string(stream, 2);
    astore__set(store, "Unknown5", _v);

    # lines
    _v = _num_lines = stream__read_uint16(stream);
    for (_i = 1; _i <= _num_lines; ++_i) {
        astore__fork(store, "Lines/" _i, _store);
        stream__skip(stream, 4);
        _v = stream__read_uint16(stream);
        astore__set(_store, "Length", _v);
        stream__skip(stream, 2);
        _v = stream__read_uint32(stream);
        astore__set(_store, "Offset::int32", _v);
    }

    # Unknown6
    _v = stream__read_uint32(stream);
    astore__set(store, "Unknown6::int32", _v);

    # Unknown7
    _v = stream__read_hex_string(stream, 6);
    astore__set(store, "Unknown7", _v);

    astore__set(store, "@Offset to ActualCode::hexint32", stream[1] - 5);

    stream__setjmp(stream, _jmp_buf_line);
    for (_i = 1; _i <= _num_lines; ++_i) {
        astore__fork(store, "ActualLines/" _i, _store);
        _offset = astore__get(store, "Lines/" _i "/Offset");
        _length = astore__get(store, "Lines/" _i "/Length");
        if (_length != 65535) {
            stream__longjmp(stream, _jmp_buf_line);
            stream__skip(stream, _offset);
            _opcount = 0;
            for (_pos = 1; _pos <= _length; ) {

                astore__fork(_store, "Op/" ++_opcount, _store_op);

                # Op
                _pos += 2;
                _v = stream__read_uint16(stream);
                astore__set(_store_op, "OpCode/Value", _v);

                _optype = num__rshift(_v, 10);
                astore__set(_store_op, "OpCode/Type/Value", _optype);

                _opcode = pcode__translate_opcode(_pcode, num__and(_v, 1023)) + 1;
                astore__set(_store_op, "OpCode/V7Code", _opcode);

                _mnemonic = __pcode__C_op_mnemonic[_opcode];
                astore__set(_store_op, "OpCode/Mnemonic", _mnemonic);
                _text = "";

                if (_opcode in __pcode__C_op_args) {
                    _args = __pcode__C_op_args[_opcode];
                    _k = 0;
                    do {
                        _arg = _args % 16;
                        astore__fork(_store_op, "OpArgs/" ++_k, _store_args);
                        if (_arg == AT_NAME) {
                            _pos += 2;
                            _word = stream__read_uint16(stream);
                            astore__set(_store_args, "Arg/Value::hexint16", _word);
                            _text = _text pcode__disasm_name(_pcode, stream, _store_args, _word, _optype, _opcode);
                        } else if (_arg == AT_IMMEDIATE || _arg == AT_IMP) {
                            _pos += 2;
                            _word = stream__read_uint16(stream);
                            astore__set(_store_args, "Arg/Value::hexint16", _word);
                            _text = _text pcode__disasm_imp(_pcode, stream, _store_args, _word, _optype, _opcode);
                        } else if (_arg == AT_FUNCTION) {
                            _pos += 4;
                            _dword = stream__read_uint32(stream);
                            astore__set(_store_args, "Arg/Value::hexint32", _dword);
                            _text = _text pcode__disasm_function(_pcode, stream, _store_args, _dword, _optype, _opcode);
                        } else if (_arg == AT_VAR) {
                            _pos += 4;
                            _dword = stream__read_uint32(stream);
                            astore__set(_store_args, "Arg/Value::hexint32", _dword);
                            _text = _text pcode__disasm_var(_pcode, stream, _store_args, _dword, _optype, _opcode);
                        } else if (_arg == AT_RECORD) {
                            _pos += 4;
                            _dword = stream__read_uint32(stream);
                            #
                            # [MS-VBAL] 5.2.3.3 User Defined Type Declarations
                            #
                            #     public-type-declaration = ["global" / "public"] udt-declaration
                            #     private-type-declaration = "private" udt-declaration
                            #     udt-declaration = "type" untyped-name EOS udt-member-list EOS "end" "type"
                            #     udt-member-list = udt-element *[EOS udt-element]
                            #     udt-element = rem-statement / udt-member
                            #     udt-member = reserved-name-member-dcl / untyped-name-member-dcl
                            #     untyped-name-member-dcl = IDENTIFIER optional-array-clause
                            #     reserved-name-member-dcl = reserved-member-name as-clause
                            #     optional-array-clause = [array-dim] as-clause
                            #     reserved-member-name = statement-keyword / marker-keyword / operator-identifier
                            #                          / special-form / reserved-name / literal-identifier
                            #                          / reserved-for-implementation-use / future-reserved
                            #
                            astore__set(_store_args, "Arg/Value::hexint32", _dword);

                            astore__set(_store_args, "Arg/Offset::hexint32", pcode__get_idt_offset(_pcode) + 4 + _dword)
                            stream__setjmp(stream, _jmp_buf_arg);
                            stream__iseek(stream, pcode__get_idt_offset(_pcode) + 4 + _dword);

                            _v = stream__read_uint16(stream);
                            astore__set(_store_args, "Arg/IDT/magic::hexint16", _v);

                            _v = _text = pcode__getname(_pcode, stream, _store_args);
                            astore__set(_store_args, "Arg/IDT/*Name", _v);

                            _v = stream__read_hex_string(stream, 14);
                            astore__set(_store_args, "Arg/IDT/Unknown1", _v);

                            _v = stream__read_uint16(stream);
                            astore__set(_store_args, "Arg/IDT/Options/Value", _v);

                            if (_v % 2 == 0) {
                                astore__set(_store_args, "Arg/IDT/Options/fPrivate", 1);
                                _visibility = "Private Type ";
                            } else {
                                _visibility = "Type ";
                            }
                            _text = _visibility _text;

                            stream__longjmp(stream, _jmp_buf_arg);
                            astore__set(_store_args, "Arg/TypeName", _v);
                        } else if (_arg == AT_TYPE) {
                            _pos += 4;
                            _dword = stream__read_uint32(stream);
                            astore__set(_store_args, "Arg/Value::hexint32", _dword);
                            stream__setjmp(stream, _jmp_buf_arg);
                            stream__skip(stream, pcode__get_idt_offset(_pcode) + 4 + _dword + 6);
                            _v = stream__read_uint8(stream);
                            if (_v <= 17) {
                                _v = __pcode__C_dimtypes[_v];
                            }
                            stream__longjmp(stream, _jmp_buf_arg);
                            astore__set(_store_args, "Arg/TypeName", _v);
                            _text = _text _v;
                        } else if (_arg == AT_CONTEXT) {
                            _pos += 4;
                            _dword = stream__read_uint32(stream);
                            astore__set(_store_args, "Arg/Value::hexint32", _dword);
                        } else if (_arg == AT_OPTION) {
                            _text = _text __pcode__C_options[_optype + 1];
                        } else if (_arg == AT_VARG) {
                            _word = stream__read_uint16(stream);
                            _pos += 2 + _word;
                            astore__set(_store_op, "*Length", _word);
                            _text = _text pcode__disasm_vararg(_pcode, stream, _store_op, _word, _optype, _opcode);
                        }
                        if (_args >= 16) {
                            _text = _text ","
                        }
                    } while (_args = int(_args / 16));

                    _text = __pcode__C_op_mnemonic[_opcode] " ( " _text " ) ";
                    astore__set(_store_op, "@Text", _text);
                }
            }
            # stream__rewind(stream, _offset + _length);
            if ((_pos - 1) % 4) {
                _v = stream__read_hex_string(stream, (_pos - 1) % 4)
                astore__set(_store, "Padding/Value", _v " (" (_pos - 1) % 4 " bytes)");
            }
        }
    }

    astore__set(store, "@Offset to EndOfActualCode::hexint32", stream[1] - 5);

    # *EndBlock
    _blocksize = 32;
    _v = _size = astore__get(store, "Pcode Size") - (stream[1] - 5);
    for (_i = 0; _i < _size; _i += _blocksize) {
        _v = stream__read_hex_string(stream, _blocksize);
        if (astore__set(store, "*EndBlock/" _i, _v) < 0) {;
            return vba__modulestream__E_UNEXPECTED;
        }
    }
    _v = stream__read_hex_string(stream, _blocksize);
    if (astore__set(store, "*EndBlock/" _i, _v) < 0) {;
        return vba__modulestream__E_UNEXPECTED;
    }

    return vba__modulestream__S_OK;
}
# }}}
# }}}
# {{{ @module vba::designerstorages
# {{{ [MS-OVBA] 2.2.10 Designer Storages
function \
forms20__init(    _status) {
    if (__forms20__init_guard) {
        return (1);
    }

    forms20__E_NOTIMPL      = -16385;
    forms20__E_FAIL         = -16389;
    forms20__E_ACCESSDENIED = -458757;
    forms20__E_UNEXPECTED   = -65535;
    forms20__S_OK           = 0;
    forms20__S_FALSE        = 1;

#    _status = struct__declare(" \
#                                                                            \
#    struct fmPosition {                                                     \
#        Left::uint32                                                        \
#      | Top::uint32                                                         \
#    }                                                                       \
#                                                                            \
#    struct fmString<cb,compressed> {                                        \
#        Value::RawString<cb>                                                \
#    }                                                                       \
#                                                                            \
#    struct fmString<cb,0> {                                                 \
#        Value::UnicodeString<cb>                                            \
#    }                                                                       \
#                                                                            \
#    struct FormObjectDepthTypeCount {                                       \
#        Depth::uint8                                                        \
#      | {                                                                   \
#            TypeOrCount::bits<7>                                            \
#          | fCount::bool                                                    \
#        } /* TypeOrCount must be 1 if not fCount */                         \
#          /* advance loop counter by TypeOrCount - 1 if fCount */           \
#      | OptionalType::uint8 exists only if ./fCount                         \
#    }                                                                       \
#                                                                            \
#    struct OleSiteConcreteControl {                                         \
#        Version::uint16,mustbe(0)                                           \
#      | cbSite::uint16                                                      \
#      | {                                                                   \
#            PropMask::SitePropMask                                          \
#          | DataBlock::SiteDataBlock                                        \
#          | ExtraDataBlock::SiteExtraDataBlock                              \
#        } sized by cbSite                                                   \
#    }                                                                       \
#                                                                            \
#    struct CountOfBytesWithCompressionFlag {                                \
#        cb::bits<31>                                                        \
#      | fCompressed::bool                                                   \
#    }                                                                       \
#                                                                            \
#    struct SITE_FLAG {                                                      \
#        fTabStop::bool                                                      \
#      | fVisible::bool                                                      \
#      | fDefault::bool                                                      \
#      | fCancel::bool                                                       \
#      | fStreamed::bool                                                     \
#      | fAutoSize::bool                                                     \
#      | Unused1::bits<2>,mustbe(0)                                          \
#      | fPreserveHeight::bool                                               \
#      | fFitToParent::bool                                                  \
#      | Reserved1::bits<3>                                                  \
#      | fSelectChild::bool                                                  \
#      | Unused2::bits<4>,mustbe(0)                                          \
#      | fPromoteControls::bool                                              \
#      | Unused3::bits<13>,mustbe(0)                                         \
#    }                                                                       \
#                                                                            \
#    ");
#    if (_status < 0) {
#        return _status;
#    }
#
#    _status = struct__declare(" \
#                                                                            \
#    struct SitePropMask {                                                   \
#        fName::bool                                                         \
#      | fTag::bool                                                          \
#      | fID::bool                                                           \
#      | fHelpContextID::bool                                                \
#      | fBitFlags::bool                                                     \
#      | fObjectStreamSize::bool                                             \
#      | fTabIndex::bool                                                     \
#      | fClsidCacheIndex::bool                                              \
#      | fPosition::bool                                                     \
#      | fGroupID::bool                                                      \
#      | Unused1::bits<1>,mustbe(0)                                          \
#      | fControlTipText::bool                                               \
#      | fRuntimeLicKey::bool                                                \
#      | fControlSource::bool                                                \
#      | fRowSource::bool                                                    \
#      | Unused2::bits<17>,mustbe(0)                                         \
#    }                                                                       \
#                                                                            \
#    struct SiteDataBlock {                                                  \
#        NameData::CountOfBytesWithCompressionFlag                           \
#            exists only if ../PropMask/fName                                \
#      | TagData::CountOfBytesWithCompressionFlag                            \
#            exists only if ../PropMask/fTag                                 \
#      | ID::uint32                                                          \
#            exists only if ../PropMask/fID                                  \
#      | HelpContextID::uint32                                               \
#            exists only if ../PropMask/fHelpContextID                       \
#      | BitFlags::SITE_FLAG                                                 \
#            exists only if ../PropMask/fBitFlags                            \
#      | ObjectStreamSize::uint32                                            \
#            exists only if ../PropMask/fObjectStreamSize                    \
#      | TabIndex::uint16                                                    \
#            exists only if ../PropMask/fTabIndex                            \
#      | ClsidCacheIndex::uint16                                             \
#            exists only if ../PropMask/fClsidCacheIndex                     \
#      | GroupID::uint16                                                     \
#            exists only if ../PropMask/fGroupID                             \
#      | ControlTipTextData::CountOfBytesWithCompressionFlag                 \
#            exists only if ../PropMask/fControlTipText                      \
#      | RuntimeLicKeyData::CountOfBytesWithCompressionFlag                  \
#            exists only if ../PropMask/fRuntimeLicKey                       \
#      | ControlSourceData::CountOfBytesWithCompressionFlag                  \
#            exists only if ../PropMask/fControlSource                       \
#      | RowSourceData::CountOfBytesWithCompressionFlag                      \
#            exists only if ../PropMask/fRowSource                           \
#    }                                                                       \
#                                                                            \
#    struct SiteExtraDataBlock {                                             \
#        Name::fmString<                                                     \
#            ../DataBlock/NameData/cb                                        \
#          , ../DataBlock/NameData/fCompressed                               \
#          > exists only if ../PropMask/fName                                \
#      | Tag::fmString<                                                      \
#            ../DataBlock/TagData/cb                                         \
#          , ../DataBlock/TagData/fCompressed                                \
#          > exists only if ../PropMask/fTag                                 \
#            aligned on boundary 4                                           \
#      | SitePosition::fmPosition                                            \
#            exists only if ../PropMask/fPosition                            \
#            aligned on boundary 4                                           \
#      | ControlTipText::fmString<                                           \
#            ../DataBlock/ControlTipTextData/cb                              \
#          , ../DataBlock/ControlTipTextData/fCompressed                     \
#          > exists only if ../PropMask/fControlTipText                      \
#            aligned on boundary 4                                           \
#      | RuntimeLicKey::fmString<                                            \
#            ../DataBlock/RuntimeLicKeyData/cb                               \
#          , ../DataBlock/RuntimeLicKeyData/fCompressed                      \
#          > exists only if ../PropMask/fRuntimeLicKey                       \
#            aligned on boundary 4                                           \
#      | ControlSource::fmString<                                            \
#            ../DataBlock/ControlSourceData/cb                               \
#          , ../DataBlock/ControlSourceData/fCompressed                      \
#          > exists only if ../PropMask/fControlSource                       \
#            aligned on boundary 4                                           \
#      | RowSource::fmString<                                                \
#            ../DataBlock/RowSourceData/cb                                   \
#          , ../DataBlock/RowSourceData/fCompressed                          \
#          > exists only if ../PropMask/fRowSource                           \
#            aligned on boundary 4                                           \
#    }                                                                       \
#                                                                            \
#    ");
#
#    if (_status < 0) {
#        return _status;
#    }

    __forms20__init_guard = 1;

    return (0);
}

function \
forms20__unpack( \
    stream, store, \
    \
    _stream_name, _entry, _store, _path, _r, _store_p, _vbaroot \
) {
    astore__new(_store, "/VBA/Project/ModulesRecord/Modules");
    _vbaroot = astore__get(store, "/@VBA Root Directory");

    while (! astore__enum_end(_store)) {
        _entry = astore__enum_next(_store);

        _stream_name = astore__get(_store, _entry "/StreamNameRecord/StreamName");
        _path = _vbaroot "/" _stream_name;

        if (astore__has(store, "/CFB/@FileID" _path "/\003VBFrame/id")) {  # VBFrame exists
            astore__new(_store_p, "/Forms");
            _r = __forms20__unpack_formparts(stream, _store_p, _path);
            if (_r < 0) {
                return _r;
            }
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ Parsing persisted form data
# {{{ [MS-OFORMS] 2.1.2 Control Streams
function \
__forms20__unpack_formparts( \
    stream, store, path, \
    \
    _v, _r, _path, _store, _title, _store_c, _entry \
) {
    astore__new(_store_c, "/CFB/@FileID" path);

    while (! astore__enum_end(_store_c)) {
        _entry = astore__enum_next(_store_c);

        if (_entry == "id") {
            continue;
        }
        _path = path "/" _entry;

        if (_entry == "\001CompObj") {
            astore__new(_store, "/Forms" _path "/CompObjStream");
            # CompObj stream
            _r = __forms20__unpack_compobjstream(stream, _store, _path);
            if (_r < 0) {
                return _r;
            }

            _title = "[File \"" path "/\\001CompObj\"]";
            printf "-------------------------------------------------------------------------------\n" \
                   _title "\n" \
                   "-------------------------------------------------------------------------------\n";
            astore__pretty_print(_store, ".");

        } else if (_entry == "\003VBFrame") {
            # VBFrame stream
            _r = forms20__unpack_vbframestream(stream, store, _path);
            if (_r < 0) {
                return _r;
            }
        } else if (_entry == "f") {
            # Form stream
            _r = forms20__unpack_formstream(stream, store, _path);
            if (_r < 0) {
                return _r;
            }
            _v = astore__get(store, "/Forms" _path "/SiteData/CountOfSites");
            _path = __astore__path_canonicalize(_path "/../o");
            if (astore__has(store, "/CFB/@FileID" _path)) {
                # Object stream
                _r = forms20__unpack_objectstream(stream, store, _path);
                if (_r < 0) {
                    return _r;
                }
            }
        } else if (_entry == "o") {
        } else if (_entry == "x") {
            # Page control structure
            _r = forms20__unpack_pagecontrolstructure(stream, store, _path);
            if (_r < 0) {
                return _r;
            }
        } else if (_entry ~ /^i[0-9]+$/) {  # i<n>
            # '${__pp_comment:+'
            #
            # [MS-OFORMS] 2.1.2.2.2 Embedded Parents
            #
            # Embedded controls that can contain other embedded controls are
            # each persisted to a separate storage within the same storage as
            # the parent control. The name of this storage MUST be "i<n>", where
            # <n> is the value of the ID property of the control. The value of
            # ID is specified by the parent control. The value of n is the
            # decimal representation of ID. Values of ID less than 10 MUST be
            # preceded by a leading zero when used as part of the storage name.
            # Values of ID greater than 10 MUST NOT be preceded by a leading zero.
            #
            # '}'
            _r = __forms20__unpack_formparts(stream, store, _path);
            if (_r < 0) {
                return _r;
            }
        } else {
            E__message = sprintf("Unexpected file name: %s", _path);
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OLEDS] 2.3.8 CompObjStream
# '${__pp_comment:+'
#
# The CompObjStream structure is contained inside of an OLE Compound File
# Stream (as specified in [MS-CFB]). The OLE Compound File Stream has the
# name "\1CompObj". The CompObjStream structure specifies the Clipboard
# Format and the display name of the linked object or embedded object.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Header (28 bytes)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    AnsiUserType (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                 AnsiClipboardFormat (variable)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      Reserved1 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    UnicodeMarker (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   UnicodeUserType (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                UnicodeClipboardFormat (variable)              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      Reserved2 (variable)                     |
# +---------------------------------------------------------------+
#
# '}'
function \
__forms20__unpack_compobjstream( \
    stream, store, path, \
    \
    _store, _v, _r, _stream \
) {
    _r = cfb__unpack_stream(stream, store, path, _stream);
    if (_r < 0) {
        return _r;
    }

    # Header (28 bytes)
    astore__fork(store, "Header::CompObjHeader", _store);
    _r = __forms20__unpack_compobjstream_compobjheader(_stream, _store);
    if (_r < 0) {
        return _r;
    }

    # AnsiUserType (variable)
    astore__fork(store, "AnsiUserType::LengthPrefixedAnsiString", _store);
    _r = __forms20__unpack_compobjstream_lengthprefixedansistring(_stream, _store);
    if (_r < 0) {
        return _r;
    }

    # '${__pp_comment:+'
    #
    # AnsiClipboardFormat (variable)
    #
    # This MUST be a ClipboardFormatOrAnsiString structure (section 2.3.1) that
    # contains the Clipboard Format of the linked object or embedded object. If
    # the MarkerOrLength field of the ClipboardFormatOrAnsiString structure
    # contains a value other than 0x00000000, 0xffffffff, or 0xfffffffe, the
    # value MUST NOT be greater than 0x00000190. Otherwise the CompObjStream
    # structure is invalid.<24>
    #
    # '}'
    astore__fork(store, "AnsiClipboardFormat::ClipboardFormatOrAnsiString", _store);
    _r = __forms20__unpack_compobjstream_clipboardformatoransistring(_stream, _store);
    if (_r < 0) {
        return _r;
    }

    #
    # Reserved1 (variable)
    #
    # If present, this MUST be a LengthPrefixedAnsiString structure (section 2.1.4).
    # If the Length field of the LengthPrefixedAnsiString contains a value of 0 or
    # a value that is greater
    #
    astore__fork(store, "Reserved1::LengthPrefixedAnsiString", _store);
    _r = __forms20__unpack_compobjstream_lengthprefixedansistring(_stream, _store, 40);
    if (_r < 0) {
        return _r;
    }
    if (_r == forms20__S_FALSE) {
        return _r;
    }
    if (stream__is_end(stream)) {
        return forms20__S_FALSE;
    }

    #
    # UnicodeMarker (variable)
    #
    # If this field is present and is NOT set to 0x71B239F4, the remaining fields
    # of the structure MUST be ignored on processing.
    #
    _v = stream__read_uint32(stream);
    if (astore__set(store, "UnicodeMarker::hexint32,mustbe(&H71B239F4)", _v) < 0) {
        E__message = "";
        return forms20__S_FALSE;
    }
    if (stream__is_end(stream)) {
        return forms20__S_FALSE;
    }

    #
    # UnicodeUserType (variable)
    #
    # This MUST be a LengthPrefixedUnicodeString structure (section 2.1.5)
    # that contains a display name of the linked object or embedded object.
    #
    astore__fork(store, "UnicodeUserType::LengthPrefixedUnicodeString", _store);
    _r = __forms20__unpack_compobjstream_lengthprefixedunicodestring(_stream, _store);
    if (_r < 0) {
        return _r;
    }
    if (stream__is_end(stream)) {
        return forms20__S_FALSE;
    }

    #
    # Reserved2 (variable)
    #
    # This MUST be a LengthPrefixedUnicodeString (section 2.1.5). The String field
    # of the LengthPrefixedUnicodeString can contain any arbitrary value and MUST
    # be ignored on processing.
    #
    astore__fork(store, "Reserved2::LengthPrefixedUnicodeString", _store);
    _r = __forms20__unpack_compobjstream_lengthprefixedunicodestring(_stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString
# '${__pp_comment:+'
#
# The ClipboardFormatOrAnsiString structure specifies either a
# standard clipboard format (section 1.3.5.1) or a registered
# clipboard format as an ANSI string.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                    MarkerOrLength (4 bytes)                   |
# +---------------------------------------------------------------+
# |                  FormatOrAnsiString (variable)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# [MS-OLEDS] 1.3.5.1 Standard Clipboard Formats
#
# This specification uses a number of Clipboard Formats called
# the Standard Clipboard Formats. These are specified in
# section 2.1.1. A standard Clipboard Format is identified by
# a numeric ID as specified in section 2.1.1.
#
# [MS-OLEDS] 1.7.1 Registered Clipboard Formats
#
# Vendors can create their own Clipboard Formats, called
# Registered Clipboard Formats. A Registered Clipboard Format
# is identified by a string that contains the name of the Clipboard
# Format (as specified in section 2.1.1). Vendors can define their
# own Registered Clipboard Formats provided that the string that
# identifies the Registered Clipboard Format is prefixed with the
# "OleExternal" string literal.
#
# [MS-OLEDS] 2.1.1 Clipboard Formats
#
# Standard Clipboard Formats and Registered Clipboard Formats
# (see sections 1.3.5.1 and 1.7.1 for more details) are used to
# identify presentation data formats.
# A standard clipboard format identifier is of type unsigned long.
# A registered clipboard format is identified by a LengthPrefixedAnsiString
# (section 2.1.4) or a LengthPrefixedUnicodeString (section 2.1.5).
# The Object Linking and Embedding (OLE) Data Structures: Structure
#
# Specification defines the following standard clipboard format values to be
# used to identify presentation data formats:
#
# Presentation Data Format Windows metafile (as specified in [MS-WMF]
# section 1.3.1) DeviceIndependentBitmap Object structure (as specified
# in [MS-WMF] section 2.2.2.9)
#
# +============================================================================+
# | Name            | Value      | Presentation Data Format                    |
# +============================================================================+
# | CF_BITMAP       | 0x00000002 | Bitmap16 Object structure                   |
# |                 |            | (as specified in [MS-WMF] section 2.2.2.1)  |
# +-----------------+------------+---------------------------------------------+
# | CF_METAFILEPICT | 0x00000003 | Windows metafile                            |
# |                 |            | (as specified in [MS-WMF] section 1.3.1)    |
# +-----------------+------------+---------------------------------------------+
# | CF_DIB          | 0x00000008 | DeviceIndependentBitmap Object structure    |
# |                 |            | (as specified in [MS-WMF] section 2.2.2.9)  |
# +-----------------+------------+---------------------------------------------+
# | CF_ENHMETAFILE  | 0x0000000E | Enhanced Metafile                           |
# |                 |            | (as specified in [MS-EMF] section 1.3.1)    |
# +-----------------+------------+---------------------------------------------+
#
# In addition, an application or higher level protocol MAY supply registered
# clipboard formats (section 1.7.1) to identify custom presentation data formats.
#
# '}'
function \
__forms20__unpack_compobjstream_clipboardformatoransistring( \
    stream, store, path, \
    \
    _v \
) {
    # '${__pp_comment:+'
    #
    # MarkerOrLength (4 bytes)
    #
    # If this is set to 0x00000000, the FormatOrAnsiString field MUST NOT
    # be present. If this field is set to 0xFFFFFFFF or 0xFFFFFFFE, the
    # FormatOrAnsiString field MUST be 4 bytes in size and MUST contain a
    # standard clipboard format identifier (section 2.1.1).
    # If this set to a value other than 0x00000000, the FormatOrAnsiString
    # field MUST be set to a null-terminated ANSI string containing the
    # name of a registered clipboard format (section 2.1.1) and the
    # MarkerOrLength field MUST be set to the number of ANSI characters in
    # the FormatOrAnsiString field, including the terminating null character.
    #
    # +=====================================================================+
    # | Value      | Meaning                                                |
    # +=====================================================================+
    # | 0x00000000 | The FormatOrAnsiString field MUST NOT be present.      |
    # +------------+--------------------------------------------------------+
    # | 0xfffffffe | The FormatOrAnsiString field MUST be 4 bytes in size   |
    # |            | and MUST contain a standard clipboard format           |
    # |            | (section 1.3.5.1).                                     |
    # +------------+--------------------------------------------------------+
    # | 0xffffffff | The FormatOrAnsiString field MUST be 4 bytes in size   |
    # |            | and MUST contain a standard clipboard format           |
    # |            | (section 1.3.5.1).                                     |
    # +------------+--------------------------------------------------------+
    #
    # '}'

    # MarkerOrLength
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Length::int32,le(400)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # FormatOrAnsiString (variable)
    if (_v >= 4294967294) {  # 0xfffffffe or 0xffffffff
        # a standard clipboard format
        _v = stream__read_uint32(stream);
        if (astore__set(store, "FormatOrAnsiString::ClipboardFormat", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    } else if (_v > 0) {
        # a registered clipboard format
        _v = stream__read_ansi_string(stream, _v - 1);
        if (astore__set(store, "FormatOrAnsiString/Value", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }

        _v = stream__read_uint8(stream);
        if (astore__set(store, "FormatOrAnsiString/Terminator::uint8,mustbe(0)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OLEDS] 2.3.7 CompObjHeader
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      Reserved1 (4 bytes)                      |
# +---------------------------------------------------------------+
# |                       Versions (4 bytes)                      |
# +---------------------------------------------------------------+
# |                      Reserved2 (20 bytes)                     |
# +---------------------------------------------------------------+
#
# '}'
function \
__forms20__unpack_compobjstream_compobjheader( \
    stream, store, path, \
    \
    _v \
) {
    # Reserved1 (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Reserved1::hexint32", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Versions (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Versions::hexint32", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Reserved2 (20 bytes)
    _v = stream__read_hex_string(stream, 20);
    if (astore__set(store, "Reserved2", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString
# '${__pp_comment:+'
#
# This structure specifies a null-terminated American National Standards
# Institute (ANSI) character set string.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Length (4 bytes)                        |
# +---------------------------------------------------------------+
# |                       String (variable)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__forms20__unpack_compobjstream_lengthprefixedansistring( \
    stream, store, path, maxsize, \
    \
    _v \
) {
    # Length (4 bytes)
    #
    # This MUST be set to the number of ANSI characters in the String field,
    # including the terminating null character. Length MUST be set to
    # 0x00000000 to indicate an empty string.
    #
    _v = stream__read_uint32(stream);
    if (maxsize > 0) {
        if (astore__set(store, "Length::hexint32,le(%)", _v, maxsize) < 0) {
            return forms20__S_FALSE;
        }
    } else {
        maxsize = stream__available_size(stream);
        if (astore__set(store, "Length::hexint32,le(%)", _v, maxsize) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # String (variable)
    if (_v == 0) {
        return forms20__S_FALSE;
    }

    _v = stream__read_ansi_string(stream, _v - 1);
    if (astore__set(store, "String/Value", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    _v = stream__read_uint8(stream);
    if (astore__set(store, "String/Terminator::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Length (4 bytes)                        |
# +---------------------------------------------------------------+
# |                       String (variable)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
__forms20__unpack_compobjstream_lengthprefixedunicodestring( \
    stream, store, path, \
    \
    _v, _maxsize \
) {
    # Length (4 bytes)
    #
    # This MUST be set to the number of bytes in the String field, including the
    # terminating null character.
    # Length MUST be set to 0x00000000 to indicate an empty string.
    #
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, "Length::hexint32,le(%)", _v, _maxsize) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # String (variable)
    if (_v == 0) {
        if (astore__set(store, "String/Value", "") < 0) {
            return forms20__E_UNEXPECTED;
        }
        return forms20__S_FALSE;
    }

    _v = stream__read_utf16le_string(stream, _v - 1);
    if (astore__set(store, "String/Value", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    _v = stream__read_uint8(stream);
    if (astore__set(store, "String/Terminator::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.1.2.3 MultiPage Control Structure
function \
forms20__unpack_pagecontrolstructure( \
    stream, store, path \
) {
    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.4 FormEmbeddedActiveXControl
# '${__pp_comment:+'
#
# Specifies a control based on the value of a DataBlock.ClsidCacheIndex
# of an OleSiteConcreteControl that is referenced by a FormControl.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                    ControlCached (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   ControlNonCached (variable)                 |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formembeddedactivexcontrol( \
    stream, store, size, cache_index, \
    \
    _v, _r, _store \
) {
    if (astore__set(store, "@CacheIndex", cache_index) < 0) {
        return forms20__E_UNEXPECTED;
    }
    if (astore__set(store, "@Size", size) < 0) {
        return forms20__E_UNEXPECTED;
    }

    if (cache_index < 32767) {  # less than 0x7fff
        astore__fork(store, "ControlCached", _store);
        _r = forms20__unpack_formembeddedactivexcontrolcached( \
            stream, _store, size, cache_index);
        if (_r < 0) {
            return _r;
        }
    } else if (cache_index >= 32768) {  # greater than 0x8000
        _v = stream__read_hex_string(stream, size);
        if (astore__set(store, "Value", _v) < 0) {
            forms20__E_UNEXPECTED;
        }
    } else {  # 0x7fff
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.5 FormEmbeddedActiveXControlCached
# '${__pp_comment:+'
#
# Specifies the type of embedded control for values of the
# ClsidCacheIndex property less than 0x7FFF.
# Parent controls are stored as specified in section 2.1.2.2.2.
# Controls that cannot be parents are stored as specified in
# section 2.1.2.2.1.
#
# +========================+
# |value | Meaning         |
# +========================+
# |    7 | Form            |
# |   12 | Image           |
# |   14 | Frame           |
# |   15 | MorphData       |
# |   16 | SpinButton      |
# |   17 | CommandButton   |
# |   18 | TabStrip        |
# |   21 | Label           |
# |   23 | TextBox         |
# |   24 | ListBox         |
# |   25 | ComboBox        |
# |   26 | CheckBox        |
# |   27 | OptionButton    |
# |   28 | ToggleButton    |
# |   47 | ScrollBar       |
# |   57 | MultiPage       |
# +------+-----------------+
#
# '}'
function \
forms20__unpack_formembeddedactivexcontrolcached( \
    stream, store, size, cache_index, \
    \
    _v, _r, _remain, _store \
) {
    _remain = stream__pos(stream) + size;

    if (cache_index == 7) {
        # skip
        # # Form control
        # astore__fork(store, "Form::FormControl", _store);
        # _r = forms20__unpack_formcontrol(stream, _store);
        # if (_r < 0) {
        #     return _r;
        # }
    } else if (cache_index == 12) {
        # Image control
    } else if (cache_index == 14) {
        # Frame control
    } else if (cache_index == 15) {
        # MorphData control
    } else if (cache_index == 16) {
        # SpinButton control
    } else if (cache_index == 17) {
        # CommandButton control
        astore__fork(store, "CommandButton::CommandButtonControl", _store);
        _r = forms20__unpack_commandbuttoncontrol(stream, _store);
        if (_r < 0) {
            return _r;
        }
    } else if (cache_index == 18) {
        # TabStrip control
    } else if (cache_index == 21) {
        # Label control
        astore__fork(store, "Label::LabelControl", _store);
        _r = forms20__unpack_labelcontrol(stream, _store);
        if (_r < 0) {
            return _r;
        }
    } else if (cache_index == 23) {
        # TextBox control
    } else if (cache_index == 23) {
        # TextBox control
    } else if (cache_index == 24) {
        # ListBox control
    } else if (cache_index == 25) {
        # ComboBox control
    } else if (cache_index == 26) {
        # Checkbox control
    } else if (cache_index == 27) {
        # OptionButton control
    } else if (cache_index == 28) {
        # ToggleButton control
    } else if (cache_index == 47) {
        # ScrollBar control
    } else if (cache_index == 48) {
        # MultiPage control
    }

    _remain -= stream__pos(stream);
    _v = stream__read_hex_string(stream, _remain);
    if (astore__set(store, "Value", _v) < 0) {
        forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.1.2.1.1 Form Stream
# '${__pp_comment:+'
#
# Form Stream
#
# All parent controls MUST contain a FormControl. The FormControl properties
# are persisted to a stream as specified in section 2.1.1.2.
# The name of this stream MUST be "f".
#
# An OleSiteConcrete is persisted in this stream for each embedded control,
# as specified by the FormControl in section 2.2.10.12. The FormControl can
# also contain a DesignExtender, as specified in section 2.2.10.11.
#
# '}'
function \
forms20__unpack_formstream( \
    stream, store, path, \
    \
    _r, _stream, _store \
) {
    astore__new(_store, "/Forms" path);

    _r = cfb__unpack_stream(stream, _store, path, _stream);
    if (_r < 0) {
        return _r;
    }

    _r = forms20__unpack_formcontrol(_stream, _store);
    if (_r < 0) {
        return _r;
    }
    printf "-------------------------------------------------------------------------------\n" \
           "[File \"" path "\"]\n" \
           "-------------------------------------------------------------------------------\n";
    astore__pretty_print(_store, "/Forms" path, "");

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.1.2.2.1 Object Stream
#
# '${__pp_comment:+'
#
# Embedded controls that cannot themselves contain other embedded controls are persisted
# sequentially as FormEmbeddedActiveXControls to a stream contained in the same storage
# as the parent control. The name of this stream MUST be "o". The order in which they are
# persisted is specified by the order of SiteData.Sites in the FormControl of the parent,
# as specified in section 2.2.10.6. If a parent control contains no embedded controls or
# only embedded controls that are also parent controls, this stream MUST still exist and
# MUST be empty.
#
# '}'
function \
forms20__unpack_objectstream( \
    stream, store, path, \
    \
    _v, _r, _i, _stream, _store, _size, \
    _count, _index, _store_f, _remain \
) {
    astore__new(_store_f, "/Forms" path "/../f");

    _r = cfb__unpack_stream(stream, store, path, _stream);
    if (_r < 0) {
        return _r;
    }

    # retrieve CountOfSites form stream
    _count = astore__get(_store_f, "SiteData/CountOfSites");
    for (_i = 1; _i <= _count; ++_i) {
        astore__new(_store, "/Forms" path "/ObjectStream::FormEmbeddedActiveXControl[]/" _i);
        _size = astore__get(_store_f, "SiteData/Sites/" _i "/DataBlock/ObjectStreamSize");
        _index = astore__get(_store_f, "SiteData/Sites/" _i "/DataBlock/ClsidCacheIndex");

        # FormEmbeddedActiveXControl
        _r = forms20__unpack_formembeddedactivexcontrol(_stream, _store, _size, _index);
        if (_r < 0) {
            return _r;
        }
    }

    if (! stream__is_end(_stream)) {
        _remain = stream__available_size(_stream);
        _v = stream__read_hex_string(stream, _remain);
        if (astore__set(_store, "/Forms" path "/@Remained", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    printf "-------------------------------------------------------------------------------\n" \
           "[File \"" path "\"]\n" \
           "-------------------------------------------------------------------------------\n";
    astore__pretty_print(_store, "/Forms" path, "");

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2 Control Structures
# {{{ [MS-OFORMS] 2.2.1 CommandButton Control Structure
# {{{ [MS-OFORMS] 2.2.1.1 CommandButtonControl
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | MinorVersion  | MajorVersion  |      cbFormCommandButton      |
# +---------------+---------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ExtraDataBlock(variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      StreamData(variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      TextProps(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_commandbuttoncontrol( \
    stream, store, \
    \
    _store, _v, _r \
) {
    # MinorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MinorVersion::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # MajorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MajorVersion::uint8,mustbe(2)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbCommandButton (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbCommandButton", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::CommandButtonPropMask", _store);
    _r = forms20__unpack_commandbuttonpropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::CommandButtonDataBlock", _store);
    _r = forms20__unpack_commandbuttondatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::CommandButtonExtraDataBlock", _store);
    _r = forms20__unpack_commandbuttonextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # StreamData (variable)
    astore__fork(store, "StreamData::CommandButtonStreamData", _store);
    _r = forms20__unpack_commandbuttonstreamdata(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # TextProps (variable)
    astore__fork(store, "TextProps::TextProps", _store);
    _r = forms20__unpack_textprops(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.1.2 CommandButtonPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|I|J|K|               UnusedBits                |
# +-+-+-+-+-+-+-+-+-+-+-+-----------------------------------------+
#
# '}'
function \
forms20__unpack_commandbuttonpropmask(stream, store,     _v) {

    # A - fForeColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fForeColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fBackColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBackColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fVariousPropertyBits (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fVariousPropertyBits::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fCaption (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCaption::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fPicturePosition (1 bits)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPicturePosition::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fSize (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSize::bool,mustbe(1)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fMousePointer (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMousePointer::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fPicture (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPicture::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fAccelerator (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fAccelerator::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fTakeFocusOnClick (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fTakeFocusOnClick::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fMouseIcon (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMouseIcon::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # UnusedBits (21 bits)
    _v = stream__read_bits(stream, 21);
    if (astore__set(store, "UnusedBits::uint32,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.1.3 CommandButtonDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                     ForeColor (optional)                      |
# +---------------------------------------------------------------+
# |                     BackColor (optional)                      |
# +---------------------------------------------------------------+
# |                 VariousPropertyBits (optional)                |
# +---------------------------------------------------------------+
# |                      Caption (optional)                       |
# +---------------------------------------------------------------+
# |                  PicturePosition (optional)                   |
# +---------------+-----------------------------------------------+
# | MousePointer  |                   Padding1                    |
# |  (optional)   |                  (variable)                   |
# +---------------+-----------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      Picture (optional)       |      Padding2 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |    Accelerator (optional)     |      Padding3 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |     MouseIcon (optional)      |      Padding4 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_commandbuttondatablock( \
    stream, store, \
    \
    _v, _store, _r \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fForeColor")) {
        # '${__pp_comment:+'
        #
        # ForeColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.31 ForeColor
        #
        # the default value(CommandButton) is COLOR_BTNTEXT (0x80000012)
        #
        # '}'
        astore__fork(store, "ForeColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fBackColor")) {
        # '${__pp_comment:+'
        #
        # BackColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.3 BackColor
        #
        # the default value(CommandButton) is COLOR_BTNFACE (0x8000000f)
        #
        # '}'
        astore__fork(store, "BackColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fVariousPropertyBits")) {
        # '${__pp_comment:+'
        #
        # VariousPropertyBits (4 bytes)
        #
        # [MS-OFORMS] 2.5.96 VariousPropertyBits
        #
        # The file format default of CommandButtonControl is 0x0000001b
        # (Reserved1,Enabled,BackStyle,Reserved2).
        #
        # '}'
        astore__fork(store, "VariousPropertyBits::VariousPropertiesBitfield", _store);
        _r = forms20__unpack_variouspropertybits(stream, _store);
        if (_r < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fCaption")) {
        # '${__pp_comment:+'
        #
        # Caption (variable)
        #
        # [MS-OFORMS] 2.5.10 Caption
        #
        # An fmString that specifies the descriptive text that appears on a control to
        # identify or describe it.
        # The file format default is a zero-length string.
        #
        # Applies to:
        #   CheckBox
        #   CommandButton
        #   Form<2>
        #   Label
        #   OptionButton
        #   TabStrip
        #   ToggleButton
        #
        # '}'
        astore__fork(store, "Caption::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fPicturePosition")) {
        # '${__pp_comment:+'
        #
        # PicturePosition (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.64 PicturePosition
        # 2.5.64.1 fmPicturePosition
        #
        # An fmPicturePosition that specifies the location of the picture of a
        # control relative to the caption of the control.
        # The file format default is 0x00070001, fmPicturePositionAboveCenter.
        #
        # Applies to:
        #   CheckBox
        #   CommandButton
        #   Label
        #   OptionButton
        #   ToggleButton
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "PicturePosition::fmPicturePosition", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fMousePointer")) {
        # '${__pp_comment:+'
        #
        # MousePointer (1 byte)
        #
        # Applies to:
        #   CheckBox
        #   ComboBox
        #   CommandButton
        #   Form
        #   Image
        #   Label
        #   ListBox
        #   OptionButton
        #   ScrollBar
        #   SpinButton
        #   TabStrip
        #   TextBox
        #   ToggleButton
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "MousePointer::fmMousePointer", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPicture")) {
        #
        # Padding1 (variable)
        #
        stream__skip_to_align(stream, 4);

        # Picture (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Picture::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fAccelerator")) {

        # Padding2 (variable)
        stream__skip_to_align(stream, 4);

        #
        # Accelerator (2 bytes)
        #
        # [MS-OFORMS] 2.5.1 Accelerator
        #
        # A Unicode character that specifies the accelerator key
        # for the control.
        # The file format default is 0x0000, no accelerator.
        #
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Accelerator::hexint16", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fMouseIcon")) {
        #
        # Padding3 (variable)
        #
        stream__skip_to_align(stream, 4);

        # MouseIcon (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "MouseIcon::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding4(variable)
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.1.4 CommandButtonExtraDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Caption (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      *Padding1 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        Size (variable)                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+ #
# '}'
function \
forms20__unpack_commandbuttonextradatablock( \
    stream, store, \
    \
    _store, _r, _size, _compressed \
) {
    # Caption (variable bytes)
    if (astore__get(store, "../PropMask/fCaption")) {
        if (! astore__has(store, "../DataBlock/Caption/cb")) {
            E__message = "\"../DataBlock/Caption/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/Caption/fCompressed")) {
            E__message = "\"../DataBlock/Caption/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/Caption/cb");
        _compressed = astore__get(store, "../DataBlock/Caption/fCompressed");

        #
        # [MS-OFORMS] 2.5.10 Caption
        #
        # An fmString that specifies the descriptive text that appears
        # on a control to identify or describe it. The file format default
        # is a zero-length string.
        #
        astore__fork(store, "Caption::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # Size (8 bytes)
    if (astore__get(store, "../PropMask/fSize")) {

        # *Padding1
        stream__skip_to_align(stream, 4);

        #
        # [MS-OFORMS] 2.5.78 Size
        #
        # An fmSize that specifies width and height, in HIMETRIC units,
        # of the control.
        # Each control to which this property applies MUST persist a
        # value for it.
        #
        # Applies to:
        #
        #   CheckBox
        #   ComboBox
        #   CommandButton
        #   Image
        #   Label
        #   ListBox
        #   OptionButton
        #   TabStrip
        #   TextBox
        #   ToggleButton
        #
        astore__fork(store, "Size::fmSize", _store);
        _r = forms20__unpack_fmsize(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.1.5 CommandButtonStreamData
# '${__pp_comment:+'
#
# Specifies picture properties of the control that are not set to the
# file format defaults. If the corresponding bit in the PropMask of
# the CommandButtonControl that contains this CommandButtonStreamData
# is set to zero, the property value MUST NOT be stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      MouseIcon (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     GuidAndFont (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       Picture (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_commandbuttonstreamdata( \
    stream, store, \
    \
    _store, _r \
) {
    # Picture (variable)
    if (astore__get(store, "../PropMask/fPicture")) {
        #
        # [MS-OFORMS] 2.5.62 Picture
        #
        # A GuidAndPicture that specifies the picture to display on a control.
        # The file format default is no picture.
        #
        astore__fork(store, "Picture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # MouseIcon (variable)
    if (astore__get(store, "../PropMask/fMouseIcon")) {
        #
        # [MS-OFORMS] 2.5.49 MouseIcon
        #
        # A GuidAndPicture that specifies a custom icon to display as the mouse
        # pointer for the control, which is used when the value of the MousePointer
        # property is set to 99, fmMousePointerCustom. The file format default is
        # no custom icon.
        #
        astore__fork(store, "MouseIcon::GuidAndPicture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}}
# {{{ [MS-OFORMS] 2.2.4 Label Control Structure
# {{{ [MS-OFORMS] 2.2.4.1 LabelControl
# '${__pp_comment:+'
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | MinorVersion  | MajorVersion  |            cbLabel            |
# +---------------+---------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ExtraDataBlock(variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      StreamData(variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      TextProps(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_labelcontrol( \
    stream, store, \
    \
    _store, _v, _r \
) {
    # MinorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MinorVersion::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # MajorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MajorVersion::uint8,mustbe(2)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbLabel (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbLabel", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::LabelPropMask", _store);
    _r = forms20__unpack_labelpropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::LabelDataBlock", _store);
    _r = forms20__unpack_labeldatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::LabelExtraDataBlock", _store);
    _r = forms20__unpack_labelextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # StreamData (variable)
    astore__fork(store, "StreamData::LabelStreamData", _store);
    _r = forms20__unpack_labelstreamdata(stream, _store);
    if (_r < 0) {
        return _r;
    }

#    # TextProps (variable)
#    astore__fork(store, "TextProps::TextProps", _store);
#    _r = forms20__unpack_textprops(stream, _store);
#    if (_r < 0) {
#        return _r;
#    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.4.2 LabelPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|I|J|K|L|M|N|            UnusedBits             |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-----------------------------------+
#
# '}'
function \
forms20__unpack_labelpropmask(stream, store,     _v) {

    # A - fForeColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fForeColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fBackColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBackColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fVariousPropertyBits (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fVariousPropertyBits::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fCaption (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCaption::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fPicturePosition (1 bits)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPicturePosition::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fSize (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSize::bool,mustbe(1)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fMousePointer (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMousePointer::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fBorderColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBorderColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fBorderStyle (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBorderStyle::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fSpecialEffect (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSpecialEffect::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fPicture (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPicture::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fAccelerator (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fAccelerator::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - fMouseIcon (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMouseIcon::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # UnusedBits (19 bits)
    _v = stream__read_bits(stream, 19);
    if (astore__set(store, "UnusedBits::uint32,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.4.3 LabelDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                     ForeColor (optional)                      |
# +---------------------------------------------------------------+
# |                     BackColor (optional)                      |
# +---------------------------------------------------------------+
# |                 VariousPropertyBits (optional)                |
# +---------------------------------------------------------------+
# |                      Caption (optional)                       |
# +---------------------------------------------------------------+
# |                  PicturePosition (optional)                   |
# +---------------+-----------------------------------------------+
# | MousePointer  |                   Padding1                    |
# |  (optional)   |                  (variable)                   |
# +---------------+-----------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     BorderColor (optional)                    |
# +---------------------------------------------------------------+
# |                      Padding2 (variable)                      |
# +-------------------------------+-------------------------------+
# |    BorderStyle (optional)     |      Padding3 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |   SpecialEffect (optional)    |      Padding4 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      Picture (optional)       |      Padding5 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |    Accelerator (optional)     |      Padding6 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |     MouseIcon (optional)      |      Padding7 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_labeldatablock( \
    stream, store, \
    \
    _v, _store, _r \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fForeColor")) {
        # '${__pp_comment:+'
        #
        # ForeColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.31 ForeColor
        #
        # the default value(Label) is COLOR_BTNTEXT (0x80000012)
        #
        # '}'
        astore__fork(store, "ForeColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fBackColor")) {
        # '${__pp_comment:+'
        #
        # BackColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.3 BackColor
        #
        # the default value of Label is COLOR_BTNFACE (0x8000000f)
        #
        # '}'
        astore__fork(store, "BackColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fVariousPropertyBits")) {
        # '${__pp_comment:+'
        #
        # VariousPropertyBits (4 bytes)
        #
        # [MS-OFORMS] 2.5.96 VariousPropertyBits
        #
        # The file format default of Label is 0x0080001B
        # (Reserved1,Enabled,BackStyle,Reserved2,WordWrap).
        #
        # '}'
        astore__fork(store, "VariousPropertyBits::VariousPropertiesBitfield", _store);
        _r = forms20__unpack_variouspropertybits(stream, _store);
        if (_r < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fCaption")) {
        # '${__pp_comment:+'
        #
        # Caption (variable)
        #
        # [MS-OFORMS] 2.5.10 Caption
        #
        # An fmString that specifies the descriptive text that appears on a control to
        # identify or describe it.
        # The file format default is a zero-length string.
        #
        # '}'
        astore__fork(store, "Caption::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fPicturePosition")) {
        # '${__pp_comment:+'
        #
        # PicturePosition (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.64 PicturePosition
        # 2.5.64.1 fmPicturePosition
        #
        # An fmPicturePosition that specifies the location of the picture of a
        # control relative to the caption of the control.
        # The file format default is 0x00070001, fmPicturePositionAboveCenter.
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "PicturePosition::fmPicturePosition", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fMousePointer")) {
        # '${__pp_comment:+'
        #
        # MousePointer (1 byte)
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "MousePointer::fmMousePointer", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBorderColor")) {
        #
        # Padding1 (variable)
        #
        stream__skip_to_align(stream, 4);

        # '${__pp_comment:+'
        #
        # BorderColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.7 BorderColor
        #
        # An OLE_COLOR that specifies the color of the border of the
        # control.
        # The file format default of Label is 0x80000006 COLOR_WINDOWFRAME.
        #
        # '}'
        astore__fork(store, "BorderColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fBorderStyle")) {
        #
        # Padding2 (variable)
        #
        stream__skip_to_align(stream, 4);

        # '${__pp_comment:+'
        #
        # BorderColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.8 BorderStyle
        #
        # An fmBorderStyle that specifies the type of border used
        # by the control.  The file format default of Label is 0:fmBorderStyleNone
        #
        # '}'
        _v = stream__read_uint8(stream);
        astore__set(store, "BorderStyle::fmBorderStyle", _v);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fSpecialEffect")) {
        #
        # Padding3 (variable)
        #
        stream__skip_to_align(stream, 4);

        #
        # SpecialEffect (1 byte)
        #
        # [MS-OFORMS] 2.5.80 SpecialEffect
        #
        # the default value of Label is 0x00 fmSpecialEffectFlat.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "SpecialEffect::fmSpecialEffect", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPicture")) {
        #
        # Padding4 (variable)
        #
        stream__skip_to_align(stream, 4);

        # Picture (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Picture::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fAccelerator")) {

        # Padding5 (variable)
        stream__skip_to_align(stream, 4);

        #
        # Accelerator (2 bytes)
        #
        # [MS-OFORMS] 2.5.1 Accelerator
        #
        # A Unicode character that specifies the accelerator key
        # for the control.
        # The file format default is 0x0000, no accelerator.
        #
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Accelerator::hexint16", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fMouseIcon")) {
        #
        # Padding6 (variable)
        #
        stream__skip_to_align(stream, 4);

        # MouseIcon (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "MouseIcon::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding4(variable)
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.4.4 LabelExtraDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       Caption (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      *Padding1 (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        Size (variable)                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_labelextradatablock( \
    stream, store, \
    \
    _store, _r, _size, _compressed \
) {
    # Caption (variable bytes)
    if (astore__get(store, "../PropMask/fCaption")) {
        if (! astore__has(store, "../DataBlock/Caption/cb")) {
            E__message = "\"../DataBlock/Caption/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/Caption/fCompressed")) {
            E__message = "\"../DataBlock/Caption/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/Caption/cb");
        _compressed = astore__get(store, "../DataBlock/Caption/fCompressed");

        #
        # [MS-OFORMS] 2.5.10 Caption
        #
        # An fmString that specifies the descriptive text that appears
        # on a control to identify or describe it. The file format default
        # is a zero-length string.
        #
        astore__fork(store, "Caption::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # Size (8 bytes)
    if (astore__get(store, "../PropMask/fSize")) {

        # *Padding1
        stream__skip_to_align(stream, 4);

        #
        # [MS-OFORMS] 2.5.78 Size
        #
        # An fmSize that specifies width and height, in HIMETRIC units,
        # of the control.
        # Each control to which this property applies MUST persist a
        # value for it.
        #
        # Applies to:
        #
        #   CheckBox
        #   ComboBox
        #   CommandButton
        #   Image
        #   Label
        #   ListBox
        #   OptionButton
        #   TabStrip
        #   TextBox
        #   ToggleButton
        #
        astore__fork(store, "Size::fmSize", _store);
        _r = forms20__unpack_fmsize(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.4.5 LabelStreamData
# '${__pp_comment:+'
#
# Specifies picture properties of the control that are not set to the
# file format defaults. If the corresponding bit in the PropMask of
# the CommandButtonControl that contains this CommandButtonStreamData
# is set to zero, the property value MUST NOT be stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      MouseIcon (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     GuidAndFont (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       Picture (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_labelstreamdata( \
    stream, store, \
    \
    _store, _r \
) {
    # Picture (variable)
    if (astore__get(store, "../PropMask/fPicture")) {
        #
        # [MS-OFORMS] 2.5.62 Picture
        #
        # A GuidAndPicture that specifies the picture to display on a control.
        # The file format default is no picture.
        #
        astore__fork(store, "Picture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # MouseIcon (variable)
    if (astore__get(store, "../PropMask/fMouseIcon")) {
        #
        # [MS-OFORMS] 2.5.49 MouseIcon
        #
        # A GuidAndPicture that specifies a custom icon to display as the mouse
        # pointer for the control, which is used when the value of the MousePointer
        # property is set to 99, fmMousePointerCustom. The file format default is
        # no custom icon.
        #
        astore__fork(store, "MouseIcon::GuidAndPicture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}}
# {{{ [MS-OFORMS] 2.2.10 UserForm Structure
# {{{ [MS-OFORMS] 2.2.10.1 FormControl
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | MinorVersion  | MajorVersion  |             cbForm            |
# +---------------+---------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ExtraDataBlock(variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      StreamData(variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       SiteData(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     DesignExData(variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formcontrol( \
    stream, store, \
    \
    _store, _v, _r \
) {
    # MinorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MinorVersion::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # MajorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MajorVersion::uint8,mustbe(4)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbForm (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbForm", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::FormPropMask", _store);
    _r = forms20__unpack_formpropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::FormDataBlock", _store);
    _r = forms20__unpack_formdatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::FormExtraDataBlock", _store);
    _r = forms20__unpack_formextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # StreamData (variable)
    astore__fork(store, "StreamData::FormStreamData", _store);
    _r = forms20__unpack_formstreamdata(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # SiteData (variable)
    astore__fork(store, "SiteData::FormSiteData", _store);
    _r = forms20__unpack_formsitedata(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DesignExData (variable)
    astore__fork(store, "DesignExData::FormDesignExData", _store);
    _r = forms20__unpack_formdesignexdata(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.2 FormPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E |F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|Unused3 |
# +-+-+-+-+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--------+
#
# '}'
function \
forms20__unpack_formpropmask(stream, store,     _v) {

    # A - Unused1 (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Unused1::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fBackColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBackColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fForeColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fForeColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fNextAvailableID (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fNextAvailableID::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - Unused2 (2 bits)
    _v = stream__read_bits(stream, 2);
    if (astore__set(store, "Unused2", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fBooleanProperties (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBooleanProperties::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fBorderStyle (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBorderStyle::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fMousePointer (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMousePointer::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fScrollBars (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBars::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fDisplayedSize (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDisplayedSize::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fLogicalSize (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fLogicalSize::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fScrollPosition (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollPosition::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - fGroupCnt (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGroupCnt::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # N - Reserved (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Reserved::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # O - fMouseIcon (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fMouseIcon::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # P - fCycle (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCycle::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Q - fSpecialEffect (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSpecialEffect::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # R - fBorderColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBorderColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # S - fCaption (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCaption::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # T - fFont (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFont::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # U - fPicture (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPicture::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # V - fZoom (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fZoom::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # W - fPictureAlignment (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPictureAlignment::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # X - fPictureTiling (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPictureTiling::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Y - fPictureSizeMode (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPictureSizeMode::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Z - fShapeCookie (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fShapeCookie::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # a - fDrawBuffer (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDrawBuffer::bool,mustbe(1)", _v)) {
        return forms20__E_UNEXPECTED;
    }

    # Unused3 (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "Unused3", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.3 FormDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      BackColor(optional)                      |
# +---------------------------------------------------------------+
# |                      ForeColor(optional)                      |
# +---------------------------------------------------------------+
# |                   NextAvailableID(optional)                   |
# +---------------------------------------------------------------+
# |                  BooleanProperties(optional)                  |
# +--------------+----------------+---------------+---------------+
# | BorderStyle  |  MousePointer  |  ScrollBars   |   Padding1    |
# |  (optional)  |   (optional)   |  (optional)   |  (variable)   |
# +--------------+----------------+---------------+---------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       GroupCnt(optional)                      |
# +---------------------------------------------------------------+
# |                       Padding2(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+---------------+---------------+
# |          MouseIcon            |     Cycle     | SpecialEffect |
# |          (optional)           |   (optional)  |  (optional)   |
# +-------------------------------+---------------+---------------+
# |                       Padding3(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     BorderColor(optional)                     |
# +---------------------------------------------------------------+
# |                       Padding4(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                 LengthAndCompression(optional)                |
# +---------------------------------------------------------------+
# |                       Padding5(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |       Font(optional)          |      Padding6(variable)       |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |      Picture(optional)        |      Padding7(variable)       |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                         Zoom(optional)                        |
# +---------------+---------------+-------------------------------+
# PictureAlignment|PictureSizeMode|      Padding8(variable)       |
# |   (optional)  |  (optional)   |                               |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     ShapeCookie(optional)                     |
# +---------------------------------------------------------------+
# |                       Padding9(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      DrawBuffer(optional)                     |
# +---------------------------------------------------------------+
# |                       Padding10(variable)                     |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formdatablock( \
    stream, store, \
    \
    _v, _store, _r \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fBackColor")) {
        # '${__pp_comment:+'
        #
        # BackColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.3 BackColor
        #
        # the default value(user form) is COLOR_BTNFACE (0x8000000f)
        #
        # '}'
        astore__fork(store, "BackColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fForeColor")) {
        # '${__pp_comment:+'
        #
        # ForeColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.31 ForeColor
        #
        # the default value(user form) is COLOR_BTNTEXT (0x80000012)
        #
        # '}'
        astore__fork(store, "ForeColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fNextAvailableID")) {
        # '${__pp_comment:+'
        #
        # NextAvailableID (4 bytes)
        #
        # [MS-OFORMS] 2.5.55 NextAvailableID
        #
        # The file format default is 0x00000000.
        #
        # '}'
        _v = stream__read_uint32(stream);
        if (astore__set(store, "NextAvailableID", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBooleanProperties")) {
        # '${__pp_comment:+'
        #
        # BooleanProperties (4 bytes)
        #
        # [MS-OFORMS] 2.5.6 BooleanProperties
        #
        # The file format default is 0x00000004, FORM_FLAG_ENABLED set to TRUE.
        #
        # '}'
        astore__fork(store, "BooleanProperties::FormFlags", _store);
        _r = forms20__unpack_formflags(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fBorderStyle")) {
        # '${__pp_comment:+'
        #
        # BorderStyle (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.8 BorderStyle
        # 2.5.8.1 fmBorderStyle
        #
        # fmBorderStyleNone   0x00 The control has no visible border line.
        # fmBorderStyleSingle 0x01 The control has a single-line border.
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "BorderStyle::fmBorderStyle", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fMousePointer")) {
        # '${__pp_comment:+'
        #
        # MousePointer (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.50 MousePointer
        # 2.5.50.1 fmMousePointer
        #
        # Applies to:
        #   CheckBox
        #   ComboBox
        #   CommandButton
        #   Form
        #   Image
        #   Label
        #   ListBox
        #   OptionButton
        #   ScrollBar
        #   SpinButton
        #   TabStrip
        #   TextBox
        #   ToggleButton
        #
        # '}'
        _v = stream__read_uint8(stream);
        if (astore__set(store, "MousePointer::fmMousePointer", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fScrollBars")) {
        #
        # ScrollBars (1 byte)
        #
        # [MS-OFORMS] 2.5.73 ScrollBars (UserForm)
        #
        # The file format default is 0x0000000C,
        # fScrollBarsKeepHorizontal and fScrollBarsKeepVertical.
        #
        astore__fork(store, "ScrollBars::FormScrollBarFlags", _store);
        _r = forms20__unpack_formscrollbarflags(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fGroupCnt")) {
        #
        # GroupCnt (4 bytes)
        #
        # [MS-OFORMS] 2.5.34 GroupCount
        #
        # The file format default is zero.
        #
        stream__skip_to_align(stream, 4);
        _v = stream__read_uint32(stream);
        if (astore__set(store, "GroupCnt", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    #
    # MouseIcon (2 bytes)
    #
    # MUST be set to 0xFFFF when the PropMask. fMouseIcon of the
    # FormControl that contains this FormDataBlock is set to 1.
    # Not present when PropMask.fMouseIcon is set to zero.
    #
    if (astore__get(store, "../PropMask/fMouseIcon")) {
        stream__skip_to_align(stream, 2);
        _v = stream__read_uint16(stream);
        if (astore__set(store, "MouseIcon,mustbe(65535)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fCycle")) {
        #
        # Cycle (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.16 Cycle
        # 2.5.16.1 fmCycle
        #
        # The file format default is 0x00, fmCycleAllForms.
        #
        # fmCycleAllForms    0x00 The focus is next set to the first control
        #                         on the next form, returning to the first
        #                         control of this form only after all controls
        #                         on all other forms have been reached.
        # fmCycleCurrentForm 0x02 The focus is next set to the first control
        #                         on this form, ignoring other forms.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "Cycle::fmCycle", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fSpecialEffect")) {
        #
        # SpecialEffect (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.80 SpecialEffect
        # 2.5.80.1 fmSpecialEffect
        #
        # the default value (user form) is 0x00 fmSpecialEffectFlat.
        #
        # fmSpecialEffectFlat   0x00 Control appears flat.
        # fmSpecialEffectRaised 0x01 Control appears to be raised up from the form.
        # fmSpecialEffectSunken 0x02 Control appears to be carved into the form.
        # fmSpecialEffectEtched 0x03 The control border appears to be carved into the form.
        # fmSpecialEffectBump   0x06 The control border appears to be raised up from the form.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "SpecialEffect::fmSpecialEffect", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBorderColor")) {
        # Padding3 (variable)
        stream__skip_to_align(stream, 4);
        #
        # BorderColor (4 bytes)
        #
        # [MS-OFORMS] 2.5.7 BorderColor
        #
        # the default value(user form) is COLOR_BTNTEXT (0x80000012)
        #
        astore__fork(store, "BorderColor::OLE_COLOR", _store);
        _r = forms20__unpack_olecolor(stream, _store);
    }

    if (astore__get(store, "../PropMask/fCaption")) {
        # Padding4 (variable)
        stream__skip_to_align(stream, 4);
        # LengthAndCompression (4 bytes)
        astore__fork(store, "LengthAndCompression::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fFont")) {
        # Padding5 (variable)
        stream__skip_to_align(stream, 2);
        # Font (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Font::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPicture")) {
        # Padding6 (variable)
        stream__skip_to_align(stream, 2);
        # Picture (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "Picture::hexint16,mustbe(&HFFFF)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fZoom")) {
        # Padding7 (variable)
        stream__skip_to_align(stream, 4);
        #
        # Zoom (4 bytes)
        #
        # [MS-OFORMS] 2.5.98 Zoom
        #
        # A signed integer that specifies the magnification of embedded controls,
        # in percentage points of the size of the parent control. MUST be greater
        # than or equal to 10 (10 percent of actual size) and less than or equal
        # to 400 (four times or 400 percent of actual size).  The file format
        # default is 100, or actual size.
        #
        _v = stream__read_uint32(stream);
        if (astore__set(store, "Zoom::Zoom,in_range(10,400)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPictureAlignment")) {
        #
        # PictureAlignment (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.63 PictureAlignment
        # 2.5.63.1 fmPictureAlignment
        #
        # An fmPictureAlignment that specifies the alignment of the picture in
        # the Form or Image. The file format default is 0x02,
        # fmPictureAlignmentCenter.
        #
        # fmPictureAlignmentTopLeft     0x00 The top-left corner.
        # fmPictureAlignmentTopRight    0x01 The top-right corner.
        # fmPictureAlignmentCenter      0x02 The center.
        # fmPictureAlignmentBottomLeft  0x03 The bottom-left corner.
        # fmPictureAlignmentBottomRight 0x04 The bottom-right corner.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "PictureAlignment::fmPictureAlignment", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "./PropMask/fPictureSizeMode")) {
        #
        # PictureTiling (1 byte)
        #
        # [MS-OFORMS]
        # 2.5.65 PictureSizeMode
        # 2.5.65.1 fmPictureSizeMode
        #
        # fmPictureSizeModeClip    0x00 Crops any part of the picture that is larger
        #                               than the control boundaries.
        # fmPictureSizeModeStretch 0x01 Stretches the picture to fill the control area.
        #                               This setting distorts the picture in either the
        #                               horizontal or vertical direction.
        # fmPictureSizeModeZoom    0x03 Enlarges the picture, but does not distort the
        #                               picture in either the horizontal or vertical
        #                               direction.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "PictureSizeMode::fmPictureSizeMode", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fShapeCookie")) {
        # Padding8(variable)
        stream__skip_to_align(stream, 4);
        #
        # ShapeCookie (4 bytes)
        #
        # [MS-OFORMS] 2.5.76 ShapeCookie
        #
        # The file format default is 0x00000000.
        #
        _v = stream__read_uint32(stream);
        if (astore__set(store, "ShapeCookie", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding9(variable)
    stream__skip_to_align(stream, 4);

    #
    # DrawBuffer (4 bytes)
    #
    # [MS-OFORMS] 2.5.21 DrawBuffer
    #
    # An unsigned integer that specifies the number of
    # pixels in a buffer into which the form can be drawn.
    # MUST be in the range from 16000 through 1048576.
    #
    _v = stream__read_uint32(stream);
    if (astore__set(store, "DrawBuffer", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Padding10(variable)
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.4 FormExtraDataBlock
# '${__pp_comment:+'
#
# Specifies the properties of the control that are larger than 4 bytes
# and are not set to the file format defaults. If the corresponding bit
# in the PropMask of the FormControl that contains this FormExtraDataBlock
# is set to zero, the property value MUST NOT be stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                    DisplayedSize (optional)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     LogicalSize (optional)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ScrollPosition (optional)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    CaptionString (optional)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formextradatablock( \
    stream, store, \
    \
    _store, _r, _size, _compressed \
) {
    # DisplayedSize (8 bytes)
    if (astore__get(store, "../PropMask/fDisplayedSize")) {
        #
        # [MS-OFORMS] 2.5.19 DisplayedSize
        #
        # An fmSize that specifies the physical size,
        # in HIMETRIC units, of a displayed form. Controls can exist
        # on the form outside of this size.<3>
        # The file format default is a width of 4000, 113.4 points,
        # and a height of 3000, 85 points.
        #
        astore__fork(store, "DisplayedSize::fmSize", _store);
        _r = forms20__unpack_fmsize(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # LogicalSize (8 bytes)
    if (astore__get(store, "../PropMask/fLogicalSize")) {
        #
        # [MS-OFORMS] 2.5.44 LogicalSize
        #
        # An fmSize that specifies the full scrollable size, in
        # HIMETRIC units, of a form, including all controls. A value
        # of zero in either width or height specifies that the
        # scrollable size is equivalent to the value of the
        # corresponding portion of DisplayedSize.  The file format
        # default is a width of 4000, 113.4 points and a height of 3000, 85 points.
        #
        astore__fork(store, "LogicalSize::fmSize", _store);
        _r = forms20__unpack_fmsize(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # ScrollPosition (8 bytes)
    if (astore__get(store, "../PropMask/fScrollPosition")) {
        #
        # [MS-OFORMS] 2.5.75 ScrollPosition
        #
        # An fmPosition that specifies, in HIMETRIC units,
        # the coordinates of the first point in the LogicalSize of
        # the form that is visible. The file format default is a
        # position of (0, 0), which specifies that the form has not been scrolled.
        #
        astore__fork(store, "ScrollPosition::fmPosition", _store);
        _r = forms20__unpack_fmposition(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # CaptionString (variable bytes)
    if (astore__get(store, "../PropMask/fCaption")) {
        if (! astore__has(store, "../DataBlock/LengthAndCompression/cb")) {
            E__message = "\"../DataBlock/LengthAndCompression/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/LengthAndCompression/fCompressed")) {
            E__message = "\"../DataBlock/LengthAndCompression/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/LengthAndCompression/cb");
        _compressed = astore__get(store, "../DataBlock/LengthAndCompression/fCompressed");

        #
        # [MS-OFORMS] 2.5.10 Caption
        #
        # An fmString that specifies the descriptive text that appears
        # on a control to identify or describe it. The file format default
        # is a zero-length string.
        #
        astore__fork(store, "Caption::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.5 FormStreamData
# '${__pp_comment:+'
#
# Specifies font and picture properties of the control that are not set to
# the file format defaults. If the corresponding bit in the PropMask of the
# FormControl that contains this FormStreamData is set to zero, the property
# value MUST NOT be stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      MouseIcon (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     GuidAndFont (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                       Picture (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formstreamdata( \
    stream, store, \
    \
    _store, _r \
) {
    # MouseIcon (variable)
    if (astore__get(store, "../PropMask/fMouseIcon")) {
        #
        # [MS-OFORMS] 2.5.49 MouseIcon
        #
        # A GuidAndPicture that specifies a custom icon to display as the mouse
        # pointer for the control, which is used when the value of the MousePointer
        # property is set to 99, fmMousePointerCustom. The file format default is
        # no custom icon.
        #
        astore__fork(store, "MouseIcon::GuidAndPicture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # Font (variable)
    if (astore__get(store, "../PropMask/fFont")) {
        #
        # [MS-OFORMS] 2.5.24 Font
        #
        # A GuidAndFont that specifies the font to use in a control.
        # The file format default is not to store a font.
        #
        astore__fork(store, "Font::GuidAndFont", _store);
        _r = forms20__unpack_guidandfont(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # Picture (variable)
    if (astore__get(store, "../PropMask/fPicture")) {
        #
        # [MS-OFORMS] 2.5.62 Picture
        #
        # A GuidAndPicture that specifies the picture to display on a control.
        # The file format default is no picture.
        #
        astore__fork(store, "Picture", _store);
        _r = forms20__unpack_guidandpicture(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}} [MS-OFORMS] 2.2.10.5 FormStreamData
# {{{ [MS-OFORMS] 2.2.10.6 FormSiteData
# '${__pp_comment:+'
#
# The depth, specified in section 2.2.10.7, SITE_TYPE and
# properties of each embedded control in the FormControl that
# contains this FormSiteData.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |CountOfSiteClassInfo(optional) |    ClassTable (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                          CountOfSites                         |
# +---------------------------------------------------------------+
# |                          CountOfBytes                         |
# +---------------------------------------------------------------+
# |                  SiteDepthsAndTypes (variable)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     ArrayPadding (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        Sites (variable)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formsitedata( \
    stream, store, \
    \
    _v, _store, _r, _count, _i \
) {
    if (! astore__get(store, "../DataBlock/BooleanProperties/FORM_FLAG_DONTSAVECLASSTABLE")) {

        # CountOfSiteClassInfo (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "CountOfSiteClassInfo", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }

        # ClassTable (variable)
        for (_i = 1; _i <= _v; ++_i) {
            astore__fork(store, "ClassTable::SiteClassInfo[]/" _i, _store);
            _r = forms20__unpack_siteclassinfo(stream, _store);
            if (_r < 0) {
                return _r;
            }
        }
    }

    # CountOfSites (4 bytes)
    _v = _count = stream__read_uint32(stream);
    if (astore__set(store, "CountOfSites", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # CountOfBytes (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "CountOfBytes", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    stream__set_align_base(stream);

    # SiteDepthsAndTypes (variable)
    #
    # An array of FormObjectDepthTypeCount. Specifies the depth as specified in
    # section 2.2.10.7 and SITE_TYPE of each control in Sites. The order of
    # this array MUST be the same as the order of Sites, but one element in
    # this array can specify more than one consecutive element in Sites. If the
    # fCount of an element in this array is set to 1, TypeOrCount specifies the
    # number of consecutive elements in Sites represented by that element in
    # this array. The sum of the number of elements in this array in which
    # fCount is set to zero and the TypeOrCount of each element in this array
    # in which fCount is set to 1 MUST equal CountOfSites.
    for (_i = 1; _i <= _count; ++_i) {
        astore__fork(store, "SiteDepthsAndTypes::FormObjectDepthTypeCount[]/" _i, _store);
        _r = forms20__unpack_formobjectdepthtypecount(stream, _store);
        if (_r < 0) {
            return _r;
        }
        if (astore__get(_store, "fCount") == 1) {
            _i += astore__get(_store, "TypeOrCount") - 1;
        }
    }

    # ArrayPadding (variable)
    #
    # Undefined and MUST be ignored. The size of this field is the least number
    # of bytes that, when added to the size, in bytes, of SiteDepthsAndTypes,
    # produces a sum divisible by 4.
    #
    stream__skip_to_align(stream, 4);

#    # Sites (variable)
#    if (struct__unpack(stream, store, "Sites::OleSiteConcreteControl[CountOfSites]") < 0) {
#        return forms20__E_UNEXPECTED;
#    }
    for (_i = 1; _i <= _count; ++_i) {
        astore__fork(store, "Sites::OleSiteConcreteControl[" _count "]/" _i "::OleSiteConcreteControl", _store);
        _r = forms20__unpack_olesiteconcreatecontrol(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.7 FormObjectDepthTypeCount
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |     Depth     | TypeOrCount |A| OptionalType  |
# |               |             | |  (optional)   |
# +---------------+-------------+-+---------------+
#
# [MS-OFORMS] 2.2.10.8 SITE_TYPE
# Specifies the type of an embedded control. MUST be set to 1.
#
# +----------------------------------
# | Name   | Value | Meaning        |
# +--------+-------+----------------+
# | ST_Ole | 0x01  | An OLE control.|
# +--------+-------+----------------+
#
# '}'
function \
forms20__unpack_formobjectdepthtypecount( \
    stream, store, \
    \
    _v, _fcount, _type_or_count \
) {
    # Depth (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "Depth", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # TypeOrCount (7 bits)
    _v = _type_or_count = stream__read_bits(stream, 7);
    if (astore__set(store, "TypeOrCount", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

     # fCount (1 bit)
    _v = _fcount = stream__read_bits(stream, 1);
    if (astore__set(store, "fCount::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    if (_fcount == 0) {  # _type_or_count is a SITE_TYPE
        if (_type_or_count != 1) {  # ST_Ole
            E__message = sprintf( \
                "invalid FormObjectDepthTypeCount.TypeOrCount " \
                "%d detected, MUST be set to %d.", \
                _type_or_count, \
                1);

            return forms20__E_UNEXPECTED;
        }
    } else {
        # OptionalType (1 byte)
        _v = stream__read_uint8(stream);
        if (astore__set(store, "OptionalType", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.9 FormDesignExData
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                       DesignEx (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_formdesignexdata( \
    stream, store, \
    \
    _store, _r \
) {
    if (astore__get(store, "../DataBlock/BooleanProperties/FORM_FLAG_DESINKPERSISTED")) {
        #
        # DesignEx (variable)
        #
        # [MS-OFORMS] 2.2.10.9 FormDesignExData
        # A DesignExtender that specifies the properties of the design
        # surface of this form. If the value of
        # DataBlock.BooleanProperties.FORM_FLAG_DESINKPERSISTED of the
        # FormControl that contains this FormDesignExData is set to zero,
        # this structure MUST NOT be stored.
        #
        astore__fork(store, "DesignEx::DesignExtender", _store);
        _r = forms20__unpack_designextender(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.10 ClassTable Structure
# {{{ [MS-OFORMS] 2.2.10.10.1 SiteClassInfo
# '${__pp_comment:+'
#
# Specifies the structure, as persisted to a stream, of the type
# information of an embedded ActiveX control.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |            Version            |         cbClassTable          |
# +-------------------------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   ExtraDataBlock (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_siteclassinfo( \
    stream, store, \
    \
    _v, _r, _store \
) {
    # Version (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Version::uint16,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbClassTable (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbClassTable", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::ClassInfoPropMask", _store);
    _r = forms20__unpack_siteclassinfopropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::ClassInfoDataBlock", _store);
    _r = forms20__unpack_classinfodatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::ClassInfoExtraDataBlock", _store);
    _r = forms20__unpack_classinfoextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.10.2 ClassInfoPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|            Unused2              |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---------------------------------+
#
# '}'
function \
forms20__unpack_siteclassinfopropmask( \
    stream, store, \
    \
    _v \
) {
    # A - fClsID (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fClsID::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fDispEvent (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDispEvent::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - Unused1 (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Unused1::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fDefaultProg (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDefaultProg::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fClassFlags (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fClassFlags::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fCountOfMethods (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCountOfMethods::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fDispidBind (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDispidBind::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fGetBindIndex (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGetBindIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fPutBindIndex (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPutBindIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fBindType (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBindType::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fGetValueIndex (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGetValueIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fPutValueIndex (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPutValueIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - fValueType (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fValueType::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # N - fDispidRowset (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDispidRowset::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # O - fSetRowset (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSetRowset::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused2 (17 bits)
    _v = stream__read_bits(stream, 17);
    if (astore__set(store, "Unused2::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.10.3 ClassInfoDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |   ClassTableFlags (optional)  |      VarFlags (optional)      |
# +-------------------------------+-------------------------------+
# |                   CountOfMethods (optional)                   |
# +---------------------------------------------------------------+
# |                     DispidBind (optional)                     |
# +-------------------------------+-------------------------------+
# |    GetBindIndex (optional)    |    PutBindIndex (optional)    |
# +-------------------------------+-------------------------------+
# |      BindType (optional)      |    GetValueIndex (optional)   |
# +-------------------------------+-------------------------------+
# |    PutValueIndex (optional)   |     ValueType (optional)      |
# +-------------------------------+-------------------------------+
# |                      Padding1 (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    DispidRowset (optional)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +-------------------------------+-------------------------------+
# |     SetRowset (optional)      |      Padding2 (variable)      |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_classinfodatablock( \
    stream, store, \
    \
    _v, _r, _store \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fClassFlags")) {
        # ClassTableFlags (2 bytes)
        astore__fork(store, "ClassTableFlags::CLSTABLE_FLAGS", _store);
        _r = forms20__unpack_clstableflags(stream, _store);
        if (_r < 0) {
            return _r;
        }

        # VarFlags (2 bytes)
        #
        #  oaidl.h
        #
        #  typedef  enum tagVARFLAGS
        #  {
        #    VARFLAG_FREADONLY = 0x1,
        #    VARFLAG_FSOURCE = 0x2,
        #    VARFLAG_FBINDABLE = 0x4,
        #    VARFLAG_FREQUESTEDIT = 0x8,
        #    VARFLAG_FDISPLAYBIND = 0x10,
        #    VARFLAG_FDEFAULTBIND = 0x20,
        #    VARFLAG_FHIDDEN = 0x40,
        #    VARFLAG_FRESTRICTED = 0x80,
        #    VARFLAG_FDEFAULTCOLLELEM = 0x100,
        #    VARFLAG_FUIDEFAULT = 0x200,
        #    VARFLAG_FNONBROWSABLE = 0x400,
        #    VARFLAG_FREPLACEABLE = 0x800,
        #    VARFLAG_FIMMEDIATEBIND = 0x1000
        #  } VARFLAGS;
        #
        # VarFlags (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "VarFlags", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fCountOfMethods")) {
        # CountOfMethods (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "CountOfMethods", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fDispidBind")) {
        # DispidBind (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "DispidBind", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fGetBindIndex")) {
        # GetBindIndex (2 bytes):
        _v = stream__read_uint16(stream);
        if (astore__set(store, "GetBindIndex", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPutBindIndex")) {
        # PutBindIndex (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "PutBindIndex", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBindType")) {
        # BindType (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "PutBindIndex", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBindType")) {
        # GetValueIndex (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "GetValueIndex", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fPutValueIndex")) {
        # PutValueIndex (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "PutValueIndex", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fValueType")) {
        # ValueType (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "ValueType", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding1 (variables)
    stream__skip_to_align(stream, 4);

    if (astore__get(store, "../PropMask/fDispidRowset")) {
        # DispidRowset (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "DispidRowset", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../ClassInfoPropMask/fSetRowset")) {
        # SetRowset (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "SetRowset", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding2 (variables)
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.10.4 CLSTABLE_FLAGS
# '${__pp_comment:+'
#
# A bit field that specifies Boolean properties of a SiteClassInfo.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|        Unused           |
# +-+-+-+-------------------------+
#
# '}'
function \
forms20__unpack_clstableflags( \
    stream, store, \
    \
    _v \
) {
    # A - fExclusiveValue
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fExclusiveValue", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fDualInterface
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDualInterface", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fNoAggregation
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fNoAggregation", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused
    _v = stream__read_bits(stream, 13);
    if (astore__set(store, "Unused", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.10.5 ClassInfoExtraDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                   ClsID (16 bytes, optional)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                 DispEvent (16 bytes, optional)                |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                DefaultProg (16 bytes, optional)               |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_classinfoextradatablock( \
    stream, store, \
    \
    _v \
) {
    if (astore__get(store, "../PropMask/fClsID")) {
        # ClsID (16 bytes)
        _v = stream__read_guid_string(stream);
        if (astore__set(store, "ClsID", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fDispEvent")) {
        # DispEvent (16 bytes)
        _v = stream__read_guid_string(stream);
        if (astore__set(store, "DispEvent", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fDefaultProg")) {
        # DefaultProg (16 bytes)
        _v = stream__read_guid_string(stream);
        if (astore__set(store, "DefaultProg", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}} [MS-OFORMS] 2.2.10.10 ClassTable Structure
# {{{ [MS-OFORMS] 2.2.10.11 DesignExtender Structure
# {{{ [MS-OFORMS] 2.2.10.11.1 DesignExtender
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | MinorVersion  | MajorVersion  |       cbDesignExtender        |
# +---------------+---------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_designextender( \
    stream, store, \
    \
    _v, _store, _r \
) {
    # MinorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MinorVersion::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # MajorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MajorVersion::uint8,mustbe(2)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbDesignExtender (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbDesignExtender", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::DesignExtenderPropMask", _store);
    _r = forms20__unpack_designextenderpropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (4 bytes)
    astore__fork(store, "DataBlock::DesignExtenderDataBlock", _store);
    _r = forms20__unpack_designextenderdatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.11.2 DesignExtenderPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|                      Unused                         |
# +-+-+-+-+-+-----------------------------------------------------+
#
# '}'
function \
forms20__unpack_designextenderpropmask( \
    stream, store, \
    _v \
) {

    stream__set_align_base(stream);

    # A - fBitFlags (1 bit):
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBitFlags", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fGridX (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGridX", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fGridY (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGridY", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fClickControlMode (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fClickControlMode", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fDblClickControlMode (1 bit)
    _v = stream__read_bits(stream, 2);
    if (astore__set(store, "fDblClickControlMode", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused (27 bits)
    _v = stream__read_bits(stream, 27);
    if (astore__set(store, "Unused", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.11.3 DesignExtenderDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      BitFlags (optional)                      |
# +---------------------------------------------------------------+
# |                        GridX (optional)                       |
# +---------------------------------------------------------------+
# |                        GridY (optional)                       |
# +---------------+---------------+-------------------------------+
# ClickControlMode|DblClickControlMode    Padding (variable)      |
# |   (optional)  |  (optional)   |                               |
# +---------------+---------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_designextenderdatablock( \
    stream, store, \
    \
    _v, _store, _r \
) {
    if (astore__get(store, "../PropMask/fBitFlags")) {
        # BitFlags (4 bytes)
        astore__fork(store, "BitFlags::DX_MODE", _store);
        _r = forms20__unpack_dxmode(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fGridX")) {
        # GridX (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "GridX", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fGridY")) {
        # GridY (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "GridY", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fClickControlMode")) {
        #
        # ClickControlMode (1 byte)
        #
        # [MS-OFORMS] 2.5.12.1 fmClickControlMode
        #
        # fmClickControlModeInherit          0xFE  Use the same value as the
        #                                          client application design-time settings.
        # fmClickControlModeDefault          0xFF  Use the client application default value.
        # fmClickControlModeInsertionPoint   0x00  Select the control under the cursor, and
        #                                          set the insertion point under the cursor,
        #                                          both on the same click.
        # fmClickControlModeSelectThenInsert 0x01  If the control under the cursor is
        #                                          already selected, set the insertion
        #                                          point under the cursor; otherwise,
        #                                          select the control.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "ClickControlMode::fmClickControlMode", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fDblClickControlMode")) {
        #
        # DblClickControlMode (1 byte)
        #
        # [MS-OFORMS] 2.5.18.1 fmDblClickControlMode
        #
        # fmDblClickControlModeInherit        0xFE Use the same value as the client
        #                                          application design-time settings.
        # fmDblClickControlModeSelectText     0x00 Select any text that is under the
        #                                          cursor.
        # fmDblClickControlModeEditCode       0x01 Display and set focus to the code
        #                                          associated with the control that
        #                                          is under the cursor.
        # fmDblClickControlModeEditProperties 0x02 Display the properties of the
        #                                          control that is under the cursor.
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "DblClickControlMode::fmDblClickControlMode", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}}
# {{{ [MS-OFORMS] 2.2.10.12 OleSiteConcrete Structure
# {{{ [MS-OFORMS] 2.2.10.12.1 OleSiteConcreteControl
# '${__pp_comment:+'
#
# Specifies properties of embedded controls in a FormControl as
# persisted to a stream.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |           Version             |            cbSite             |
# +-------------------------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock (variable)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ExtraDataBlock (variable)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    *ControlCLSID (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# * We found a 32-byte undocumented area under ExtraDataBlock, and
#   confirmed that it contained what appeared to be the CLSID of
#   the control. We temporarily named this "*ControlCLSID".
#
# '}'
function \
forms20__unpack_olesiteconcreatecontrol( \
    stream, store, \
    \
    _v, _store, _r, _remain \
) {
    # Version (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "Version::uint16,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbSite (2 bytes)
    #
    # An unsigned integer that specifies the sum of the sizes, in bytes,
    # of PropMask, DataBlock and ExtraDataBlock.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbSite::uint16", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }
    _remain = stream__pos(stream) + _v;

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::SitePropMask", _store);
    _r = forms20__unpack_sitepropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::SiteDataBlock", _store);
    _r = forms20__unpack_sitedatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::SiteExtraDataBlock", _store);
    _r = forms20__unpack_siteextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

#    stream__skip_to_align(stream, 4);
#
#    # *ControlCLSID (32 bytes)
#    _remain -= stream__pos(stream);
#    if (_remain >= 32) {
#        _v = stream__read_ansi_string(stream, 32);
#        if (astore__set(store, "*ControlCLSID::CLSID", _v)) {
#            return forms20__E_UNEXPECTED;
#        }
#        _remain -= 32;
#    }
#
#    if (_remain > 0) {
#        _v = stream__read_hex_string(stream, _remain);
#        if (astore__set(store, "*Unknown1", _v)) {
#            return forms20__E_UNEXPECTED;
#        }
#    }

    return forms20__S_OK;
}

# }}}
# {{{ [MS-OFORMS] 2.2.10.12.2 SitePropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|             Unused2             |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---------------------------------+
#
# '}'
function \
forms20__unpack_sitepropmask( \
    stream, store, \
    \
    _v \
) {
    # A - fName (1 bit)
    #   -> DataBlock.NameData
    #   -> ExtraDataBlock.Name
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fName::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fTag (1 bit)
    #   -> DataBlock.TagData
    #   -> ExtraDataBlock.Tag
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fTag::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fID (1 bit)
    #   -> DataBlock.ID
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fID::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fHelpContextID (1 bit)
    #   -> DataBlock.HelpContextID
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fHelpContextID::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fBitFlags (1 bit)
    #   -> DataBlock.BitFlags
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBitFlags::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fObjectStreamSize (1 bit)
    #   -> DataBlock.ObjectStreamSize
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fObjectStreamSize::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fTabIndex (1 bit)
    #   -> DataBlock.TabIndex
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fTabIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fClsidCacheIndex (1 bit)
    #   -> DataBlock.ClsidCacheIndex
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fClsidCacheIndex::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fPosition (1 bit)
    #   -> ExtraDataBlock.Position
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPosition::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fGroupID (1 bit)
    #   -> DataBlock.GroupID
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fGroupID::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - Unused1 (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Unused1::bits<1>,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fControlTipText (1 bit)
    #   -> DataBlock.ControlTipTextData
    #   -> ExtraDataBlock.ControlTipText
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fControlTipText::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - fRuntimeLicKey (1 bit)
    #   -> DataBlock.RuntimeLicKeyData
    #   -> ExtraDataBlock.RuntimeLicKey
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fRuntimeLicKey::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # N - fControlSource (1 bit)
    #   -> DataBlock.ControlSourceData
    #   -> ExtraDataBlock.ControlSource
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fControlSource::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # O - fRowSource (1 bit)
    #   -> DataBlock.RowSourceData
    #   -> ExtraDataBlock.RowSource
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fRowSource::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused2 (17 bits)
    _v = stream__read_bits(stream, 17);
    if (astore__set(store, "Unused2::bits<17>,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.12.3 SiteDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      NameData (optional)                      |
# +---------------------------------------------------------------+
# |                      TagData (optional)                       |
# +---------------------------------------------------------------+
# |                         ID (optional)                         |
# +---------------------------------------------------------------+
# |                    HelpContextID (optional)                   |
# +---------------------------------------------------------------+
# |                      BitFlags (optional)                      |
# +---------------------------------------------------------------+
# |                   ObjectStreamSize (optional)                 |
# +-------------------------------+-------------------------------+
# |      TabIndex (optional)      |  ClsidCacheIndex (optional)   |
# +-------------------------------+-------------------------------+
# |      GroupId (optional)       |     Padding1 (optional)       |
# +-------------------------------+-------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  ControlTipTextData (optional)                |
# +---------------------------------------------------------------+
# |                      Padding2 (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  RuntimeLicKeyData (optional)                 |
# +---------------------------------------------------------------+
# |                      Padding3 (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                  ControlSourceData (optional)                 |
# +---------------------------------------------------------------+
# |                      Padding4 (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    RowSourceData (optional)                   |
# +---------------------------------------------------------------+
# |                      Padding5 (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_sitedatablock( \
    stream, store, \
    \
    _v, _r, _store \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fName")) {
        # NameData (4 bytes)
        astore__fork(store, "NameData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fTag")) {
        # TagData (4 bytes)
        astore__fork(store, "TagData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fID")) {
        #
        # ID (4 bytes)
        #
        # [MS-OFORMS] 2.5.38 ID
        # A signed integer that specifies a unique identifier for an embedded
        # control on a form. The file format default is 0x00000000.
        #
        _v = stream__read_uint32(stream);
        if (astore__set(store, "ID", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fHelpContextID")) {
        #
        # ID (4 bytes)
        #
        # [MS-OFORMS] 2.5.37 HelpContextID
        # A signed integer that specifies a context that can be used to direct
        # Help to a specific category or article for an embedded control on a
        # form.  The file format default is 0x00000000.
        #
        _v = stream__read_uint32(stream);
        if (astore__set(store, "HelpContextID", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fBitFlags")) {
        # BitFlags (4 bytes)
        astore__fork(store, "BitFlags::SITE_FLAG", _store);
        _r = forms20__unpack_siteflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fObjectStreamSize")) {
        # ObjectStreamSize (4 bytes)
        _v = stream__read_uint32(stream);
        if (astore__set(store, "ObjectStreamSize::uint32", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fTabIndex")) {
        # TabIndex (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "TabIndex::uint16", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fClsidCacheIndex")) {
        # ClsidCacheIndex (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "ClsidCacheIndex::uint16", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fGroupID")) {
        # GroupID (2 bytes)
        _v = stream__read_uint16(stream);
        if (astore__set(store, "GroupID", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fControlTipText")) {
        # Padding1
        stream__skip_to_align(stream, 4);

        # ControlTipTextData (4 bytes)
        astore__fork(store, "ControlTipTextData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fRuntimeLicKey")) {
        # Padding2
        stream__skip_to_align(stream, 4);

        # RuntimeLicKeyData (4 bytes)
        astore__fork(store, "RuntimeLicKeyData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fControlSource")) {
        # Padding3
        stream__skip_to_align(stream, 4);

        # ControlSourceData (4 bytes)
        astore__fork(store, "ControlSourceData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fRowSource")) {
        # Padding4
        stream__skip_to_align(stream, 4);

        # RowSourceData (4 bytes):
        astore__fork(store, "RowSourceData::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # Padding5
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.2.10.12.4 SiteExtraDataBlock
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                        Name (variable)                        |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                        Tag (variable)                         |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    SitePosition (optional)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   ControlTipText (variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   RuntimeLicKey (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                   ControlSource (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                     RowSource (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_siteextradatablock( \
    stream, store, \
    \
    _r, _store, _size, _compressed \
) {
    stream__set_align_base(stream);

    # Name (variable)
    if (astore__get(store, "../PropMask/fName")) {
        if (! astore__has(store, "../DataBlock/NameData/cb")) {
            E__message = "\"../DataBlock/NameData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/NameData/fCompressed")) {
            E__message = "\"../DataBlock/NameData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/NameData/cb");
        _compressed = astore__get(store, "../DataBlock/NameData/fCompressed");

        # Name (variable)
        astore__fork(store, "Name::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);

        if (_r < 0) {
            return _r;
        }
    }

    # Tag (variable)
    if (astore__get(store, "../PropMask/fTag")) {

        stream__skip_to_align(stream, 4);

        if (! astore__has(store, "../DataBlock/TagData/cb")) {
            E__message = "\"../DataBlock/TagData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/TagData/fCompressed")) {
            E__message = "\"../DataBlock/TagData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/TagData/cb");
        _compressed = astore__get(store, "../DataBlock/TagData/fCompressed");

        # Tag (variable)
        astore__fork(store, "Tag::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # SitePosition (8 bytes)
    if (astore__get(store, "../PropMask/fPosition")) {

        stream__skip_to_align(stream, 4);

        astore__fork(store, "SitePosition::fmPosition", _store);
        _r = forms20__unpack_fmposition(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    # ControlTipText (variable)
    if (astore__get(store, "../PropMask/fControlTipText")) {

        stream__skip_to_align(stream, 4);

        if (! astore__has(store, "../DataBlock/ControlTipTextData/cb")) {
            E__message = "\"../DataBlock/ControlTipTextData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/ControlTipTextData/fCompressed")) {
            E__message = "\"../DataBlock/ControlTipTextData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }

        _size = astore__get(store, "../DataBlock/ControlTipTextData/cb");
        _compressed = astore__get(store, "../DataBlock/ControlTipTextData/fCompressed");

        astore__fork(store, "ControlTipText::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # RuntimeLicKey (variable)
    if (astore__get(store, "../PropMask/fRuntimeLicKey")) {

        stream__skip_to_align(stream, 4);

        if (! astore__has(store, "../DataBlock/RuntimeLicKeyData/cb")) {
            E__message = "\"../DataBlock/RuntimeLicKeyData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/RuntimeLicKeyData/fCompressed")) {
            E__message = "\"../DataBlock/RuntimeLicKeyData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }

        _size = astore__get(store, "../DataBlock/RuntimeLicKeyData/cb");
        _compressed = astore__get(store, "../DataBlock/RuntimeLicKeyData/fCompressed");

        astore__fork(store, "RuntimeLicKey::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # ControlSource (variable)
    if (astore__get(store, "../PropMask/fControlSource")) {

        stream__skip_to_align(stream, 4);

        if (! astore__has(store, "../DataBlock/ControlSourceData/cb")) {
            E__message = "\"../DataBlock/ControlSourceData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/ControlSourceData/fCompressed")) {
            E__message = "\"../DataBlock/ControlSourceData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }

        _size = astore__get(store, "../DataBlock/ControlSourceData/cb");
        _compressed = astore__get(store, "../DataBlock/ControlSourceData/fCompressed");

        astore__fork(store, "ControlSourceData::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    # RowSource (variable)
    if (astore__get(store, "../PropMask/fRowSource")) {

        stream__skip_to_align(stream, 4);

        if (! astore__has(store, "../DataBlock/RowSourceData/cb")) {
            E__message = "\"../DataBlock/RowSourceData/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/RowSourceData/fCompressed")) {
            E__message = "\"../DataBlock/RowSourceData/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }

        _size = astore__get(store, "../DataBlock/RowSourceData/cb");
        _compressed = astore__get(store, "../DataBlock/RowSourceData/fCompressed");

        astore__fork(store, "RowSourceData::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}} [MS-OFORMS] 2.2.10.12 OleSiteConcrete Structure
# }}} [MS-OFORMS] 2.2.10 UserForm Structure
# }}} [MS-OFORMS] 2.2 Control Structures
# {{{ [MS-OFORMS] 2.3 Common Text Properties Structure
# {{{ [MS-OFORMS] 2.3.1 TextProps
# '${__pp_comment:+'
#
# Specifies the values for text-related properties.
# Applies to:
#   CheckBox
#   ComboBox
#   CommandButton
#   Label
#   ListBox
#   OptionButton
#   TabStrip
#   TextBox
#   ToggleButton
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | MinorVersion  | MajorVersion  |          cbTextProps          |
# +---------------+---------------+-------------------------------+
# |                           PropMask                            |
# +---------------------------------------------------------------+
# |                      DataBlock(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                    ExtraDataBlock(variable)                   |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_textprops( \
    stream, store, \
    \
    _store, _v, _r \
) {
    # MinorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MinorVersion::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # MajorVersion (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "MajorVersion::uint8,mustbe(2)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # cbCommandButton (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "cbForm", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # PropMask (4 bytes)
    astore__fork(store, "PropMask::TextPropsPropMask", _store);
    _r = forms20__unpack_textpropspropmask(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # DataBlock (variable)
    astore__fork(store, "DataBlock::TextPropsDataBlock", _store);
    _r = forms20__unpack_textpropsdatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    # ExtraDataBlock (variable)
    astore__fork(store, "ExtraDataBlock::TextPropsExtraDataBlock", _store);
    _r = forms20__unpack_textpropsextradatablock(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.3.2 TextPropsPropMask
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|                 UnusedBits2                   |
# +-+-+-+-+-+-+-+-+-----------------------------------------------+
#
# '}'
function \
forms20__unpack_textpropspropmask(stream, store,     _v) {

    # A - fFontName (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontName::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fFontEffects (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontEffects::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fFontHeight (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontHeight::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - UnusedBits (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "UnusedBits::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fFontCharSet (1 bits)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontCharSet", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fFontPitchAndFamily (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontPitchAndFamily::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fParagraphAlign (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fParagraphAlign::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fFontWeight (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFontWeight::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # UnusedBits2 (24 bits)
    _v = stream__read_bits(stream, 24);
    if (astore__set(store, "UnusedBits2", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.3.3 TextPropsDataBlock
# '${__pp_comment:+'
#
# Specifies the text properties of the control that are 4 bytes or
# smaller and are not set to the file format defaults. If the
# corresponding bit in the PropMask of the TextProps that contains this
# TextPropsDataBlock is set to zero, the property value MUST NOT be
# stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      FontName (optional)                      |
# +---------------------------------------------------------------+
# |                    FontEffects (optional)                     |
# +---------------------------------------------------------------+
# |                     FontHeight (optional)                     |
# +--------------+----------------+---------------+---------------+
# | FontCharSet  FontPitchAndFamily ParagraphAlign|   Padding1    |
# |  (optional)  |   (optional)   |  (optional)   |  (variable)   |
# +--------------+----------------+---------------+---------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      FontWeight(optional)                     |
# +---------------------------------------------------------------+
# |                       Padding2(variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_textpropsdatablock( \
    stream, store, \
    \
    _v, _store, _r \
) {
    stream__set_align_base(stream);

    if (astore__get(store, "../PropMask/fFontName")) {
        # FontName (4 bytes)
        astore__fork(store, "FontName::CountOfBytesWithCompressionFlag", _store);
        _r = forms20__unpack_countofbyteswithcompressionflag(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fFontEffects")) {
        # FontEffects (4 bytes)
        astore__fork(store, "FontEffects::fmFontEffects", _store);
        _r = forms20__unpack_fmfonteffects(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fFontHeight")) {
        # FontHeight (4 bytes)
        #
        # [MS-OFORMS] 2.5.27 FontHeight
        # An unsigned integer that specifies the height, in twips, of
        # the text displayed by the control that contains the
        # TextProps to which this property applies.
        # MUST be less than or equal to 4294967.
        # The file format default is 160, an 8-point font.
        #
        # Applies to:
        #   TextProps
        #
        _v = stream__read_uint32(stream);
        if (astore__set(store, "FontHeight::uint32,le(4294967)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fFontCharSet")) {
        # FontCharSet (1 byte)
        #
        # An unsigned integer that specifies the character set of the text
        # displayed by the control that contains the TextProps to which this
        # property applies.
        #
        # The file format default is 0x01.
        #
        # Applies to:
        #   TextProps
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "FontCharSet::gdiFontCharset," \
                               "a_kind_of(gdiFontCharset)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fFontPitchAndFamily")) {
        # FontPitchAndFamily (1 byte)
        astore__fork(store, "FontPitchAndFamily::fmFontPitchAndFamily", _store);
        _r = forms20__unpack_fmfontpitchandfamily(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (astore__get(store, "../PropMask/fParagraphAlign")) {
        # ParagraphAlign (1 byte)
        #
        # [MS-OFORMS] 2.5.60 ParagraphAlign
        #
        # A PARAFORMAT_Alignment that specifies the horizontal justification of
        # the text used by the control.
        # The file format default is 0x01, PFA_LEFT.
        #
        # Applies to:
        #   TextProps
        #
        _v = stream__read_uint8(stream);
        if (astore__set(store, "ParagraphAlign::PARAFORMAT_Alignment," \
                               "a_kind_of(PARAFORMAT_Alignment)", _v) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    if (astore__get(store, "../PropMask/fFontWeight")) {
        # Padding1(variable)
        stream__skip_to_align(stream, 4);

        # FontWeight (2 bytes)
        #
        # [MS-OFORMS] 2.5.30 FontWeight
        #
        # An unsigned integer that specifies the font weight of the text
        # displayed by the control that contains the TextProps to which this
        # property applies. The value MUST be in the range from zero through 1000.
        # A value of zero specifies that the weight is determined by the
        # application. A value from 1 through 1000 specifies a weight, where
        # 1 specifies the lightest type and 1000 specifies the darkest type.
        #
        # The file format default is 400.
        #
        # Applies to:
        #   TextProps
        #
        _v = stream__read_uint16(stream);
        if (astore__fork(store, "FontWeight::uint16,in_range(1,1000)", _store) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    # Padding2(variable)
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.3.4 TextPropsExtraDataBlock
# '${__pp_comment:+'
#
# Specifies the text properties of the control that are larger than
# 4 bytes and are not set to the file format defaults. If the
# corresponding bit in the PropMask of the TextProps that contains
# this TextPropsExtraDataBlock is set to zero, the property value
# MUST NOT be stored in the file.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      FontName (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_textpropsextradatablock( \
    stream, store, \
    \
    _store, _r, _size, _compressed \
) {
    # FontName (variable bytes)
    if (astore__get(store, "../PropMask/fFontName")) {
        if (! astore__has(store, "../DataBlock/FontName/cb")) {
            E__message = "\"../DataBlock/FontName/cb\" property not found";
            return forms20__E_UNEXPECTED;
        }
        if (! astore__has(store, "../DataBlock/FontName/fCompressed")) {
            E__message = "\"../DataBlock/FontName/fCompressed\" property not found";
            return forms20__E_UNEXPECTED;
        }
        _size = astore__get(store, "../DataBlock/FontName/cb");
        _compressed = astore__get(store, "../DataBlock/FontName/fCompressed");

        # FontName (variable)
        #
        # [MS-OFORMS] 2.5.28 FontName
        #
        # An fmString that specifies the font of the text displayed by the control
        # that contains the TextProps to which this property applies.
        # The file format default is MS Sans Serif.
        #
        # Applies to:
        #   TextProps
        #
        astore__fork(store, "FontName::fmString", _store);
        _r = forms20__unpack_fmstring(stream, _store, _size, _compressed);
        if (_r < 0) {
            return _r;
        }
    }

    return forms20__S_OK;
}
# }}}
# }}} TextProps
# {{{ [MS-OFORMS] 2.4 Property Types
# {{{ [MS-OFORMS] 2.4.1 fmPosition
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                             Left                              |
# +---------------------------------------------------------------+
# |                              Top                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_fmposition( \
    stream, store, \
    \
    _v \
) {
    # Left (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Left", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Top (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Top", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.2 fmSize
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                             Width                             |
# +---------------------------------------------------------------+
# |                             Height                            |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_fmsize( \
    stream, store, \
    \
    _v \
) {
    # Width (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Width::uint32", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Height (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Height::uint32", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}

# }}}
# {{{ [MS-OFORMS] 2.4.3 FONTFLAGS
# '${__pp_comment:+'
#
# Specifies a bit field that specifies style characteristics of a font.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|Unused |
# +-+-+-+-+-------+
#
# '}'
function \
forms20__unpack_fontflags( \
    stream, store, \
    \
    _v \
) {
    # FONT_fBold (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FONT_fBold::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # FONT_fItalic (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FONT_fItalic", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # FONT_fUnderline (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FONT_fUnderline", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # FONT_fStrikethrough (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FONT_fStrikethrough", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "Unused::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}

# }}}
# {{{ [MS-OFORMS] 2.4.7 GuidAndFont
# '${__pp_comment:+'
#
# A GUID and a FormFont that specify the StreamData for the Font property.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                      FontGUID  (16 bytes)                     |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                         Font (variable)                       |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_guidandfont( \
    stream, store, \
    \
    _v, _store, _r \
) {
    # FontGUID (16 bytes)
    #
    # A GUID, as specified in [MS-DTYP] section 2.3.4,
    # that specifies the type of font that is stored in Font.
    # MUST be the GUID of one of the types of FormFont.
    #
    _v = stream__read_guid_string(stream);
    if (astore__set(store, "FontGUID", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Font (4 bytes)
    astore__fork(store, "Font::StdFont", _store);
    _r = forms20__unpack_stdfont(stream, _store)
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.8 GuidAndPicture
# '${__pp_comment:+'
#
# Specifies a combination of a GUID, as specified in [MS-DTYP] section 2.3.4,
# and a StdPicture that specify the StreamData for both the MouseIcon and
# Picture properties.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                  CLSID_StdPicture (16 bytes)                  |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
# |                      StdPicture (variable)                    |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_guidandpicture( \
    stream, store, _r, \
    \
    _v, _store \
) {
    # CLSID_StdPicture (16 bytes)
    _v = stream__read_guid_string(stream);
    if (astore__set(store, "CLSID_StdPicture", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # StdPicture (variable)
    astore__fork(store, "StdPicture::StdPicture", _store);
    _r = forms20__unpack_stdpicture(stream, _store);
    if (_r < 0) {
        return _r;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.9 OLE_COLOR
# '${__pp_comment:+'
#
# olectl.h
#
# #typedef DWORD OLE_COLOR;
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |            RgbColorOrPaletteEntry             | OleColorType  |
# +-----------------------------------------------+---------------+
#
# '}'
function \
forms20__unpack_olecolor( \
    stream, store, \
    \
    _v, _type \
) {
    _v = stream__read_uint32(stream);

    #
    # [MS-OFORMS]
    # 2.4.10 OleColorType
    # 2.4.11 RgbColorOrPaletteEntry
    #
    _type = num__rshift(_v, 24);

    if (astore__set(store, "OleColorType::OleColorType," \
                           "a_kind_of(OleColorType)", _type) < 0) {
        return forms20__E_UNEXPECTED;
    }
    if (_type == 0) {  # Default
        if (astore__set(store, "RgbColorOrPaletteEntry::uint24", num__and(_v, 24)) < 0) {
            return forms20__E_UNEXPECTED;
        }
    } else if (_type == 1) {
        if (astore__set(store, "PaletteEntry::uint24", _v % 16777216) < 0) {
            return forms20__E_UNEXPECTED;
        }
    } else if (_type == 2) {
        if (astore__set(store, "RgbColor/R::uint8", num__rshift(_v, 16) % 256) < 0) {
            return forms20__E_UNEXPECTED;
        }
        if (astore__set(store, "RgbColor/G::uint8", num__rshift(_v, 8) % 256) < 0) {
            return forms20__E_UNEXPECTED;
        }
        if (astore__set(store, "RgbColor/B::uint8", _v % 256) < 0) {
            return forms20__E_UNEXPECTED;
        }
    } else if (_type == 128) {
        if (astore__set(store, "PaletteEntry::SystemColor," \
                               "a_kind_of(SystemColor)", _v % 16777216) < 0) {
            return forms20__E_UNEXPECTED;
        }
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.12 StdFont
# '${__pp_comment:+'
#
# Specifies the format of a standard font structure as persisted to a stream.
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |    Version    |           sCharset            |    bFlags     |
# +---------------+---------------+---------------+---------------+
# |            sWeight            |            ulHeight           |
# +-------------------------------+---------------+---------------+
# |              ...              |   bFaceLen    |   FontFace    |
# |                               |               |  (variable)   |
# +-------------------------------+---------------+---------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_stdfont( \
    stream, store, \
    \
    _v, _store, _size, _r \
) {
    # Version (1 byte)
    _v = stream__read_uint8(stream);
    if (astore__set(store, "Version::uint8,mustbe(1)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # sCharset (2 bytes)
    _v = stream__read_uint16(stream);
    if (astore__set(store, "sCharset::hexint16", _v)) {
        return forms20__E_UNEXPECTED;
    }

    # bFlags (1 byte)
    astore__fork(store, "bFlags::FONTFLAGS", _store);
    _r = forms20__unpack_fontflags(stream, _store)
    if (_r < 0) {
        return _r;
    }

    #
    # sWeight (2 bytes)
    # A signed integer that specifies the weight of the font. MUST be in the
    # range from zero through 1000. A value of zero specifies that the weight
    # is to be determined by the application. A value in the range from 1
    # through 1000 specifies a weight, where 1 specifies the lightest type and
    # 1000 specifies the darkest type.
    #
    _v = stream__read_uint16(stream);
    if (astore__set(store, "sWeight::uint16,in_range(0,1000)", _v)) {
        return forms20__E_UNEXPECTED;
    }

    #
    # ulHeight (4 bytes)
    # An unsigned integer that specifies the height, in ten-thousandths of a
    # point, of the font. MUST be greater than zero and less than or equal to
    # 655350000.
    #
    _v = stream__read_uint32(stream);
    if (astore__set(store, "ulHeight::uint32,in_range(1,655350000)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    #
    # bFaceLen (1 byte)
    # An unsigned integer that specifies the length, in bytes, of FontFace.
    # MUST be less than 32.
    #
    _v = _size = stream__read_uint8(stream);
    if (astore__set(store, "bFaceLen::uint8,lt(32)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    #
    # FontFace (variable)
    # An ASCII string that specifies the name of the font.
    #
    _v = stream__read_ansi_string(stream, _size);
    if (astore__set(store, "FontFace", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.13 StdPicture
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                           Preamble                            |
# +---------------------------------------------------------------+
# |                             Size                              |
# +---------------------------------------------------------------+
# |                       Picture (variable)                      |
# +---------------------------------------------------------------+
# |                              ...                              |
# +---------------------------------------------------------------+
#
# '}'
function \
forms20__unpack_stdpicture( \
    stream, store, \
    \
    _v, _maxsize \
) {
    # Preamble (4 bytes)
    _v = stream__read_uint32(stream);
    if (astore__set(store, "Preamble::uint32,mustbe(29804)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Size (4 bytes)
    _v = stream__read_uint32(stream);
    _maxsize = stream__available_size(stream);
    if (astore__set(store, "Size::uint32,le(%)", _v, _maxsize) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Picture (4 bytes)
    if (_v < 16) {
        _v = stream__read_hex_string(stream, _v);
    } else {
        _v = stream__read_hex_string(stream, 16) " ...";
        stream__skip(stream, _v - 16);
    }
    if (astore__set(store, "Picture", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.14.2 CountOfBytesWithCompressionFlag
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |                             cb                              |A|
# +-------------------------------------------------------------+-+
#
# '}'
function \
forms20__unpack_countofbyteswithcompressionflag( \
    stream, store, \
    \
    _v \
) {
    _v = stream__read_uint32(stream);

    # cb (31 bits)
    if (astore__set(store, "cb", _v % 2147483648) < 0) {  # _v % (2 ^ 31)
        return forms20__E_UNEXPECTED;
    }

    # fCompressed (1 bit)
    if (astore__set(store, "fCompressed", num__rshift(_v, 31)) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.4.14.4 fmString
# '${__pp_comment:+'
#
# An array of characters that specifies the value of a Unicode string.
# The size of the string is specified by the cb of the
# CountOfBytesWithCompressionFlag or the cch of the
# CountOfCharsWithCompressionFlag associated with this string. Whether
# the characters are those of a compressed string is specified by the
# fCompressed of the CountOfBytesWithCompressionFlag or
# CountOfCharsWithCompressionFlag associated with this fmString.
#
# '}'
function \
forms20__unpack_fmstring( \
    stream, store, size, compressed, \
    \
    _v \
) {
    if (compressed) {
        _v = stream__read_raw_string(stream, size);
    } else {
        _v = stream__read_utf16le_string(stream, size);
    }

    if (astore__set(store, "Value", _v)) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# }}}
# {{{ [MS-OFORMS] 2.5 Property Definitions
# {{{ [MS-OFORMS] 2.5.4.1 SITE_FLAG
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F| G |H|I|  J  |K|Unused2|L|         Unused3         |
# +-+-+-+-+-+-+---+-+-+-----+-+-------+-+-------------------------+
#
# '}'
function \
forms20__unpack_siteflag( \
    stream, store, \
    \
    _v \
) {
    # A - fTabStop (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fTabStop::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fVisible (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fVisible::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fDefault (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDefault::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fCancel (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fCancel::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fStreamed (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fStreamed::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fAutoSize (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fAutoSize::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - Unused1 (2 bits)
    _v = stream__read_bits(stream, 2);
    if (astore__set(store, "Unused1::bits<2>,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fPreserveHeight (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPreserveHeight::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fFitToParent (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fFitToParent::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - Reserved1 (3 bits)
    _v = stream__read_bits(stream, 3);
    if (astore__set(store, "Reserved1::bits<3>", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fSelectChild (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSelectChild::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused2 (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "Unused2::bits<4>,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fPromoteControls (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fPromoteControls::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused3 (13 bits)
    _v = stream__read_bits(stream, 13);
    if (astore__set(store, "Unused3::bits<13>,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

#    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.5.1 DX_MODE
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|          Unused           |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---------------------------+
#
# '}'
function \
forms20__unpack_dxmode( \
    stream, store, \
    _v \
) {

    stream__set_align_base(stream);

    # A - fInheritDesign (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritDesign", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fDesign (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDesign", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fInheritShowToolbox (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritShowToolbox", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fShowToolbox (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fShowToolbox", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fInheritShowGrid (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritShowGrid", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fShowGrid (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fShowGrid", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - fInheritSnapToGrid (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritSnapToGrid", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - fSnapToGrid (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fSnapToGrid", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - fInheritGridX (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritGridX", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - fInheritGridY (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritGridY", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - fInheritClickControl (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritClickControl", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - fInheritDblClickControl (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritDblClickControl", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - fInheritShowInvisible (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritShowInvisible", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # N - fShowInvisible (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fShowInvisible", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # O - fInheritShowTooltips (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritShowTooltips", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # P - fShowTooltips (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fShowTooltips", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Q - fInheritLayoutImmediate (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fInheritLayoutImmediate", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # R - fLayoutImmediate (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fLayoutImmediate", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused (14 bits)
    _v = stream__read_bits(stream, 14);
    if (astore__set(store, "Unused", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 4);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.6.1 FormFlags
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | A |B|      Unused2        |C|D|            Unused3            |
# +---+-+---------------------+-+-+-------------------------------+
#
# '}'
function \
forms20__unpack_formflags( \
    stream, store, \
    \
    _v \
) {
    # A - Unused (2 bits)
    _v = stream__read_bits(stream, 2);
    if (astore__set(store, "Unused1", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - FORM_FLAG_ENABLED (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FORM_FLAG_ENABLED::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    _v = stream__read_bits(stream, 11);
    if (astore__set(store, "Unused2", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - FORM_FLAG_DESINKPERSISTED (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FORM_FLAG_DESINKPERSISTED::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D. FORM_FLAG_DONTSAVECLASSTABLE (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "FORM_FLAG_DONTSAVECLASSTABLE::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused3 (16 bits)
    _v = stream__read_bits(stream, 16);
    if (astore__set(store, "Unused3", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.26.1 fmFontEffects
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|   UnusedBits1   |E|           UnusedBits2         |F|G|
# +-+-+-+-+-----------------+-+-------------------------------+-+-+
#
# '}'
function \
forms20__unpack_fmfonteffects( \
    stream, store, \
    \
    _v \
) {
    # A - fBold (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fBold::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fItalic (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fItalic::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fUnderline (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fUnderline::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fStrikeout (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fStrikeout::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # UnusedBits1 (9 bit)
    _v = stream__read_bits(stream, 9);
    if (astore__set(store, "UnusedBits1::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fDisabled (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fDisabled::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;

    }

    # UnusedBits2 (16 bit)
    _v = stream__read_bits(stream, 16);
    if (astore__set(store, "UnusedBits2::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - fAutoColor (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fAutoColor::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # UnusedBits3 (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "UnusedBits3::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.29.1 fmFontPitchAndFamily
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# | Pitch |Family |
# +-------+-------+
#
# '}'
function \
forms20__unpack_fmfontpitchandfamily( \
    stream, store, \
    \
    _v \
) {
    # Pitch (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "Pitch::fmFontPitch,a_kind_of(fmFontPitch)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Family (4 bits)
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "Family::fmFontFamily", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.73.1 FormScrollBarFlags
# '${__pp_comment:+'
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E|  F  |
# +-+-+-+-+-+-----+
#
# '}'
function \
forms20__unpack_formscrollbarflags( \
    stream, store, \
    \
    _v \
) {
    # A - fScrollBarsHorizontal (1 bit)
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBarsHorizontal", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - fScrollBarsVertical (1 bit):
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBarsVertical", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - fScrollBarsKeepHorizontal (1 bit):
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBarsKeepHorizontal", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - fScrollBarsKeepVertical (1 bit):
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBarsKeepVertical", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - fScrollBarsKeepLeft (1 bit):
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "fScrollBarsKeepLeft", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - Unused (3 bits):
    _v = stream__read_bits(stream, 3);
    if (astore__set(store, "Unused", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# {{{ [MS-OFORMS] 2.5.96 VariousPropertyBits
# '${__pp_comment:+'
#
# A VariousPropertiesBitfield that specifies the values of multiple
# properties on a control. Many of the fields in this structure apply
# to some types of controls, but not all types. All fields that do not
# apply to a particular type of control MUST be set to zero for that
# control. The file format default is specified in the following table.
#
# +---------------+----------------------+------------------------+
# | Controls      | File format default  | Properties set to 1    |
# |               |                      | in file format default |
# +---------------+----------------------+------------------------+
# | CheckBox      | 0x2C80081B           | Reserved1              |
# | ComboBox      |                      | Enabled                |
# | ListBox       |                      | BackStyle              |
# | OptionButton  |                      | Reserved2              |
# | TextBox       |                      | IntegralHeight         |
# | ToggleButton  |                      | WordWrap               |
# |               |                      | SelectionMargin        |
# |               |                      | AutoWordSelect         |
# |               |                      | HideSelection          |
# |---------------+----------------------+------------------------+
# | CommandButton | 0x0000001B           | Reserved1              |
# | Image         |                      | Enabled                |
# | TabStrip      |                      | BackStyle              |
# | ScrollBar     |                      | Reserved2              |
# | SpinButton    |                      |                        |
# |---------------+----------------------+------------------------+
# | Label         | 0x0080001B           | Reserved1              |
# |               |                      | Enabled                |
# |               |                      | BackStyle              |
# |               |                      | Reserved2              |
# |               |                      | WordWrap               |
# +---------------+----------------------+------------------------+
#
# [MS-OFORMS] 2.5.96.1 VariousPropertiesBitfield
#
# +===============================================================+
# |                    1                   2                   3  |
# |0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|
# +===============================================================+
# |A|B|C|D|E| Unused1 |F|G|H|I|J|IMEMode|K|L|M|N|O|P|Q|R|S|T|U|V|W|
# +-+-+-+-+-+---------+-+-+-+-+-+-------+-+-+-+-+-+-+-+-+-+-+-+-+-+
#
# '}'
function \
forms20__unpack_variouspropertybits( \
    stream, store, \
    \
    _v \
) {
    # A - Reserved1 (1 bit)
    #
    # MUST be set to 1 and MUST be ignored.
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Image
    #   Label
    #   ListBox
    #   OptionButton
    #   ScrollBar
    #   SpinButton
    #   TabStrip
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Reserved1::bool,mustbe(1)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # B - Enabled (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Image
    #   Label
    #   ListBox
    #   OptionButton
    #   ScrollBar
    #   SpinButton
    #   TabStrip
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Enabled::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # C - Locked (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Locked::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # D - BackStyle (1 bit)
    #
    # MUST be set to 1 for the following controls:
    # ListBox, TabStrip, ScrollBar, SpinButton
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Image
    #   Label
    #   ListBox
    #   OptionButton
    #   ScrollBar
    #   SpinButton
    #   TabStrip
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "BackStyle::fmBackStyle", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # E - Reserved2 (1 bit)
    #
    # MUST be set to 1 and MUST be ignored.
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Reserved2::bool,mustbe(1)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Unused1 (5 bits):
    _v = stream__read_bits(stream, 5);
    if (astore__set(store, "Unused1::uint8,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # F - ColumnHeads (1 bit)
    #
    # Applies to:
    #   ComboBox
    #   ListBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "ColumnHeads::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # G - IntegralHeight (1 bit)
    #
    # MUST be set to 1 for the following controls:
    # CheckBox, OptionButton, and ToggleButton.
    #
    # Applies to:
    #   CheckBox
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "IntegralHeight::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # H - MatchRequired (1 bit)
    #
    # Applies to:
    #   ComboBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "MatchRequired::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # I - Alignment (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   OptionButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Alignment::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - Editable (1 bit)
    #
    # Applies to:
    #   ComboBox
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Editable::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # J - IMEMode (4 bits)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Image
    #   Label
    #   ListBox
    #   OptionButton
    #   ScrollBar
    #   SpinButton
    #   TabStrip
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 4);
    if (astore__set(store, "IMEMode::fmIMEMode," \
                           "a_kind_of(fmIMEMode)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # K - DragBehavior (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "DragBehavior::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # L - EnterKeyBehavior (1 bit)
    #
    # Applies to:
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "EnterKeyBehavior::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # M - EnterFieldBehavior (1 bit)
    #
    # Applies to:
    #   ComboBox
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "EnterFieldBehavior::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # N - TabKeyBehavior (1 bit)
    #
    # Applies to:
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "TabKeyBehavior::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # O - WordWrap (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Label
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "WordWrap::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # P - Unused2 (1 bit)
    #
    # Applies to:
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "Unused2::bool,mustbe(0)", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # Q - BordersSuppress (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "BordersSuppress::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # R - SelectionMargin (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "SelectionMargin::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # S - AutoWordSelect (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "AutoWordSelect::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # T - AutoSize (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   CommandButton
    #   Label
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "AutoSize::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # U - HideSelection (1 bit)
    #
    # Applies to:
    #   CheckBox
    #   ComboBox
    #   ListBox
    #   OptionButton
    #   TextBox
    #   ToggleButton
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "HideSelection::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # V - AutoTab (1 bit)
    #
    # Applies to:
    #   ComboBox
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "AutoTab::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # W - MultiLine (1 bit)
    #
    # Applies to:
    #   TextBox
    #
    _v = stream__read_bits(stream, 1);
    if (astore__set(store, "MultiLine::bool", _v) < 0) {
        return forms20__E_UNEXPECTED;
    }

    # align the seek position to a byte boundary
    stream__skip_to_align(stream, 1);

    return forms20__S_OK;
}
# }}}
# }}}
# {{{ [MS-OVBA] 2.3.5 VBFrame Stream: Designer Information
# '${__pp_comment:+'
#
# The VBFrame stream specifies the extended property values of a designer.
#
# This stream is an array of bytes that specifies the extended property values
# of a designer module.
# MUST contain MBCS characters encoded using the code page specified in PROJECTCODEPAGE
# (section 2.3.4.2.1.5).
#
# Property values of the designer are set at design-time. Property values are used at
# run-time as specified to initialize the designer. For example, a designer can be used
# at run time to display data to and accept data from a user and the following properties
# could be used to determine the location of the designer.
#
#   ABNF syntax:
#     VBFrameText = "VERSION 5.00" NWLN
#     "Begin" 1*WSP DesignerCLSID 1*WSP DesignerName *WSP NWLN
#     DesignerProperties "End" NWLN
#     DesignerCLSID = GUID
#     DesignerName = ModuleIdentifier
#
# <DesignerCLSID>: Specifies the class identifier (CLSID) of the designer. The Automation type
# library that contains the designer specified MUST be referenced with a REFERENCECONTROL
# (section 2.3.4.2.2.3). The value "{C62A69F0-16DC-11CE-9E98-00AA00574A4F}" specifies the
# designer is an Office Form ActiveX control specified in [MS-OFORMS].
#
# <DesignerName>: Specifies the name of the designer module associated with the properties.
#
# '}'
function \
forms20__unpack_vbframestream( \
    stream, store, path, \
    \
    _size, _src, _r, _stream, _title \
) {
    _r = cfb__unpack_stream(stream, store, path, _stream);
    if (_r < 0) {
        return _r;
    }

    _title = "[File \"" path "\"]";

    sub("\003", "\\003", _title);
    printf "-------------------------------------------------------------------------------\n" \
           _title "\n" \
           "-------------------------------------------------------------------------------\n";
    _size = stream__available_size(_stream);
    _src = stream__read_ansi_string(_stream, _size);
    gsub(/\r\n/, "\n", _src);
    print _src;

    return forms20__S_OK;
}
# }}}
# }}}
# }}}
# {{{ @module cli, hsvba CLI implementation
# {{{ cli::init
function \
cli__init(    _i, _status, _buf) {

    if (__cli__init_guard) {
        return (1);
    }

    # required modules
    _status = ooxml__init();
    if (_status < 0) {
        return _status;
    }
    _status = vba__dirstream__init();
    if (_status < 0) {
        return _status;
    }

    # '${__pp_comment:+'
    #
    # Numeric Constants
    #
    # NOTE:
    # Hexadecimal representation of numeric constants (0xXXXX...) is
    # still unsafe; it is explicitly illegal in Awk in POSIX:2004,
    # and is optionally permitted in POSIX:2008-2018 and later
    # (POSIX:2024), but is treated as an implementation-dependent
    # feature. Actually, nawk/mawk/goawk can not parse it.
    #
    # '}'

    # flags for -p,--print= option
    OPT_PRINT_NULL   = 0;
    OPT_PRINT_ZIP    = 1;
    OPT_PRINT_OOX    = 2;
    OPT_PRINT_CFB    = 4;
    OPT_PRINT_PRJ    = 8;
    OPT_PRINT_DIR    = 16;
    OPT_PRINT_SRC    = 32;
    OPT_PRINT_FRM    = 64;
    OPT_PRINT_ALL    = 127;
    # experimental flags
    OPT_PRINT_IDS    = 128;
    OPT_PRINT_PCD    = 256;

    __cli__S_opt_print = OPT_PRINT_SRC;

    __cli__S_filecount = 0;
    __cli__S_show_header = 1;

    cli__E_NOTIMPL      = -16385;
    cli__E_FAIL         = -16389;
    cli__E_ACCESSDENIED = -458757;
    cli__E_UNEXPECTED   = -65535;
    cli__S_OK           = 0;
    cli__S_FALSE        = 1;
    #
    # Array Constants
    #
    # for decoding base64
    split("A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P," \
          "Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f," \
          "g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v," \
          "w,x,y,z,0,1,2,3,4,5,6,7,8,9,+,/", _buf, ",");
    for (_i = 1; _i <= 64; _i++) {
        __base64_map[_buf[_i]] = _i - 1;
    }

    __cli__init_guard = 1;

    return (0);
}
# }}}
# {{{ cli::main
function \
cli__main( \
    \
    _i, _stream, _arr, _r, _test \
) {
    # class initialization
    if (struct__init() < 0) {
        return cli__E_UNEXPECTED;
    }
    if (xmlp__init() < 0) {
        return cli__E_UNEXPECTED;
    }

    # quick check if this AWK is binary-safe
    #
    # Passing this test means that the current execution environment
    # satisfies the following three conditions:
    #
    #   1. It is null-safe; null is not considered the end of the string,
    #      but is recognized as one character.
    #
    #   2. It is CR-safe; when AWK receives a string from the stdin,
    #      CR (\r) is not lost due to CRLF->LF conversion.
    #
    #   3. One byte per one character; even strings that can be considered
    #      UTF-8 or MBCS can be recognized one byte at a time.
    #
    "printf \\\\0\\\\r\\\\n\\\\343\\\\201\\\\202" | getline _test;
    __feat__is_binary_safe = length(_test) == 6;

    # flags for optimization and portability
    if (split("123", _arr, "") == 3) {
        __feat__has_modern_nullsplit = 1;
    }

    if ("PROCINFO" in SYMTAB) {
        __feat__has_amortized_growth_strings = 1;
        __feat__has_cow_strings = 1;
        __feat__has_native_bitwise_logical_functions = ("and" in FUNCTAB);
        __feat__has_native_bitwise_shift_functions = ("lshift" in FUNCTAB);
        __feat__has_native_strftime = ("strftime" in FUNCTAB);
    }
    if (split("\343\200\200", _arr, " ") == 0) {  # may be goawk
        __feat__has_cow_strings = 1;
    } else if (("FS" in SYMTAB) == 0) {
        __feat__has_cy_split_array = 1;
        __feat__has_cow_strings = 1;
        __feat__has_native_strftime = 1;
    }

    _r = hsvba__cli_optparse();
    if (_r < 0) {
        return _r;
    }

    if (__cli__S_filecount == 0) {  # stdin
        cli__S_files[++__cli__S_filecount] = "/dev/stdin"
    }

    for (_i = 1; _i <= __cli__S_filecount; ++_i) {
        _r = cli__read_input(cli__S_files[__cli__S_filecount], _stream);
        if (_r < 0) {
            return _r
        }

        _r = cli__process_stream(_stream);
        if (_r < 0) {
            return _r
        }
    }

    return cli__S_OK;
}
# }}}
# {{{ cli::usage
function \
cli__usage() {
    print "usage: hsvba [-p <switches>] [-d <dir>] <file1> <file2> ...\n" \
          "\n" \
          "-p <switch1,switch2,...>\n" \
          "--print=<switches>\n" \
          "    specify the types of content to be output, separated by commas.\n" \
          "        zip: parameters stored in zip header (default: off)\n" \
          "        oox: parameters stored in ooxml (default: off)\n" \
          "        cfb: parameters stored in compound file binary format (default: off)\n" \
          "        dir: parameters stored in dir stream (default: off)\n" \
          "        prj: parameters stored in PROJECT stream (default: off)\n" \
          "        src: VBA cls/bas module source files (default: on)\n" \
          "        frm: VBA Form module(.frm) data (default: off)\n" \
          "        all: turn on all the above switch option (default: off)\n" \
          "        ids(experimental): _VBA_PROJECT stream\n" \
          "        pcd(experimental): P-CODE section\n" \
          "" \
          "-h\n" \
          "--help\n" \
          "    show help\n" \
    ;

    return cli__S_OK;
}
# }}}
# {{{ cli::optparse
function \
hsvba__cli_optparse( \
    \
    _i, _r, _n, _optarg, _opts, _subopt, _arg \
) {
    for (_i = 1; _i < ARGC; ++_i) {
        _arg = ARGV[_i];
        if (_arg ~ /^\-[[:alnum:]]*h|^\-\-help$/) {
            _r = cli__usage();
            if (_r < 0) {
                return _r;
            }
            exit 2;
        } else if (_arg ~ /^\-p|^\-\-print=|^\-\-print$/) {
            ARGV[_i] = "";
            if (_arg == "-p" || _arg == "--print") {
                ++_i;
                _optarg = ARGV[_i];
                ARGV[_i] = "";
            } else {
                _optarg = _arg;
                sub(/^\-p|^\-\-print=/, "", _optarg);
            }
            split(_optarg, _opts, ",");

            __cli__S_opt_print = OPT_PRINT_NULL;

            for (_n in _opts) {
                _subopt = _opts[_n];
                if (_subopt == "zip") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_ZIP);
                } else if (_subopt == "oox") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_OOX);
                } else if (_subopt == "cfb") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_CFB);
                } else if (_subopt == "prj") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_PRJ);
                } else if (_subopt == "dir") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_DIR);
                } else if (_subopt == "frm") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_FRM);
                } else if (_subopt == "src") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_SRC);
                } else if (_subopt == "ids") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_IDS);
                } else if (_subopt == "pcd") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_PCD);
                } else if (_subopt == "all") {
                    __cli__S_opt_print = num__or(__cli__S_opt_print, OPT_PRINT_ALL);
                }
            }
        } else if (_arg ~ /^\-[[:alnum:]]*a|^\-\-archive$/) {
            if (_arg != "-a" && _arg != "--archive") {
                sub("a", "", ARGV[_i--]);
            }
            __opt_archive = 1;
        } else if (_arg ~ /^\-[[:alnum:]]*f$|^\-\-format$/) {
            if (_arg == "-f" || _arg == "--format") {
                ++_i;
                _optarg = ARGV[_i];
            } else if (_arg ~ /[^f]/) {
                _optarg = ARGV[_i + 1];
                sub("f", "", ARGV[_i--]);
            } else if (_arg ~ /^\-\-format=/) {
                _optarg = ARGV[_i];
                sub("--format", "", _optarg);
            }
        } else {
            cli__S_files[++__cli__S_filecount] = _arg;
        }
    }

    return cli__S_OK;
}
# }}}
# {{{ cli::read_input
function \
cli__read_input( \
    filename, stream, \
    \
    _line, _res, _size, \
    _buf, _iit, _command, _cl, _cr \
) {
    if (__feat__is_binary_safe) {   # binary safe

        getline < filename;
        stream__new_from_string(stream, $0);
        if (filename != "/dev/stdin") {
            close(filename);
        }

    } else {   # not binary safe

        # escape double quotes (")
        gsub(/\047/, "\047\\\047\047", filename);
        _command = "base64 < \047" filename "\047";

        _res = (_command | getline _line);
        if (_res == 0) {
            E__message = "an empty file is specified";
            return ;
        } else if (_res < 0) {
            E__message = "cannot read specified file \"" filename "\".";
            return cli__E_ACCESSDENIED;
        }

        # input is base64
        stream__new(stream)
        split(_line, _buf, "");
        _size = length(_line);
        _iit = 0;
        while (1) {
            while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

            if (_iit > _size) {
                if ((_command | getline _line) <= 0) {
                    break;
                }
                split(_line, _buf, "");
                _size = length(_line);
                _iit = 0;
            }

            while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);

            if (_iit > _size) {
                if ((_command | getline _line) <= 0) {
                    break;
                }
                split(_line, _buf, "");
                _size = length(_line);
                _iit = 0;
            }
            # cl << 2 | cr >> 4
            stream__write_uint8( \
                stream, __base64_map[_cl] * 4 \
                    + num__rshift(__base64_map[_cr], 4));

            while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

            if (_iit > _size) {
                if ((_command | getline _line) <= 0) {
                    break;
                }
                split(_line, _buf, "");
                _size = length(_line);
                _iit = 0;
            }

            # cr & ((1 << 4) - 1) | cl >> 2
            stream__write_uint8( \
                stream, \
                (__base64_map[_cr] % 16) * 16 \
                    + num__rshift(__base64_map[_cl], 2));

            while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);

            if (_iit > _size) {
                if ((_command | getline _line) <= 0) {
                    break;
                }
                split(_line, _buf, "");
                _size = length(_line);
                _iit = 0;
            }
            # (cr & ((1 << 2) - 1)) << 6 | cl
            stream__write_uint8( \
                stream, (__base64_map[_cl] % 4) * 64 + __base64_map[_cr]);
        }
        if (filename != "/dev/stdin") {
            close(_command);
        }
    }

    return cli__S_OK;
}
# }}}
# {{{ cli::process_stream
function \
cli__process_stream( \
    stream, \
    \
    _stream, _store, _v, _r, _status, _vbapath \
) {
    _v = stream__read_hex_string(stream, 8);
    stream__rewind(stream, 8);
    if (_v == cfb__C_magic_CFB_STORAGE) {
        # input may be raw vbaProject.bin
        return cli__process_vbaproject_binary(stream);
    } else if (_v == xml__C_magic_XML_DECLARATION) {
        return cli__process_mso_xml(stream);
    }

    astore__new(_store, "/Zip");
    _status = zip__unpack_directories(stream, _store);
    if (_status < 0) {
        return cli__E_UNEXPECTED;
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_ZIP)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " ZIP information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__pretty_print(_store, "/Zip", "");
    }

    astore__new(_store, "/ooxml");
    _r = cli__extract_vba(stream, _store);
    if (_r < 0) {
        return _r;
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_OOX)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " OOXML information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__pretty_print(_store, "/ooxml", "");
    }

    _vbapath = astore__get(store, "/ooxml/@VBA Path");

    astore__new(_store, "/Zip");
    _status = zip__unpack_file(stream, _store, _vbapath, _stream);
    if (_status < 0) {
        return cli__E_UNEXPECTED;
    }

    # process unzipped stream
    return cli__process_vbaproject_binary(_stream);
}
# }}}
# {{{ cli::process_vbaproject_binary
function \
cli__process_vbaproject_binary( \
    stream, \
    \
    _store, _r, _status \
) {
    astore__new(_store, "/CFB");
    _r = cfb__unpack(stream, _store);
    if (_r < 0) {
        return _r;
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_CFB)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " CFB information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__pretty_print(_store, "/CFB", "");
    }

    # detect VBA root directory
    _r = __cli__detect_vbaroot(stream, store);
    if (_r < 0) {
        return _r;
    }

    astore__new(_store, "/VBA");
    _r = vba__dirstream__unpack(stream, _store);
    if (_r < 0) {
        return _r;
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_IDS + OPT_PRINT_PCD)) {
        _status = vba__vbaprojectstream__init();
        if (_status < 0) {
            return cli__E_UNEXPECTED;
        }
        astore__new(_store, "/_VBA_PROJECT");
        _r = vba__vbaprojectstream__unpack(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_SRC + OPT_PRINT_PCD)) {
        _status = vba__modulestream__init();
        if (_status < 0) {
            return _status;
        }
        _r = vba__modulestream__unpack(stream);
        if (_r < 0) {
            return _r;
        }
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_PRJ)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " PROJECT stream information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__new(_store, "/PROJECT");
        _r = vba__projectstream__init();
        if (_r < 0) {
            return _r;
        }
        _r = vba__projectstream__unpack(stream, _store);
        if (_r < 0) {
            return _r;
        }
        astore__pretty_print(_store, "/PROJECT", "");
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_IDS)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " _VBA_PROJECT stream information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__pretty_print(_store, "/_VBA_PROJECT", "");
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_DIR)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " dir stream information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        astore__pretty_print(_store, "/VBA", "");
    }

    if (num__and(__cli__S_opt_print, OPT_PRINT_FRM)) {
        if (__cli__S_show_header) {
            print "-------------------------------------------------------------------------------\n" \
                  " Forms information\n" \
                  "-------------------------------------------------------------------------------\n";
        }
        _r = forms20__init();
        if (_r < 0) {
            return _r;
        }
        _r = forms20__unpack(stream, _store);
        if (_r < 0) {
            return _r;
        }
    }

    return cli__S_OK;
}
# }}}
# {{{ cli::process_mso_xml
#
# Verify the presence of the following root tag:
#   <w:wordDocument> -> Word 2003 XML (*.xml)
#   <VisioDocument> -> Visio 2003 XML (*.vdx, *.vtx, *.vsx)
#
function \
cli__process_mso_xml( \
    istream, \
    \
    _xmlp, _ev, _end, _begin, _elm, _val, _attr, \
    _path, _path_arr, _level, _target_level, _base64str,
    _buf, _size, _iit, _c, _cl, _cr, _ostream \
) {
    xmlp__new(_xmlp);

#    _path = "w:wordDocument/w:docSuppData/w:binData";
    _path = "VisioDocument/VBProjectData";
    split(_path, _path_arr, "/");
    _level = 0;
    _target_level = length(_path_arr);

    while ((_ev = xmlp__parse(_xmlp, istream)) > 0) {
        if (_ev == xmlp__C_event_START_ELEMENT) {
            _end = xmlp__pop(_xmlp);
            _begin = xmlp__pop(_xmlp);
            _elm = str__binary_join_with_chr(istream, _begin, _end);
            if (++_level == _target_level && _elm == _path_arr[_level]) {
                while (xmlp__parse(_xmlp, istream) != xmlp__C_event_CHARACTERS);
                _end = xmlp__pop(_xmlp);
                _begin = xmlp__pop(_xmlp);
                _base64str = str__binary_join_with_chr(istream, _begin, _end);
                break;
            }
        } else if (_ev == xmlp__C_event_END_ELEMENT) {
            --_level;
        }
    }

    split(_base64str, _buf, "");
    _size = length(_base64str);
    stream__new(_ostream, int(_size / 4 * 3));
    _iit = 0;

    while (1) {
        while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);
        if (_iit > _size) {
            break;
        }

        # cl << 2 | cr >> 4
        _c = __base64_map[_cl] * 4 + num__rshift(__base64_map[_cr], 4);
        stream__write_uint8(_ostream, _c);

        while (! ((_cl = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        # cr & ((1 << 4) - 1) | cl >> 2
        _c = (__base64_map[_cr] % 16) * 16 + num__rshift(__base64_map[_cl], 2);
        stream__write_uint8(_ostream, _c);

        while (! ((_cr = _buf[++_iit]) in __base64_map) && _iit <= _size);

        if (_iit > _size) {
            break;
        }

        # (cr & ((1 << 2) - 1)) << 6 | cl
        _c = (__base64_map[_cl] % 4) * 64 + __base64_map[_cr];
        stream__write_uint8(_ostream, _c);
    }

    return cli__process_vbaproject_binary(_ostream);
}
# }}}
# {{{ (private)::cli::detect_vbaroot
#
# [MS-XLS] 2.1.7.18 VBA Storage (_VBA_PROJECT_CUR)
#
#     The VBA Storage is specified in [MS-OVBA].
#     The name of this storage MUST be "_VBA_PROJECT_CUR".
#     A file MUST contain at most one VBA Storage.
#
# [MS-DOC] 2.1.9 Macros Storage
#     The Macros storage is an optional storage that contains the
#     macros for the file. If present, it MUST be a Project
#     Root Storage as defined in [MS-OVBA] section 2.2.1.
#
# Microsoft Project 2003-(*.mpp)
#     -> "   29/CVba/2b400008_ffffffff"
#
# Microsoft Word (*.doc)
#     -> "Macros"
#
# Microsoft Outlook (*.otm)
#     -> "OutlookVbaData"
#
# Microsoft Publisher (*.pub)
#     -> "VBA"
#
function \
__cli__detect_vbaroot( \
    stream, store, \
    \
    _candidates, _i, _vbaroot \
) {
    split("/Root Entry," \
          "/Root Entry/_VBA_PROJECT_CUR," \
          "/Root Entry/   29/CVba/2b400008_ffffffff," \
          "/Root Entry/Macros," \
          "/Root Entry/OutlookVbaData," \
          "/Root Entry/VBA", \
          _candidates, \
          ",");

    for (_i in _candidates) {
        _vbaroot = _candidates[_i];
        if (astore__has(store, "/CFB/@FileID" _vbaroot "/VBA/dir/id")) {
            if (astore__set(store, "/@VBA Root Directory", _vbaroot) < 0) {
                return cli__E_UNEXPECTED;
            }
            if (astore__set(store, "/@VBA Directory", "VBA") < 0) {
                return cli__E_UNEXPECTED;
            }
            return cli__S_OK;
        }
    }

    E__message = "VBA stream is not found";

    return cli__E_UNEXPECTED;
}
# }}}
# }}}
# '${__pp_ut_modules:+"$(cut -d\# -f3-<<<'
#=# BEGIN {
#=#     '"$(for f in ${__pp_ut_modules}; do echo "${f}__ut() > E__file;"; done)"'
#=#     exit;
#=# }
# ')"}'
# {{{ entry point
BEGIN {
    RS = "^$";       # multicharacter value of RS is a gawk extension
    BINMODE = "r";   # gawk/mawk extension, for Windows
    FS = "^$";
    FIELDWIDTH="*";

    if (cli__init() < 0) {
        exit;
    }
    if (cli__main() < 0) {
        exit;
    }
}
END {
    if (E__message) {
        printf "[error] %s\n", E__message > E__file;
    }
    fflush();
}
# }}}
function \
hsvba__commit_signatures(signed) {
    signed[1] = "@saitoha: github.com/saitoha";
    signed[2] = "@akinomyoga: github.com/akinomyoga";
    # Add your signature here.
}
# do not erase the following line.
# '           "$@"       )"$'\n'
# ^           ^          ^
# |           |          |
# |           |          the end paren of command substitution.
# |           |
# |           interpreted by bash as positional arguments.
# |
# interpreted by bash as the end of the awk code.
#
# vim: set ft=awk et ts=4 sw=0 sts=-1 fdm=marker fdl=0:
